<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wstのBlog</title>
  
  
  <link href="http://wstcly.xyz/atom.xml" rel="self"/>
  
  <link href="http://wstcly.xyz/"/>
  <updated>2024-06-30T08:53:48.400Z</updated>
  <id>http://wstcly.xyz/</id>
  
  <author>
    <name>Heuwst</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全自动图床方案分享（不止图片</title>
    <link href="http://wstcly.xyz/2024/06/30/quan-zi-dong-tu-chuang-fang-an-fen-xiang-bu-zhi-tu-pian/"/>
    <id>http://wstcly.xyz/2024/06/30/quan-zi-dong-tu-chuang-fang-an-fen-xiang-bu-zhi-tu-pian/</id>
    <published>2024-06-30T02:55:55.000Z</published>
    <updated>2024-06-30T08:53:48.400Z</updated>
    
    <content type="html"><![CDATA[<p>直接上方案：typora + github + vercel</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>闲来无事想写写blog，但又发现一直以来都没有一个像样的图床，于是决定花点时间来搞一搞，看了网上的方案，使用github作为图床还是比较稳的（关键是免费且不会跑路呀），但鉴于国内访问github的感人速度，CDN加速必不可少，于我而言，可选的cdn加速方案有两个：</p><ul><li>jsdelivr</li><li>vercel</li></ul><p>正好前段时间玩vercel的时候买了域名还在闲置，直接方案二</p></blockquote><p>具体链路也很简单：本地上传 or [服务器上传图片，检测文件变动，自动commit]，图片上传github，vercel自动部署更新，整体耗时也就秒级别，完全够用，当然不止图片，音频、视频文件都可以</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>按照刚才说的步骤：</p><ol><li>建立一个github仓库</li><li>建立<a href="https://vercel.com/new">vercel</a>项目</li><li>本地 or 服务器上传图片</li></ol><p>第一步 过于简单就不赘述了~</p><p>第二步 vercel其实也不复杂，进入官网，绑定github仓库，自动部署即可</p><p>这里放一张图片示例一下好了</p><p><img src="https://wstcly.top/picgo/image-20240630151723344.png" alt="vercel"></p><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><p>本地需要安装的软件为typora（md编辑器）、picgo图床管理器</p><p><img src="https://wstcly.top/picgo/image-20240630152022137.png" alt="image-20240630152022137"></p><p><img src="https://wstcly.top/picgo/image-20240630152322853.png" alt="1"></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>服务器目录变更，自动git commit</p><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> watchdog<span class="token punctuation">.</span>observers <span class="token keyword">import</span> Observer<span class="token keyword">from</span> watchdog<span class="token punctuation">.</span>events <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">from</span> git <span class="token keyword">import</span> Repo<span class="token keyword">import</span> osgit_path <span class="token operator">=</span> <span class="token string">'/www/server/git_project/pic0'</span><span class="token comment"># pic_path_schema = 'https://cdn.jsdelivr.net/gh/&#123;github用户名&#125;/&#123;github仓库名&#125;@&#123;分支名&#125;/&#123;文件path&#125;'</span><span class="token keyword">def</span> <span class="token function">pushgit</span><span class="token punctuation">(</span>ccpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">".git"</span> <span class="token keyword">in</span> ccpath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span><span class="token string">".tmp"</span> <span class="token keyword">in</span> ccpath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 需要检测的文件目录</span>            repo <span class="token operator">=</span> Repo<span class="token punctuation">(</span>git_path<span class="token punctuation">)</span>            g <span class="token operator">=</span> repo<span class="token punctuation">.</span>git            g<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"--all"</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token string">"-m auto update"</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successful push!"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error push!"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">FileEventHandler</span><span class="token punctuation">(</span>FileSystemEventHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        FileSystemEventHandler<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_moved</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># pushgit(event.src_path)</span>        <span class="token comment"># if event.is_directory:</span>        <span class="token comment">#     print("directory moved from &#123;0&#125; to &#123;1&#125;".format(event.src_path,event.dest_path))</span>        <span class="token comment"># else:</span>        <span class="token comment">#     print("file moved from &#123;0&#125; to &#123;1&#125;".format(event.src_path,event.dest_path))</span>    <span class="token keyword">def</span> <span class="token function">on_created</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># pushgit(event.src_path)</span>        <span class="token comment"># if event.is_directory:</span>        <span class="token comment">#     print("directory created:&#123;0&#125;".format(event.src_path))</span>        <span class="token comment"># else:</span>        <span class="token comment">#     print("file created:&#123;0&#125;".format(event.src_path))</span>    <span class="token keyword">def</span> <span class="token function">on_deleted</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># pushgit(event.src_path)</span>        <span class="token comment"># if event.is_directory:</span>        <span class="token comment">#     print("directory deleted:&#123;0&#125;".format(event.src_path))</span>        <span class="token comment"># else:</span>        <span class="token comment">#     print("file deleted:&#123;0&#125;".format(event.src_path))</span>    <span class="token keyword">def</span> <span class="token function">on_modified</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> event<span class="token punctuation">.</span>is_directory<span class="token punctuation">:</span>            pushgit<span class="token punctuation">(</span>event<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"file modified:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    observer <span class="token operator">=</span> Observer<span class="token punctuation">(</span><span class="token punctuation">)</span>    event_handler <span class="token operator">=</span> FileEventHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span>schedule<span class="token punctuation">(</span>event_handler<span class="token punctuation">,</span> git_path<span class="token operator">+</span><span class="token string">'/picgo'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 需要检测的文件目录</span>    observer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        observer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://wstcly.top//picgo/v2-d5015c05c065ad3943839c63b5ebc855_720w.jpg" alt="test" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直接上方案：typora + github + vercel&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;闲来无事想写写blog，但又发现一直以</summary>
      
    
    
    
    
    <category term="family" scheme="http://wstcly.xyz/tags/family/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wstcly.xyz/2024/06/29/hello-world/"/>
    <id>http://wstcly.xyz/2024/06/29/hello-world/</id>
    <published>2024-06-29T15:16:53.800Z</published>
    <updated>2024-06-29T15:16:53.800Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
