<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>72.深入浅出pandas-1</title>
      <link href="/2024/07/01/72.shen-ru-qian-chu-pandas-1/"/>
      <url>/2024/07/01/72.shen-ru-qian-chu-pandas-1/</url>
      
        <content type="html"><![CDATA[<h2 id="深入浅出pandas-1"><a href="#深入浅出pandas-1" class="headerlink" title="深入浅出pandas-1"></a>深入浅出pandas-1</h2><p>Pandas 是 Wes McKinney 在2008年开发的一个强大的<strong>分析结构化数据</strong>的工具集。Pandas 以 NumPy 为基础（实现数据存储和运算），提供了专门用于数据分析的类型、方法和函数，对数据分析和数据挖掘提供了很好的支持；同时 pandas 还可以跟数据可视化工具 matplotlib 很好的整合在一起，非常轻松愉快的实现数据可视化呈现。</p><p>Pandas 核心的数据类型是<code>Series</code>（数据系列）、<code>DataFrame</code>（数据窗&#x2F;数据框），分别用于处理一维和二维的数据，除此之外，还有一个名为<code>Index</code>的类型及其子类型，它们为<code>Series</code>和<code>DataFrame</code>提供了索引功能。日常工作中<code>DataFrame</code>使用得最为广泛，因为二维的数据结构刚好可以对应有行有列的表格。<code>Series</code>和<code>DataFrame</code>都提供了大量的处理数据的方法，数据分析师以此为基础，可以实现对数据的筛选、合并、拼接、清洗、预处理、聚合、透视和可视化等各种操作。</p><h3 id="创建Series对象"><a href="#创建Series对象" class="headerlink" title="创建Series对象"></a>创建Series对象</h3><p>Pandas 库中的<code>Series</code>对象可以用来表示一维数据结构，但是多了索引和一些额外的功能。<code>Series</code>类型的内部结构包含了两个数组，其中一个用来保存数据，另一个用来保存数据的索引。我们可以通过列表或数组创建<code>Series</code>对象，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import numpy as npimport pandas as pdser1 &#x3D; pd.Series(data&#x3D;[120, 380, 250, 360], index&#x3D;[&#39;一季度&#39;, &#39;二季度&#39;, &#39;三季度&#39;, &#39;四季度&#39;])ser1</code></pre><blockquote><p><strong>说明</strong>：<code>Series</code>构造器中的<code>data</code>参数表示数据，<code>index</code>参数表示数据的索引，相当于数据对应的标签。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">一季度    120二季度    380三季度    250四季度    360dtype: int64</code></pre><p>通过字典创建Series对象。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2 &#x3D; pd.Series(&#123;&#39;一季度&#39;: 320, &#39;二季度&#39;: 180, &#39;三季度&#39;: 300, &#39;四季度&#39;: 405&#125;)ser2</code></pre><blockquote><p><strong>说明</strong>：通过字典创建<code>Series</code>对象时，字典的键就是数据的标签（索引），键对应的值就是数据。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">一季度    320二季度    180三季度    300四季度    405dtype: int64</code></pre><h3 id="Series对象的运算"><a href="#Series对象的运算" class="headerlink" title="Series对象的运算"></a>Series对象的运算</h3><h4 id="标量运算"><a href="#标量运算" class="headerlink" title="标量运算"></a>标量运算</h4><p>我们尝试给刚才的<code>ser1</code>每个季度加上<code>10</code>，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">ser1 <span class="token operator">+=</span> <span class="token number">10</span>ser1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">一季度    130二季度    390三季度    260四季度    370dtype: int64</code></pre><h4 id="矢量运算"><a href="#矢量运算" class="headerlink" title="矢量运算"></a>矢量运算</h4><p>我们尝试把<code>ser1</code>和<code>ser2</code>对应季度的数据加起来，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">ser1 <span class="token operator">+</span> ser2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">一季度    450二季度    570三季度    560四季度    775dtype: int64</code></pre><h4 id="索引运算"><a href="#索引运算" class="headerlink" title="索引运算"></a>索引运算</h4><h5 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h5><p>跟数组一样，<code>Series</code>对象也可以进行索引和切片操作，不同的是<code>Series</code>对象因为内部维护了一个保存索引的数组，所以除了可以使用整数索引检索数据外，还可以通过自己设置的索引（标签）获取对应的数据。</p><p>使用整数索引。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser1[2]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">260</code></pre><p>使用自定义索引。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser1[&#39;三季度&#39;]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">260</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser1[&#39;一季度&#39;] &#x3D; 380ser1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">一季度    380二季度    390三季度    260四季度    370dtype: int64</code></pre><h5 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h5><p><code>Series</code>对象的切片操作跟列表、数组类似，通过给出起始和结束索引，从原来的<code>Series</code>对象中取出或修改部分数据，这里也可以使用整数索引和自定义的索引，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2[1:3]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">二季度    180三季度    300dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2[&#39;二季度&#39;:&#39;四季度&#39;]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">二季度    180三季度    300四季度    405dtype: int64</code></pre><blockquote><p><strong>提示</strong>：在使用自定义索引进行切片时，结束索引对应的元素也是可以取到的。</p></blockquote><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2[1:3] &#x3D; 400, 500ser2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">一季度    320二季度    400三季度    500四季度    405dtype: int64</code></pre><h5 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h5><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2[[&#39;二季度&#39;, &#39;四季度&#39;]]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">二季度    400四季度    405dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2[[&#39;二季度&#39;, &#39;四季度&#39;]] &#x3D; 600, 520ser2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">一季度    320二季度    600三季度    500四季度    520dtype: int64</code></pre><h5 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h5><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2[ser2 &gt;&#x3D; 500]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">二季度    600三季度    500四季度    520dtype: int64</code></pre><h3 id="Series对象的属性和方法"><a href="#Series对象的属性和方法" class="headerlink" title="Series对象的属性和方法"></a>Series对象的属性和方法</h3><p><code>Series</code>对象的属性和方法非常多，我们就捡着重要的跟大家讲吧。先看看下面的表格，它展示了<code>Series</code>对象常用的属性。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>dtype</code> &#x2F; <code>dtypes</code></td><td>返回<code>Series</code>对象的数据类型</td></tr><tr><td><code>hasnans</code></td><td>判断<code>Series</code>对象中有没有空值</td></tr><tr><td><code>at</code> &#x2F; <code>iat</code></td><td>通过索引访问<code>Series</code>对象中的单个值</td></tr><tr><td><code>loc</code> &#x2F; <code>iloc</code></td><td>通过索引访问<code>Series</code>对象中的单个值或一组值</td></tr><tr><td><code>index</code></td><td>返回<code>Series</code>对象的索引（<code>Index</code>对象）</td></tr><tr><td><code>is_monotonic</code></td><td>判断<code>Series</code>对象中的数据是否单调</td></tr><tr><td><code>is_monotonic_increasing</code></td><td>判断<code>Series</code>对象中的数据是否单调递增</td></tr><tr><td><code>is_monotonic_decreasing</code></td><td>判断<code>Series</code>对象中的数据是否单调递减</td></tr><tr><td><code>is_unique</code></td><td>判断<code>Series</code>对象中的数据是否独一无二</td></tr><tr><td><code>size</code></td><td>返回<code>Series</code>对象中元素的个数</td></tr><tr><td><code>values</code></td><td>以<code>ndarray</code>的方式返回<code>Series</code>对象中的值（<code>ndarray</code>对象）</td></tr></tbody></table><p>我们可以通过下面的代码来了解<code>Series</code>对象的属性。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>ser2<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>                    <span class="token comment"># 数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser2<span class="token punctuation">.</span>hasnans<span class="token punctuation">)</span>                  <span class="token comment"># 有没有空值</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser2<span class="token punctuation">.</span>index<span class="token punctuation">)</span>                    <span class="token comment"># 索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser2<span class="token punctuation">.</span>values<span class="token punctuation">)</span>                   <span class="token comment"># 值</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser2<span class="token punctuation">.</span>is_monotonic_increasing<span class="token punctuation">)</span>  <span class="token comment"># 是否单调递增</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser2<span class="token punctuation">.</span>is_unique<span class="token punctuation">)</span>                <span class="token comment"># 是否每个值都独一无二</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">int64FalseIndex([&#39;一季度&#39;, &#39;二季度&#39;, &#39;三季度&#39;, &#39;四季度&#39;], dtype&#x3D;&#39;object&#39;)[320 600 500 520]FalseTrue</code></pre><p><code>Series</code>对象的方法很多，下面我们通过一些代码片段为大家介绍常用的方法。</p><h4 id="统计相关"><a href="#统计相关" class="headerlink" title="统计相关"></a>统计相关</h4><p><code>Series</code>对象支持各种获取描述性统计信息的方法。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(ser2.count())   # 计数print(ser2.sum())     # 求和print(ser2.mean())    # 求平均print(ser2.median())  # 找中位数print(ser2.max())     # 找最大print(ser2.min())     # 找最小print(ser2.std())     # 求标准差print(ser2.var())     # 求方差</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">41940485.0510.0600320118.1806526749055713966.666666666666</code></pre><p><code>Series</code>对象还有一个名为<code>describe()</code>的方法，可以获得上述所有的描述性统计信息，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser2.describe()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">count      4.000000mean     485.000000std      118.180653min      320.00000025%      455.00000050%      510.00000075%      540.000000max      600.000000dtype: float64</code></pre><blockquote><p><strong>提示</strong>：因为<code>describe()</code>返回的也是一个<code>Series</code>对象，所以也可以用<code>ser2.describe()[&#39;mean&#39;]</code>来获取平均值，用<code>ser2.describe()[[&#39;max&#39;, &#39;min&#39;]]</code>来获取最大值和最小值。</p></blockquote><p>如果<code>Series</code>对象有重复的值，我们可以使用<code>unique()</code>方法获得由独一无二的值构成的数组；可以使用<code>nunique()</code>方法统计不重复值的数量；如果想要统计每个值重复的次数，可以使用<code>value_counts()</code>方法，这个方法会返回一个<code>Series</code>对象，它的索引就是原来的<code>Series</code>对象中的值，而每个值出现的次数就是返回的<code>Series</code>对象中的数据，在默认情况下会按照出现次数做降序排列，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser3 &#x3D; pd.Series(data&#x3D;[&#39;apple&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;pitaya&#39;, &#39;apple&#39;, &#39;pitaya&#39;, &#39;durian&#39;])ser3.value_counts()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">apple     3pitaya    2durian    1banana    1dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser3.nunique()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">4</code></pre><p>对于<code>ser3</code>，我们还可以用<code>mode()</code>方法来找出数据的众数，由于众数可能不唯一，所以<code>mode()</code>方法的返回值仍然是一个<code>Series</code>对象。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">ser3<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    appledtype: object</code></pre><h4 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h4><p><code>Series</code>对象的<code>isna()</code>和<code>isnull()</code>方法可以用于空值的判断，<code>notna()</code>和<code>notnull()</code>方法可以用于非空值的判断，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser4 &#x3D; pd.Series(data&#x3D;[10, 20, np.nan, 30, np.nan])ser4.isna()</code></pre><blockquote><p><strong>说明</strong>：<code>np.nan</code>是一个IEEE 754标准的浮点小数，专门用来表示“不是一个数”，在上面的代码中我们用它来代表空值；当然，也可以用 Python 中的<code>None</code>来表示空值，在 pandas 中<code>None</code>也会被处理为<code>np.nan</code>。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">0    False1    False2     True3    False4     Truedtype: bool</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser4.notna()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0     True1     True2    False3     True4    Falsedtype: bool</code></pre><p><code>Series</code>对象的<code>dropna()</code>和<code>fillna()</code>方法分别用来删除空值和填充空值，具体的用法如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser4.dropna()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    10.01    20.03    30.0dtype: float64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser4.fillna(value&#x3D;40)  # 将空值填充为40</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    10.01    20.02    40.03    30.04    40.0dtype: float64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser4.fillna(method&#x3D;&#39;ffill&#39;)  # 用空值前面的非空值填充</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    10.01    20.02    20.03    30.04    30.0dtype: float64</code></pre><p>需要提醒大家注意的是，<code>dropna()</code>和<code>fillna()</code>方法都有一个名为<code>inplace</code>的参数，它的默认值是<code>False</code>，表示删除空值或填充空值不会修改原来的<code>Series</code>对象，而是返回一个新的<code>Series</code>对象。如果将<code>inplace</code>参数的值修改为<code>True</code>，那么删除或填充空值会就地操作，直接修改原来的<code>Series</code>对象，此时方法的返回值是<code>None</code>。后面我们会接触到的很多方法，包括<code>DataFrame</code>对象的很多方法都会有这个参数，它们的意义跟这里是一样的。</p><p><code>Series</code>对象的<code>mask()</code>和<code>where()</code>方法可以将满足或不满足条件的值进行替换，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser5 &#x3D; pd.Series(range(5))ser5.where(ser5 &gt; 0)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    NaN1    1.02    2.03    3.04    4.0dtype: float64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser5.where(ser5 &gt; 1, 10)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    101    102     23     34     4dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser5.mask(ser5 &gt; 1, 10)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0     01     12    103    104    10dtype: int64</code></pre><p><code>Series</code>对象的<code>duplicated()</code>方法可以帮助我们找出重复的数据，而<code>drop_duplicates()</code>方法可以帮我们删除重复数据。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser3.duplicated()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    False1    False2     True3    False4     True5     True6    Falsedtype: bool</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser3.drop_duplicates()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0     apple1    banana3    pitaya6    duriandtype: object</code></pre><p><code>Series</code>对象的<code>apply()</code>和<code>map()</code>方法非常重要，它们可以通过字典或者指定的函数来处理数据，把数据映射或转换成我们想要的样子。这两个方法在数据准备阶段非常重要，我们先来试一试这个名为<code>map</code>的方法。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser6 &#x3D; pd.Series([&#39;cat&#39;, &#39;dog&#39;, np.nan, &#39;rabbit&#39;])ser6</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0       cat1       dog2       NaN3    rabbitdtype: object</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser6.map(&#123;&#39;cat&#39;: &#39;kitten&#39;, &#39;dog&#39;: &#39;puppy&#39;&#125;)</code></pre><blockquote><p><strong>说明</strong>：通过字典给出的映射规则对数据进行处理。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">0    kitten1     puppy2       NaN3       NaNdtype: object</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser6.map(&#39;I am a &#123;&#125;&#39;.format, na_action&#x3D;&#39;ignore&#39;)</code></pre><blockquote><p><strong>说明</strong>：将指定字符串的<code>format</code>方法作用到数据系列的数据上，忽略掉所有的空值。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">0       I am a cat1       I am a dog2              NaN3    I am a rabbitdtype: object</code></pre><p>我们创建一个新的<code>Series</code>对象，</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser7 &#x3D; pd.Series([20, 21, 12],  index&#x3D;[&#39;London&#39;, &#39;New York&#39;, &#39;Helsinki&#39;])ser7</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">London      20New York    21Helsinki    12dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser7.apply(np.square)</code></pre><blockquote><p><strong>说明</strong>：将求平方的函数作用到数据系列的数据上，也可以将参数<code>np.square</code>替换为<code>lambda x: x ** 2</code>。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">London      400New York    441Helsinki    144dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser7.apply(lambda x, value: x - value, args&#x3D;(5, ))</code></pre><blockquote><p>注意：上面<code>apply</code>方法中的<code>lambda</code>函数有两个参数，第一个参数是数据系列中的数据，而第二个参数需要我们传入，所以我们给<code>apply</code>方法增加了<code>args</code>参数，用于给<code>lambda</code>函数的第二个参数传值。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">London      15New York    16Helsinki     7dtype: int64</code></pre><h4 id="取头部值和排序"><a href="#取头部值和排序" class="headerlink" title="取头部值和排序"></a>取头部值和排序</h4><p><code>Series</code>对象的<code>sort_index()</code>和<code>sort_values()</code>方法可以用于对索引和数据的排序，排序方法有一个名为<code>ascending</code>的布尔类型参数，该参数用于控制排序的结果是升序还是降序；而名为<code>kind</code>的参数则用来控制排序使用的算法，默认使用了<code>quicksort</code>，也可以选择<code>mergesort</code>或<code>heapsort</code>；如果存在空值，那么可以用<code>na_position</code>参数空值放在最前还是最后，默认是<code>last</code>，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser8 &#x3D; pd.Series(    data&#x3D;[35, 96, 12, 57, 25, 89],     index&#x3D;[&#39;grape&#39;, &#39;banana&#39;, &#39;pitaya&#39;, &#39;apple&#39;, &#39;peach&#39;, &#39;orange&#39;])ser8.sort_values()  # 按值从小到大排序</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">pitaya    12peach     25grape     35apple     57orange    89banana    96dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser8.sort_index(ascending&#x3D;False)  # 按索引从大到小排序</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">pitaya    12peach     25orange    89grape     35banana    96apple     57dtype: int64</code></pre><p>如果要从<code>Series</code>对象中找出元素中最大或最小的“Top-N”，我们不需要对所有的值进行排序的，可以使用<code>nlargest()</code>和<code>nsmallest()</code>方法来完成，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser8.nlargest(3)  # 值最大的3个</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">banana    96orange    89apple     57dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser8.nsmallest(2)  # 值最小的2个</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">pitaya    12peach     25dtype: int64</code></pre><h4 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h4><p><code>Series</code>对象有一个名为<code>plot</code>的方法可以用来生成图表，如果选择生成折线图、饼图、柱状图等，默认会使用<code>Series</code>对象的索引作为横坐标，使用<code>Series</code>对象的数据作为纵坐标。下面我们创建一个<code>Series</code>对象并基于它绘制柱状图，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import matplotlib.pyplot as pltser9 &#x3D; pd.Series(&#123;&#39;Q1&#39;: 400, &#39;Q2&#39;: 520, &#39;Q3&#39;: 180, &#39;Q4&#39;: 380&#125;)# 通过plot方法的kind指定图表类型为柱状图ser9.plot(kind&#x3D;&#39;bar&#39;)# 定制纵轴的取值范围plt.ylim(0, 600)# 定制横轴刻度（旋转到0度）plt.xticks(rotation&#x3D;0)# 为柱子增加数据标签for i in range(ser9.size):    plt.text(i, ser9[i] + 5, ser9[i], ha&#x3D;&#39;center&#39;)plt.show()</code></pre><p>输出：</p><img src="res/ser_bar_graph.png" style="zoom:35%;"><p>我们也可以将其绘制为饼图，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python"># plot方法的kind参数指定了图表类型为饼图# autopct会自动计算并显示百分比# pctdistance用来控制百分比到圆心的距离ser9.plot(kind&#x3D;&#39;pie&#39;, autopct&#x3D;&#39;%.1f%%&#39;, pctdistance&#x3D;0.65)plt.show()</code></pre><p>输出：</p><img src="res/ser_pie_graph.png" style="zoom:35%;">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.初识Python</title>
      <link href="/2024/07/01/01.chu-shi-python/"/>
      <url>/2024/07/01/01.chu-shi-python/</url>
      
        <content type="html"><![CDATA[<h2 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h2><blockquote><p><strong>温馨提示</strong>：2018年创建这个仓库的时候，关于Python语言基础这个部分的内容写得相对是比较粗糙，对粗学者可能不是那么友好。如果你正好是一名初学者，建议你移步到我的另一个仓库<a href="https://github.com/jackfrued/Python-for-Freshmen-2023">Python-for-Freshmen-2023</a>，这个仓库对初学者更加友好，对应的内容，大家也可以在我的知乎专栏“从零开始学Python”中找到，点击进入<a href="https://www.zhihu.com/column/c_1216656665569013760">传送门</a>。</p></blockquote><h3 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h3><h4 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h4><ol><li>1989年圣诞节：Guido von Rossum开始写Python语言的编译器。</li><li>1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li><li>1994年1月：Python 1.0正式发布。</li><li>2000年10月16日：Python 2.0发布，增加了完整的<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>，提供了对<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</li><li>2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6&#x2F;2.7版本中。</li></ol><p>目前我使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html">《Python简史》</a>的网络文章。</p><h4 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h4><p>Python的优点很多，简单的可以总结为以下几点。</p><ol><li>简单明了，学习曲线低，比很多编程语言都容易上手。</li><li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li><li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p>Python的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li></ol><h4 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h4><p>目前Python在Web应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><h3 id="安装Python解释器"><a href="#安装Python解释器" class="headerlink" title="安装Python解释器"></a>安装Python解释器</h3><p>想要开始Python编程之旅，首先得在自己使用的计算机上安装Python解释器环境，下面将以安装官方的Python解释器为例，讲解如何在不同的操作系统上安装Python环境。官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython。除此之外，Python解释器还有Java语言实现的Jython、C#语言实现的IronPython以及PyPy、Brython、Pyston等版本，有兴趣的读者可以自行了解。</p><h4 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h4><p>可以在<a href="https://www.python.org/">Python官方网站</a>下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl&#x2F;tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。</p><p>如果系统显示api-ms-win-crt*.dll文件缺失，可以参照<a href="https://zhuanlan.zhihu.com/p/32087135">《api-ms-win-crt*.dll缺失原因分析和解决方法》</a>一文讲解的方法进行处理或者直接在<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=48145">微软官网</a>下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个<a href="https://dl.pconline.com.cn/download/360074-1.html">DirectX修复工具</a>进行修复。</p><h4 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h4><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在<a href="https://www.python.org/">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）。</p><ol><li>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><ol start="2"><li>下载Python源代码并解压缩到指定目录。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.6&#x2F;Python-3.7.6.tar.xzxz -d Python-3.7.6.tar.xztar -xvf Python-3.7.6.tar</code></pre><ol start="3"><li>切换至Python源代码目录并执行下面的命令进行配置和安装。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd Python-3.7.6.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python37 --enable-optimizationsmake &amp;&amp; make install</code></pre><ol start="4"><li>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd ~vim .bash_profile</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell"># ... 此处省略上面的代码 ...export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;python37&#x2F;bin# ... 此处省略下面的代码 ...</code></pre><ol start="5"><li>激活环境变量。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">source .bash_profile</code></pre><h4 id="macOS环境"><a href="#macOS环境" class="headerlink" title="macOS环境"></a>macOS环境</h4><p>macOS也自带了Python 2.x版本，可以通过<a href="https://www.python.org/">Python的官方网站</a>提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行<code>python</code>命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行<code>python3</code>命令。</p><h3 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h3><h4 id="确认Python的版本"><a href="#确认Python的版本" class="headerlink" title="确认Python的版本"></a>确认Python的版本</h4><p>可以Windows的命令行提示符中键入下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python --version</code></pre><p>在Linux或macOS系统的终端中键入下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python3 --version</code></pre><p>当然也可以先输入<code>python</code>或<code>python3</code>进入交互式环境，再执行以下的代码检查Python的版本。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import sysprint(sys.version_info)print(sys.version)</code></pre><h4 id="编写Python源代码"><a href="#编写Python源代码" class="headerlink" title="编写Python源代码"></a>编写Python源代码</h4><p>可以用文本编辑工具（推荐使用<a href="https://www.sublimetext.com/">Sublime</a>、<a href="https://code.visualstudio.com/">Visual Studio Code</a>等高级文本编辑工具）编写Python源代码并用py作为后缀名保存该文件，代码内容如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(&#39;hello, world!&#39;)</code></pre><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了”hello, world!”。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python hello.py</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python3 hello.py</code></pre><h4 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h4><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><ol><li>单行注释 - 以#和空格开头的部分</li><li>多行注释 - 三个引号开头，三个引号结尾</li></ol><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;第一个Python程序 - hello, world!向伟大的Dennis M. Ritchie先生致敬Version: 0.1Author: 骆昊&quot;&quot;&quot;print(&#39;hello, world!&#39;)# print(&quot;你好, 世界！&quot;)</code></pre><h3 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h3><h4 id="IDLE-自带的集成开发工具"><a href="#IDLE-自带的集成开发工具" class="headerlink" title="IDLE - 自带的集成开发工具"></a>IDLE - 自带的集成开发工具</h4><p>IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。</p><p><img src="/./res/python-idle.png"></p><h4 id="IPython-更好的交互式编程工具"><a href="#IPython-更好的交互式编程工具" class="headerlink" title="IPython - 更好的交互式编程工具"></a>IPython - 更好的交互式编程工具</h4><p>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install ipython</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip3 install ipython</code></pre><p>安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。</p><p><img src="/./res/python-ipython.png"></p><h4 id="Sublime-Text-高级文本编辑器"><a href="#Sublime-Text-高级文本编辑器" class="headerlink" title="Sublime Text - 高级文本编辑器"></a>Sublime Text - 高级文本编辑器</h4><p><img src="/./res/python-sublime.png"></p><ul><li><p>首先可以通过<a href="https://www.sublimetext.com/">官方网站</a>下载安装程序安装Sublime Text 3或Sublime Text 2。</p></li><li><p>安装包管理工具。</p><ol><li>通过快捷键Ctrl+&#96;或者在View菜单中选择Show Console打开控制台，输入下面的代码。</li></ol><ul><li>Sublime 3</li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">import  urllib.request,os;pf&#x3D;&#39;Package Control.sublime-package&#39;;ipp&#x3D;sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),&#39;wb&#39;).write(urllib.request.urlopen(&#39;http:&#x2F;&#x2F;sublime.wbond.net&#x2F;&#39;+pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></pre><ul><li>Sublime 2</li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">import  urllib2,os;pf&#x3D;&#39;Package Control.sublime-package&#39;;ipp&#x3D;sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));open(os.path.join(ipp,pf),&#39;wb&#39;).write(urllib2.urlopen(&#39;http:&#x2F;&#x2F;sublime.wbond.net&#x2F;&#39;+pf.replace(&#39; &#39;,&#39;%20&#39;)).read());print(&#39;Please restart Sublime Text to finish installation&#39;)</code></pre><ol start="2"><li>在浏览器中输入  <a href="https://sublime.wbond.net/Package%20Control.sublime-package">https://sublime.wbond.net/Package%20Control.sublime-package</a> 下载包管理工具的安装包，并找到安装Sublime目录下名为&quot;Installed Packages&quot;的目录，把刚才下载的文件放到这个文件加下，然后重启Sublime Text就搞定了。</li></ol></li><li><p>安装插件。通过Preference菜单的Package Control或快捷键Ctrl+Shift+P打开命令面板，在面板中输入Install Package就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p><ul><li>SublimeCodeIntel - 代码自动补全工具插件。</li><li>Emmet - 前端开发代码模板插件。</li><li>Git - 版本控制工具插件。</li><li>Python PEP8 Autoformat - PEP8规范自动格式化插件。</li><li>ConvertToUTF8 - 将本地编码转换为UTF-8。</li></ul></li></ul><blockquote><p><strong>说明</strong>：事实上<a href="https://code.visualstudio.com/">Visual Studio Code</a>可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p></blockquote><h4 id="PyCharm-Python开发神器"><a href="#PyCharm-Python开发神器" class="headerlink" title="PyCharm - Python开发神器"></a>PyCharm - Python开发神器</h4><p>PyCharm的安装、配置和使用在<a href="../%E7%95%AA%E5%A4%96%E7%AF%87/%E7%8E%A9%E8%BD%ACPyCharm.md">《玩转PyCharm》</a>进行了介绍，有兴趣的读者可以选择阅读。</p><p><img src="/./res/python-pycharm.png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li><p>在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">import this</code></pre><blockquote><p><strong>说明</strong>：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的<a href="../Python%E4%B9%8B%E7%A6%85.md">“Python之禅”</a>，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。</p></blockquote></li><li><p>学习使用turtle在屏幕上绘制图形。</p><blockquote><p><strong>说明</strong>：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。</p></blockquote> <pre class="language-Python" data-language="Python"><code class="language-Python">import turtleturtle.pensize(4)turtle.pencolor(&#39;red&#39;)turtle.forward(100)turtle.right(90)turtle.forward(100)turtle.right(90)turtle.forward(100)turtle.right(90)turtle.forward(100)turtle.mainloop()</code></pre><blockquote><p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.语言元素</title>
      <link href="/2024/07/01/02.yu-yan-yuan-su/"/>
      <url>/2024/07/01/02.yu-yan-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h2><h4 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h4><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84">“冯·诺依曼结构”</a>的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">维基百科</a>或者<a href="https://baike.baidu.com/">百度百科</a>科普一下。</p><blockquote><p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。</p></blockquote><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;使用变量保存数据并进行加减乘除运算Version: 0.1Author: 骆昊&quot;&quot;&quot;a &#x3D; 321b &#x3D; 12print(a + b)    # 333print(a - b)    # 309print(a * b)    # 3852print(a &#x2F; b)    # 26.75</code></pre><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;使用type()检查变量的类型Version: 0.1Author: 骆昊&quot;&quot;&quot;a &#x3D; 100b &#x3D; 12.345c &#x3D; 1 + 5jd &#x3D; &#39;hello, world&#39;e &#x3D; Trueprint(type(a))    # &lt;class &#39;int&#39;&gt;print(type(b))    # &lt;class &#39;float&#39;&gt;print(type(c))    # &lt;class &#39;complex&#39;&gt;print(type(d))    # &lt;class &#39;str&#39;&gt;print(type(e))    # &lt;class &#39;bool&#39;&gt;</code></pre><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;使用input()函数获取键盘输入(字符串)使用int()函数将输入的字符串转换成整数使用print()函数输出带占位符的字符串Version: 0.1Author: 骆昊&quot;&quot;&quot;a &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))print(&#39;%d + %d &#x3D; %d&#39; % (a, b, a + b))print(&#39;%d - %d &#x3D; %d&#39; % (a, b, a - b))print(&#39;%d * %d &#x3D; %d&#39; % (a, b, a * b))print(&#39;%d &#x2F; %d &#x3D; %f&#39; % (a, b, a &#x2F; b))print(&#39;%d &#x2F;&#x2F; %d &#x3D; %d&#39; % (a, b, a &#x2F;&#x2F; b))print(&#39;%d %% %d &#x3D; %d&#39; % (a, b, a % b))print(&#39;%d ** %d &#x3D; %d&#39; % (a, b, a ** b))</code></pre><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;赋值运算符和复合赋值运算符Version: 0.1Author: 骆昊&quot;&quot;&quot;a &#x3D; 10b &#x3D; 3a +&#x3D; b        # 相当于：a &#x3D; a + ba *&#x3D; a + 2    # 相当于：a &#x3D; a * (a + 2)print(a)      # 算一下这里会输出什么</code></pre><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;比较运算符和逻辑运算符的使用Version: 0.1Author: 骆昊&quot;&quot;&quot;flag0 &#x3D; 1 &#x3D;&#x3D; 1flag1 &#x3D; 3 &gt; 2flag2 &#x3D; 2 &lt; 1flag3 &#x3D; flag1 and flag2flag4 &#x3D; flag1 or flag2flag5 &#x3D; not (1 !&#x3D; 2)print(&#39;flag0 &#x3D;&#39;, flag0)    # flag0 &#x3D; Trueprint(&#39;flag1 &#x3D;&#39;, flag1)    # flag1 &#x3D; Trueprint(&#39;flag2 &#x3D;&#39;, flag2)    # flag2 &#x3D; Falseprint(&#39;flag3 &#x3D;&#39;, flag3)    # flag3 &#x3D; Falseprint(&#39;flag4 &#x3D;&#39;, flag4)    # flag4 &#x3D; Trueprint(&#39;flag5 &#x3D;&#39;, flag5)    # flag5 &#x3D; False</code></pre><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：华氏温度转换为摄氏温度。"><a href="#练习1：华氏温度转换为摄氏温度。" class="headerlink" title="练习1：华氏温度转换为摄氏温度。"></a>练习1：华氏温度转换为摄氏温度。</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C&#x3D;(F - 32) \div 1.8$。</p></blockquote><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;将华氏温度转换为摄氏温度Version: 0.1Author: 骆昊&quot;&quot;&quot;f &#x3D; float(input(&#39;请输入华氏温度: &#39;))c &#x3D; (f - 32) &#x2F; 1.8print(&#39;%.1f华氏度 &#x3D; %.1f摄氏度&#39; % (f, c))</code></pre><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(f&#39;&#123;f:.1f&#125;华氏度 &#x3D; &#123;c:.1f&#125;摄氏度&#39;)</code></pre></blockquote><h4 id="练习2：输入圆的半径计算计算周长和面积。"><a href="#练习2：输入圆的半径计算计算周长和面积。" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积。"></a>练习2：输入圆的半径计算计算周长和面积。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输入半径计算圆的周长和面积Version: 0.1Author: 骆昊&quot;&quot;&quot;radius &#x3D; float(input(&#39;请输入圆的半径: &#39;))perimeter &#x3D; 2 * 3.1416 * radiusarea &#x3D; 3.1416 * radius * radiusprint(&#39;周长: %.2f&#39; % perimeter)print(&#39;面积: %.2f&#39; % area)</code></pre><h4 id="练习3：输入年份判断是不是闰年。"><a href="#练习3：输入年份判断是不是闰年。" class="headerlink" title="练习3：输入年份判断是不是闰年。"></a>练习3：输入年份判断是不是闰年。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输入年份 如果是闰年输出True 否则输出FalseVersion: 0.1Author: 骆昊&quot;&quot;&quot;year &#x3D; int(input(&#39;请输入年份: &#39;))# 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行is_leap &#x3D; year % 4 &#x3D;&#x3D; 0 and year % 100 !&#x3D; 0 or \          year % 400 &#x3D;&#x3D; 0print(is_leap)</code></pre><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.分支结构</title>
      <link href="/2024/07/01/03.fen-zhi-jie-gou/"/>
      <url>/2024/07/01/03.fen-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;用户身份验证Version: 0.1Author: 骆昊&quot;&quot;&quot;username &#x3D; input(&#39;请输入用户名: &#39;)password &#x3D; input(&#39;请输入口令: &#39;)# 用户名是admin且密码是123456则身份验证成功否则身份验证失败if username &#x3D;&#x3D; &#39;admin&#39; and password &#x3D;&#x3D; &#39;123456&#39;:    print(&#39;身份验证成功!&#39;)else:    print(&#39;身份验证失败!&#39;)</code></pre><p>需要说明的是和C&#x2F;C++、Java等语言不同，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，建议大家<strong>不要使用制表键</strong>或者<strong>设置你的代码编辑工具自动将制表键变成4个空格</strong>。</p><p>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><p><img src="/./res/formula_1.png" alt="$$f(x)=\begin{cases} 3x-5&amp;\text{(x&gt;1)}\\x+2&amp;\text{(-1}\leq\text{x}\leq\text{1)}\\5x+3&amp;\text {(x&lt;-1)}\end{cases}$$"></p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;分段函数求值        3x - 5  (x &gt; 1)f(x) &#x3D;  x + 2   (-1 &lt;&#x3D; x &lt;&#x3D; 1)        5x + 3  (x &lt; -1)Version: 0.1Author: 骆昊&quot;&quot;&quot;x &#x3D; float(input(&#39;x &#x3D; &#39;))if x &gt; 1:    y &#x3D; 3 * x - 5elif x &gt;&#x3D; -1:    y &#x3D; x + 2else:    y &#x3D; 5 * x + 3print(&#39;f(%.2f) &#x3D; %.2f&#39; % (x, y))</code></pre><p>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;分段函数求值3x - 5(x &gt; 1)f(x) &#x3D;x + 2(-1 &lt;&#x3D; x &lt;&#x3D; 1)5x + 3(x &lt; -1)Version: 0.1Author: 骆昊&quot;&quot;&quot;x &#x3D; float(input(&#39;x &#x3D; &#39;))if x &gt; 1:    y &#x3D; 3 * x - 5else:    if x &gt;&#x3D; -1:        y &#x3D; x + 2    else:        y &#x3D; 5 * x + 3print(&#39;f(%.2f) &#x3D; %.2f&#39; % (x, y))</code></pre><blockquote><p><strong>说明：</strong> 大家可以自己感受一下这两种写法到底是哪一种更好。在之前我们提到的Python之禅中有这么一句话“Flat is better than nested.”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：英制单位英寸与公制单位厘米互换。"><a href="#练习1：英制单位英寸与公制单位厘米互换。" class="headerlink" title="练习1：英制单位英寸与公制单位厘米互换。"></a>练习1：英制单位英寸与公制单位厘米互换。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;英制单位英寸和公制单位厘米互换Version: 0.1Author: 骆昊&quot;&quot;&quot;value &#x3D; float(input(&#39;请输入长度: &#39;))unit &#x3D; input(&#39;请输入单位: &#39;)if unit &#x3D;&#x3D; &#39;in&#39; or unit &#x3D;&#x3D; &#39;英寸&#39;:    print(&#39;%f英寸 &#x3D; %f厘米&#39; % (value, value * 2.54))elif unit &#x3D;&#x3D; &#39;cm&#39; or unit &#x3D;&#x3D; &#39;厘米&#39;:    print(&#39;%f厘米 &#x3D; %f英寸&#39; % (value, value &#x2F; 2.54))else:    print(&#39;请输入有效的单位&#39;)</code></pre><h4 id="练习2：百分制成绩转换为等级制成绩。"><a href="#练习2：百分制成绩转换为等级制成绩。" class="headerlink" title="练习2：百分制成绩转换为等级制成绩。"></a>练习2：百分制成绩转换为等级制成绩。</h4><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;百分制成绩转换为等级制成绩Version: 0.1Author: 骆昊&quot;&quot;&quot;score &#x3D; float(input(&#39;请输入成绩: &#39;))if score &gt;&#x3D; 90:    grade &#x3D; &#39;A&#39;elif score &gt;&#x3D; 80:    grade &#x3D; &#39;B&#39;elif score &gt;&#x3D; 70:    grade &#x3D; &#39;C&#39;elif score &gt;&#x3D; 60:    grade &#x3D; &#39;D&#39;else:    grade &#x3D; &#39;E&#39;print(&#39;对应的等级是:&#39;, grade)</code></pre><h4 id="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"><a href="#练习3：输入三条边长，如果能构成三角形就计算周长和面积。" class="headerlink" title="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"></a>练习3：输入三条边长，如果能构成三角形就计算周长和面积。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积Version: 0.1Author: 骆昊&quot;&quot;&quot;a &#x3D; float(input(&#39;a &#x3D; &#39;))b &#x3D; float(input(&#39;b &#x3D; &#39;))c &#x3D; float(input(&#39;c &#x3D; &#39;))if a + b &gt; c and a + c &gt; b and b + c &gt; a:    print(&#39;周长: %f&#39; % (a + b + c))    p &#x3D; (a + b + c) &#x2F; 2    area &#x3D; (p * (p - a) * (p - b) * (p - c)) ** 0.5    print(&#39;面积: %f&#39; % (area))else:    print(&#39;不能构成三角形&#39;)</code></pre><blockquote><p><strong>说明：</strong> 上面使用的通过边长计算三角形面积的公式叫做<a href="https://zh.wikipedia.org/zh-hans/%E6%B5%B7%E4%BC%A6%E5%85%AC%E5%BC%8F">海伦公式</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.循环结构</title>
      <link href="/2024/07/01/04.xun-huan-jie-gou/"/>
      <url>/2024/07/01/04.xun-huan-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把<code>print(&#39;hello, world&#39;)</code>这句代码写3600遍，这里同样需要循环结构。</p><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果（$\displaystyle \sum \limits_{n&#x3D;1}^{100}n$）。 </p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;用for循环实现1~100求和Version: 0.1Author: 骆昊&quot;&quot;&quot;sum &#x3D; 0for x in range(101):    sum +&#x3D; xprint(sum)</code></pre><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;用for循环实现1~100之间的偶数求和Version: 0.1Author: 骆昊&quot;&quot;&quot;sum &#x3D; 0for x in range(2, 101, 2):    sum +&#x3D; xprint(sum)</code></pre><p>当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;用for循环实现1~100之间的偶数求和Version: 0.1Author: 骆昊&quot;&quot;&quot;sum &#x3D; 0for x in range(1, 101):    if x % 2 &#x3D;&#x3D; 0:        sum +&#x3D; xprint(sum)</code></pre><blockquote><p><strong>说明</strong>：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;猜数字游戏Version: 0.1Author: 骆昊&quot;&quot;&quot;import randomanswer &#x3D; random.randint(1, 100)counter &#x3D; 0while True:    counter +&#x3D; 1    number &#x3D; int(input(&#39;请输入: &#39;))    if number &lt; answer:        print(&#39;大一点&#39;)    elif number &gt; answer:        print(&#39;小一点&#39;)    else:        print(&#39;恭喜你猜对了!&#39;)        breakprint(&#39;你总共猜了%d次&#39; % counter)if counter &gt; 7:    print(&#39;你的智商余额明显不足&#39;)</code></pre><p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输出乘法口诀表(九九表)Version: 0.1Author: 骆昊&quot;&quot;&quot;for i in range(1, 10):    for j in range(1, i + 1):        print(&#39;%d*%d&#x3D;%d&#39; % (i, j, i * j), end&#x3D;&#39;\t&#39;)    print()</code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：输入一个正整数判断是不是素数。"><a href="#练习1：输入一个正整数判断是不是素数。" class="headerlink" title="练习1：输入一个正整数判断是不是素数。"></a>练习1：输入一个正整数判断是不是素数。</h4><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输入一个正整数判断它是不是素数Version: 0.1Author: 骆昊Date: 2018-03-01&quot;&quot;&quot;from math import sqrtnum &#x3D; int(input(&#39;请输入一个正整数: &#39;))end &#x3D; int(sqrt(num))is_prime &#x3D; Truefor x in range(2, end + 1):    if num % x &#x3D;&#x3D; 0:        is_prime &#x3D; False        breakif is_prime and num !&#x3D; 1:    print(&#39;%d是素数&#39; % num)else:    print(&#39;%d不是素数&#39; % num)</code></pre><h4 id="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"><a href="#练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。" class="headerlink" title="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"></a>练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h4><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输入两个正整数计算它们的最大公约数和最小公倍数Version: 0.1Author: 骆昊Date: 2018-03-01&quot;&quot;&quot;x &#x3D; int(input(&#39;x &#x3D; &#39;))y &#x3D; int(input(&#39;y &#x3D; &#39;))# 如果x大于y就交换x和y的值if x &gt; y:    # 通过下面的操作将y的值赋给x, 将x的值赋给y    x, y &#x3D; y, x# 从两个数中较小的数开始做递减的循环for factor in range(x, 0, -1):    if x % factor &#x3D;&#x3D; 0 and y % factor &#x3D;&#x3D; 0:        print(&#39;%d和%d的最大公约数是%d&#39; % (x, y, factor))        print(&#39;%d和%d的最小公倍数是%d&#39; % (x, y, x * y &#x2F;&#x2F; factor))        break</code></pre><h4 id="练习3：打印如下所示的三角形图案。"><a href="#练习3：打印如下所示的三角形图案。" class="headerlink" title="练习3：打印如下所示的三角形图案。"></a>练习3：打印如下所示的三角形图案。</h4><pre class="language-none"><code class="language-none">***************</code></pre><pre class="language-none"><code class="language-none">    *   **  *** *********</code></pre><pre class="language-none"><code class="language-none">    *   ***  ***** ****************</code></pre><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;打印三角形图案Version: 0.1Author: 骆昊&quot;&quot;&quot;row &#x3D; int(input(&#39;请输入行数: &#39;))for i in range(row):    for _ in range(i + 1):        print(&#39;*&#39;, end&#x3D;&#39;&#39;)    print()for i in range(row):    for j in range(row):        if j &lt; row - i - 1:            print(&#39; &#39;, end&#x3D;&#39;&#39;)        else:            print(&#39;*&#39;, end&#x3D;&#39;&#39;)    print()for i in range(row):    for _ in range(row - i - 1):        print(&#39; &#39;, end&#x3D;&#39;&#39;)    for _ in range(2 * i + 1):        print(&#39;*&#39;, end&#x3D;&#39;&#39;)    print()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.构造程序逻辑</title>
      <link href="/2024/07/01/05.gou-zao-cheng-xu-luo-ji/"/>
      <url>/2024/07/01/05.gou-zao-cheng-xu-luo-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h2><p>学完前面的几个章节后，我觉得有必要在这里带大家做一些练习来巩固之前所学的知识，虽然迄今为止我们学习的内容只是Python的冰山一角，但是这些内容已经足够我们来构建程序中的逻辑。对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。</p><p>我们在本章为大家整理了一些经典的案例和习题，希望通过这些例子，一方面帮助大家巩固之前所学的Python知识，另一方面帮助大家了解如何建立程序中的逻辑以及如何运用一些简单的算法解决现实中的问题。</p><h3 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h3><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3&#x3D;153$。</p></blockquote><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;找出所有水仙花数Version: 0.1Author: 骆昊&quot;&quot;&quot;for num in range(100, 1000):    low &#x3D; num % 10    mid &#x3D; num &#x2F;&#x2F; 10 % 10    high &#x3D; num &#x2F;&#x2F; 100    if num &#x3D;&#x3D; low ** 3 + mid ** 3 + high ** 3:        print(num)</code></pre><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;正整数的反转Version: 0.1Author: 骆昊&quot;&quot;&quot;num &#x3D; int(input(&#39;num &#x3D; &#39;))reversed_num &#x3D; 0while num &gt; 0:    reversed_num &#x3D; reversed_num * 10 + num % 10    num &#x2F;&#x2F;&#x3D; 10print(reversed_num)</code></pre></li><li><p><strong>百钱百鸡</strong>问题。</p><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;《百钱百鸡》问题Version: 0.1Author: 骆昊&quot;&quot;&quot;for x in range(0, 20):    for y in range(0, 33):        z &#x3D; 100 - x - y        if 5 * x + 3 * y + z &#x2F; 3 &#x3D;&#x3D; 100:            print(&#39;公鸡: %d只, 母鸡: %d只, 小鸡: %d只&#39; % (x, y, z))</code></pre><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p></li><li><p><strong>CRAPS赌博游戏</strong>。</p><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;Craps赌博游戏我们设定玩家开始游戏时有1000元的赌注游戏结束的条件是玩家输光所有的赌注Version: 0.1Author: 骆昊&quot;&quot;&quot;from random import randintmoney &#x3D; 1000while money &gt; 0:    print(&#39;你的总资产为:&#39;, money)    needs_go_on &#x3D; False    while True:        debt &#x3D; int(input(&#39;请下注: &#39;))        if 0 &lt; debt &lt;&#x3D; money:            break    first &#x3D; randint(1, 6) + randint(1, 6)    print(&#39;玩家摇出了%d点&#39; % first)    if first &#x3D;&#x3D; 7 or first &#x3D;&#x3D; 11:        print(&#39;玩家胜!&#39;)        money +&#x3D; debt    elif first &#x3D;&#x3D; 2 or first &#x3D;&#x3D; 3 or first &#x3D;&#x3D; 12:        print(&#39;庄家胜!&#39;)        money -&#x3D; debt    else:        needs_go_on &#x3D; True    while needs_go_on:        needs_go_on &#x3D; False        current &#x3D; randint(1, 6) + randint(1, 6)        print(&#39;玩家摇出了%d点&#39; % current)        if current &#x3D;&#x3D; 7:            print(&#39;庄家胜&#39;)            money -&#x3D; debt        elif current &#x3D;&#x3D; first:            print(&#39;玩家胜&#39;)            money +&#x3D; debt        else:            needs_go_on &#x3D; Trueprint(&#39;你破产了, 游戏结束!&#39;)</code></pre></li></ol><p>###有用的练习 </p><ol><li><p>生成<strong>斐波那契数列</strong>的前20个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为&quot;兔子数列&quot;。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote></li><li><p>找出10000以内的<strong>完美数</strong>。</p><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6&#x3D;1+2+3$）和28（$28&#x3D;1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote></li><li><p>输出<strong>100以内所有的素数</strong>。</p><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote></li></ol><p>上面练习的参考答案在本章对应的代码目录中，如果需要帮助请读者自行查看参考答案。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.函数和模块的使用</title>
      <link href="/2024/07/01/06.han-shu-he-mo-kuai-de-shi-yong/"/>
      <url>/2024/07/01/06.han-shu-he-mo-kuai-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><p>在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p><img src="/./res/formula_3.png" alt="$$x_1 + x_2 + x_3 + x_4 = 8$$"></p><p>事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。</p><p><img src="/./res/formula_4.png" alt="$$C_M^N =\frac{M!}{N!(M-N)!}, \text{(M=7, N=3)} $$"></p><p>可以用Python的程序来计算出这个值，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输入M和N计算C(M,N)Version: 0.1Author: 骆昊&quot;&quot;&quot;m &#x3D; int(input(&#39;m &#x3D; &#39;))n &#x3D; int(input(&#39;n &#x3D; &#39;))fm &#x3D; 1for num in range(1, m + 1):    fm *&#x3D; numfn &#x3D; 1for num in range(1, n + 1):    fn *&#x3D; numfm_n &#x3D; 1for num in range(1, m - n + 1):    fm_n *&#x3D; numprint(fm &#x2F;&#x2F; fn &#x2F;&#x2F; fm_n)</code></pre><h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;输入M和N计算C(M,N)Version: 0.1Author: 骆昊&quot;&quot;&quot;def fac(num):    &quot;&quot;&quot;求阶乘&quot;&quot;&quot;    result &#x3D; 1    for n in range(1, num + 1):        result *&#x3D; n    return resultm &#x3D; int(input(&#39;m &#x3D; &#39;))n &#x3D; int(input(&#39;n &#x3D; &#39;))# 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数print(fac(m) &#x2F;&#x2F; fac(n) &#x2F;&#x2F; fac(m - n))</code></pre><blockquote><p><strong>说明：</strong> Python的<code>math</code>模块中其实已经有一个名为<code>factorial</code>函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，<strong>实际开发中并不建议做这种低级的重复劳动</strong>。</p></blockquote><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数是绝大多数编程语言中都支持的一个代码的&quot;构建块&quot;，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randintdef roll_dice(n&#x3D;2):    &quot;&quot;&quot;摇色子&quot;&quot;&quot;    total &#x3D; 0    for _ in range(n):        total +&#x3D; randint(1, 6)    return totaldef add(a&#x3D;0, b&#x3D;0, c&#x3D;0):    &quot;&quot;&quot;三个数相加&quot;&quot;&quot;    return a + b + c# 如果没有指定参数那么使用默认值摇两颗色子print(roll_dice())# 摇三颗色子print(roll_dice(3))print(add())print(add(1))print(add(1, 2))print(add(1, 2, 3))# 传递参数时可以不按照设定的顺序进行传递print(add(c&#x3D;50, a&#x3D;100, b&#x3D;200))</code></pre><p>我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用<code>add</code>函数，这跟其他很多语言中函数重载的效果是一致的。</p><p>其实上面的<code>add</code>函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 在参数名前面的*表示args是一个可变参数def add(*args):    total &#x3D; 0    for val in args:        total +&#x3D; val    return total# 在调用add函数时可以传入0个或多个参数print(add())print(add(1))print(add(1, 2))print(add(1, 2, 3))print(add(1, 3, 5, 7, 9))</code></pre><h3 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h3><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    print(&#39;hello, world!&#39;)def foo():    print(&#39;goodbye, world!&#39;)# 下面的代码会输出什么呢？foo()</code></pre><p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    print(&#39;hello, world!&#39;)</code></pre><p><code>module2.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    print(&#39;goodbye, world!&#39;)</code></pre><p><code>test.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">from module1 import foo# 输出hello, world!foo()from module2 import foo# 输出goodbye, world!foo()</code></pre><p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p><p><code>test.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">import module1 as m1import module2 as m2m1.foo()m2.foo()</code></pre><p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p><p><code>test.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">from module1 import foofrom module2 import foo# 输出goodbye, world!foo()</code></pre><p><code>test.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">from module2 import foofrom module1 import foo# 输出hello, world!foo()</code></pre><p>需要说明的是，如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。</p><p><code>module3.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    passdef bar():    pass# __name__是Python中一个隐含的变量它代表了模块的名字# 只有被Python解释器直接执行的模块的名字才是__main__if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    print(&#39;call foo()&#39;)    foo()    print(&#39;call bar()&#39;)    bar()</code></pre><p><code>test.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">import module3# 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：实现计算求最大公约数和最小公倍数的函数。"><a href="#练习1：实现计算求最大公约数和最小公倍数的函数。" class="headerlink" title="练习1：实现计算求最大公约数和最小公倍数的函数。"></a>练习1：实现计算求最大公约数和最小公倍数的函数。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def gcd(x, y):    &quot;&quot;&quot;求最大公约数&quot;&quot;&quot;    (x, y) &#x3D; (y, x) if x &gt; y else (x, y)    for factor in range(x, 0, -1):        if x % factor &#x3D;&#x3D; 0 and y % factor &#x3D;&#x3D; 0:            return factordef lcm(x, y):    &quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;    return x * y &#x2F;&#x2F; gcd(x, y)</code></pre><h4 id="练习2：实现判断一个数是不是回文数的函数。"><a href="#练习2：实现判断一个数是不是回文数的函数。" class="headerlink" title="练习2：实现判断一个数是不是回文数的函数。"></a>练习2：实现判断一个数是不是回文数的函数。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def is_palindrome(num):    &quot;&quot;&quot;判断一个数是不是回文数&quot;&quot;&quot;    temp &#x3D; num    total &#x3D; 0    while temp &gt; 0:        total &#x3D; total * 10 + temp % 10        temp &#x2F;&#x2F;&#x3D; 10    return total &#x3D;&#x3D; num</code></pre><h4 id="练习3：实现判断一个数是不是素数的函数。"><a href="#练习3：实现判断一个数是不是素数的函数。" class="headerlink" title="练习3：实现判断一个数是不是素数的函数。"></a>练习3：实现判断一个数是不是素数的函数。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def is_prime(num):    &quot;&quot;&quot;判断一个数是不是素数&quot;&quot;&quot;    for factor in range(2, int(num ** 0.5) + 1):        if num % factor &#x3D;&#x3D; 0:            return False    return True if num !&#x3D; 1 else False</code></pre><h4 id="练习4：写一个程序判断输入的正整数是不是回文素数。"><a href="#练习4：写一个程序判断输入的正整数是不是回文素数。" class="headerlink" title="练习4：写一个程序判断输入的正整数是不是回文素数。"></a>练习4：写一个程序判断输入的正整数是不是回文素数。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    num &#x3D; int(input(&#39;请输入正整数: &#39;))    if is_palindrome(num) and is_prime(num):        print(&#39;%d是回文素数&#39; % num)</code></pre><blockquote><p><strong>注意</strong>：通过上面的程序可以看出，当我们<strong>将代码中重复出现的和相对独立的功能抽取成函数</strong>后，我们可以<strong>组合使用这些函数</strong>来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。</p></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    b &#x3D; &#39;hello&#39;    # Python中可以在函数内部再定义函数    def bar():        c &#x3D; True        print(a)        print(b)        print(c)    bar()    # print(c)  # NameError: name &#39;c&#39; is not definedif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    a &#x3D; 100    # print(b)  # NameError: name &#39;b&#39; is not defined    foo()</code></pre><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    a &#x3D; 200    print(a)  # 200if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    a &#x3D; 100    foo()    print(a)  # 100</code></pre><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def foo():    global a    a &#x3D; 200    print(a)  # 200if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    a &#x3D; 100    foo()    print(a)  # 200</code></pre><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B">迪米特法则</a>的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用<a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>，这个我们在后续的内容中进行讲解。</p><blockquote><p><strong>说明：</strong> 很多人经常会将“闭包”和<a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">“匿名函数”</a>混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看<a href="https://zh.wikipedia.org/wiki/">维基百科</a>的解释或者<a href="https://www.zhihu.com/">知乎</a>上对这个概念的讨论。</p></blockquote><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    # Todo: Add your code here    passif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.字符串和常用数据结构</title>
      <link href="/2024/07/01/07.zi-fu-chuan-he-chang-yong-shu-ju-jie-gou/"/>
      <url>/2024/07/01/07.zi-fu-chuan-he-chang-yong-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><p>第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完成约5000次浮点运算。随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作这些文本信息，就必须要先了解字符串类型以及与它相关的知识。</p><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，一般记为<img src="/./res/formula_5.png" alt="$${\displaystyle s=a_{1}a_{2}\dots a_{n}(0\leq n \leq \infty)}$$">。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><pre class="language-Python" data-language="Python"><code class="language-Python">s1 &#x3D; &#39;hello, world!&#39;s2 &#x3D; &quot;hello, world!&quot;# 以三个双引号或单引号开头的字符串可以折行s3 &#x3D; &quot;&quot;&quot;hello, world!&quot;&quot;&quot;print(s1, s2, s3, end&#x3D;&#39;&#39;)</code></pre><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><pre class="language-Python" data-language="Python"><code class="language-Python">s1 &#x3D; &#39;\&#39;hello, world!\&#39;&#39;s2 &#x3D; &#39;\n\\hello, world!\\\n&#39;print(s1, s2, end&#x3D;&#39;&#39;)</code></pre><p>在<code>\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\141</code>和<code>\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。也可以在<code>\</code>后面跟Unicode字符编码来表示字符，例如<code>\u9a86\u660a</code>代表的是中文“骆昊”。运行下面的代码，看看输出了什么。</p><pre class="language-Python" data-language="Python"><code class="language-Python">s1 &#x3D; &#39;\141\142\143\x61\x62\x63&#39;s2 &#x3D; &#39;\u9a86\u660a&#39;print(s1, s2)</code></pre><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明，再看看下面的代码又会输出什么。</p><pre class="language-Python" data-language="Python"><code class="language-Python">s1 &#x3D; r&#39;\&#39;hello, world!\&#39;&#39;s2 &#x3D; r&#39;\n\\hello, world!\\\n&#39;print(s1, s2, end&#x3D;&#39;&#39;)</code></pre><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">s1 &#x3D; &#39;hello &#39; * 3print(s1) # hello hello hello s2 &#x3D; &#39;world&#39;s1 +&#x3D; s2print(s1) # hello hello hello worldprint(&#39;ll&#39; in s1) # Trueprint(&#39;good&#39; in s1) # Falsestr2 &#x3D; &#39;abc123456&#39;# 从字符串中取出指定位置的字符(下标运算)print(str2[2]) # c# 字符串切片(从指定的开始索引到指定的结束索引)print(str2[2:5]) # c12print(str2[2:]) # c123456print(str2[2::2]) # c246print(str2[::2]) # ac246print(str2[::-1]) # 654321cbaprint(str2[-3:-1]) # 45</code></pre><p>在Python中，我们还可以通过一系列的方法来完成对字符串的处理，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">str1 &#x3D; &#39;hello, world!&#39;# 通过内置函数len计算字符串的长度print(len(str1)) # 13# 获得字符串首字母大写的拷贝print(str1.capitalize()) # Hello, world!# 获得字符串每个单词首字母大写的拷贝print(str1.title()) # Hello, World!# 获得字符串变大写后的拷贝print(str1.upper()) # HELLO, WORLD!# 从字符串中查找子串所在位置print(str1.find(&#39;or&#39;)) # 8print(str1.find(&#39;shit&#39;)) # -1# 与find类似但找不到子串时会引发异常# print(str1.index(&#39;or&#39;))# print(str1.index(&#39;shit&#39;))# 检查字符串是否以指定的字符串开头print(str1.startswith(&#39;He&#39;)) # Falseprint(str1.startswith(&#39;hel&#39;)) # True# 检查字符串是否以指定的字符串结尾print(str1.endswith(&#39;!&#39;)) # True# 将字符串以指定的宽度居中并在两侧填充指定的字符print(str1.center(50, &#39;*&#39;))# 将字符串以指定的宽度靠右放置左侧填充指定的字符print(str1.rjust(50, &#39; &#39;))str2 &#x3D; &#39;abc123456&#39;# 检查字符串是否由数字构成print(str2.isdigit())  # False# 检查字符串是否以字母构成print(str2.isalpha())  # False# 检查字符串是否以数字和字母构成print(str2.isalnum())  # Truestr3 &#x3D; &#39;  jackfrued@126.com &#39;print(str3)# 获得字符串修剪左右两侧空格之后的拷贝print(str3.strip())</code></pre><p>我们之前讲过，可以用下面的方式来格式化输出字符串。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a, b &#x3D; 5, 10print(&#39;%d * %d &#x3D; %d&#39; % (a, b, a * b))</code></pre><p>当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a, b &#x3D; 5, 10print(&#39;&#123;0&#125; * &#123;1&#125; &#x3D; &#123;2&#125;&#39;.format(a, b, a * b))</code></pre><p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a, b &#x3D; 5, 10print(f&#39;&#123;a&#125; * &#123;b&#125; &#x3D; &#123;a * b&#125;&#39;)</code></pre><p>除了字符串，Python还内置了多种类型的数据结构，如果要在程序中保存和操作数据，绝大多数时候可以利用现有的数据结构来实现，最常用的包括列表、元组、集合和字典。</p><h3 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h3><p>不知道大家是否注意到，刚才我们讲到的字符串类型（<code>str</code>）和之前我们讲到的数值类型（<code>int</code>和<code>float</code>）有一些区别。数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><p>下面的代码演示了如何定义列表、如何遍历列表以及列表的下标运算。</p><pre class="language-Python" data-language="Python"><code class="language-Python">list1 &#x3D; [1, 3, 5, 7, 100]print(list1) # [1, 3, 5, 7, 100]# 乘号表示列表元素的重复list2 &#x3D; [&#39;hello&#39;] * 3print(list2) # [&#39;hello&#39;, &#39;hello&#39;, &#39;hello&#39;]# 计算列表长度(元素个数)print(len(list1)) # 5# 下标(索引)运算print(list1[0]) # 1print(list1[4]) # 100# print(list1[5])  # IndexError: list index out of rangeprint(list1[-1]) # 100print(list1[-3]) # 5list1[2] &#x3D; 300print(list1) # [1, 3, 300, 7, 100]# 通过循环用下标遍历列表元素for index in range(len(list1)):    print(list1[index])# 通过for循环遍历列表元素for elem in list1:    print(elem)# 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值for index, elem in enumerate(list1):    print(index, elem)</code></pre><p>下面的代码演示了如何向列表中添加元素以及如何从列表中移除元素。</p><pre class="language-Python" data-language="Python"><code class="language-Python">list1 &#x3D; [1, 3, 5, 7, 100]# 添加元素list1.append(200)list1.insert(1, 400)# 合并两个列表# list1.extend([1000, 2000])list1 +&#x3D; [1000, 2000]print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000]print(len(list1)) # 9# 先通过成员运算判断元素是否在列表中，如果存在就删除该元素if 3 in list1:list1.remove(3)if 1234 in list1:    list1.remove(1234)print(list1) # [1, 400, 5, 7, 100, 200, 1000, 2000]# 从指定的位置删除元素list1.pop(0)list1.pop(len(list1) - 1)print(list1) # [400, 5, 7, 100, 200, 1000]# 清空列表元素list1.clear()print(list1) # []</code></pre><p>和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">fruits &#x3D; [&#39;grape&#39;, &#39;apple&#39;, &#39;strawberry&#39;, &#39;waxberry&#39;]fruits +&#x3D; [&#39;pitaya&#39;, &#39;pear&#39;, &#39;mango&#39;]# 列表切片fruits2 &#x3D; fruits[1:4]print(fruits2) # apple strawberry waxberry# 可以通过完整切片操作来复制列表fruits3 &#x3D; fruits[:]print(fruits3) # [&#39;grape&#39;, &#39;apple&#39;, &#39;strawberry&#39;, &#39;waxberry&#39;, &#39;pitaya&#39;, &#39;pear&#39;, &#39;mango&#39;]fruits4 &#x3D; fruits[-3:-1]print(fruits4) # [&#39;pitaya&#39;, &#39;pear&#39;]# 可以通过反向切片操作来获得倒转后的列表的拷贝fruits5 &#x3D; fruits[::-1]print(fruits5) # [&#39;mango&#39;, &#39;pear&#39;, &#39;pitaya&#39;, &#39;waxberry&#39;, &#39;strawberry&#39;, &#39;apple&#39;, &#39;grape&#39;]</code></pre><p>下面的代码实现了对列表的排序操作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">list1 &#x3D; [&#39;orange&#39;, &#39;apple&#39;, &#39;zoo&#39;, &#39;internationalization&#39;, &#39;blueberry&#39;]list2 &#x3D; sorted(list1)# sorted函数返回列表排序后的拷贝不会修改传入的列表# 函数的设计就应该像sorted函数一样尽可能不产生副作用list3 &#x3D; sorted(list1, reverse&#x3D;True)# 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序list4 &#x3D; sorted(list1, key&#x3D;len)print(list1)print(list2)print(list3)print(list4)# 给列表对象发出排序消息直接在列表对象上进行排序list1.sort(reverse&#x3D;True)print(list1)</code></pre><h3 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h3><p>我们还可以使用列表的生成式语法来创建列表，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">f &#x3D; [x for x in range(1, 10)]print(f)f &#x3D; [x + y for x in &#39;ABCDE&#39; for y in &#39;1234567&#39;]print(f)# 用列表的生成表达式语法创建列表容器# 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间f &#x3D; [x ** 2 for x in range(1, 1000)]print(sys.getsizeof(f))  # 查看对象占用内存的字节数print(f)# 请注意下面的代码创建的不是一个列表而是一个生成器对象# 通过生成器可以获取到数据但它不占用额外的空间存储数据# 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)f &#x3D; (x ** 2 for x in range(1, 1000))print(sys.getsizeof(f))  # 相比生成式生成器不占用存储数据的空间print(f)for val in f:    print(val)</code></pre><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波拉切数列</a>的生成器。所谓斐波拉切数列可以通过下面<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的方法来进行定义：</p><p><img src="/./res/formula_6.png" alt="$${\displaystyle F_{0}=0}$$"></p><p><img src="/./res/formula_7.png" alt="$${\displaystyle F_{1}=1}$$"></p><p><img src="/./res/formula_8.png" alt="$${\displaystyle F_{n}=F_{n-1}+F_{n-2}}({n}\geq{2})$$"></p><p><img src="/./res/fibonacci-blocks.png"></p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(n):    a, b &#x3D; 0, 1    for _ in range(n):        a, b &#x3D; b, a + b        yield adef main():    for val in fib(20):        print(val)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h3><p>Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，在前面的代码中我们已经不止一次使用过元组了。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据。下面的代码演示了如何定义和使用元组。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 定义元组t &#x3D; (&#39;骆昊&#39;, 38, True, &#39;四川成都&#39;)print(t)# 获取元组中的元素print(t[0])print(t[3])# 遍历元组中的值for member in t:    print(member)# 重新给元组赋值# t[0] &#x3D; &#39;王大锤&#39;  # TypeError# 变量t重新引用了新的元组原来的元组将被垃圾回收t &#x3D; (&#39;王大锤&#39;, 20, True, &#39;云南昆明&#39;)print(t)# 将元组转换成列表person &#x3D; list(t)print(person)# 列表是可以修改它的元素的person[0] &#x3D; &#39;李小龙&#39;person[1] &#x3D; 25print(person)# 将列表转换成元组fruits_list &#x3D; [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;]fruits_tuple &#x3D; tuple(fruits_list)print(fruits_tuple)</code></pre><p>这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢？</p><ol><li>元组中的元素是无法修改的，事实上我们在项目中尤其是<a href="https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</li><li>元组在创建时间和占用的空间上面都优于列表。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间，下图是我的macOS系统上测试的结果。</li></ol><p><img src="/./res/ipython-timeit.png"></p><h3 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h3><p>Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><p><img src="/./res/python-set.png"></p><p>可以按照下面代码所示的方式来创建和使用集合。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 创建集合的字面量语法set1 &#x3D; &#123;1, 2, 3, 3, 3, 2&#125;print(set1)print(&#39;Length &#x3D;&#39;, len(set1))# 创建集合的构造器语法(面向对象部分会进行详细讲解)set2 &#x3D; set(range(1, 10))set3 &#x3D; set((1, 2, 3, 3, 2, 1))print(set2, set3)# 创建集合的推导式语法(推导式也可以用于推导集合)set4 &#x3D; &#123;num for num in range(1, 100) if num % 3 &#x3D;&#x3D; 0 or num % 5 &#x3D;&#x3D; 0&#125;print(set4)</code></pre><p>向集合添加元素和从集合删除元素。</p><pre class="language-Python" data-language="Python"><code class="language-Python">set1.add(4)set1.add(5)set2.update([11, 12])set2.discard(5)if 4 in set2:    set2.remove(4)print(set1, set2)print(set3.pop())print(set3)</code></pre><p>集合的成员、交集、并集、差集等运算。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 集合的交集、并集、差集、对称差运算print(set1 &amp; set2)# print(set1.intersection(set2))print(set1 | set2)# print(set1.union(set2))print(set1 - set2)# print(set1.difference(set2))print(set1 ^ set2)# print(set1.symmetric_difference(set2))# 判断子集和超集print(set2 &lt;&#x3D; set1)# print(set2.issubset(set1))print(set3 &lt;&#x3D; set1)# print(set3.issubset(set1))print(set1 &gt;&#x3D; set2)# print(set1.issuperset(set2))print(set1 &gt;&#x3D; set3)# print(set1.issuperset(set3))</code></pre><blockquote><p><strong>说明：</strong> Python中允许通过一些特殊的方法来为某种类型或数据结构自定义运算符（后面的章节中会讲到），上面的代码中我们对集合进行运算的时候可以调用集合对象的方法，也可以直接使用对应的运算符，例如<code>&amp;</code>运算符跟intersection方法的作用就是一样的，但是使用运算符让代码更加直观。</p></blockquote><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p>字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 创建字典的字面量语法scores &#x3D; &#123;&#39;骆昊&#39;: 95, &#39;白元芳&#39;: 78, &#39;狄仁杰&#39;: 82&#125;print(scores)# 创建字典的构造器语法items1 &#x3D; dict(one&#x3D;1, two&#x3D;2, three&#x3D;3, four&#x3D;4)# 通过zip函数将两个序列压成字典items2 &#x3D; dict(zip([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;123&#39;))# 创建字典的推导式语法items3 &#x3D; &#123;num: num ** 2 for num in range(1, 10)&#125;print(items1, items2, items3)# 通过键可以获取字典中对应的值print(scores[&#39;骆昊&#39;])print(scores[&#39;狄仁杰&#39;])# 对字典中所有键值对进行遍历for key in scores:    print(f&#39;&#123;key&#125;: &#123;scores[key]&#125;&#39;)# 更新字典中的元素scores[&#39;白元芳&#39;] &#x3D; 65scores[&#39;诸葛王朗&#39;] &#x3D; 71scores.update(冷面&#x3D;67, 方启鹤&#x3D;85)print(scores)if &#39;武则天&#39; in scores:    print(scores[&#39;武则天&#39;])print(scores.get(&#39;武则天&#39;))# get方法也是通过键获取对应的值但是可以设置默认值print(scores.get(&#39;武则天&#39;, 60))# 删除字典中的元素print(scores.popitem())print(scores.popitem())print(scores.pop(&#39;骆昊&#39;, 100))# 清空字典scores.clear()print(scores)</code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：在屏幕上显示跑马灯文字。"><a href="#练习1：在屏幕上显示跑马灯文字。" class="headerlink" title="练习1：在屏幕上显示跑马灯文字。"></a>练习1：在屏幕上显示跑马灯文字。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import osimport timedef main():    content &#x3D; &#39;北京欢迎你为你开天辟地…………&#39;    while True:        # 清理屏幕上的输出        os.system(&#39;cls&#39;)  # os.system(&#39;clear&#39;)        print(content)        # 休眠200毫秒        time.sleep(0.2)        content &#x3D; content[1:] + content[0]if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"><a href="#练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。" class="headerlink" title="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"></a>练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomdef generate_code(code_len&#x3D;4):    &quot;&quot;&quot;    生成指定长度的验证码    :param code_len: 验证码的长度(默认4个字符)    :return: 由大小写英文字母和数字构成的随机验证码    &quot;&quot;&quot;    all_chars &#x3D; &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;    last_pos &#x3D; len(all_chars) - 1    code &#x3D; &#39;&#39;    for _ in range(code_len):        index &#x3D; random.randint(0, last_pos)        code +&#x3D; all_chars[index]    return code</code></pre><h4 id="练习3：设计一个函数返回给定文件名的后缀名。"><a href="#练习3：设计一个函数返回给定文件名的后缀名。" class="headerlink" title="练习3：设计一个函数返回给定文件名的后缀名。"></a>练习3：设计一个函数返回给定文件名的后缀名。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def get_suffix(filename, has_dot&#x3D;False):    &quot;&quot;&quot;    获取文件名的后缀名    :param filename: 文件名    :param has_dot: 返回的后缀名是否需要带点    :return: 文件的后缀名    &quot;&quot;&quot;    pos &#x3D; filename.rfind(&#39;.&#39;)    if 0 &lt; pos &lt; len(filename) - 1:        index &#x3D; pos if has_dot else pos + 1        return filename[index:]    else:        return &#39;&#39;</code></pre><h4 id="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"><a href="#练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。" class="headerlink" title="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"></a>练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def max2(x):    m1, m2 &#x3D; (x[0], x[1]) if x[0] &gt; x[1] else (x[1], x[0])    for index in range(2, len(x)):        if x[index] &gt; m1:            m2 &#x3D; m1            m1 &#x3D; x[index]        elif x[index] &gt; m2:            m2 &#x3D; x[index]    return m1, m2</code></pre><h4 id="练习5：计算指定的年月日是这一年的第几天。"><a href="#练习5：计算指定的年月日是这一年的第几天。" class="headerlink" title="练习5：计算指定的年月日是这一年的第几天。"></a>练习5：计算指定的年月日是这一年的第几天。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def is_leap_year(year):    &quot;&quot;&quot;    判断指定的年份是不是闰年    :param year: 年份    :return: 闰年返回True平年返回False    &quot;&quot;&quot;    return year % 4 &#x3D;&#x3D; 0 and year % 100 !&#x3D; 0 or year % 400 &#x3D;&#x3D; 0def which_day(year, month, date):    &quot;&quot;&quot;    计算传入的日期是这一年的第几天    :param year: 年    :param month: 月    :param date: 日    :return: 第几天    &quot;&quot;&quot;    days_of_month &#x3D; [        [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]    ][is_leap_year(year)]    total &#x3D; 0    for index in range(month - 1):        total +&#x3D; days_of_month[index]    return total + datedef main():    print(which_day(1980, 11, 28))    print(which_day(1981, 12, 31))    print(which_day(2018, 1, 1))    print(which_day(2016, 3, 1))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="练习6：打印杨辉三角。"><a href="#练习6：打印杨辉三角。" class="headerlink" title="练习6：打印杨辉三角。"></a>练习6：打印<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">杨辉三角</a>。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    num &#x3D; int(input(&#39;Number of rows: &#39;))    yh &#x3D; [[]] * num    for row in range(len(yh)):        yh[row] &#x3D; [None] * (row + 1)        for col in range(len(yh[row])):            if col &#x3D;&#x3D; 0 or col &#x3D;&#x3D; row:                yh[row][col] &#x3D; 1            else:                yh[row][col] &#x3D; yh[row - 1][col] + yh[row - 1][col - 1]            print(yh[row][col], end&#x3D;&#39;\t&#39;)        print()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：双色球选号。"><a href="#案例1：双色球选号。" class="headerlink" title="案例1：双色球选号。"></a>案例1：双色球选号。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randrange, randint, sampledef display(balls):    &quot;&quot;&quot;    输出列表中的双色球号码    &quot;&quot;&quot;    for index, ball in enumerate(balls):        if index &#x3D;&#x3D; len(balls) - 1:            print(&#39;|&#39;, end&#x3D;&#39; &#39;)        print(&#39;%02d&#39; % ball, end&#x3D;&#39; &#39;)    print()def random_select():    &quot;&quot;&quot;    随机选择一组号码    &quot;&quot;&quot;    red_balls &#x3D; [x for x in range(1, 34)]    selected_balls &#x3D; []    selected_balls &#x3D; sample(red_balls, 6)    selected_balls.sort()    selected_balls.append(randint(1, 16))    return selected_ballsdef main():    n &#x3D; int(input(&#39;机选几注: &#39;))    for _ in range(n):        display(random_select())if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明：</strong> 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。</p></blockquote><h4 id="综合案例2：约瑟夫环问题。"><a href="#综合案例2：约瑟夫环问题。" class="headerlink" title="综合案例2：约瑟夫环问题。"></a>综合案例2：<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环问题</a>。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;《幸运的基督徒》有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。&quot;&quot;&quot;def main():    persons &#x3D; [True] * 30    counter, index, number &#x3D; 0, 0, 0    while counter &lt; 15:        if persons[index]:            number +&#x3D; 1            if number &#x3D;&#x3D; 9:                persons[index] &#x3D; False                counter +&#x3D; 1                number &#x3D; 0        index +&#x3D; 1        index %&#x3D; 30    for person in persons:        print(&#39;基&#39; if person else &#39;非&#39;, end&#x3D;&#39;&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="综合案例3：井字棋游戏。"><a href="#综合案例3：井字棋游戏。" class="headerlink" title="综合案例3：井字棋游戏。"></a>综合案例3：<a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%AD%97%E6%A3%8B">井字棋</a>游戏。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import osdef print_board(board):    print(board[&#39;TL&#39;] + &#39;|&#39; + board[&#39;TM&#39;] + &#39;|&#39; + board[&#39;TR&#39;])    print(&#39;-+-+-&#39;)    print(board[&#39;ML&#39;] + &#39;|&#39; + board[&#39;MM&#39;] + &#39;|&#39; + board[&#39;MR&#39;])    print(&#39;-+-+-&#39;)    print(board[&#39;BL&#39;] + &#39;|&#39; + board[&#39;BM&#39;] + &#39;|&#39; + board[&#39;BR&#39;])def main():    init_board &#x3D; &#123;        &#39;TL&#39;: &#39; &#39;, &#39;TM&#39;: &#39; &#39;, &#39;TR&#39;: &#39; &#39;,        &#39;ML&#39;: &#39; &#39;, &#39;MM&#39;: &#39; &#39;, &#39;MR&#39;: &#39; &#39;,        &#39;BL&#39;: &#39; &#39;, &#39;BM&#39;: &#39; &#39;, &#39;BR&#39;: &#39; &#39;    &#125;    begin &#x3D; True    while begin:        curr_board &#x3D; init_board.copy()        begin &#x3D; False        turn &#x3D; &#39;x&#39;        counter &#x3D; 0        os.system(&#39;clear&#39;)        print_board(curr_board)        while counter &lt; 9:            move &#x3D; input(&#39;轮到%s走棋, 请输入位置: &#39; % turn)            if curr_board[move] &#x3D;&#x3D; &#39; &#39;:                counter +&#x3D; 1                curr_board[move] &#x3D; turn                if turn &#x3D;&#x3D; &#39;x&#39;:                    turn &#x3D; &#39;o&#39;                else:                    turn &#x3D; &#39;x&#39;            os.system(&#39;clear&#39;)            print_board(curr_board)        choice &#x3D; input(&#39;再玩一局?(yes|no)&#39;)        begin &#x3D; choice &#x3D;&#x3D; &#39;yes&#39;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明：</strong> 最后这个案例来自<a href="https://item.jd.com/11943853.html">《Python编程快速上手:让繁琐工作自动化》</a>一书（这本书对有编程基础想迅速使用Python将日常工作自动化的人来说还是不错的选择），对代码做了一点点的调整。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.面向对象编程基础</title>
      <link href="/2024/07/01/08.mian-xiang-dui-xiang-bian-cheng-ji-chu/"/>
      <url>/2024/07/01/08.mian-xiang-dui-xiang-bian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程基础"><a href="#面向对象编程基础" class="headerlink" title="面向对象编程基础"></a>面向对象编程基础</h2><p>活在当下的程序员应该都听过&quot;面向对象编程&quot;一词，也经常有人问能不能用一句话解释下什么是&quot;面向对象编程&quot;，我们先来看看比较正式的说法。</p><p>&quot;把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。&quot;</p><p>这样一说是不是更不明白了。所以我们还是看看更通俗易懂的说法，下面这段内容来自于<a href="https://www.zhihu.com/">知乎</a>。</p><p><img src="/./res/oop-zhihu.png"></p><blockquote><p><strong>说明：</strong> 以上的内容来自于网络，不代表作者本人的观点和看法，与作者本人立场无关，相关责任不由作者承担。</p></blockquote><p>之前我们说过&quot;<strong>程序是指令的集合</strong>&quot;，我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行。当然为了简化程序的设计，我们引入了函数的概念，把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可；如果一个函数的功能过于复杂和臃肿，我们又可以进一步将函数继续切分为子函数来降低系统的复杂性。但是说了这么多，不知道大家是否发现，所谓编程就是程序员按照计算机的工作方式控制计算机完成各种任务。但是，计算机的工作方式与正常人类的思维模式是不同的，如果编程就必须得抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，&quot;每个人都应该学习编程&quot;这样的豪言壮语就只能说说而已。当然，这些还不是最重要的，最重要的是当我们需要开发一个复杂的系统时，代码的复杂性会让开发和维护工作都变得举步维艰，所以在上世纪60年代末期，&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA">软件危机</a>&quot;、&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>&quot;等一系列的概念开始在行业中出现。</p><p>当然，程序员圈子内的人都知道，现实中并没有解决上面所说的这些问题的&quot;<a href="https://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9">银弹</a>&quot;，真正让软件开发者看到希望的是上世纪70年代诞生的<a href="https://zh.wikipedia.org/wiki/Smalltalk">Smalltalk</a>编程语言中引入的面向对象的编程思想（面向对象编程的雏形可以追溯到更早期的<a href="https://zh.wikipedia.org/wiki/Simula">Simula</a>语言）。按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。</p><blockquote><p><strong>说明：</strong> 当然面向对象也不是解决软件开发中所有问题的最后的“银弹”，所以今天的高级程序设计语言几乎都提供了对多种编程范式的支持，Python也不例外。</p></blockquote><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。</p><p><img src="/./res/object-feature.png"></p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Student(object):    # __init__是一个特殊方法用于在创建对象时进行初始化操作    # 通过这个方法我们可以为学生对象绑定name和age两个属性    def __init__(self, name, age):        self.name &#x3D; name        self.age &#x3D; age    def study(self, course_name):        print(&#39;%s正在学习%s.&#39; % (self.name, course_name))    # PEP 8要求标识符的名字用全小写多个单词用下划线连接    # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)    def watch_movie(self):        if self.age &lt; 18:            print(&#39;%s只能观看《熊出没》.&#39; % self.name)        else:            print(&#39;%s正在观看岛国爱情大电影.&#39; % self.name)</code></pre><blockquote><p><strong>说明：</strong> 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p></blockquote><h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><p>当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    # 创建学生对象并指定姓名和年龄    stu1 &#x3D; Student(&#39;骆昊&#39;, 38)    # 给对象发study消息    stu1.study(&#39;Python程序设计&#39;)    # 给对象发watch_av消息    stu1.watch_movie()    stu2 &#x3D; Student(&#39;王大锤&#39;, 15)    stu2.study(&#39;思想品德&#39;)    stu2.watch_movie()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="访问可见性问题"><a href="#访问可见性问题" class="headerlink" title="访问可见性问题"></a>访问可见性问题</h3><p>对于上面的代码，有C++、Java、C#等编程经验的程序员可能会问，我们给<code>Student</code>对象绑定的<code>name</code>和<code>age</code>属性到底具有怎样的访问权限（也称为可见性）。因为在很多面向对象编程语言中，我们通常会将对象的属性设置为私有的（private）或受保护的（protected），简单的说就是不允许外界访问，而对象的方法通常都是公开的（public），因为公开的方法就是对象能够接受的消息。在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Test:    def __init__(self, foo):        self.__foo &#x3D; foo    def __bar(self):        print(self.__foo)        print(&#39;__bar&#39;)def main():    test &#x3D; Test(&#39;hello&#39;)    # AttributeError: &#39;Test&#39; object has no attribute &#39;__bar&#39;    test.__bar()    # AttributeError: &#39;Test&#39; object has no attribute &#39;__foo&#39;    print(test.__foo)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是&quot;<strong>We are all consenting adults here</strong>&quot;。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Test:    def __init__(self, foo):        self.__foo &#x3D; foo    def __bar(self):        print(self.__foo)        print(&#39;__bar&#39;)def main():    test &#x3D; Test(&#39;hello&#39;)    test._Test__bar()    print(test._Test__foo)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻，关于这一点可以看看我的<a href="http://blog.csdn.net/jackfrued/article/details/79521404">《Python - 那些年我们踩过的那些坑》</a>文章中的讲解。</p><h3 id="面向对象的支柱"><a href="#面向对象的支柱" class="headerlink" title="面向对象的支柱"></a>面向对象的支柱</h3><p>面向对象有三大支柱：封装、继承和多态。后面两个概念在下一个章节中进行详细的说明，这里我们先说一下什么是封装。我自己对封装的理解是&quot;隐藏一切可以隐藏的实现细节，只向外界暴露（提供）简单的编程接口&quot;。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：定义一个类描述数字时钟。"><a href="#练习1：定义一个类描述数字时钟。" class="headerlink" title="练习1：定义一个类描述数字时钟。"></a>练习1：定义一个类描述数字时钟。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from time import sleepclass Clock(object):    &quot;&quot;&quot;数字时钟&quot;&quot;&quot;    def __init__(self, hour&#x3D;0, minute&#x3D;0, second&#x3D;0):        &quot;&quot;&quot;初始化方法        :param hour: 时        :param minute: 分        :param second: 秒        &quot;&quot;&quot;        self._hour &#x3D; hour        self._minute &#x3D; minute        self._second &#x3D; second    def run(self):        &quot;&quot;&quot;走字&quot;&quot;&quot;        self._second +&#x3D; 1        if self._second &#x3D;&#x3D; 60:            self._second &#x3D; 0            self._minute +&#x3D; 1            if self._minute &#x3D;&#x3D; 60:                self._minute &#x3D; 0                self._hour +&#x3D; 1                if self._hour &#x3D;&#x3D; 24:                    self._hour &#x3D; 0    def show(self):        &quot;&quot;&quot;显示时间&quot;&quot;&quot;        return &#39;%02d:%02d:%02d&#39; % \               (self._hour, self._minute, self._second)def main():    clock &#x3D; Clock(23, 59, 58)    while True:        print(clock.show())        sleep(1)        clock.run()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"><a href="#练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。" class="headerlink" title="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"></a>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</h4><p>参考答案：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from math import sqrtclass Point(object):    def __init__(self, x&#x3D;0, y&#x3D;0):        &quot;&quot;&quot;初始化方法                :param x: 横坐标        :param y: 纵坐标        &quot;&quot;&quot;        self.x &#x3D; x        self.y &#x3D; y    def move_to(self, x, y):        &quot;&quot;&quot;移动到指定位置                :param x: 新的横坐标        &quot;param y: 新的纵坐标        &quot;&quot;&quot;        self.x &#x3D; x        self.y &#x3D; y    def move_by(self, dx, dy):        &quot;&quot;&quot;移动指定的增量                :param dx: 横坐标的增量        &quot;param dy: 纵坐标的增量        &quot;&quot;&quot;        self.x +&#x3D; dx        self.y +&#x3D; dy    def distance_to(self, other):        &quot;&quot;&quot;计算与另一个点的距离                :param other: 另一个点        &quot;&quot;&quot;        dx &#x3D; self.x - other.x        dy &#x3D; self.y - other.y        return sqrt(dx ** 2 + dy ** 2)    def __str__(self):        return &#39;(%s, %s)&#39; % (str(self.x), str(self.y))def main():    p1 &#x3D; Point(3, 5)    p2 &#x3D; Point()    print(p1)    print(p2)    p2.move_by(-1, 2)    print(p2)    print(p1.distance_to(p2))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明：</strong> 本章中的插图来自于Grady Booch等著作的<a href="https://item.jd.com/20476561918.html">《面向对象分析与设计》</a>一书，该书是讲解面向对象编程的经典著作，有兴趣的读者可以购买和阅读这本书来了解更多的面向对象的相关知识。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.面向对象进阶</title>
      <link href="/2024/07/01/09.mian-xiang-dui-xiang-jin-jie/"/>
      <url>/2024/07/01/09.mian-xiang-dui-xiang-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><p>在前面的章节我们已经了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。</p><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Person(object):    def __init__(self, name, age):        self._name &#x3D; name        self._age &#x3D; age    # 访问器 - getter方法    @property    def name(self):        return self._name    # 访问器 - getter方法    @property    def age(self):        return self._age    # 修改器 - setter方法    @age.setter    def age(self, age):        self._age &#x3D; age    def play(self):        if self._age &lt;&#x3D; 16:            print(&#39;%s正在玩飞行棋.&#39; % self._name)        else:            print(&#39;%s正在玩斗地主.&#39; % self._name)def main():    person &#x3D; Person(&#39;王大锤&#39;, 12)    person.play()    person.age &#x3D; 22    person.play()    # person.name &#x3D; &#39;白元芳&#39;  # AttributeError: can&#39;t set attributeif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a>__slots__魔法</h3><p>我们讲到这里，不知道大家是否已经意识到，Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Person(object):    # 限定Person对象只能绑定_name, _age和_gender属性    __slots__ &#x3D; (&#39;_name&#39;, &#39;_age&#39;, &#39;_gender&#39;)    def __init__(self, name, age):        self._name &#x3D; name        self._age &#x3D; age    @property    def name(self):        return self._name    @property    def age(self):        return self._age    @age.setter    def age(self, age):        self._age &#x3D; age    def play(self):        if self._age &lt;&#x3D; 16:            print(&#39;%s正在玩飞行棋.&#39; % self._name)        else:            print(&#39;%s正在玩斗地主.&#39; % self._name)def main():    person &#x3D; Person(&#39;王大锤&#39;, 22)    person.play()    person._gender &#x3D; &#39;男&#39;    # AttributeError: &#39;Person&#39; object has no attribute &#39;_is_gay&#39;    # person._is_gay &#x3D; True</code></pre><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from math import sqrtclass Triangle(object):    def __init__(self, a, b, c):        self._a &#x3D; a        self._b &#x3D; b        self._c &#x3D; c    @staticmethod    def is_valid(a, b, c):        return a + b &gt; c and b + c &gt; a and a + c &gt; b    def perimeter(self):        return self._a + self._b + self._c    def area(self):        half &#x3D; self.perimeter() &#x2F; 2        return sqrt(half * (half - self._a) *                    (half - self._b) * (half - self._c))def main():    a, b, c &#x3D; 3, 4, 5    # 静态方法和类方法都是通过给类发消息来调用的    if Triangle.is_valid(a, b, c):        t &#x3D; Triangle(a, b, c)        print(t.perimeter())        # 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数        # print(Triangle.perimeter(t))        print(t.area())        # print(Triangle.area(t))    else:        print(&#39;无法构成三角形.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from time import time, localtime, sleepclass Clock(object):    &quot;&quot;&quot;数字时钟&quot;&quot;&quot;    def __init__(self, hour&#x3D;0, minute&#x3D;0, second&#x3D;0):        self._hour &#x3D; hour        self._minute &#x3D; minute        self._second &#x3D; second    @classmethod    def now(cls):        ctime &#x3D; localtime(time())        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)    def run(self):        &quot;&quot;&quot;走字&quot;&quot;&quot;        self._second +&#x3D; 1        if self._second &#x3D;&#x3D; 60:            self._second &#x3D; 0            self._minute +&#x3D; 1            if self._minute &#x3D;&#x3D; 60:                self._minute &#x3D; 0                self._hour +&#x3D; 1                if self._hour &#x3D;&#x3D; 24:                    self._hour &#x3D; 0    def show(self):        &quot;&quot;&quot;显示时间&quot;&quot;&quot;        return &#39;%02d:%02d:%02d&#39; % \               (self._hour, self._minute, self._second)def main():    # 通过类方法创建对象并获取系统时间    clock &#x3D; Clock.now()    while True:        print(clock.show())        sleep(1)        clock.run()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><p>我们可以使用一种叫做<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">UML</a>（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来。关于UML我们在这里不做详细的介绍，有兴趣的读者可以自行阅读<a href="https://e.jd.com/30392949.html">《UML面向对象设计基础》</a>一书。</p><p><img src="/./res/uml-components.png"></p><p><img src="/./res/uml-example.png"></p><p>利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。</p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为<a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a>。下面我们先看一个继承的例子。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Person(object):    &quot;&quot;&quot;人&quot;&quot;&quot;    def __init__(self, name, age):        self._name &#x3D; name        self._age &#x3D; age    @property    def name(self):        return self._name    @property    def age(self):        return self._age    @age.setter    def age(self, age):        self._age &#x3D; age    def play(self):        print(&#39;%s正在愉快的玩耍.&#39; % self._name)    def watch_av(self):        if self._age &gt;&#x3D; 18:            print(&#39;%s正在观看爱情动作片.&#39; % self._name)        else:            print(&#39;%s只能观看《熊出没》.&#39; % self._name)class Student(Person):    &quot;&quot;&quot;学生&quot;&quot;&quot;    def __init__(self, name, age, grade):        super().__init__(name, age)        self._grade &#x3D; grade    @property    def grade(self):        return self._grade    @grade.setter    def grade(self, grade):        self._grade &#x3D; grade    def study(self, course):        print(&#39;%s的%s正在学习%s.&#39; % (self._grade, self._name, course))class Teacher(Person):    &quot;&quot;&quot;老师&quot;&quot;&quot;    def __init__(self, name, age, title):        super().__init__(name, age)        self._title &#x3D; title    @property    def title(self):        return self._title    @title.setter    def title(self, title):        self._title &#x3D; title    def teach(self, course):        print(&#39;%s%s正在讲%s.&#39; % (self._name, self._title, course))def main():    stu &#x3D; Student(&#39;王大锤&#39;, 15, &#39;初三&#39;)    stu.study(&#39;数学&#39;)    stu.watch_av()    t &#x3D; Teacher(&#39;骆昊&#39;, 38, &#39;砖家&#39;)    t.teach(&#39;Python程序设计&#39;)    t.watch_av()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from abc import ABCMeta, abstractmethodclass Pet(object, metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;宠物&quot;&quot;&quot;    def __init__(self, nickname):        self._nickname &#x3D; nickname    @abstractmethod    def make_voice(self):        &quot;&quot;&quot;发出声音&quot;&quot;&quot;        passclass Dog(Pet):    &quot;&quot;&quot;狗&quot;&quot;&quot;    def make_voice(self):        print(&#39;%s: 汪汪汪...&#39; % self._nickname)class Cat(Pet):    &quot;&quot;&quot;猫&quot;&quot;&quot;    def make_voice(self):        print(&#39;%s: 喵...喵...&#39; % self._nickname)def main():    pets &#x3D; [Dog(&#39;旺财&#39;), Cat(&#39;凯蒂&#39;), Dog(&#39;大黄&#39;)]    for pet in pets:        pet.make_voice()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：奥特曼打小怪兽。"><a href="#案例1：奥特曼打小怪兽。" class="headerlink" title="案例1：奥特曼打小怪兽。"></a>案例1：奥特曼打小怪兽。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">from abc import ABCMeta, abstractmethodfrom random import randint, randrangeclass Fighter(object, metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;战斗者&quot;&quot;&quot;    # 通过__slots__魔法限定对象可以绑定的成员变量    __slots__ &#x3D; (&#39;_name&#39;, &#39;_hp&#39;)    def __init__(self, name, hp):        &quot;&quot;&quot;初始化方法        :param name: 名字        :param hp: 生命值        &quot;&quot;&quot;        self._name &#x3D; name        self._hp &#x3D; hp    @property    def name(self):        return self._name    @property    def hp(self):        return self._hp    @hp.setter    def hp(self, hp):        self._hp &#x3D; hp if hp &gt;&#x3D; 0 else 0    @property    def alive(self):        return self._hp &gt; 0    @abstractmethod    def attack(self, other):        &quot;&quot;&quot;攻击        :param other: 被攻击的对象        &quot;&quot;&quot;        passclass Ultraman(Fighter):    &quot;&quot;&quot;奥特曼&quot;&quot;&quot;    __slots__ &#x3D; (&#39;_name&#39;, &#39;_hp&#39;, &#39;_mp&#39;)    def __init__(self, name, hp, mp):        &quot;&quot;&quot;初始化方法        :param name: 名字        :param hp: 生命值        :param mp: 魔法值        &quot;&quot;&quot;        super().__init__(name, hp)        self._mp &#x3D; mp    def attack(self, other):        other.hp -&#x3D; randint(15, 25)    def huge_attack(self, other):        &quot;&quot;&quot;究极必杀技(打掉对方至少50点或四分之三的血)        :param other: 被攻击的对象        :return: 使用成功返回True否则返回False        &quot;&quot;&quot;        if self._mp &gt;&#x3D; 50:            self._mp -&#x3D; 50            injury &#x3D; other.hp * 3 &#x2F;&#x2F; 4            injury &#x3D; injury if injury &gt;&#x3D; 50 else 50            other.hp -&#x3D; injury            return True        else:            self.attack(other)            return False    def magic_attack(self, others):        &quot;&quot;&quot;魔法攻击        :param others: 被攻击的群体        :return: 使用魔法成功返回True否则返回False        &quot;&quot;&quot;        if self._mp &gt;&#x3D; 20:            self._mp -&#x3D; 20            for temp in others:                if temp.alive:                    temp.hp -&#x3D; randint(10, 15)            return True        else:            return False    def resume(self):        &quot;&quot;&quot;恢复魔法值&quot;&quot;&quot;        incr_point &#x3D; randint(1, 10)        self._mp +&#x3D; incr_point        return incr_point    def __str__(self):        return &#39;~~~%s奥特曼~~~\n&#39; % self._name + \            &#39;生命值: %d\n&#39; % self._hp + \            &#39;魔法值: %d\n&#39; % self._mpclass Monster(Fighter):    &quot;&quot;&quot;小怪兽&quot;&quot;&quot;    __slots__ &#x3D; (&#39;_name&#39;, &#39;_hp&#39;)    def attack(self, other):        other.hp -&#x3D; randint(10, 20)    def __str__(self):        return &#39;~~~%s小怪兽~~~\n&#39; % self._name + \            &#39;生命值: %d\n&#39; % self._hpdef is_any_alive(monsters):    &quot;&quot;&quot;判断有没有小怪兽是活着的&quot;&quot;&quot;    for monster in monsters:        if monster.alive &gt; 0:            return True    return Falsedef select_alive_one(monsters):    &quot;&quot;&quot;选中一只活着的小怪兽&quot;&quot;&quot;    monsters_len &#x3D; len(monsters)    while True:        index &#x3D; randrange(monsters_len)        monster &#x3D; monsters[index]        if monster.alive &gt; 0:            return monsterdef display_info(ultraman, monsters):    &quot;&quot;&quot;显示奥特曼和小怪兽的信息&quot;&quot;&quot;    print(ultraman)    for monster in monsters:        print(monster, end&#x3D;&#39;&#39;)def main():    u &#x3D; Ultraman(&#39;骆昊&#39;, 1000, 120)    m1 &#x3D; Monster(&#39;狄仁杰&#39;, 250)    m2 &#x3D; Monster(&#39;白元芳&#39;, 500)    m3 &#x3D; Monster(&#39;王大锤&#39;, 750)    ms &#x3D; [m1, m2, m3]    fight_round &#x3D; 1    while u.alive and is_any_alive(ms):        print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第%02d回合&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39; % fight_round)        m &#x3D; select_alive_one(ms)  # 选中一只小怪兽        skill &#x3D; randint(1, 10)   # 通过随机数选择使用哪种技能        if skill &lt;&#x3D; 6:  # 60%的概率使用普通攻击            print(&#39;%s使用普通攻击打了%s.&#39; % (u.name, m.name))            u.attack(m)            print(&#39;%s的魔法值恢复了%d点.&#39; % (u.name, u.resume()))        elif skill &lt;&#x3D; 9:  # 30%的概率使用魔法攻击(可能因魔法值不足而失败)            if u.magic_attack(ms):                print(&#39;%s使用了魔法攻击.&#39; % u.name)            else:                print(&#39;%s使用魔法失败.&#39; % u.name)        else:  # 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)            if u.huge_attack(m):                print(&#39;%s使用究极必杀技虐了%s.&#39; % (u.name, m.name))            else:                print(&#39;%s使用普通攻击打了%s.&#39; % (u.name, m.name))                print(&#39;%s的魔法值恢复了%d点.&#39; % (u.name, u.resume()))        if m.alive &gt; 0:  # 如果选中的小怪兽没有死就回击奥特曼            print(&#39;%s回击了%s.&#39; % (m.name, u.name))            m.attack(u)        display_info(u, ms)  # 每个回合结束后显示奥特曼和小怪兽的信息        fight_round +&#x3D; 1    print(&#39;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;战斗结束!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#39;)    if u.alive &gt; 0:        print(&#39;%s奥特曼胜利!&#39; % u.name)    else:        print(&#39;小怪兽胜利!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="案例2：扑克游戏。"><a href="#案例2：扑克游戏。" class="headerlink" title="案例2：扑克游戏。"></a>案例2：扑克游戏。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import randomclass Card(object):    &quot;&quot;&quot;一张牌&quot;&quot;&quot;    def __init__(self, suite, face):        self._suite &#x3D; suite        self._face &#x3D; face    @property    def face(self):        return self._face    @property    def suite(self):        return self._suite    def __str__(self):        if self._face &#x3D;&#x3D; 1:            face_str &#x3D; &#39;A&#39;        elif self._face &#x3D;&#x3D; 11:            face_str &#x3D; &#39;J&#39;        elif self._face &#x3D;&#x3D; 12:            face_str &#x3D; &#39;Q&#39;        elif self._face &#x3D;&#x3D; 13:            face_str &#x3D; &#39;K&#39;        else:            face_str &#x3D; str(self._face)        return &#39;%s%s&#39; % (self._suite, face_str)        def __repr__(self):        return self.__str__()class Poker(object):    &quot;&quot;&quot;一副牌&quot;&quot;&quot;    def __init__(self):        self._cards &#x3D; [Card(suite, face)                        for suite in &#39;♠♥♣♦&#39;                       for face in range(1, 14)]        self._current &#x3D; 0    @property    def cards(self):        return self._cards    def shuffle(self):        &quot;&quot;&quot;洗牌(随机乱序)&quot;&quot;&quot;        self._current &#x3D; 0        random.shuffle(self._cards)    @property    def next(self):        &quot;&quot;&quot;发牌&quot;&quot;&quot;        card &#x3D; self._cards[self._current]        self._current +&#x3D; 1        return card    @property    def has_next(self):        &quot;&quot;&quot;还有没有牌&quot;&quot;&quot;        return self._current &lt; len(self._cards)class Player(object):    &quot;&quot;&quot;玩家&quot;&quot;&quot;    def __init__(self, name):        self._name &#x3D; name        self._cards_on_hand &#x3D; []    @property    def name(self):        return self._name    @property    def cards_on_hand(self):        return self._cards_on_hand    def get(self, card):        &quot;&quot;&quot;摸牌&quot;&quot;&quot;        self._cards_on_hand.append(card)    def arrange(self, card_key):        &quot;&quot;&quot;玩家整理手上的牌&quot;&quot;&quot;        self._cards_on_hand.sort(key&#x3D;card_key)# 排序规则-先根据花色再根据点数排序def get_key(card):    return (card.suite, card.face)def main():    p &#x3D; Poker()    p.shuffle()    players &#x3D; [Player(&#39;东邪&#39;), Player(&#39;西毒&#39;), Player(&#39;南帝&#39;), Player(&#39;北丐&#39;)]    for _ in range(13):        for player in players:            player.get(p.next)    for player in players:        print(player.name + &#39;:&#39;, end&#x3D;&#39; &#39;)        player.arrange(get_key)        print(player.cards_on_hand)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明：</strong> 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例3：工资结算系统。"><a href="#案例3：工资结算系统。" class="headerlink" title="案例3：工资结算系统。"></a>案例3：工资结算系统。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;某公司有三种类型的员工 分别是部门经理、程序员和销售员需要设计一个工资结算系统 根据提供的员工信息来计算月薪部门经理的月薪是每月固定15000元程序员的月薪按本月工作时间计算 每小时150元销售员的月薪是1200元的底薪加上销售额5%的提成&quot;&quot;&quot;from abc import ABCMeta, abstractmethodclass Employee(object, metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;员工&quot;&quot;&quot;    def __init__(self, name):        &quot;&quot;&quot;        初始化方法        :param name: 姓名        &quot;&quot;&quot;        self._name &#x3D; name    @property    def name(self):        return self._name    @abstractmethod    def get_salary(self):        &quot;&quot;&quot;        获得月薪        :return: 月薪        &quot;&quot;&quot;        passclass Manager(Employee):    &quot;&quot;&quot;部门经理&quot;&quot;&quot;    def get_salary(self):        return 15000.0class Programmer(Employee):    &quot;&quot;&quot;程序员&quot;&quot;&quot;    def __init__(self, name, working_hour&#x3D;0):        super().__init__(name)        self._working_hour &#x3D; working_hour    @property    def working_hour(self):        return self._working_hour    @working_hour.setter    def working_hour(self, working_hour):        self._working_hour &#x3D; working_hour if working_hour &gt; 0 else 0    def get_salary(self):        return 150.0 * self._working_hourclass Salesman(Employee):    &quot;&quot;&quot;销售员&quot;&quot;&quot;    def __init__(self, name, sales&#x3D;0):        super().__init__(name)        self._sales &#x3D; sales    @property    def sales(self):        return self._sales    @sales.setter    def sales(self, sales):        self._sales &#x3D; sales if sales &gt; 0 else 0    def get_salary(self):        return 1200.0 + self._sales * 0.05def main():    emps &#x3D; [        Manager(&#39;刘备&#39;), Programmer(&#39;诸葛亮&#39;),        Manager(&#39;曹操&#39;), Salesman(&#39;荀彧&#39;),        Salesman(&#39;吕布&#39;), Programmer(&#39;张辽&#39;),        Programmer(&#39;赵云&#39;)    ]    for emp in emps:        if isinstance(emp, Programmer):            emp.working_hour &#x3D; int(input(&#39;请输入%s本月工作时间: &#39; % emp.name))        elif isinstance(emp, Salesman):            emp.sales &#x3D; float(input(&#39;请输入%s本月销售额: &#39; % emp.name))        # 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)        print(&#39;%s本月工资为: ￥%s元&#39; %              (emp.name, emp.get_salary()))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.图形用户界面和游戏开发</title>
      <link href="/2024/07/01/10.tu-xing-yong-hu-jie-mian-he-you-xi-kai-fa/"/>
      <url>/2024/07/01/10.tu-xing-yong-hu-jie-mian-he-you-xi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="图形用户界面和游戏开发"><a href="#图形用户界面和游戏开发" class="headerlink" title="图形用户界面和游戏开发"></a>图形用户界面和游戏开发</h2><h3 id="基于tkinter模块的GUI"><a href="#基于tkinter模块的GUI" class="headerlink" title="基于tkinter模块的GUI"></a>基于tkinter模块的GUI</h3><p>GUI是图形用户界面的缩写，图形化的用户界面对使用过计算机的人来说应该都不陌生，在此也无需进行赘述。Python默认的GUI开发模块是tkinter（在Python 3以前的版本中名为Tkinter），从这个名字就可以看出它是基于Tk的，Tk是一个工具包，最初是为Tcl设计的，后来被移植到很多其他的脚本语言中，它提供了跨平台的GUI控件。当然Tk并不是最新和最好的选择，也没有功能特别强大的GUI控件，事实上，开发GUI应用并不是Python最擅长的工作，如果真的需要使用Python开发GUI应用，wxPython、PyQt、PyGTK等模块都是不错的选择。</p><p>基本上使用tkinter来开发GUI应用需要以下5个步骤：</p><ol><li>导入tkinter模块中我们需要的东西。</li><li>创建一个顶层窗口对象并用它来承载整个GUI应用。</li><li>在顶层窗口对象上添加GUI组件。</li><li>通过代码将这些GUI组件的功能组织起来。</li><li>进入主事件循环(main loop)。</li></ol><p>下面的代码演示了如何使用tkinter做一个简单的GUI应用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import tkinterimport tkinter.messageboxdef main():    flag &#x3D; True    # 修改标签上的文字    def change_label_text():        nonlocal flag        flag &#x3D; not flag        color, msg &#x3D; (&#39;red&#39;, &#39;Hello, world!&#39;)\            if flag else (&#39;blue&#39;, &#39;Goodbye, world!&#39;)        label.config(text&#x3D;msg, fg&#x3D;color)    # 确认退出    def confirm_to_quit():        if tkinter.messagebox.askokcancel(&#39;温馨提示&#39;, &#39;确定要退出吗?&#39;):            top.quit()    # 创建顶层窗口    top &#x3D; tkinter.Tk()    # 设置窗口大小    top.geometry(&#39;240x160&#39;)    # 设置窗口标题    top.title(&#39;小游戏&#39;)    # 创建标签对象并添加到顶层窗口    label &#x3D; tkinter.Label(top, text&#x3D;&#39;Hello, world!&#39;, font&#x3D;&#39;Arial -32&#39;, fg&#x3D;&#39;red&#39;)    label.pack(expand&#x3D;1)    # 创建一个装按钮的容器    panel &#x3D; tkinter.Frame(top)    # 创建按钮对象 指定添加到哪个容器中 通过command参数绑定事件回调函数    button1 &#x3D; tkinter.Button(panel, text&#x3D;&#39;修改&#39;, command&#x3D;change_label_text)    button1.pack(side&#x3D;&#39;left&#39;)    button2 &#x3D; tkinter.Button(panel, text&#x3D;&#39;退出&#39;, command&#x3D;confirm_to_quit)    button2.pack(side&#x3D;&#39;right&#39;)    panel.pack(side&#x3D;&#39;bottom&#39;)    # 开启主事件循环    tkinter.mainloop()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>需要说明的是，GUI应用通常是事件驱动式的，之所以要进入主事件循环就是要监听鼠标、键盘等各种事件的发生并执行对应的代码对事件进行处理，因为事件会持续的发生，所以需要这样的一个循环一直运行着等待下一个事件的发生。另一方面，Tk为控件的摆放提供了三种布局管理器，通过布局管理器可以对控件进行定位，这三种布局管理器分别是：Placer（开发者提供控件的大小和摆放位置）、Packer（自动将控件填充到合适的位置）和Grid（基于网格坐标来摆放控件），此处不进行赘述。</p><h3 id="使用Pygame进行游戏开发"><a href="#使用Pygame进行游戏开发" class="headerlink" title="使用Pygame进行游戏开发"></a>使用Pygame进行游戏开发</h3><p>Pygame是一个开源的Python模块，专门用于多媒体应用（如电子游戏）的开发，其中包含对图像、声音、视频、事件、碰撞等的支持。Pygame建立在<a href="https://zh.wikipedia.org/wiki/SDL">SDL</a>的基础上，SDL是一套跨平台的多媒体开发库，用C语言实现，被广泛的应用于游戏、模拟器、播放器等的开发。而Pygame让游戏开发者不再被底层语言束缚，可以更多的关注游戏的功能和逻辑。</p><p>下面我们来完成一个简单的小游戏，游戏的名字叫“大球吃小球”，当然完成这个游戏并不是重点，学会使用Pygame也不是重点，最重要的我们要在这个过程中体会如何使用前面讲解的面向对象程序设计，学会用这种编程思想去解决现实中的问题。</p><h4 id="制作游戏窗口"><a href="#制作游戏窗口" class="headerlink" title="制作游戏窗口"></a>制作游戏窗口</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import pygamedef main():    # 初始化导入的pygame中的模块    pygame.init()    # 初始化用于显示的窗口并设置窗口尺寸    screen &#x3D; pygame.display.set_mode((800, 600))    # 设置当前窗口的标题    pygame.display.set_caption(&#39;大球吃小球&#39;)    running &#x3D; True    # 开启一个事件循环处理发生的事件    while running:        # 从消息队列中获取事件并对事件进行处理        for event in pygame.event.get():            if event.type &#x3D;&#x3D; pygame.QUIT:                running &#x3D; Falseif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="在窗口中绘图"><a href="#在窗口中绘图" class="headerlink" title="在窗口中绘图"></a>在窗口中绘图</h4><p>可以通过pygame中draw模块的函数在窗口上绘图，可以绘制的图形包括：线条、矩形、多边形、圆、椭圆、圆弧等。需要说明的是，屏幕坐标系是将屏幕左上角设置为坐标原点<code>(0, 0)</code>，向右是x轴的正向，向下是y轴的正向，在表示位置或者设置尺寸的时候，我们默认的单位都是<a href="https://zh.wikipedia.org/wiki/%E5%83%8F%E7%B4%A0">像素</a>。所谓像素就是屏幕上的一个点，你可以用浏览图片的软件试着将一张图片放大若干倍，就可以看到这些点。pygame中表示颜色用的是色光<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E8%89%B2">三原色</a>表示法，即通过一个元组或列表来指定颜色的RGB值，每个值都在0~255之间，因为是每种原色都用一个8位（bit）的值来表示，三种颜色相当于一共由24位构成，这也就是常说的“24位颜色表示法”。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pygamedef main():    # 初始化导入的pygame中的模块    pygame.init()    # 初始化用于显示的窗口并设置窗口尺寸    screen &#x3D; pygame.display.set_mode((800, 600))    # 设置当前窗口的标题    pygame.display.set_caption(&#39;大球吃小球&#39;)    # 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)    screen.fill((242, 242, 242))    # 绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆)    pygame.draw.circle(screen, (255, 0, 0,), (100, 100), 30, 0)    # 刷新当前窗口(渲染窗口将绘制的图像呈现出来)    pygame.display.flip()    running &#x3D; True    # 开启一个事件循环处理发生的事件    while running:        # 从消息队列中获取事件并对事件进行处理        for event in pygame.event.get():            if event.type &#x3D;&#x3D; pygame.QUIT:                running &#x3D; Falseif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="加载图像"><a href="#加载图像" class="headerlink" title="加载图像"></a>加载图像</h4><p>如果需要直接加载图像到窗口上，可以使用pygame中image模块的函数来加载图像，再通过之前获得的窗口对象的<code>blit</code>方法渲染图像，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pygamedef main():    # 初始化导入的pygame中的模块    pygame.init()    # 初始化用于显示的窗口并设置窗口尺寸    screen &#x3D; pygame.display.set_mode((800, 600))    # 设置当前窗口的标题    pygame.display.set_caption(&#39;大球吃小球&#39;)    # 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)    screen.fill((255, 255, 255))    # 通过指定的文件名加载图像    ball_image &#x3D; pygame.image.load(&#39;.&#x2F;res&#x2F;ball.png&#39;)    # 在窗口上渲染图像    screen.blit(ball_image, (50, 50))    # 刷新当前窗口(渲染窗口将绘制的图像呈现出来)    pygame.display.flip()    running &#x3D; True    # 开启一个事件循环处理发生的事件    while running:        # 从消息队列中获取事件并对事件进行处理        for event in pygame.event.get():            if event.type &#x3D;&#x3D; pygame.QUIT:                running &#x3D; Falseif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="实现动画效果"><a href="#实现动画效果" class="headerlink" title="实现动画效果"></a>实现动画效果</h4><p>说到<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E7%94%BB">动画</a>这个词大家都不会陌生，事实上要实现动画效果，本身的原理也非常简单，就是将不连续的图片连续的播放，只要每秒钟达到了一定的帧数，那么就可以做出比较流畅的动画效果。如果要让上面代码中的小球动起来，可以将小球的位置用变量来表示，并在循环中修改小球的位置再刷新整个窗口即可。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pygamedef main():    # 初始化导入的pygame中的模块    pygame.init()    # 初始化用于显示的窗口并设置窗口尺寸    screen &#x3D; pygame.display.set_mode((800, 600))    # 设置当前窗口的标题    pygame.display.set_caption(&#39;大球吃小球&#39;)    # 定义变量来表示小球在屏幕上的位置    x, y &#x3D; 50, 50    running &#x3D; True    # 开启一个事件循环处理发生的事件    while running:        # 从消息队列中获取事件并对事件进行处理        for event in pygame.event.get():            if event.type &#x3D;&#x3D; pygame.QUIT:                running &#x3D; False        screen.fill((255, 255, 255))        pygame.draw.circle(screen, (255, 0, 0,), (x, y), 30, 0)        pygame.display.flip()        # 每隔50毫秒就改变小球的位置再刷新窗口        pygame.time.delay(50)        x, y &#x3D; x + 5, y + 5if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h4><p>通常一个游戏中会有很多对象出现，而这些对象之间的“碰撞”在所难免，比如炮弹击中了飞机、箱子撞到了地面等。碰撞检测在绝大多数的游戏中都是一个必须得处理的至关重要的问题，pygame的sprite（动画精灵）模块就提供了对碰撞检测的支持，这里我们暂时不介绍sprite模块提供的功能，因为要检测两个小球有没有碰撞其实非常简单，只需要检查球心的距离有没有小于两个球的半径之和。为了制造出更多的小球，我们可以通过对鼠标事件的处理，在点击鼠标的位置创建颜色、大小和移动速度都随机的小球，当然要做到这一点，我们可以把之前学习到的面向对象的知识应用起来。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from enum import Enum, uniquefrom math import sqrtfrom random import randintimport pygame@uniqueclass Color(Enum):    &quot;&quot;&quot;颜色&quot;&quot;&quot;    RED &#x3D; (255, 0, 0)    GREEN &#x3D; (0, 255, 0)    BLUE &#x3D; (0, 0, 255)    BLACK &#x3D; (0, 0, 0)    WHITE &#x3D; (255, 255, 255)    GRAY &#x3D; (242, 242, 242)    @staticmethod    def random_color():        &quot;&quot;&quot;获得随机颜色&quot;&quot;&quot;        r &#x3D; randint(0, 255)        g &#x3D; randint(0, 255)        b &#x3D; randint(0, 255)        return (r, g, b)class Ball(object):    &quot;&quot;&quot;球&quot;&quot;&quot;    def __init__(self, x, y, radius, sx, sy, color&#x3D;Color.RED):        &quot;&quot;&quot;初始化方法&quot;&quot;&quot;        self.x &#x3D; x        self.y &#x3D; y        self.radius &#x3D; radius        self.sx &#x3D; sx        self.sy &#x3D; sy        self.color &#x3D; color        self.alive &#x3D; True    def move(self, screen):        &quot;&quot;&quot;移动&quot;&quot;&quot;        self.x +&#x3D; self.sx        self.y +&#x3D; self.sy        if self.x - self.radius &lt;&#x3D; 0 or \                self.x + self.radius &gt;&#x3D; screen.get_width():            self.sx &#x3D; -self.sx        if self.y - self.radius &lt;&#x3D; 0 or \                self.y + self.radius &gt;&#x3D; screen.get_height():            self.sy &#x3D; -self.sy    def eat(self, other):        &quot;&quot;&quot;吃其他球&quot;&quot;&quot;        if self.alive and other.alive and self !&#x3D; other:            dx, dy &#x3D; self.x - other.x, self.y - other.y            distance &#x3D; sqrt(dx ** 2 + dy ** 2)            if distance &lt; self.radius + other.radius \                    and self.radius &gt; other.radius:                other.alive &#x3D; False                self.radius &#x3D; self.radius + int(other.radius * 0.146)    def draw(self, screen):        &quot;&quot;&quot;在窗口上绘制球&quot;&quot;&quot;        pygame.draw.circle(screen, self.color,                           (self.x, self.y), self.radius, 0)</code></pre><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>可以在事件循环中对鼠标事件进行处理，通过事件对象的<code>type</code>属性可以判定事件类型，再通过<code>pos</code>属性就可以获得鼠标点击的位置。如果要处理键盘事件也是在这个地方，做法与处理鼠标事件类似。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    # 定义用来装所有球的容器    balls &#x3D; []    # 初始化导入的pygame中的模块    pygame.init()    # 初始化用于显示的窗口并设置窗口尺寸    screen &#x3D; pygame.display.set_mode((800, 600))    # 设置当前窗口的标题    pygame.display.set_caption(&#39;大球吃小球&#39;)    running &#x3D; True    # 开启一个事件循环处理发生的事件    while running:        # 从消息队列中获取事件并对事件进行处理        for event in pygame.event.get():            if event.type &#x3D;&#x3D; pygame.QUIT:                running &#x3D; False            # 处理鼠标事件的代码            if event.type &#x3D;&#x3D; pygame.MOUSEBUTTONDOWN and event.button &#x3D;&#x3D; 1:                # 获得点击鼠标的位置                x, y &#x3D; event.pos                radius &#x3D; randint(10, 100)                sx, sy &#x3D; randint(-10, 10), randint(-10, 10)                color &#x3D; Color.random_color()                # 在点击鼠标的位置创建一个球(大小、速度和颜色随机)                ball &#x3D; Ball(x, y, radius, sx, sy, color)                # 将球添加到列表容器中                balls.append(ball)        screen.fill((255, 255, 255))        # 取出容器中的球 如果没被吃掉就绘制 被吃掉了就移除        for ball in balls:            if ball.alive:                ball.draw(screen)            else:                balls.remove(ball)        pygame.display.flip()        # 每隔50毫秒就改变球的位置再刷新窗口        pygame.time.delay(50)        for ball in balls:            ball.move(screen)            # 检查球有没有吃到其他的球            for other in balls:                ball.eat(other)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面的两段代码合在一起，我们就完成了“大球吃小球”的游戏（如下图所示），准确的说它算不上一个游戏，但是做一个小游戏的基本知识我们已经通过这个例子告诉大家了，有了这些知识已经可以开始你的小游戏开发之旅了。其实上面的代码中还有很多值得改进的地方，比如刷新窗口以及让球移动起来的代码并不应该放在事件循环中，等学习了多线程的知识后，用一个后台线程来处理这些事可能是更好的选择。如果希望获得更好的用户体验，我们还可以在游戏中加入背景音乐以及在球与球发生碰撞时播放音效，利用pygame的mixer和music模块，我们可以很容易的做到这一点，大家可以自行了解这方面的知识。事实上，想了解更多的关于pygame的知识，最好的教程是<a href="https://www.pygame.org/news">pygame的官方网站</a>，如果英语没毛病就可以赶紧去看看啦。 如果想开发<a href="https://zh.wikipedia.org/wiki/3D%E6%B8%B8%E6%88%8F">3D游戏</a>，pygame就显得力不从心了，对3D游戏开发如果有兴趣的读者不妨看看<a href="https://www.panda3d.org/">Panda3D</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100.Python面试题实录</title>
      <link href="/2024/07/01/100.python-mian-shi-ti-shi-lu/"/>
      <url>/2024/07/01/100.python-mian-shi-ti-shi-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="Python面试题实录"><a href="#Python面试题实录" class="headerlink" title="Python面试题实录"></a>Python面试题实录</h2><blockquote><p><strong>温馨提示</strong>：请访问我的另一个项目<a href="https://github.com/jackfrued/Python-Interview-Bible">“Python面试宝典”</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.文件和异常</title>
      <link href="/2024/07/01/11.wen-jian-he-yi-chang/"/>
      <url>/2024/07/01/11.wen-jian-he-yi-chang/</url>
      
        <content type="html"><![CDATA[<h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><p>实际开发中常常会遇到对数据进行<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">持久化</a>操作的场景，而实现数据持久化最直接简单的方式就是将数据保存到文件中。说到“文件”这个词，可能需要先科普一下关于<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>的知识，但是这里我们并不浪费笔墨介绍这个概念，请大家自行通过维基百科进行了解。</p><p>在Python中实现文件的读写操作其实非常简单，通过Python内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。这里所说的操作模式是指要打开什么样的文件（字符文件还是二进制文件）以及做什么样的操作（读、写还是追加），具体的如下表所示。</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table><p>下面这张图来自于<a href="http://www.runoob.com/">菜鸟教程</a>网站，它展示了如果根据应用程序的需要来设置操作模式。</p><p><img src="/./res/file-open-mode.png"></p><h3 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h3><p>读取文本文件时，需要在使用<code>open</code>函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为<code>&#39;r&#39;</code>（如果不指定，默认值也是<code>&#39;r&#39;</code>），然后通过<code>encoding</code>参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    f &#x3D; open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)    print(f.read())    f.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>请注意上面的代码，如果<code>open</code>函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。为了让代码有一定的健壮性和容错性，我们可以使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    f &#x3D; None    try:        f &#x3D; open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)        print(f.read())    except FileNotFoundError:        print(&#39;无法打开指定的文件!&#39;)    except LookupError:        print(&#39;指定了未知的编码!&#39;)    except UnicodeDecodeError:        print(&#39;读取文件时解码错误!&#39;)    finally:        if f:            f.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在Python中，我们可以将那些在运行时可能会出现状况的代码放在<code>try</code>代码块中，在<code>try</code>代码块的后面可以跟上一个或多个<code>except</code>来捕获可能出现的异常状况。例如在上面读取文件的过程中，文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定方式解码会引发<code>UnicodeDecodeError</code>，我们在<code>try</code>后面跟上了三个<code>except</code>分别处理这三种不同的异常状况。最后我们使用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于<code>finally</code>块的代码不论程序正常还是异常都会执行到（甚至是调用了<code>sys</code>模块的<code>exit</code>函数退出Python环境，<code>finally</code>块都会被执行，因为<code>exit</code>函数实质上是引发了<code>SystemExit</code>异常），因此我们通常把<code>finally</code>块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    try:        with open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:            print(f.read())    except FileNotFoundError:        print(&#39;无法打开指定的文件!&#39;)    except LookupError:        print(&#39;指定了未知的编码!&#39;)    except UnicodeDecodeError:        print(&#39;读取文件时解码错误!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>除了使用文件对象的<code>read</code>方法读取文件之外，还可以使用<code>for-in</code>循环逐行读取或者用<code>readlines</code>方法将文件按行读取到一个列表容器中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timedef main():    # 一次性读取整个文件内容    with open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:        print(f.read())    # 通过for-in循环逐行读取    with open(&#39;致橡树.txt&#39;, mode&#x3D;&#39;r&#39;) as f:        for line in f:            print(line, end&#x3D;&#39;&#39;)            time.sleep(0.5)    print()    # 读取文件按行读取到列表中    with open(&#39;致橡树.txt&#39;) as f:        lines &#x3D; f.readlines()    print(lines)    if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>要将文本信息写入文件文件也非常简单，在使用<code>open</code>函数时指定好文件名并将文件模式设置为<code>&#39;w&#39;</code>即可。注意如果需要对文件内容进行追加式写入，应该将模式设置为<code>&#39;a&#39;</code>。如果要写入的文件不存在会自动创建文件而不是引发异常。下面的例子演示了如何将1-9999之间的素数分别写入三个文件中（1-99之间的素数保存在a.txt中，100-999之间的素数保存在b.txt中，1000-9999之间的素数保存在c.txt中）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from math import sqrtdef is_prime(n):    &quot;&quot;&quot;判断素数的函数&quot;&quot;&quot;    assert n &gt; 0    for factor in range(2, int(sqrt(n)) + 1):        if n % factor &#x3D;&#x3D; 0:            return False    return True if n !&#x3D; 1 else Falsedef main():    filenames &#x3D; (&#39;a.txt&#39;, &#39;b.txt&#39;, &#39;c.txt&#39;)    fs_list &#x3D; []    try:        for filename in filenames:            fs_list.append(open(filename, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;))        for number in range(1, 10000):            if is_prime(number):                if number &lt; 100:                    fs_list[0].write(str(number) + &#39;\n&#39;)                elif number &lt; 1000:                    fs_list[1].write(str(number) + &#39;\n&#39;)                else:                    fs_list[2].write(str(number) + &#39;\n&#39;)    except IOError as ex:        print(ex)        print(&#39;写文件时发生错误!&#39;)    finally:        for fs in fs_list:            fs.close()    print(&#39;操作完成!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="读写二进制文件"><a href="#读写二进制文件" class="headerlink" title="读写二进制文件"></a>读写二进制文件</h3><p>知道了如何读写文本文件要读写二进制文件也就很简单了，下面的代码实现了复制图片文件的功能。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    try:        with open(&#39;guido.jpg&#39;, &#39;rb&#39;) as fs1:            data &#x3D; fs1.read()            print(type(data))  # &lt;class &#39;bytes&#39;&gt;        with open(&#39;吉多.jpg&#39;, &#39;wb&#39;) as fs2:            fs2.write(data)    except FileNotFoundError as e:        print(&#39;指定的文件无法打开.&#39;)    except IOError as e:        print(&#39;读写文件时出现错误.&#39;)    print(&#39;程序执行结束.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="读写JSON文件"><a href="#读写JSON文件" class="headerlink" title="读写JSON文件"></a>读写JSON文件</h3><p>通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？答案是将数据以JSON格式进行保存。JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。关于JSON的知识，更多的可以参考<a href="http://json.org/">JSON的官方网站</a>，从这个网站也可以了解到每种语言处理JSON数据格式可以使用的工具或三方库，下面是一个JSON的简单例子。</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;name&quot;: &quot;骆昊&quot;,    &quot;age&quot;: 38,    &quot;qq&quot;: 957658,    &quot;friends&quot;: [&quot;王大锤&quot;, &quot;白元芳&quot;],    &quot;cars&quot;: [        &#123;&quot;brand&quot;: &quot;BYD&quot;, &quot;max_speed&quot;: 180&#125;,        &#123;&quot;brand&quot;: &quot;Audi&quot;, &quot;max_speed&quot;: 280&#125;,        &#123;&quot;brand&quot;: &quot;Benz&quot;, &quot;max_speed&quot;: 320&#125;    ]&#125;</code></pre><p>可能大家已经注意到了，上面的JSON跟Python中的字典其实是一样一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对应关系的，如下面两张表所示。</p><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>str</td></tr><tr><td>number (int &#x2F; real)</td><td>int &#x2F; float</td></tr><tr><td>true &#x2F; false</td><td>True &#x2F; False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list, tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int, float, int- &amp; float-derived Enums</td><td>number</td></tr><tr><td>True &#x2F; False</td><td>true &#x2F; false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><p>我们使用Python中的json模块就可以将字典或列表以JSON格式保存到文件中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import jsondef main():    mydict &#x3D; &#123;        &#39;name&#39;: &#39;骆昊&#39;,        &#39;age&#39;: 38,        &#39;qq&#39;: 957658,        &#39;friends&#39;: [&#39;王大锤&#39;, &#39;白元芳&#39;],        &#39;cars&#39;: [            &#123;&#39;brand&#39;: &#39;BYD&#39;, &#39;max_speed&#39;: 180&#125;,            &#123;&#39;brand&#39;: &#39;Audi&#39;, &#39;max_speed&#39;: 280&#125;,            &#123;&#39;brand&#39;: &#39;Benz&#39;, &#39;max_speed&#39;: 320&#125;        ]    &#125;    try:        with open(&#39;data.json&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as fs:            json.dump(mydict, fs)    except IOError as e:        print(e)    print(&#39;保存数据完成!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>json模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书<a href="https://zh.wikipedia.org/">维基百科</a>上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p><p>目前绝大多数网络数据服务（或称之为网络API）都是基于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP协议</a>提供JSON格式的数据，关于HTTP协议的相关知识，可以看看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP协议入门》</a>，如果想了解国内的网络数据服务，可以看看<a href="https://www.juhe.cn/">聚合数据</a>和<a href="http://www.avatardata.cn/">阿凡达数据</a>等网站，国外的可以看看<a href="http://apis.io/">{API}Search</a>网站。下面的例子演示了如何使用<a href="http://docs.python-requests.org/zh_CN/latest/">requests</a>模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题，这个例子使用了<a href="https://www.tianapi.com/">天行数据</a>提供的国内新闻数据接口，其中的APIKey需要自己到该网站申请。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import requestsimport jsondef main():    resp &#x3D; requests.get(&#39;http:&#x2F;&#x2F;api.tianapi.com&#x2F;guonei&#x2F;?key&#x3D;APIKey&amp;num&#x3D;10&#39;)    data_model &#x3D; json.loads(resp.text)    for news in data_model[&#39;newslist&#39;]:        print(news[&#39;title&#39;])if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在Python中要实现序列化和反序列化除了使用json模块之外，还可以使用pickle和shelve模块，但是这两个模块是使用特有的序列化协议来序列化数据，因此序列化后的数据只能被Python识别。关于这两个模块的相关知识可以自己看看网络上的资料。另外，如果要了解更多的关于Python异常机制的知识，可以看看segmentfault上面的文章<a href="https://segmentfault.com/a/1190000007736783">《总结：Python中的异常处理》</a>，这篇文章不仅介绍了Python中异常机制的使用，还总结了一系列的最佳实践，很值得一读。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.字符串和正则表达式</title>
      <link href="/2024/07/01/12.zi-fu-chuan-he-zheng-ze-biao-da-shi/"/>
      <url>/2024/07/01/12.zi-fu-chuan-he-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="正则表达式相关知识"><a href="#正则表达式相关知识" class="headerlink" title="正则表达式相关知识"></a>正则表达式相关知识</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p><p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat &#x2F; but &#x2F; b#t &#x2F; b1t等</td></tr><tr><td>\w</td><td>匹配字母&#x2F;数字&#x2F;下划线</td><td>b\wt</td><td>可以匹配bat &#x2F; b1t &#x2F; b_t等<br>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 &#x2F; 23 &#x2F; 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母&#x2F;数字&#x2F;下划线</td><td>b\Wt</td><td>可以匹配b#t &#x2F; b@t等<br>但不能匹配but &#x2F; b1t &#x2F; b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a &#x2F; 3# &#x2F; 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?&lt;name&gt;exp)</td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?&#x3D;exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?&#x3D;ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;&#x3D;exp)</td><td>匹配exp后面的位置</td><td>(?&lt;&#x3D;\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.*b<br>a.*?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="Python对正则表达式的支持"><a href="#Python对正则表达式的支持" class="headerlink" title="Python对正则表达式的支持"></a>Python对正则表达式的支持</h3><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags&#x3D;0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags&#x3D;0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags&#x3D;0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit&#x3D;0, flags&#x3D;0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count&#x3D;0, flags&#x3D;0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags&#x3D;0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags&#x3D;0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags&#x3D;0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I &#x2F; re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M &#x2F; re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;验证输入用户名和QQ号是否有效并给出对应的提示信息要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0&quot;&quot;&quot;import redef main():    username &#x3D; input(&#39;请输入用户名: &#39;)    qq &#x3D; input(&#39;请输入QQ号: &#39;)    # match函数的第一个参数是正则表达式字符串或正则表达式对象    # 第二个参数是要跟正则表达式做匹配的字符串对象    m1 &#x3D; re.match(r&#39;^[0-9a-zA-Z_]&#123;6,20&#125;$&#39;, username)    if not m1:        print(&#39;请输入有效的用户名.&#39;)    m2 &#x3D; re.match(r&#39;^[1-9]\d&#123;4,11&#125;$&#39;, qq)    if not m2:        print(&#39;请输入有效的QQ号.&#39;)    if m1 and m2:        print(&#39;你输入的信息是有效的!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h4><p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p><p><img src="/./res/tel-start-number.png"></p><pre class="language-Python" data-language="Python"><code class="language-Python">import redef main():    # 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字    pattern &#x3D; re.compile(r&#39;(?&lt;&#x3D;\D)1[34578]\d&#123;9&#125;(?&#x3D;\D)&#39;)    sentence &#x3D; &#39;&#39;&#39;    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，    不是15600998765，也是110或119，王大锤的手机号才是15600998765。    &#39;&#39;&#39;    # 查找所有匹配并保存到一个列表中    mylist &#x3D; re.findall(pattern, sentence)    print(mylist)    print(&#39;--------华丽的分隔线--------&#39;)    # 通过迭代器取出匹配对象并获得匹配的内容    for temp in pattern.finditer(sentence):        print(temp.group())    print(&#39;--------华丽的分隔线--------&#39;)    # 通过search函数指定搜索位置找出所有匹配    m &#x3D; pattern.search(sentence)    while m:        print(m.group())        m &#x3D; pattern.search(sentence, m.end())if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d&#123;9&#125;|14[57]\d&#123;8&#125;|15[0-35-9]\d&#123;8&#125;|17[678]\d&#123;8&#125;)(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import redef main():    sentence &#x3D; &#39;你丫是傻叉吗? 我操你大爷的. Fuck you.&#39;    purified &#x3D; re.sub(&#39;[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔&#39;,                      &#39;*&#39;, sentence, flags&#x3D;re.IGNORECASE)    print(purified)  # 你丫是*吗? 我*你大爷的. * you.if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import redef main():    poem &#x3D; &#39;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#39;    sentence_list &#x3D; re.split(r&#39;[，。, .]&#39;, poem)    while &#39;&#39; in sentence_list:        sentence_list.remove(&#39;&#39;)    print(sentence_list)  # [&#39;窗前明月光&#39;, &#39;疑是地上霜&#39;, &#39;举头望明月&#39;, &#39;低头思故乡&#39;]if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>或<a href="http://lxml.de/">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦，这些内容我们会在后期的爬虫专题中为大家介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.进程和线程</title>
      <link href="/2024/07/01/13.jin-cheng-he-xian-cheng/"/>
      <url>/2024/07/01/13.jin-cheng-he-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p><p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，如下图所示。</p><p><img src="/./res/macos-monitor.png"></p><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h3 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h3><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randintfrom time import time, sleepdef download_task(filename):    print(&#39;开始下载%s...&#39; % filename)    time_to_download &#x3D; randint(5, 10)    sleep(time_to_download)    print(&#39;%s下载完成! 耗费了%d秒&#39; % (filename, time_to_download))def main():    start &#x3D; time()    download_task(&#39;Python从入门到住院.pdf&#39;)    download_task(&#39;Peking Hot.avi&#39;)    end &#x3D; time()    print(&#39;总共耗费了%.2f秒.&#39; % (end - start))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>下面是运行程序得到的一次运行结果。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">开始下载Python从入门到住院.pdf...Python从入门到住院.pdf下载完成! 耗费了6秒开始下载Peking Hot.avi...Peking Hot.avi下载完成! 耗费了7秒总共耗费了13.01秒.</code></pre><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from multiprocessing import Processfrom os import getpidfrom random import randintfrom time import time, sleepdef download_task(filename):    print(&#39;启动下载进程，进程号[%d].&#39; % getpid())    print(&#39;开始下载%s...&#39; % filename)    time_to_download &#x3D; randint(5, 10)    sleep(time_to_download)    print(&#39;%s下载完成! 耗费了%d秒&#39; % (filename, time_to_download))def main():    start &#x3D; time()    p1 &#x3D; Process(target&#x3D;download_task, args&#x3D;(&#39;Python从入门到住院.pdf&#39;, ))    p1.start()    p2 &#x3D; Process(target&#x3D;download_task, args&#x3D;(&#39;Peking Hot.avi&#39;, ))    p2.start()    p1.join()    p2.join()    end &#x3D; time()    print(&#39;总共耗费了%.2f秒.&#39; % (end - start))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">启动下载进程，进程号[1530].开始下载Python从入门到住院.pdf...启动下载进程，进程号[1531].开始下载Peking Hot.avi...Peking Hot.avi下载完成! 耗费了7秒Python从入门到住院.pdf下载完成! 耗费了10秒总共耗费了10.01秒.</code></pre><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from multiprocessing import Processfrom time import sleepcounter &#x3D; 0def sub_task(string):    global counter    while counter &lt; 10:        print(string, end&#x3D;&#39;&#39;, flush&#x3D;True)        counter +&#x3D; 1        sleep(0.01)        def main():    Process(target&#x3D;sub_task, args&#x3D;(&#39;Ping&#39;, )).start()    Process(target&#x3D;sub_task, args&#x3D;(&#39;Pong&#39;, )).start()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h3 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h3><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randintfrom threading import Threadfrom time import time, sleepdef download(filename):    print(&#39;开始下载%s...&#39; % filename)    time_to_download &#x3D; randint(5, 10)    sleep(time_to_download)    print(&#39;%s下载完成! 耗费了%d秒&#39; % (filename, time_to_download))def main():    start &#x3D; time()    t1 &#x3D; Thread(target&#x3D;download, args&#x3D;(&#39;Python从入门到住院.pdf&#39;,))    t1.start()    t2 &#x3D; Thread(target&#x3D;download, args&#x3D;(&#39;Peking Hot.avi&#39;,))    t2.start()    t1.join()    t2.join()    end &#x3D; time()    print(&#39;总共耗费了%.3f秒&#39; % (end - start))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randintfrom threading import Threadfrom time import time, sleepclass DownloadTask(Thread):    def __init__(self, filename):        super().__init__()        self._filename &#x3D; filename    def run(self):        print(&#39;开始下载%s...&#39; % self._filename)        time_to_download &#x3D; randint(5, 10)        sleep(time_to_download)        print(&#39;%s下载完成! 耗费了%d秒&#39; % (self._filename, time_to_download))def main():    start &#x3D; time()    t1 &#x3D; DownloadTask(&#39;Python从入门到住院.pdf&#39;)    t1.start()    t2 &#x3D; DownloadTask(&#39;Peking Hot.avi&#39;)    t2.start()    t1.join()    t2.join()    end &#x3D; time()    print(&#39;总共耗费了%.2f秒.&#39; % (end - start))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from time import sleepfrom threading import Threadclass Account(object):    def __init__(self):        self._balance &#x3D; 0    def deposit(self, money):        # 计算存款后的余额        new_balance &#x3D; self._balance + money        # 模拟受理存款业务需要0.01秒的时间        sleep(0.01)        # 修改账户余额        self._balance &#x3D; new_balance    @property    def balance(self):        return self._balanceclass AddMoneyThread(Thread):    def __init__(self, account, money):        super().__init__()        self._account &#x3D; account        self._money &#x3D; money    def run(self):        self._account.deposit(self._money)def main():    account &#x3D; Account()    threads &#x3D; []    # 创建100个存款的线程向同一个账户中存钱    for _ in range(100):        t &#x3D; AddMoneyThread(account, 1)        threads.append(t)        t.start()    # 等所有存款的线程都执行完毕    for t in threads:        t.join()    print(&#39;账户余额为: ￥%d元&#39; % account.balance)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from time import sleepfrom threading import Thread, Lockclass Account(object):    def __init__(self):        self._balance &#x3D; 0        self._lock &#x3D; Lock()    def deposit(self, money):        # 先获取锁才能执行后续的代码        self._lock.acquire()        try:            new_balance &#x3D; self._balance + money            sleep(0.01)            self._balance &#x3D; new_balance        finally:            # 在finally中执行释放锁的操作保证正常异常锁都能释放            self._lock.release()    @property    def balance(self):        return self._balanceclass AddMoneyThread(Thread):    def __init__(self, account, money):        super().__init__()        self._account &#x3D; account        self._money &#x3D; money    def run(self):        self._account.deposit(self._money)def main():    account &#x3D; Account()    threads &#x3D; []    for _ in range(100):        t &#x3D; AddMoneyThread(account, 1)        threads.append(t)        t.start()    for t in threads:        t.join()    print(&#39;账户余额为: ￥%d元&#39; % account.balance)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h3 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h3><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I&#x2F;O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到过Python中有嵌入C&#x2F;C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I&#x2F;O的任务都可以视为I&#x2F;O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I&#x2F;O操作完成（因为I&#x2F;O的速度远远低于CPU和内存的速度）。对于I&#x2F;O密集型任务，如果启动多任务，就可以减少I&#x2F;O等待时间从而让CPU高效率的运转。有一大类的任务都属于I&#x2F;O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h3 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I&#x2F;O"></a>单线程+异步I&#x2F;O</h3><p>现代操作系统对I&#x2F;O操作的改进中最为重要的就是支持异步I&#x2F;O。如果充分利用操作系统提供的异步I&#x2F;O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I&#x2F;O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。</p><p>在Python语言中，单线程+异步I&#x2F;O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，在后续的课程中会进行讲解。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><h4 id="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#例子1：将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"></a>例子1：将耗时间的任务放到线程中以获得更好的用户体验。</h4><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timeimport tkinterimport tkinter.messageboxdef download():    # 模拟下载任务需要花费10秒钟时间    time.sleep(10)    tkinter.messagebox.showinfo(&#39;提示&#39;, &#39;下载完成!&#39;)def show_about():    tkinter.messagebox.showinfo(&#39;关于&#39;, &#39;作者: 骆昊(v1.0)&#39;)def main():    top &#x3D; tkinter.Tk()    top.title(&#39;单线程&#39;)    top.geometry(&#39;200x150&#39;)    top.wm_attributes(&#39;-topmost&#39;, True)    panel &#x3D; tkinter.Frame(top)    button1 &#x3D; tkinter.Button(panel, text&#x3D;&#39;下载&#39;, command&#x3D;download)    button1.pack(side&#x3D;&#39;left&#39;)    button2 &#x3D; tkinter.Button(panel, text&#x3D;&#39;关于&#39;, command&#x3D;show_about)    button2.pack(side&#x3D;&#39;right&#39;)    panel.pack(side&#x3D;&#39;bottom&#39;)    tkinter.mainloop()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timeimport tkinterimport tkinter.messageboxfrom threading import Threaddef main():    class DownloadTaskHandler(Thread):        def run(self):            time.sleep(10)            tkinter.messagebox.showinfo(&#39;提示&#39;, &#39;下载完成!&#39;)            # 启用下载按钮            button1.config(state&#x3D;tkinter.NORMAL)    def download():        # 禁用下载按钮        button1.config(state&#x3D;tkinter.DISABLED)        # 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)        # 在线程中处理耗时间的下载任务        DownloadTaskHandler(daemon&#x3D;True).start()    def show_about():        tkinter.messagebox.showinfo(&#39;关于&#39;, &#39;作者: 骆昊(v1.0)&#39;)    top &#x3D; tkinter.Tk()    top.title(&#39;单线程&#39;)    top.geometry(&#39;200x150&#39;)    top.wm_attributes(&#39;-topmost&#39;, 1)    panel &#x3D; tkinter.Frame(top)    button1 &#x3D; tkinter.Button(panel, text&#x3D;&#39;下载&#39;, command&#x3D;download)    button1.pack(side&#x3D;&#39;left&#39;)    button2 &#x3D; tkinter.Button(panel, text&#x3D;&#39;关于&#39;, command&#x3D;show_about)    button2.pack(side&#x3D;&#39;right&#39;)    panel.pack(side&#x3D;&#39;bottom&#39;)    tkinter.mainloop()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="例子2：使用多进程对复杂任务进行“分而治之”。"><a href="#例子2：使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="例子2：使用多进程对复杂任务进行“分而治之”。"></a>例子2：使用多进程对复杂任务进行“分而治之”。</h4><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from time import timedef main():    total &#x3D; 0    number_list &#x3D; [x for x in range(1, 100000001)]    start &#x3D; time()    for number in number_list:        total +&#x3D; number    print(total)    end &#x3D; time()    print(&#39;Execution time: %.3fs&#39; % (end - start))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from multiprocessing import Process, Queuefrom random import randintfrom time import timedef task_handler(curr_list, result_queue):    total &#x3D; 0    for number in curr_list:        total +&#x3D; number    result_queue.put(total)def main():    processes &#x3D; []    number_list &#x3D; [x for x in range(1, 100000001)]    result_queue &#x3D; Queue()    index &#x3D; 0    # 启动8个进程将数据切片后进行运算    for _ in range(8):        p &#x3D; Process(target&#x3D;task_handler,                    args&#x3D;(number_list[index:index + 12500000], result_queue))        index +&#x3D; 12500000        processes.append(p)        p.start()    # 开始记录所有进程执行完成花费的时间    start &#x3D; time()    for p in processes:        p.join()    # 合并执行结果    total &#x3D; 0    while not result_queue.empty():        total +&#x3D; result_queue.get()    print(total)    end &#x3D; time()    print(&#39;Execution time: &#39;, (end - start), &#39;s&#39;, sep&#x3D;&#39;&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.网络编程入门和网络应用开发</title>
      <link href="/2024/07/01/14.wang-luo-bian-cheng-ru-men-he-wang-luo-ying-yong-kai-fa/"/>
      <url>/2024/07/01/14.wang-luo-bian-cheng-ru-men-he-wang-luo-ying-yong-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h2><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p>计算机网络是独立自主的计算机互联而成的系统的总称，组建计算机网络最主要的目的是实现多台计算机之间的通信和资源共享。今天计算机网络中的设备和计算机网络的用户已经多得不可计数，而计算机网络也可以称得上是一个“复杂巨系统”，对于这样的系统，我们不可能用一两篇文章把它讲清楚，有兴趣的读者可以自行阅读Andrew S.Tanenbaum老师的经典之作《计算机网络》或Kurose和Ross老师合著的《计算机网络:自顶向下方法》来了解计算机网络的相关知识。</p><h4 id="计算机网络发展史"><a href="#计算机网络发展史" class="headerlink" title="计算机网络发展史"></a>计算机网络发展史</h4><ol><li><p>1960s - 美国国防部ARPANET项目问世，奠定了分组交换网络的基础。</p><p><img src="/./res/arpanet.png"></p></li><li><p>1980s - 国际标准化组织（ISO）发布OSI&#x2F;RM，奠定了网络技术标准化的基础。</p><p><img src="/./res/osimodel.png"></p></li><li><p>1990s - 英国人<a href="https://zh.wikipedia.org/wiki/%E6%8F%90%E5%A7%86%C2%B7%E6%9F%8F%E5%85%A7%E8%8C%B2-%E6%9D%8E">蒂姆·伯纳斯-李</a>发明了图形化的浏览器，浏览器的简单易用性使得计算机网络迅速被普及。</p><p>在没有浏览器的年代，上网是这样的。</p><p><img src="/./res/before-browser.jpg"></p><p>有了浏览器以后，上网是这样的。</p><p><img src="/./res/after-browser.jpg"></p></li></ol><h4 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h4><p>实现网络通信的基础是网络通信协议，这些协议通常是由<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84">互联网工程任务组</a> （IETF）制定的。所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接、怎样互相识别等，网络协议的三要素是：语法、语义和时序。构成我们今天使用的Internet的基础的是TCP&#x2F;IP协议族，所谓协议族就是一系列的协议及其构成的通信模型，我们通常也把这套东西称为TCP&#x2F;IP模型。与国际标准化组织发布的OSI&#x2F;RM这个七层模型不同，TCP&#x2F;IP是一个四层模型，也就是说，该模型将我们使用的网络从逻辑上分解为四个层次，自底向上依次是：网络接口层、网络层、传输层和应用层，如下图所示。</p><p><img src="/./res/TCP-IP-model.png"></p><p>IP通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个<a href="https://zh.wikipedia.org/zh-hans/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网（LAN）</a>中的内部IP地址，通过<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换（NAT）服务</a>我们也可以实现对网络的访问。计算机网络上有大量的被我们称为“<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送到目的地通路，这项功能就是所谓的路由。</p><p>TCP全称传输控制协议，它是基于IP提供的寻址和路由服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情：</p><ol><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）。</li><li>流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）。</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ol><h4 id="网络应用模式"><a href="#网络应用模式" class="headerlink" title="网络应用模式"></a>网络应用模式</h4><ol><li>C&#x2F;S模式和B&#x2F;S模式。这里的C指的是Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；而B指的是Browser（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。关于二者的比较和讨论在网络上有一大堆的文章，在此我们就不再浪费笔墨了。</li><li>去中心化的网络应用模式。不管是B&#x2F;S还是C&#x2F;S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。</li></ol><h3 id="基于HTTP协议的网络资源访问"><a href="#基于HTTP协议的网络资源访问" class="headerlink" title="基于HTTP协议的网络资源访问"></a>基于HTTP协议的网络资源访问</h3><h4 id="HTTP（超文本传输协议）"><a href="#HTTP（超文本传输协议）" class="headerlink" title="HTTP（超文本传输协议）"></a>HTTP（超文本传输协议）</h4><p>HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称，维基百科上对HTTP的解释是：超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议，它是<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2">万维网</a>数据通信的基础，设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>页面的方法，通过HTTP或者<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">HTTPS</a>（超文本传输安全协议）请求的资源由URI（<a href="https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E8%B3%87%E6%BA%90%E6%A8%99%E8%AD%98%E7%AC%A6">统一资源标识符</a>）来标识。关于HTTP的更多内容，我们推荐阅读阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>，简单的说，通过HTTP我们可以获取网络上的（基于字符的）资源，开发中经常会用到的网络API（有的地方也称之为网络数据接口）就是基于HTTP来实现数据传输的。</p><h4 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h4><p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种轻量级的数据交换语言，该语言以易于让人阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是Javascript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面的功能。由于JSON是纯文本，它和<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。</p><p>XML的例子：</p><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;message&gt;&lt;from&gt;Alice&lt;&#x2F;from&gt;&lt;to&gt;Bob&lt;&#x2F;to&gt;&lt;content&gt;Will you marry me?&lt;&#x2F;content&gt;&lt;&#x2F;message&gt;</code></pre><p>JSON的例子：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;from&quot;: &quot;Alice&quot;,    &quot;to&quot;: &quot;Bob&quot;,    &quot;content&quot;: &quot;Will you marry me?&quot;&#125;</code></pre><h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>requests是一个基于HTTP协议来使用网络的第三库，其<a href="http://cn.python-requests.org/zh_CN/latest/">官方网站</a>有这样的一句介绍它的话：“Requests是唯一的一个<strong>非转基因</strong>的Python HTTP库，人类可以安全享用。”简单的说，使用requests库可以非常方便的使用HTTP，避免安全缺陷、冗余代码以及“重复发明轮子”（行业黑话，通常用在软件工程领域表示重新创造一个已有的或是早已被优化過的基本方法）。前面的文章中我们已经使用过这个库，下面我们还是通过requests来实现一个访问网络数据接口并从中获取美女图片下载链接然后下载美女图片到本地的例子程序，程序中使用了<a href="https://www.tianapi.com/">天行数据</a>提供的网络API。</p><p>我们可以先通过pip安装requests及其依赖库。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install requests</code></pre><p>如果使用PyCharm作为开发工具，可以直接在代码中书写<code>import requests</code>，然后通过代码修复功能来自动下载安装requests。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from time import timefrom threading import Threadimport requests# 继承Thread类创建自定义的线程类class DownloadHanlder(Thread):    def __init__(self, url):        super().__init__()        self.url &#x3D; url    def run(self):        filename &#x3D; self.url[self.url.rfind(&#39;&#x2F;&#39;) + 1:]        resp &#x3D; requests.get(self.url)        with open(&#39;&#x2F;Users&#x2F;Hao&#x2F;&#39; + filename, &#39;wb&#39;) as f:            f.write(resp.content)def main():    # 通过requests模块的get函数获取网络资源    # 下面的代码中使用了天行数据接口提供的网络API    # 要使用该数据接口需要在天行数据的网站上注册    # 然后用自己的Key替换掉下面代码的中APIKey即可    resp &#x3D; requests.get(        &#39;http:&#x2F;&#x2F;api.tianapi.com&#x2F;meinv&#x2F;?key&#x3D;APIKey&amp;num&#x3D;10&#39;)    # 将服务器返回的JSON格式的数据解析为字典    data_model &#x3D; resp.json()    for mm_dict in data_model[&#39;newslist&#39;]:        url &#x3D; mm_dict[&#39;picUrl&#39;]        # 通过多线程的方式实现图片下载        DownloadHanlder(url).start()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h3><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h4 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h4><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>下面的代码实现了一个提供时间日期的服务器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from socket import socket, SOCK_STREAM, AF_INETfrom datetime import datetimedef main():    # 1.创建套接字对象并指定使用哪种传输服务    # family&#x3D;AF_INET - IPv4地址    # family&#x3D;AF_INET6 - IPv6地址    # type&#x3D;SOCK_STREAM - TCP套接字    # type&#x3D;SOCK_DGRAM - UDP套接字    # type&#x3D;SOCK_RAW - 原始套接字    server &#x3D; socket(family&#x3D;AF_INET, type&#x3D;SOCK_STREAM)    # 2.绑定IP地址和端口(端口用于区分不同的服务)    # 同一时间在同一个端口上只能绑定一个服务否则报错    server.bind((&#39;192.168.1.2&#39;, 6789))    # 3.开启监听 - 监听客户端连接到服务器    # 参数512可以理解为连接队列的大小    server.listen(512)    print(&#39;服务器启动开始监听...&#39;)    while True:        # 4.通过循环接收客户端的连接并作出相应的处理(提供服务)        # accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行        # accept方法返回一个元组其中的第一个元素是客户端对象        # 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)        client, addr &#x3D; server.accept()        print(str(addr) + &#39;连接到了服务器.&#39;)        # 5.发送数据        client.send(str(datetime.now()).encode(&#39;utf-8&#39;))        # 6.断开连接        client.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>运行服务器程序后我们可以通过Windows系统的telnet来访问该服务器，结果如下图所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">telnet 192.168.1.2 6789</code></pre><p><img src="/./res/telnet.png"></p><p>当然我们也可以通过Python的程序来实现TCP客户端的功能，相较于实现服务器程序，实现客户端程序就简单多了，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from socket import socketdef main():    # 1.创建套接字对象默认使用IPv4和TCP协议    client &#x3D; socket()    # 2.连接到服务器(需要指定IP地址和端口)    client.connect((&#39;192.168.1.2&#39;, 6789))    # 3.从服务器接收数据    print(client.recv(1024).decode(&#39;utf-8&#39;))    client.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>需要注意的是，上面的服务器并没有使用多线程或者异步I&#x2F;O的处理方式，这也就意味着当服务器与一个客户端处于通信状态时，其他的客户端只能排队等待。很显然，这样的服务器并不能满足我们的需求，我们需要的服务器是能够同时接纳和处理多个用户请求的。下面我们来设计一个使用多线程技术处理多个用户请求的服务器，该服务器会向连接到服务器的客户端发送一张图片。</p><p>服务器端代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from socket import socket, SOCK_STREAM, AF_INETfrom base64 import b64encodefrom json import dumpsfrom threading import Threaddef main():        # 自定义线程类    class FileTransferHandler(Thread):        def __init__(self, cclient):            super().__init__()            self.cclient &#x3D; cclient        def run(self):            my_dict &#x3D; &#123;&#125;            my_dict[&#39;filename&#39;] &#x3D; &#39;guido.jpg&#39;            # JSON是纯文本不能携带二进制数据            # 所以图片的二进制数据要处理成base64编码            my_dict[&#39;filedata&#39;] &#x3D; data            # 通过dumps函数将字典处理成JSON字符串            json_str &#x3D; dumps(my_dict)            # 发送JSON字符串            self.cclient.send(json_str.encode(&#39;utf-8&#39;))            self.cclient.close()    # 1.创建套接字对象并指定使用哪种传输服务    server &#x3D; socket()    # 2.绑定IP地址和端口(区分不同的服务)    server.bind((&#39;192.168.1.2&#39;, 5566))    # 3.开启监听 - 监听客户端连接到服务器    server.listen(512)    print(&#39;服务器启动开始监听...&#39;)    with open(&#39;guido.jpg&#39;, &#39;rb&#39;) as f:        # 将二进制数据处理成base64再解码成字符串        data &#x3D; b64encode(f.read()).decode(&#39;utf-8&#39;)    while True:        client, addr &#x3D; server.accept()        # 启动一个线程来处理客户端的请求        FileTransferHandler(client).start()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>客户端代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from socket import socketfrom json import loadsfrom base64 import b64decodedef main():    client &#x3D; socket()    client.connect((&#39;192.168.1.2&#39;, 5566))    # 定义一个保存二进制数据的对象    in_data &#x3D; bytes()    # 由于不知道服务器发送的数据有多大每次接收1024字节    data &#x3D; client.recv(1024)    while data:        # 将收到的数据拼接起来        in_data +&#x3D; data        data &#x3D; client.recv(1024)    # 将收到的二进制数据解码成JSON字符串并转换成字典    # loads函数的作用就是将JSON字符串转成字典对象    my_dict &#x3D; loads(in_data.decode(&#39;utf-8&#39;))    filename &#x3D; my_dict[&#39;filename&#39;]    filedata &#x3D; my_dict[&#39;filedata&#39;].encode(&#39;utf-8&#39;)    with open(&#39;&#x2F;Users&#x2F;Hao&#x2F;&#39; + filename, &#39;wb&#39;) as f:        # 将base64格式的数据解码成二进制数据并写入文件        f.write(b64decode(filedata))    print(&#39;图片已保存.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在这个案例中，我们使用了JSON作为数据传输的格式（通过JSON格式对传输的数据进行了序列化和反序列化的操作），但是JSON并不能携带二进制数据，因此对图片的二进制数据进行了Base64编码的处理。Base64是一种用64个字符表示所有二进制数据的编码方式，通过将二进制数据每6位一组的方式重新组织，刚好可以使用0~9的数字、大小写字母以及“+”和“&#x2F;”总共64个字符表示从<code>000000</code>到<code>111111</code>的64种状态。<a href="https://zh.wikipedia.org/wiki/Base64">维基百科</a>上有关于Base64编码的详细讲解，不熟悉Base64的读者可以自行阅读。</p><blockquote><p><strong>说明：</strong> 上面的代码主要为了讲解网络编程的相关内容因此并没有对异常状况进行处理，请读者自行添加异常处理代码来增强程序的健壮性。</p></blockquote><h4 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h4><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。在Python中也可以使用UDP套接字来创建网络应用，对此我们不进行赘述，有兴趣的读者可以自行研究。</p><h3 id="网络应用开发"><a href="#网络应用开发" class="headerlink" title="网络应用开发"></a>网络应用开发</h3><h4 id="发送电子邮件"><a href="#发送电子邮件" class="headerlink" title="发送电子邮件"></a>发送电子邮件</h4><p>在即时通信软件如此发达的今天，电子邮件仍然是互联网上使用最为广泛的应用之一，公司向应聘者发出录用通知、网站向用户发送一个激活账号的链接、银行向客户推广它们的理财产品等几乎都是通过电子邮件来完成的，而这些任务应该都是由程序自动完成的。</p><p>就像我们可以用HTTP（超文本传输协议）来访问一个网站一样，发送邮件要使用SMTP（简单邮件传输协议），SMTP也是一个建立在TCP（传输控制协议）提供的可靠数据传输服务的基础上的应用级协议，它规定了邮件的发送者如何跟发送邮件的服务器进行通信的细节，而Python中的smtplib模块将这些操作简化成了几个简单的函数。</p><p>下面的代码演示了如何在Python发送邮件。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from smtplib import SMTPfrom email.header import Headerfrom email.mime.text import MIMETextdef main():    # 请自行修改下面的邮件发送者和接收者    sender &#x3D; &#39;abcdefg@126.com&#39;    receivers &#x3D; [&#39;uvwxyz@qq.com&#39;, &#39;uvwxyz@126.com&#39;]    message &#x3D; MIMEText(&#39;用Python发送邮件的示例代码.&#39;, &#39;plain&#39;, &#39;utf-8&#39;)    message[&#39;From&#39;] &#x3D; Header(&#39;王大锤&#39;, &#39;utf-8&#39;)    message[&#39;To&#39;] &#x3D; Header(&#39;骆昊&#39;, &#39;utf-8&#39;)    message[&#39;Subject&#39;] &#x3D; Header(&#39;示例代码实验邮件&#39;, &#39;utf-8&#39;)    smtper &#x3D; SMTP(&#39;smtp.126.com&#39;)    # 请自行修改下面的登录口令    smtper.login(sender, &#39;secretpass&#39;)    smtper.sendmail(sender, receivers, message.as_string())    print(&#39;邮件发送完成!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>如果要发送带有附件的邮件，那么可以按照下面的方式进行操作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from smtplib import SMTPfrom email.header import Headerfrom email.mime.text import MIMETextfrom email.mime.image import MIMEImagefrom email.mime.multipart import MIMEMultipartimport urllibdef main():    # 创建一个带附件的邮件消息对象    message &#x3D; MIMEMultipart()        # 创建文本内容    text_content &#x3D; MIMEText(&#39;附件中有本月数据请查收&#39;, &#39;plain&#39;, &#39;utf-8&#39;)    message[&#39;Subject&#39;] &#x3D; Header(&#39;本月数据&#39;, &#39;utf-8&#39;)    # 将文本内容添加到邮件消息对象中    message.attach(text_content)    # 读取文件并将文件作为附件添加到邮件消息对象中    with open(&#39;&#x2F;Users&#x2F;Hao&#x2F;Desktop&#x2F;hello.txt&#39;, &#39;rb&#39;) as f:        txt &#x3D; MIMEText(f.read(), &#39;base64&#39;, &#39;utf-8&#39;)        txt[&#39;Content-Type&#39;] &#x3D; &#39;text&#x2F;plain&#39;        txt[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;hello.txt&#39;        message.attach(txt)    # 读取文件并将文件作为附件添加到邮件消息对象中    with open(&#39;&#x2F;Users&#x2F;Hao&#x2F;Desktop&#x2F;汇总数据.xlsx&#39;, &#39;rb&#39;) as f:        xls &#x3D; MIMEText(f.read(), &#39;base64&#39;, &#39;utf-8&#39;)        xls[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;vnd.ms-excel&#39;        xls[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;month-data.xlsx&#39;        message.attach(xls)        # 创建SMTP对象    smtper &#x3D; SMTP(&#39;smtp.126.com&#39;)    # 开启安全连接    # smtper.starttls()    sender &#x3D; &#39;abcdefg@126.com&#39;    receivers &#x3D; [&#39;uvwxyz@qq.com&#39;]    # 登录到SMTP服务器    # 请注意此处不是使用密码而是邮件客户端授权码进行登录    # 对此有疑问的读者可以联系自己使用的邮件服务器客服    smtper.login(sender, &#39;secretpass&#39;)    # 发送邮件    smtper.sendmail(sender, receivers, message.as_string())    # 与邮件服务器断开连接    smtper.quit()    print(&#39;发送完成!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h4><p>发送短信也是项目中常见的功能，网站的注册码、验证码、营销信息基本上都是通过短信来发送给用户的。在下面的代码中我们使用了<a href="http://www.ihuyi.com/">互亿无线</a>短信平台（该平台为注册用户提供了50条免费短信以及常用开发语言发送短信的demo，可以登录该网站并在用户自服务页面中对短信进行配置）提供的API接口实现了发送短信的服务，当然国内的短信平台很多，读者可以根据自己的需要进行选择（通常会考虑费用预算、短信达到率、使用的难易程度等指标），如果需要在商业项目中使用短信服务建议购买短信平台提供的套餐服务。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import urllib.parseimport http.clientimport jsondef main():    host  &#x3D; &quot;106.ihuyi.com&quot;    sms_send_uri &#x3D; &quot;&#x2F;webservice&#x2F;sms.php?method&#x3D;Submit&quot;    # 下面的参数需要填入自己注册的账号和对应的密码    params &#x3D; urllib.parse.urlencode(&#123;&#39;account&#39;: &#39;你自己的账号&#39;, &#39;password&#39; : &#39;你自己的密码&#39;, &#39;content&#39;: &#39;您的验证码是：147258。请不要把验证码泄露给其他人。&#39;, &#39;mobile&#39;: &#39;接收者的手机号&#39;, &#39;format&#39;:&#39;json&#39; &#125;)    print(params)    headers &#x3D; &#123;&#39;Content-type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;, &#39;Accept&#39;: &#39;text&#x2F;plain&#39;&#125;    conn &#x3D; http.client.HTTPConnection(host, port&#x3D;80, timeout&#x3D;30)    conn.request(&#39;POST&#39;, sms_send_uri, params, headers)    response &#x3D; conn.getresponse()    response_str &#x3D; response.read()    jsonstr &#x3D; response_str.decode(&#39;utf-8&#39;)    print(json.loads(jsonstr))    conn.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.图像和办公文档处理</title>
      <link href="/2024/07/01/15.tu-xiang-he-ban-gong-wen-dang-chu-li/"/>
      <url>/2024/07/01/15.tu-xiang-he-ban-gong-wen-dang-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="图像和办公文档处理"><a href="#图像和办公文档处理" class="headerlink" title="图像和办公文档处理"></a>图像和办公文档处理</h2><p>用程序来处理图像和办公文档经常出现在实际开发中，Python的标准库中虽然没有直接支持这些操作的模块，但我们可以通过Python生态圈中的第三方模块来完成这些操作。</p><h3 id="操作图像"><a href="#操作图像" class="headerlink" title="操作图像"></a>操作图像</h3><h4 id="计算机图像相关知识"><a href="#计算机图像相关知识" class="headerlink" title="计算机图像相关知识"></a>计算机图像相关知识</h4><ol><li><p>颜色。如果你有使用颜料画画的经历，那么一定知道混合红、黄、蓝三种颜料可以得到其他的颜色，事实上这三种颜色就是被我们称为美术三原色的东西，它们是不能再分解的基本颜色。在计算机中，我们可以将红、绿、蓝三种色光以不同的比例叠加来组合成其他的颜色，因此这三种颜色就是色光三原色，所以我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。</p><table><thead><tr><th align="center">名称</th><th align="center">RGBA值</th><th align="center">名称</th><th align="center">RGBA值</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">(255, 255, 255, 255)</td><td align="center">Red</td><td align="center">(255, 0, 0, 255)</td></tr><tr><td align="center">Green</td><td align="center">(0, 255, 0, 255)</td><td align="center">Blue</td><td align="center">(0, 0, 255, 255)</td></tr><tr><td align="center">Gray</td><td align="center">(128, 128, 128, 255)</td><td align="center">Yellow</td><td align="center">(255, 255, 0, 255)</td></tr><tr><td align="center">Black</td><td align="center">(0, 0, 0, 255)</td><td align="center">Purple</td><td align="center">(128, 0, 128, 255)</td></tr></tbody></table></li><li><p>像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。</p></li></ol><h4 id="用Pillow操作图像"><a href="#用Pillow操作图像" class="headerlink" title="用Pillow操作图像"></a>用Pillow操作图像</h4><p>Pillow是由从著名的Python图像处理库PIL发展出来的一个分支，通过Pillow可以实现图像压缩和图像处理等各种操作。可以使用下面的命令来安装Pillow。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install pillow</code></pre><p>Pillow中最为重要的是Image类，读取和处理图像都要通过这个类来完成。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from PIL import Image&gt;&gt;&gt;&gt;&gt;&gt; image &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.jpg&#39;)&gt;&gt;&gt; image.format, image.size, image.mode(&#39;JPEG&#39;, (500, 750), &#39;RGB&#39;)&gt;&gt;&gt; image.show()</code></pre><p><img src="/./res/image-show.png"></p><ol><li><p>剪裁图像</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; image &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.jpg&#39;)&gt;&gt;&gt; rect &#x3D; 80, 20, 310, 360&gt;&gt;&gt; image.crop(rect).show()</code></pre><p><img src="/./res/image-crop.png"></p></li><li><p>生成缩略图</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; image &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.jpg&#39;)&gt;&gt;&gt; size &#x3D; 128, 128&gt;&gt;&gt; image.thumbnail(size)&gt;&gt;&gt; image.show()</code></pre><p><img src="/./res/image-thumbnail.png"></p></li><li><p>缩放和黏贴图像</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; image1 &#x3D; Image.open(&#39;.&#x2F;res&#x2F;luohao.png&#39;)&gt;&gt;&gt; image2 &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.jpg&#39;)&gt;&gt;&gt; rect &#x3D; 80, 20, 310, 360&gt;&gt;&gt; guido_head &#x3D; image2.crop(rect)&gt;&gt;&gt; width, height &#x3D; guido_head.size&gt;&gt;&gt; image1.paste(guido_head.resize((int(width &#x2F; 1.5), int(height &#x2F; 1.5))), (172, 40))</code></pre><p><img src="/./res/image-paste.png"></p></li><li><p>旋转和翻转</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; image &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.png&#39;)&gt;&gt;&gt; image.rotate(180).show()&gt;&gt;&gt; image.transpose(Image.FLIP_LEFT_RIGHT).show()</code></pre><p><img src="/./res/image-rotate.png"></p><p><img src="/./res/image-transpose.png"></p></li><li><p>操作像素</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; image &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.jpg&#39;)&gt;&gt;&gt; for x in range(80, 310):...     for y in range(20, 360):...         image.putpixel((x, y), (128, 128, 128))... &gt;&gt;&gt; image.show()</code></pre><p><img src="/./res/image-putpixel.png"></p></li><li><p>滤镜效果</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from PIL import Image, ImageFilter&gt;&gt;&gt;&gt;&gt;&gt; image &#x3D; Image.open(&#39;.&#x2F;res&#x2F;guido.jpg&#39;)&gt;&gt;&gt; image.filter(ImageFilter.CONTOUR).show()</code></pre><p><img src="/./res/image-filter.png"></p></li></ol><h3 id="处理Excel电子表格"><a href="#处理Excel电子表格" class="headerlink" title="处理Excel电子表格"></a>处理Excel电子表格</h3><p>Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，由于微软从Office 2007开始使用了新的文件格式，这使得Office Excel和LibreOffice Calc、OpenOffice Calc是完全兼容的，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import datetimefrom openpyxl import Workbookwb &#x3D; Workbook()ws &#x3D; wb.activews[&#39;A1&#39;] &#x3D; 42ws.append([1, 2, 3])ws[&#39;A2&#39;] &#x3D; datetime.datetime.now()wb.save(&quot;sample.xlsx&quot;)</code></pre><h3 id="处理Word文档"><a href="#处理Word文档" class="headerlink" title="处理Word文档"></a>处理Word文档</h3><p>利用python-docx模块，Python可以创建和修改Word文档，当然这里的Word文档不仅仅是指通过微软的Office软件创建的扩展名为docx的文档，LibreOffice Writer和OpenOffice Writer都是免费的字处理软件。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from docx import Documentfrom docx.shared import Inchesdocument &#x3D; Document()document.add_heading(&#39;Document Title&#39;, 0)p &#x3D; document.add_paragraph(&#39;A plain paragraph having some &#39;)p.add_run(&#39;bold&#39;).bold &#x3D; Truep.add_run(&#39; and some &#39;)p.add_run(&#39;italic.&#39;).italic &#x3D; Truedocument.add_heading(&#39;Heading, level 1&#39;, level&#x3D;1)document.add_paragraph(&#39;Intense quote&#39;, style&#x3D;&#39;Intense Quote&#39;)document.add_paragraph(    &#39;first item in unordered list&#39;, style&#x3D;&#39;List Bullet&#39;)document.add_paragraph(    &#39;first item in ordered list&#39;, style&#x3D;&#39;List Number&#39;)document.add_picture(&#39;monty-truth.png&#39;, width&#x3D;Inches(1.25))records &#x3D; (    (3, &#39;101&#39;, &#39;Spam&#39;),    (7, &#39;422&#39;, &#39;Eggs&#39;),    (4, &#39;631&#39;, &#39;Spam, spam, eggs, and spam&#39;))table &#x3D; document.add_table(rows&#x3D;1, cols&#x3D;3)hdr_cells &#x3D; table.rows[0].cellshdr_cells[0].text &#x3D; &#39;Qty&#39;hdr_cells[1].text &#x3D; &#39;Id&#39;hdr_cells[2].text &#x3D; &#39;Desc&#39;for qty, id, desc in records:    row_cells &#x3D; table.add_row().cells    row_cells[0].text &#x3D; str(qty)    row_cells[1].text &#x3D; id    row_cells[2].text &#x3D; descdocument.add_page_break()document.save(&#39;demo.docx&#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-20.Python语言进阶</title>
      <link href="/2024/07/01/16-20.python-yu-yan-jin-jie/"/>
      <url>/2024/07/01/16-20.python-yu-yan-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Python语言进阶"><a href="#Python语言进阶" class="headerlink" title="Python语言进阶"></a>Python语言进阶</h2><h3 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h3><ul><li><p>生成式（推导式）的用法</p><pre class="language-Python" data-language="Python"><code class="language-Python">prices &#x3D; &#123;    &#39;AAPL&#39;: 191.88,    &#39;GOOG&#39;: 1186.96,    &#39;IBM&#39;: 149.24,    &#39;ORCL&#39;: 48.44,    &#39;ACN&#39;: 166.89,    &#39;FB&#39;: 208.09,    &#39;SYMC&#39;: 21.29&#125;# 用股票价格大于100元的股票构造一个新的字典prices2 &#x3D; &#123;key: value for key, value in prices.items() if value &gt; 100&#125;print(prices2)</code></pre><blockquote><p>说明：生成式（推导式）可以用来生成列表、集合和字典。</p></blockquote></li><li><p>嵌套的列表的坑</p><pre class="language-Python" data-language="Python"><code class="language-Python">names &#x3D; [&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;]courses &#x3D; [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]# 录入五个学生三门课程的成绩# 错误 - 参考http:&#x2F;&#x2F;pythontutor.com&#x2F;visualize.html#mode&#x3D;edit# scores &#x3D; [[None] * len(courses)] * len(names)scores &#x3D; [[None] * len(courses) for _ in range(len(names))]for row, name in enumerate(names):    for col, course in enumerate(courses):        scores[row][col] &#x3D; float(input(f&#39;请输入&#123;name&#125;的&#123;course&#125;成绩: &#39;))        print(scores)</code></pre><p><a href="http://pythontutor.com/">Python Tutor</a> - VISUALIZE CODE AND GET LIVE HELP</p></li><li><p><code>heapq</code>模块（堆排序）</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;从列表中找出最大的或最小的N个元素堆结构(大根堆&#x2F;小根堆)&quot;&quot;&quot;import heapqlist1 &#x3D; [34, 25, 12, 99, 87, 63, 58, 78, 88, 92]list2 &#x3D; [    &#123;&#39;name&#39;: &#39;IBM&#39;, &#39;shares&#39;: 100, &#39;price&#39;: 91.1&#125;,    &#123;&#39;name&#39;: &#39;AAPL&#39;, &#39;shares&#39;: 50, &#39;price&#39;: 543.22&#125;,    &#123;&#39;name&#39;: &#39;FB&#39;, &#39;shares&#39;: 200, &#39;price&#39;: 21.09&#125;,    &#123;&#39;name&#39;: &#39;HPQ&#39;, &#39;shares&#39;: 35, &#39;price&#39;: 31.75&#125;,    &#123;&#39;name&#39;: &#39;YHOO&#39;, &#39;shares&#39;: 45, &#39;price&#39;: 16.35&#125;,    &#123;&#39;name&#39;: &#39;ACME&#39;, &#39;shares&#39;: 75, &#39;price&#39;: 115.65&#125;]print(heapq.nlargest(3, list1))print(heapq.nsmallest(3, list1))print(heapq.nlargest(2, list2, key&#x3D;lambda x: x[&#39;price&#39;]))print(heapq.nlargest(2, list2, key&#x3D;lambda x: x[&#39;shares&#39;]))</code></pre></li><li><p><code>itertools</code>模块</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;迭代工具模块&quot;&quot;&quot;import itertools# 产生ABCD的全排列itertools.permutations(&#39;ABCD&#39;)# 产生ABCDE的五选三组合itertools.combinations(&#39;ABCDE&#39;, 3)# 产生ABCD和123的笛卡尔积itertools.product(&#39;ABCD&#39;, &#39;123&#39;)# 产生ABC的无限循环序列itertools.cycle((&#39;A&#39;, &#39;B&#39;, &#39;C&#39;))</code></pre></li><li><p><code>collections</code>模块</p><p>常用的工具类：</p><ul><li><code>namedtuple</code>：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。</li><li><code>deque</code>：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为$O(1)$。</li><li><code>Counter</code>：<code>dict</code>的子类，键是元素，值是元素的计数，它的<code>most_common()</code>方法可以帮助我们获取出现频率最高的元素。<code>Counter</code>和<code>dict</code>的继承关系我认为是值得商榷的，按照CARP原则，<code>Counter</code>跟<code>dict</code>的关系应该设计为关联关系更为合理。</li><li><code>OrderedDict</code>：<code>dict</code>的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。</li><li><code>defaultdict</code>：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的<code>setdefault()</code>方法，这种做法更加高效。</li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;找出序列中出现次数最多的元素&quot;&quot;&quot;from collections import Counterwords &#x3D; [    &#39;look&#39;, &#39;into&#39;, &#39;my&#39;, &#39;eyes&#39;, &#39;look&#39;, &#39;into&#39;, &#39;my&#39;, &#39;eyes&#39;,    &#39;the&#39;, &#39;eyes&#39;, &#39;the&#39;, &#39;eyes&#39;, &#39;the&#39;, &#39;eyes&#39;, &#39;not&#39;, &#39;around&#39;,    &#39;the&#39;, &#39;eyes&#39;, &quot;don&#39;t&quot;, &#39;look&#39;, &#39;around&#39;, &#39;the&#39;, &#39;eyes&#39;,    &#39;look&#39;, &#39;into&#39;, &#39;my&#39;, &#39;eyes&#39;, &quot;you&#39;re&quot;, &#39;under&#39;]counter &#x3D; Counter(words)print(counter.most_common(3))</code></pre></li></ul><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li><p>算法：解决问题的方法和步骤</p></li><li><p>评价算法的好坏：渐近时间复杂度和渐近空间复杂度。</p></li><li><p>渐近时间复杂度的大O标记：</p><ul><li><img src="http://latex.codecogs.com/gif.latex?O(c)" /> - 常量时间复杂度 - 布隆过滤器 &#x2F; 哈希存储</li><li><img src="http://latex.codecogs.com/gif.latex?O(log_2n)" /> - 对数时间复杂度 - 折半查找（二分查找）</li><li><img src="http://latex.codecogs.com/gif.latex?O(n)" /> - 线性时间复杂度 - 顺序查找 &#x2F; 计数排序</li><li><img src="http://latex.codecogs.com/gif.latex?O(n*log_2n)" /> - 对数线性时间复杂度 - 高级排序算法（归并排序、快速排序）</li><li><img src="http://latex.codecogs.com/gif.latex?O(n^2)" /> - 平方时间复杂度 - 简单排序算法（选择排序、插入排序、冒泡排序）</li><li><img src="http://latex.codecogs.com/gif.latex?O(n^3)" /> - 立方时间复杂度 - Floyd算法 &#x2F; 矩阵乘法运算</li><li><img src="http://latex.codecogs.com/gif.latex?O(2^n)" /> - 几何级数时间复杂度 - 汉诺塔</li><li><img src="http://latex.codecogs.com/gif.latex?O(n!)" /> - 阶乘时间复杂度 - 旅行经销商问题 - NPC</li></ul><p><img src="/./res/algorithm_complexity_1.png"></p><p><img src="/./res/algorithm_complexity_2.png"></p></li><li><p>排序算法（选择、冒泡和归并）和查找算法（顺序和折半）</p><pre class="language-Python" data-language="Python"><code class="language-Python">def select_sort(items, comp&#x3D;lambda x, y: x &lt; y):    &quot;&quot;&quot;简单选择排序&quot;&quot;&quot;    items &#x3D; items[:]    for i in range(len(items) - 1):        min_index &#x3D; i        for j in range(i + 1, len(items)):            if comp(items[j], items[min_index]):                min_index &#x3D; j        items[i], items[min_index] &#x3D; items[min_index], items[i]    return items</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">def bubble_sort(items, comp&#x3D;lambda x, y: x &gt; y):    &quot;&quot;&quot;冒泡排序&quot;&quot;&quot;    items &#x3D; items[:]    for i in range(len(items) - 1):        swapped &#x3D; False        for j in range(len(items) - 1 - i):            if comp(items[j], items[j + 1]):                items[j], items[j + 1] &#x3D; items[j + 1], items[j]                swapped &#x3D; True        if not swapped:            break    return items</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">def bubble_sort(items, comp&#x3D;lambda x, y: x &gt; y):    &quot;&quot;&quot;搅拌排序(冒泡排序升级版)&quot;&quot;&quot;    items &#x3D; items[:]    for i in range(len(items) - 1):        swapped &#x3D; False        for j in range(len(items) - 1 - i):            if comp(items[j], items[j + 1]):                items[j], items[j + 1] &#x3D; items[j + 1], items[j]                swapped &#x3D; True        if swapped:            swapped &#x3D; False            for j in range(len(items) - 2 - i, i, -1):                if comp(items[j - 1], items[j]):                    items[j], items[j - 1] &#x3D; items[j - 1], items[j]                    swapped &#x3D; True        if not swapped:            break    return items</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">def merge(items1, items2, comp&#x3D;lambda x, y: x &lt; y):    &quot;&quot;&quot;合并(将两个有序的列表合并成一个有序的列表)&quot;&quot;&quot;    items &#x3D; []    index1, index2 &#x3D; 0, 0    while index1 &lt; len(items1) and index2 &lt; len(items2):        if comp(items1[index1], items2[index2]):            items.append(items1[index1])            index1 +&#x3D; 1        else:            items.append(items2[index2])            index2 +&#x3D; 1    items +&#x3D; items1[index1:]    items +&#x3D; items2[index2:]    return itemsdef merge_sort(items, comp&#x3D;lambda x, y: x &lt; y):    return _merge_sort(list(items), comp)def _merge_sort(items, comp):    &quot;&quot;&quot;归并排序&quot;&quot;&quot;    if len(items) &lt; 2:        return items    mid &#x3D; len(items) &#x2F;&#x2F; 2    left &#x3D; _merge_sort(items[:mid], comp)    right &#x3D; _merge_sort(items[mid:], comp)    return merge(left, right, comp)</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">def seq_search(items, key):    &quot;&quot;&quot;顺序查找&quot;&quot;&quot;    for index, item in enumerate(items):        if item &#x3D;&#x3D; key:            return index    return -1</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">def bin_search(items, key):    &quot;&quot;&quot;折半查找&quot;&quot;&quot;    start, end &#x3D; 0, len(items) - 1    while start &lt;&#x3D; end:        mid &#x3D; (start + end) &#x2F;&#x2F; 2        if key &gt; items[mid]:            start &#x3D; mid + 1        elif key &lt; items[mid]:            end &#x3D; mid - 1        else:            return mid    return -1</code></pre></li><li><p>常用算法：</p><ul><li>穷举法 - 又称为暴力破解法，对所有的可能性进行验证，直到找到正确答案。</li><li>贪婪法 - 在对问题求解时，总是做出在当前看来</li><li>最好的选择，不追求最优解，快速找到满意解。</li><li>分治法 - 把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题，直到可以直接求解的程度，最后将子问题的解进行合并得到原问题的解。</li><li>回溯法 - 回溯法又称为试探法，按选优条件向前搜索，当搜索到某一步发现原先选择并不优或达不到目标时，就退回一步重新选择。</li><li>动态规划 - 基本思想也是将待求解问题分解成若干个子问题，先求解并保存这些子问题的解，避免产生大量的重复运算。</li></ul><p>穷举法例子：百钱百鸡和五人分鱼。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 公鸡5元一只 母鸡3元一只 小鸡1元三只# 用100元买100只鸡 问公鸡&#x2F;母鸡&#x2F;小鸡各多少只for x in range(20):    for y in range(33):        z &#x3D; 100 - x - y        if 5 * x + 3 * y + z &#x2F;&#x2F; 3 &#x3D;&#x3D; 100 and z % 3 &#x3D;&#x3D; 0:            print(x, y, z)# A、B、C、D、E五人在某天夜里合伙捕鱼 最后疲惫不堪各自睡觉# 第二天A第一个醒来 他将鱼分为5份 扔掉多余的1条 拿走自己的一份# B第二个醒来 也将鱼分为5份 扔掉多余的1条 拿走自己的一份# 然后C、D、E依次醒来也按同样的方式分鱼 问他们至少捕了多少条鱼fish &#x3D; 6while True:    total &#x3D; fish    enough &#x3D; True    for _ in range(5):        if (total - 1) % 5 &#x3D;&#x3D; 0:            total &#x3D; (total - 1) &#x2F;&#x2F; 5 * 4        else:            enough &#x3D; False            break    if enough:        print(fish)        break    fish +&#x3D; 5</code></pre><p>贪婪法例子：假设小偷有一个背包，最多能装20公斤赃物，他闯入一户人家，发现如下表所示的物品。很显然，他不能把所有物品都装进背包，所以必须确定拿走哪些物品，留下哪些物品。</p><table><thead><tr><th align="center">名称</th><th align="center">价格（美元）</th><th align="center">重量（kg）</th></tr></thead><tbody><tr><td align="center">电脑</td><td align="center">200</td><td align="center">20</td></tr><tr><td align="center">收音机</td><td align="center">20</td><td align="center">4</td></tr><tr><td align="center">钟</td><td align="center">175</td><td align="center">10</td></tr><tr><td align="center">花瓶</td><td align="center">50</td><td align="center">2</td></tr><tr><td align="center">书</td><td align="center">10</td><td align="center">1</td></tr><tr><td align="center">油画</td><td align="center">90</td><td align="center">9</td></tr></tbody></table><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;贪婪法：在对问题求解时，总是做出在当前看来是最好的选择，不追求最优解，快速找到满意解。输入：20 6电脑 200 20收音机 20 4钟 175 10花瓶 50 2书 10 1油画 90 9&quot;&quot;&quot;class Thing(object):    &quot;&quot;&quot;物品&quot;&quot;&quot;    def __init__(self, name, price, weight):        self.name &#x3D; name        self.price &#x3D; price        self.weight &#x3D; weight    @property    def value(self):        &quot;&quot;&quot;价格重量比&quot;&quot;&quot;        return self.price &#x2F; self.weightdef input_thing():    &quot;&quot;&quot;输入物品信息&quot;&quot;&quot;    name_str, price_str, weight_str &#x3D; input().split()    return name_str, int(price_str), int(weight_str)def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    max_weight, num_of_things &#x3D; map(int, input().split())    all_things &#x3D; []    for _ in range(num_of_things):        all_things.append(Thing(*input_thing()))    all_things.sort(key&#x3D;lambda x: x.value, reverse&#x3D;True)    total_weight &#x3D; 0    total_price &#x3D; 0    for thing in all_things:        if total_weight + thing.weight &lt;&#x3D; max_weight:            print(f&#39;小偷拿走了&#123;thing.name&#125;&#39;)            total_weight +&#x3D; thing.weight            total_price +&#x3D; thing.price    print(f&#39;总价值: &#123;total_price&#125;美元&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>分治法例子：<a href="https://zh.wikipedia.org/zh/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大&quot;&quot;&quot;def quick_sort(items, comp&#x3D;lambda x, y: x &lt;&#x3D; y):    items &#x3D; list(items)[:]    _quick_sort(items, 0, len(items) - 1, comp)    return itemsdef _quick_sort(items, start, end, comp):    if start &lt; end:        pos &#x3D; _partition(items, start, end, comp)        _quick_sort(items, start, pos - 1, comp)        _quick_sort(items, pos + 1, end, comp)def _partition(items, start, end, comp):    pivot &#x3D; items[end]    i &#x3D; start - 1    for j in range(start, end):        if comp(items[j], pivot):            i +&#x3D; 1            items[i], items[j] &#x3D; items[j], items[i]    items[i + 1], items[end] &#x3D; items[end], items[i + 1]    return i + 1</code></pre><p>回溯法例子：<a href="https://zh.wikipedia.org/zh/%E9%AA%91%E5%A3%AB%E5%B7%A1%E9%80%BB">骑士巡逻</a>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;递归回溯法：叫称为试探法，按选优条件向前搜索，当搜索到某一步，发现原先选择并不优或达不到目标时，就退回一步重新选择，比较经典的问题包括骑士巡逻、八皇后和迷宫寻路等。&quot;&quot;&quot;import sysimport timeSIZE &#x3D; 5total &#x3D; 0def print_board(board):    for row in board:        for col in row:            print(str(col).center(4), end&#x3D;&#39;&#39;)        print()def patrol(board, row, col, step&#x3D;1):    if row &gt;&#x3D; 0 and row &lt; SIZE and \        col &gt;&#x3D; 0 and col &lt; SIZE and \        board[row][col] &#x3D;&#x3D; 0:        board[row][col] &#x3D; step        if step &#x3D;&#x3D; SIZE * SIZE:            global total            total +&#x3D; 1            print(f&#39;第&#123;total&#125;种走法: &#39;)            print_board(board)        patrol(board, row - 2, col - 1, step + 1)        patrol(board, row - 1, col - 2, step + 1)        patrol(board, row + 1, col - 2, step + 1)        patrol(board, row + 2, col - 1, step + 1)        patrol(board, row + 2, col + 1, step + 1)        patrol(board, row + 1, col + 2, step + 1)        patrol(board, row - 1, col + 2, step + 1)        patrol(board, row - 2, col + 1, step + 1)        board[row][col] &#x3D; 0def main():    board &#x3D; [[0] * SIZE for _ in range(SIZE)]    patrol(board, SIZE - 1, SIZE - 1)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>动态规划例子：子列表元素之和的最大值。</p><blockquote><p>说明：子列表指的是列表中索引（下标）连续的元素构成的列表；列表中的元素是int类型，可能包含正整数、0、负整数；程序输入列表中的元素，输出子列表元素求和的最大值，例如：</p><p>输入：1 -2 3 5 -3 2</p><p>输出：8</p><p>输入：0 -2 3 5 -1 2</p><p>输出：9</p><p>输入：-9 -2 -3 -5 -3</p><p>输出：-2</p></blockquote><pre class="language-Python" data-language="Python"><code class="language-Python">def main():    items &#x3D; list(map(int, input().split()))    overall &#x3D; partial &#x3D; items[0]    for i in range(1, len(items)):        partial &#x3D; max(items[i], partial + items[i])        overall &#x3D; max(partial, overall)    print(overall)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明</strong>：这个题目最容易想到的解法是使用二重循环，但是代码的时间性能将会变得非常的糟糕。使用动态规划的思想，仅仅是多用了两个变量，就将原来$O(N^2)$复杂度的问题变成了$O(N)$。</p></blockquote></li></ul><h3 id="函数的使用方式"><a href="#函数的使用方式" class="headerlink" title="函数的使用方式"></a>函数的使用方式</h3><ul><li><p>将函数视为“一等公民”</p><ul><li>函数可以赋值给变量</li><li>函数可以作为函数的参数</li><li>函数可以作为函数的返回值</li></ul></li><li><p>高阶函数的用法（<code>filter</code>、<code>map</code>以及它们的替代品）</p><pre class="language-Python" data-language="Python"><code class="language-Python">items1 &#x3D; list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10))))items2 &#x3D; [x ** 2 for x in range(1, 10) if x % 2]</code></pre></li><li><p>位置参数、可变参数、关键字参数、命名关键字参数</p></li><li><p>参数的元信息（代码可读性问题）</p></li><li><p>匿名函数和内联函数的用法（<code>lambda</code>函数）</p></li><li><p>闭包和作用域问题</p><ul><li><p>Python搜索变量的LEGB顺序（Local &gt;&gt;&gt; Embedded &gt;&gt;&gt; Global &gt;&gt;&gt; Built-in）</p></li><li><p><code>global</code>和<code>nonlocal</code>关键字的作用</p><p><code>global</code>：声明或定义全局变量（要么直接使用现有的全局作用域的变量，要么定义一个变量放到全局作用域）。</p><p><code>nonlocal</code>：声明使用嵌套作用域的变量（嵌套作用域必须存在该变量，否则报错）。</p></li></ul></li><li><p>装饰器函数（使用装饰器和取消装饰器）</p><p>例子：输出函数执行时间的装饰器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def record_time(func):    &quot;&quot;&quot;自定义装饰函数的装饰器&quot;&quot;&quot;        @wraps(func)    def wrapper(*args, **kwargs):        start &#x3D; time()        result &#x3D; func(*args, **kwargs)        print(f&#39;&#123;func.__name__&#125;: &#123;time() - start&#125;秒&#39;)        return result            return wrapper</code></pre><p>如果装饰器不希望跟<code>print</code>函数耦合，可以编写可以参数化的装饰器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import wrapsfrom time import timedef record(output):    &quot;&quot;&quot;可以参数化的装饰器&quot;&quot;&quot;def decorate(func):@wraps(func)def wrapper(*args, **kwargs):start &#x3D; time()result &#x3D; func(*args, **kwargs)output(func.__name__, time() - start)return result            return wrapperreturn decorate</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import wrapsfrom time import timeclass Record():    &quot;&quot;&quot;通过定义类的方式定义装饰器&quot;&quot;&quot;    def __init__(self, output):        self.output &#x3D; output    def __call__(self, func):        @wraps(func)        def wrapper(*args, **kwargs):            start &#x3D; time()            result &#x3D; func(*args, **kwargs)            self.output(func.__name__, time() - start)            return result        return wrapper</code></pre><blockquote><p><strong>说明</strong>：由于对带装饰功能的函数添加了@wraps装饰器，可以通过<code>func.__wrapped__</code>方式获得被装饰之前的函数或类来取消装饰器的作用。</p></blockquote><p>例子：用装饰器来实现单例模式。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import wrapsdef singleton(cls):    &quot;&quot;&quot;装饰类的装饰器&quot;&quot;&quot;    instances &#x3D; &#123;&#125;    @wraps(cls)    def wrapper(*args, **kwargs):        if cls not in instances:            instances[cls] &#x3D; cls(*args, **kwargs)        return instances[cls]    return wrapper@singletonclass President:    &quot;&quot;&quot;总统(单例类)&quot;&quot;&quot;    pass</code></pre><blockquote><p><strong>提示</strong>：上面的代码中用到了闭包（closure），不知道你是否已经意识到了。还没有一个小问题就是，上面的代码并没有实现线程安全的单例，如果要实现线程安全的单例应该怎么做呢？</p></blockquote><p>线程安全的单例装饰器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import wrapsfrom threading import RLockdef singleton(cls):    &quot;&quot;&quot;线程安全的单例装饰器&quot;&quot;&quot;    instances &#x3D; &#123;&#125;    locker &#x3D; RLock()    @wraps(cls)    def wrapper(*args, **kwargs):        if cls not in instances:            with locker:                if cls not in instances:                    instances[cls] &#x3D; cls(*args, **kwargs)        return instances[cls]    return wrapper</code></pre><blockquote><p><strong>提示</strong>：上面的代码用到了<code>with</code>上下文语法来进行锁操作，因为锁对象本身就是上下文管理器对象（支持<code>__enter__</code>和<code>__exit__</code>魔术方法）。在<code>wrapper</code>函数中，我们先做了一次不带锁的检查，然后再做带锁的检查，这样做比直接加锁检查性能要更好，如果对象已经创建就没有必须再去加锁而是直接返回该对象就可以了。</p></blockquote></li></ul><h3 id="面向对象相关知识"><a href="#面向对象相关知识" class="headerlink" title="面向对象相关知识"></a>面向对象相关知识</h3><ul><li><p>三大支柱：封装、继承、多态</p><p>例子：工资结算系统。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;月薪结算系统 - 部门经理每月15000 程序员每小时200 销售员1800底薪加销售额5%提成&quot;&quot;&quot;from abc import ABCMeta, abstractmethodclass Employee(metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;员工(抽象类)&quot;&quot;&quot;    def __init__(self, name):        self.name &#x3D; name    @abstractmethod    def get_salary(self):        &quot;&quot;&quot;结算月薪(抽象方法)&quot;&quot;&quot;        passclass Manager(Employee):    &quot;&quot;&quot;部门经理&quot;&quot;&quot;    def get_salary(self):        return 15000.0class Programmer(Employee):    &quot;&quot;&quot;程序员&quot;&quot;&quot;    def __init__(self, name, working_hour&#x3D;0):        self.working_hour &#x3D; working_hour        super().__init__(name)    def get_salary(self):        return 200.0 * self.working_hourclass Salesman(Employee):    &quot;&quot;&quot;销售员&quot;&quot;&quot;    def __init__(self, name, sales&#x3D;0.0):        self.sales &#x3D; sales        super().__init__(name)    def get_salary(self):        return 1800.0 + self.sales * 0.05class EmployeeFactory:    &quot;&quot;&quot;创建员工的工厂（工厂模式 - 通过工厂实现对象使用者和对象之间的解耦合）&quot;&quot;&quot;    @staticmethod    def create(emp_type, *args, **kwargs):        &quot;&quot;&quot;创建员工&quot;&quot;&quot;        all_emp_types &#x3D; &#123;&#39;M&#39;: Manager, &#39;P&#39;: Programmer, &#39;S&#39;: Salesman&#125;        cls &#x3D; all_emp_types[emp_type.upper()]        return cls(*args, **kwargs) if cls else Nonedef main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    emps &#x3D; [        EmployeeFactory.create(&#39;M&#39;, &#39;曹操&#39;),         EmployeeFactory.create(&#39;P&#39;, &#39;荀彧&#39;, 120),        EmployeeFactory.create(&#39;P&#39;, &#39;郭嘉&#39;, 85),         EmployeeFactory.create(&#39;S&#39;, &#39;典韦&#39;, 123000),    ]    for emp in emps:        print(f&#39;&#123;emp.name&#125;: &#123;emp.get_salary():.2f&#125;元&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></li><li><p>类与类之间的关系</p><ul><li>is-a关系：继承</li><li>has-a关系：关联 &#x2F; 聚合 &#x2F; 合成</li><li>use-a关系：依赖</li></ul><p>例子：扑克游戏。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;经验：符号常量总是优于字面常量，枚举类型是定义符号常量的最佳选择&quot;&quot;&quot;from enum import Enum, uniqueimport random@uniqueclass Suite(Enum):    &quot;&quot;&quot;花色&quot;&quot;&quot;    SPADE, HEART, CLUB, DIAMOND &#x3D; range(4)    def __lt__(self, other):        return self.value &lt; other.valueclass Card:    &quot;&quot;&quot;牌&quot;&quot;&quot;    def __init__(self, suite, face):        &quot;&quot;&quot;初始化方法&quot;&quot;&quot;        self.suite &#x3D; suite        self.face &#x3D; face    def show(self):        &quot;&quot;&quot;显示牌面&quot;&quot;&quot;        suites &#x3D; [&#39;♠︎&#39;, &#39;♥︎&#39;, &#39;♣︎&#39;, &#39;♦︎&#39;]        faces &#x3D; [&#39;&#39;, &#39;A&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;]        return f&#39;&#123;suites[self.suite.value]&#125;&#123;faces[self.face]&#125;&#39;    def __repr__(self):        return self.show()class Poker:    &quot;&quot;&quot;扑克&quot;&quot;&quot;    def __init__(self):        self.index &#x3D; 0        self.cards &#x3D; [Card(suite, face)                      for suite in Suite                      for face in range(1, 14)]    def shuffle(self):        &quot;&quot;&quot;洗牌（随机乱序）&quot;&quot;&quot;        random.shuffle(self.cards)        self.index &#x3D; 0    def deal(self):        &quot;&quot;&quot;发牌&quot;&quot;&quot;        card &#x3D; self.cards[self.index]        self.index +&#x3D; 1        return card    @property    def has_more(self):        return self.index &lt; len(self.cards)class Player:    &quot;&quot;&quot;玩家&quot;&quot;&quot;    def __init__(self, name):        self.name &#x3D; name        self.cards &#x3D; []    def get_one(self, card):        &quot;&quot;&quot;摸一张牌&quot;&quot;&quot;        self.cards.append(card)    def sort(self, comp&#x3D;lambda card: (card.suite, card.face)):        &quot;&quot;&quot;整理手上的牌&quot;&quot;&quot;        self.cards.sort(key&#x3D;comp)def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    poker &#x3D; Poker()    poker.shuffle()    players &#x3D; [Player(&#39;东邪&#39;), Player(&#39;西毒&#39;), Player(&#39;南帝&#39;), Player(&#39;北丐&#39;)]    while poker.has_more:        for player in players:                player.get_one(poker.deal())    for player in players:        player.sort()        print(player.name, end&#x3D;&#39;: &#39;)        print(player.cards)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明</strong>：上面的代码中使用了Emoji字符来表示扑克牌的四种花色，在某些不支持Emoji字符的系统上可能无法显示。</p></blockquote></li><li><p>对象的复制（深复制&#x2F;深拷贝&#x2F;深度克隆和浅复制&#x2F;浅拷贝&#x2F;影子克隆）</p></li><li><p>垃圾回收、循环引用和弱引用</p><p>Python使用了自动化内存管理，这种管理机制以<strong>引用计数</strong>为基础，同时也引入了<strong>标记-清除</strong>和<strong>分代收集</strong>两种机制为辅的策略。</p><pre class="language-C" data-language="C"><code class="language-C">typedef struct _object &#123;    &#x2F;* 引用计数 *&#x2F;    int ob_refcnt;    &#x2F;* 对象指针 *&#x2F;    struct _typeobject *ob_type;&#125; PyObject;</code></pre><pre class="language-C" data-language="C"><code class="language-C">&#x2F;* 增加引用计数的宏定义 *&#x2F;#define Py_INCREF(op)   ((op)-&gt;ob_refcnt++)&#x2F;* 减少引用计数的宏定义 *&#x2F;#define Py_DECREF(op) \ &#x2F;&#x2F;减少计数    if (--(op)-&gt;ob_refcnt !&#x3D; 0) \        ; \    else \        __Py_Dealloc((PyObject *)(op))</code></pre><p>导致引用计数+1的情况：</p><ul><li>对象被创建，例如<code>a = 23</code></li><li>对象被引用，例如<code>b = a</code></li><li>对象被作为参数，传入到一个函数中，例如<code>f(a)</code></li><li>对象作为一个元素，存储在容器中，例如<code>list1 = [a, a]</code></li></ul><p>导致引用计数-1的情况：</p><ul><li>对象的别名被显式销毁，例如<code>del a</code></li><li>对象的别名被赋予新的对象，例如<code>a = 24</code></li><li>一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ul><p>引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收# 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效# 如果不想造成循环引用可以使用弱引用list1 &#x3D; []list2 &#x3D; [] list1.append(list2)list2.append(list1)</code></pre><p>以下情况会导致垃圾回收：</p><ul><li>调用<code>gc.collect()</code></li><li><code>gc</code>模块的计数器达到阀值</li><li>程序退出</li></ul><p>如果循环引用中两个对象都定义了<code>__del__</code>方法，<code>gc</code>模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的<code>__del__</code>方法，这个问题在Python 3.6中得到了解决。</p><p>也可以通过<code>weakref</code>模块构造弱引用的方式来解决循环引用的问题。</p></li><li><p>魔法属性和方法（请参考《Python魔法方法指南》）</p><p>有几个小问题请大家思考：</p><ul><li>自定义的对象能不能使用运算符做运算？</li><li>自定义的对象能不能放到<code>set</code>中？能去重吗？</li><li>自定义的对象能不能作为<code>dict</code>的键？</li><li>自定义的对象能不能使用上下文语法？</li></ul></li><li><p>混入（Mixin）</p><p>例子：自定义字典限制只有在指定的key不存在时才能在字典中设置键值对。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class SetOnceMappingMixin:    &quot;&quot;&quot;自定义混入类&quot;&quot;&quot;    __slots__ &#x3D; ()    def __setitem__(self, key, value):        if key in self:            raise KeyError(str(key) + &#39; already set&#39;)        return super().__setitem__(key, value)class SetOnceDict(SetOnceMappingMixin, dict):    &quot;&quot;&quot;自定义字典&quot;&quot;&quot;    passmy_dict&#x3D; SetOnceDict()try:    my_dict[&#39;username&#39;] &#x3D; &#39;jackfrued&#39;    my_dict[&#39;username&#39;] &#x3D; &#39;hellokitty&#39;except KeyError:    passprint(my_dict)</code></pre></li><li><p>元编程和元类</p><p>对象是通过类创建的，类是通过元类创建的，元类提供了创建类的元信息。所有的类都直接或间接的继承自<code>object</code>，所有的元类都直接或间接的继承自<code>type</code>。</p><p>例子：用元类实现单例模式。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import threadingclass SingletonMeta(type):    &quot;&quot;&quot;自定义元类&quot;&quot;&quot;    def __init__(cls, *args, **kwargs):        cls.__instance &#x3D; None        cls.__lock &#x3D; threading.RLock()        super().__init__(*args, **kwargs)    def __call__(cls, *args, **kwargs):        if cls.__instance is None:            with cls.__lock:                if cls.__instance is None:                    cls.__instance &#x3D; super().__call__(*args, **kwargs)        return cls.__instanceclass President(metaclass&#x3D;SingletonMeta):    &quot;&quot;&quot;总统(单例类)&quot;&quot;&quot;        pass</code></pre></li><li><p>面向对象设计原则</p><ul><li>单一职责原则 （<strong>S</strong>RP）- 一个类只做该做的事情（类的设计要高内聚）</li><li>开闭原则 （<strong>O</strong>CP）- 软件实体应该对扩展开发对修改关闭</li><li>依赖倒转原则（DIP）- 面向抽象编程（在弱类型语言中已经被弱化）</li><li>里氏替换原则（<strong>L</strong>SP） - 任何时候可以用子类对象替换掉父类对象</li><li>接口隔离原则（<strong>I</strong>SP）- 接口要小而专不要大而全（Python中没有接口的概念）</li><li>合成聚合复用原则（CARP） - 优先使用强关联关系而不是继承关系复用代码</li><li>最少知识原则（迪米特法则，Lo<strong>D</strong>）- 不要给没有必然联系的对象发消息</li></ul><blockquote><p><strong>说明</strong>：上面加粗的字母放在一起称为面向对象的<strong>SOLID</strong>原则。</p></blockquote></li><li><p>GoF设计模式</p><ul><li>创建型模式：单例、工厂、建造者、原型</li><li>结构型模式：适配器、门面（外观）、代理</li><li>行为型模式：迭代器、观察者、状态、策略</li></ul><p>例子：可插拔的哈希算法（策略模式）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class StreamHasher():    &quot;&quot;&quot;哈希摘要生成器&quot;&quot;&quot;    def __init__(self, alg&#x3D;&#39;md5&#39;, size&#x3D;4096):        self.size &#x3D; size        alg &#x3D; alg.lower()        self.hasher &#x3D; getattr(__import__(&#39;hashlib&#39;), alg.lower())()    def __call__(self, stream):        return self.to_digest(stream)    def to_digest(self, stream):        &quot;&quot;&quot;生成十六进制形式的摘要&quot;&quot;&quot;        for buf in iter(lambda: stream.read(self.size), b&#39;&#39;):            self.hasher.update(buf)        return self.hasher.hexdigest()def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    hasher1 &#x3D; StreamHasher()    with open(&#39;Python-3.7.6.tgz&#39;, &#39;rb&#39;) as stream:        print(hasher1.to_digest(stream))    hasher2 &#x3D; StreamHasher(&#39;sha1&#39;)    with open(&#39;Python-3.7.6.tgz&#39;, &#39;rb&#39;) as stream:        print(hasher2(stream))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></li></ul><h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><ul><li><p>迭代器是实现了迭代器协议的对象。</p><ul><li>Python中没有像<code>protocol</code>或<code>interface</code>这样的定义协议的关键字。</li><li>Python中用魔术方法表示协议。</li><li><code>__iter__</code>和<code>__next__</code>魔术方法就是迭代器协议。</li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">class Fib(object):    &quot;&quot;&quot;迭代器&quot;&quot;&quot;        def __init__(self, num):        self.num &#x3D; num        self.a, self.b &#x3D; 0, 1        self.idx &#x3D; 0       def __iter__(self):        return self    def __next__(self):        if self.idx &lt; self.num:            self.a, self.b &#x3D; self.b, self.a + self.b            self.idx +&#x3D; 1            return self.a        raise StopIteration()</code></pre></li><li><p>生成器是语法简化版的迭代器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(num):    &quot;&quot;&quot;生成器&quot;&quot;&quot;    a, b &#x3D; 0, 1    for _ in range(num):        a, b &#x3D; b, a + b        yield a</code></pre></li><li><p>生成器进化为协程。</p><p>生成器对象可以使用<code>send()</code>方法发送数据，发送的数据会成为生成器函数中通过<code>yield</code>表达式获得的值。这样，生成器就可以作为协程使用，协程简单的说就是可以相互协作的子程序。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def calc_avg():    &quot;&quot;&quot;流式计算平均值&quot;&quot;&quot;    total, counter &#x3D; 0, 0    avg_value &#x3D; None    while True:        value &#x3D; yield avg_value        total, counter &#x3D; total + value, counter + 1        avg_value &#x3D; total &#x2F; countergen &#x3D; calc_avg()next(gen)print(gen.send(10))print(gen.send(20))print(gen.send(30))</code></pre></li></ul><h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><p>Python中实现并发编程的三种方案：多线程、多进程和异步I&#x2F;O。并发编程的好处在于可以提升程序的执行效率以及改善用户体验；坏处在于并发的程序不容易开发和调试，同时对其他程序来说它并不友好。</p><ul><li><p>多线程：Python中提供了<code>Thread</code>类并辅以<code>Lock</code>、<code>Condition</code>、<code>Event</code>、<code>Semaphore</code>和<code>Barrier</code>。Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;面试题：进程和线程的区别和联系？进程 - 操作系统分配内存的基本单位 - 一个进程可以包含一个或多个线程线程 - 操作系统分配CPU的基本单位并发编程（concurrent programming）1. 提升执行性能 - 让程序中没有因果关系的部分可以并发的执行2. 改善用户体验 - 让耗时间的操作不会造成程序的假死&quot;&quot;&quot;import globimport osimport threadingfrom PIL import ImagePREFIX &#x3D; &#39;thumbnails&#39;def generate_thumbnail(infile, size, format&#x3D;&#39;PNG&#39;):    &quot;&quot;&quot;生成指定图片文件的缩略图&quot;&quot;&quot;file, ext &#x3D; os.path.splitext(infile)file &#x3D; file[file.rfind(&#39;&#x2F;&#39;) + 1:]outfile &#x3D; f&#39;&#123;PREFIX&#125;&#x2F;&#123;file&#125;_&#123;size[0]&#125;_&#123;size[1]&#125;.&#123;ext&#125;&#39;img &#x3D; Image.open(infile)img.thumbnail(size, Image.ANTIALIAS)img.save(outfile, format)def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;if not os.path.exists(PREFIX):os.mkdir(PREFIX)for infile in glob.glob(&#39;images&#x2F;*.png&#39;):for size in (32, 64, 128):            # 创建并启动线程threading.Thread(target&#x3D;generate_thumbnail, args&#x3D;(infile, (size, size))).start()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:main()</code></pre><p>多个线程竞争资源的情况。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;多线程程序如果没有竞争资源处理起来通常也比较简单当多个线程竞争临界资源的时候如果缺乏必要的保护措施就会导致数据错乱说明：临界资源就是被多个线程竞争的资源&quot;&quot;&quot;import timeimport threadingfrom concurrent.futures import ThreadPoolExecutorclass Account(object):    &quot;&quot;&quot;银行账户&quot;&quot;&quot;    def __init__(self):        self.balance &#x3D; 0.0        self.lock &#x3D; threading.Lock()    def deposit(self, money):        # 通过锁保护临界资源        with self.lock:            new_balance &#x3D; self.balance + money            time.sleep(0.001)            self.balance &#x3D; new_balancedef main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    account &#x3D; Account()    # 创建线程池    pool &#x3D; ThreadPoolExecutor(max_workers&#x3D;10)    futures &#x3D; []    for _ in range(100):        future &#x3D; pool.submit(account.deposit, 1)        futures.append(future)    # 关闭线程池    pool.shutdown()    for future in futures:        future.result()    print(account.balance)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>修改上面的程序，启动5个线程向账户中存钱，5个线程从账户中取钱，取钱时如果余额不足就暂停线程进行等待。为了达到上述目标，需要对存钱和取钱的线程进行调度，在余额不足时取钱的线程暂停并释放锁，而存钱的线程将钱存入后要通知取钱的线程，使其从暂停状态被唤醒。可以使用<code>threading</code>模块的<code>Condition</code>来实现线程调度，该对象也是基于锁来创建的，代码如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;多个线程竞争一个资源 - 保护临界资源 - 锁（Lock&#x2F;RLock）多个线程竞争多个资源（线程数&gt;资源数） - 信号量（Semaphore）多个线程的调度 - 暂停线程执行&#x2F;唤醒等待中的线程 - Condition&quot;&quot;&quot;from concurrent.futures import ThreadPoolExecutorfrom random import randintfrom time import sleepimport threadingclass Account:    &quot;&quot;&quot;银行账户&quot;&quot;&quot;    def __init__(self, balance&#x3D;0):        self.balance &#x3D; balance        lock &#x3D; threading.RLock()        self.condition &#x3D; threading.Condition(lock)    def withdraw(self, money):        &quot;&quot;&quot;取钱&quot;&quot;&quot;        with self.condition:            while money &gt; self.balance:                self.condition.wait()            new_balance &#x3D; self.balance - money            sleep(0.001)            self.balance &#x3D; new_balance    def deposit(self, money):        &quot;&quot;&quot;存钱&quot;&quot;&quot;        with self.condition:            new_balance &#x3D; self.balance + money            sleep(0.001)            self.balance &#x3D; new_balance            self.condition.notify_all()def add_money(account):    while True:        money &#x3D; randint(5, 10)        account.deposit(money)        print(threading.current_thread().name,               &#39;:&#39;, money, &#39;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&#39;, account.balance)        sleep(0.5)def sub_money(account):    while True:        money &#x3D; randint(10, 30)        account.withdraw(money)        print(threading.current_thread().name,               &#39;:&#39;, money, &#39;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#39;, account.balance)        sleep(1)def main():    account &#x3D; Account()    with ThreadPoolExecutor(max_workers&#x3D;15) as pool:        for _ in range(5):            pool.submit(add_money, account)        for _ in range(10):            pool.submit(sub_money, account)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></li><li><p>多进程：多进程可以有效的解决GIL的问题，实现多进程主要的类是<code>Process</code>，其他辅助的类跟<code>threading</code>模块中的类似，进程间共享数据可以使用管道、套接字等，在<code>multiprocessing</code>模块中有一个<code>Queue</code>类，它基于管道和锁机制提供了多个进程共享的队列。下面是官方文档上关于多进程和进程池的一个示例。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;多进程和进程池的使用多线程因为GIL的存在不能够发挥CPU的多核特性对于计算密集型任务应该考虑使用多进程time python3 example22.pyreal    0m11.512suser    0m39.319ssys     0m0.169s使用多进程后实际执行时间为11.512秒，而用户时间39.319秒约为实际执行时间的4倍这就证明我们的程序通过多进程使用了CPU的多核特性，而且这台计算机配置了4核的CPU&quot;&quot;&quot;import concurrent.futuresimport mathPRIMES &#x3D; [    1116281,    1297337,    104395303,    472882027,    533000389,    817504243,    982451653,    112272535095293,    112582705942171,    112272535095293,    115280095190773,    115797848077099,    1099726899285419] * 5def is_prime(n):    &quot;&quot;&quot;判断素数&quot;&quot;&quot;    if n % 2 &#x3D;&#x3D; 0:        return False    sqrt_n &#x3D; int(math.floor(math.sqrt(n)))    for i in range(3, sqrt_n + 1, 2):        if n % i &#x3D;&#x3D; 0:            return False    return Truedef main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    with concurrent.futures.ProcessPoolExecutor() as executor:        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):            print(&#39;%d is prime: %s&#39; % (number, prime))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>重点</strong>：<strong>多线程和多进程的比较</strong>。</p><p>以下情况需要使用多线程：</p><ol><li>程序需要维护许多共享的状态（尤其是可变状态），Python中的列表、字典、集合都是线程安全的，所以使用线程而不是进程维护共享状态的代价相对较小。</li><li>程序会花费大量时间在I&#x2F;O操作上，没有太多并行计算的需求且不需占用太多的内存。</li></ol><p>以下情况需要使用多进程：</p><ol><li>程序执行计算密集型任务（如：字节码操作、数据处理、科学计算）。</li><li>程序的输入可以并行的分成块，并且可以将运算结果合并。</li><li>程序在内存使用方面没有任何限制且不强依赖于I&#x2F;O操作（如：读写文件、套接字等）。</li></ol></blockquote></li><li><p>异步处理：从调度程序的任务队列中挑选任务，该调度程序以交叉的形式执行这些任务，我们并不能保证任务将以某种顺序去执行，因为执行顺序取决于队列中的一项任务是否愿意将CPU处理时间让位给另一项任务。异步任务通常通过多任务协作处理的方式来实现，由于执行时间和顺序的不确定，因此需要通过回调式编程或者<code>future</code>对象来获取任务执行的结果。Python 3通过<code>asyncio</code>模块和<code>await</code>和<code>async</code>关键字（在Python 3.7中正式被列为关键字）来支持异步处理。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;异步I&#x2F;O - async &#x2F; await&quot;&quot;&quot;import asynciodef num_generator(m, n):    &quot;&quot;&quot;指定范围的数字生成器&quot;&quot;&quot;    yield from range(m, n + 1)async def prime_filter(m, n):    &quot;&quot;&quot;素数过滤器&quot;&quot;&quot;    primes &#x3D; []    for i in num_generator(m, n):        flag &#x3D; True        for j in range(2, int(i ** 0.5 + 1)):            if i % j &#x3D;&#x3D; 0:                flag &#x3D; False                break        if flag:            print(&#39;Prime &#x3D;&gt;&#39;, i)            primes.append(i)        await asyncio.sleep(0.001)    return tuple(primes)async def square_mapper(m, n):    &quot;&quot;&quot;平方映射器&quot;&quot;&quot;    squares &#x3D; []    for i in num_generator(m, n):        print(&#39;Square &#x3D;&gt;&#39;, i * i)        squares.append(i * i)        await asyncio.sleep(0.001)    return squaresdef main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    loop &#x3D; asyncio.get_event_loop()    future &#x3D; asyncio.gather(prime_filter(2, 100), square_mapper(1, 100))    future.add_done_callback(lambda x: print(x.result()))    loop.run_until_complete(future)    loop.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明</strong>：上面的代码使用<code>get_event_loop</code>函数获得系统默认的事件循环，通过<code>gather</code>函数可以获得一个<code>future</code>对象，<code>future</code>对象的<code>add_done_callback</code>可以添加执行完成时的回调函数，<code>loop</code>对象的<code>run_until_complete</code>方法可以等待通过<code>future</code>对象获得协程执行结果。</p></blockquote><p>Python中有一个名为<code>aiohttp</code>的三方库，它提供了异步的HTTP客户端和服务器，这个三方库可以跟<code>asyncio</code>模块一起工作，并提供了对<code>Future</code>对象的支持。Python 3.6中引入了<code>async</code>和<code>await</code>来定义异步执行的函数以及创建异步上下文，在Python 3.7中它们正式成为了关键字。下面的代码异步的从5个URL中获取页面并通过正则表达式的命名捕获组提取了网站的标题。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import asyncioimport reimport aiohttpPATTERN &#x3D; re.compile(r&#39;\&lt;title\&gt;(?P&lt;title&gt;.*)\&lt;\&#x2F;title\&gt;&#39;)async def fetch_page(session, url):    async with session.get(url, ssl&#x3D;False) as resp:        return await resp.text()async def show_title(url):    async with aiohttp.ClientSession() as session:        html &#x3D; await fetch_page(session, url)        print(PATTERN.search(html).group(&#39;title&#39;))def main():    urls &#x3D; (&#39;https:&#x2F;&#x2F;www.python.org&#x2F;&#39;,            &#39;https:&#x2F;&#x2F;git-scm.com&#x2F;&#39;,            &#39;https:&#x2F;&#x2F;www.jd.com&#x2F;&#39;,            &#39;https:&#x2F;&#x2F;www.taobao.com&#x2F;&#39;,            &#39;https:&#x2F;&#x2F;www.douban.com&#x2F;&#39;)    loop &#x3D; asyncio.get_event_loop()    cos &#x3D; [show_title(url) for url in urls]    loop.run_until_complete(asyncio.wait(cos))    loop.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>重点</strong>：<strong>异步I&#x2F;O与多进程的比较</strong>。</p><p>当程序不需要真正的并发性或并行性，而是更多的依赖于异步处理和回调时，<code>asyncio</code>就是一种很好的选择。如果程序中有大量的等待与休眠时，也应该考虑<code>asyncio</code>，它很适合编写没有实时数据处理需求的Web应用服务器。</p></blockquote><p>Python还有很多用于处理并行任务的三方库，例如：<code>joblib</code>、<code>PyMP</code>等。实际开发中，要提升系统的可扩展性和并发性通常有垂直扩展（增加单个节点的处理能力）和水平扩展（将单个节点变成多个节点）两种做法。可以通过消息队列来实现应用程序的解耦合，消息队列相当于是多线程同步队列的扩展版本，不同机器上的应用程序相当于就是线程，而共享的分布式消息队列就是原来程序中的Queue。消息队列（面向消息的中间件）的最流行和最标准化的实现是AMQP（高级消息队列协议），AMQP源于金融行业，提供了排队、路由、可靠传输、安全等功能，最著名的实现包括：Apache的ActiveMQ、RabbitMQ等。</p><p>要实现任务的异步化，可以使用名为<code>Celery</code>的三方库。<code>Celery</code>是Python编写的分布式任务队列，它使用分布式消息进行工作，可以基于RabbitMQ或Redis来作为后端的消息代理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-30.Web前端概述</title>
      <link href="/2024/07/01/21-30.web-qian-duan-gai-shu/"/>
      <url>/2024/07/01/21-30.web-qian-duan-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Web前端概述"><a href="#Web前端概述" class="headerlink" title="Web前端概述"></a>Web前端概述</h2><blockquote><p><strong>说明</strong>：本文使用的部分插图来自<em>Jon Duckett</em>先生的*<a href="https://www.amazon.cn/dp/1118008189/ref=sr_1_5?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&keywords=html+&+css&qid=1554609325&s=gateway&sr=8-5">HTML and CSS: Design and Build Websites</a>*一书，这是一本非常棒的前端入门书，有兴趣的读者可以在亚马逊或者其他网站上找到该书的购买链接。</p></blockquote><p>HTML 是用来描述网页的一种语言，全称是 Hyper-Text Markup Language，即超文本标记语言。我们浏览网页时看到的文字、按钮、图片、视频等元素，它们都是通过 HTML 书写并通过浏览器来呈现的。</p><h3 id="HTML简史"><a href="#HTML简史" class="headerlink" title="HTML简史"></a>HTML简史</h3><ol><li>1991年10月：一个非正式CERN（<a href="https://zh.wikipedia.org/wiki/%E6%AD%90%E6%B4%B2%E6%A0%B8%E5%AD%90%E7%A0%94%E7%A9%B6%E7%B5%84%E7%B9%94">欧洲核子研究中心</a>）文件首次公开18个HTML标签，这个文件的作者是物理学家<a href="https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E">蒂姆·伯纳斯-李</a>，因此他是<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">万维网</a>的发明者，也是<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91%E8%81%94%E7%9B%9F">万维网联盟</a>的主席。</li><li>1995年11月：HTML 2.0标准发布（RFC 1866）。</li><li>1997年1月：HTML 3.2作为<a href="https://zh.wikipedia.org/wiki/W3C">W3C</a>推荐标准发布。</li><li>1997年12月：HTML 4.0作为W3C推荐标准发布。</li><li>1999年12月：HTML4.01作为W3C推荐标准发布。</li><li>2008年1月：HTML5由W3C作为工作草案发布。</li><li>2011年5月：W3C将HTML5推进至“最终征求”（Last Call）阶段。</li><li>2012年12月：W3C指定HTML5作为“候选推荐”阶段。</li><li>2014年10月：HTML5作为稳定W3C推荐标准发布，这意味着HTML5的标准化已经完成。</li></ol><h4 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h4><ol><li>引入原生多媒体支持（audio和video标签）</li><li>引入可编程内容（canvas标签）</li><li>引入语义Web（article、aside、details、figure、footer、header、nav、section、summary等标签）</li><li>引入新的表单控件（日历、邮箱、搜索、滑条等）</li><li>引入对离线存储更好的支持（localStorage和sessionStorage）</li><li>引入对定位、拖放、WebSocket、后台任务等的支持</li></ol><h3 id="使用标签承载内容"><a href="#使用标签承载内容" class="headerlink" title="使用标签承载内容"></a>使用标签承载内容</h3><img src="https://gitee.com/jackfrued/mypic/raw/master/20211107163448.png" style="zoom:35%"><img src="https://gitee.com/jackfrued/mypic/raw/master/20211107163741.png" style="zoom:75%"><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>html<ul><li>head<ul><li>title</li><li>meta</li></ul></li><li>body</li></ul></li></ul><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><ul><li>标题（heading）和段落（paragraph）<ul><li>h1 ~ h6</li><li>p</li></ul></li><li>上标（superscript）和下标（subscript）<ul><li>sup</li><li>sub</li></ul></li><li>空白（白色空间折叠）</li><li>折行（break）和水平标尺（horizontal ruler）<ul><li>br</li><li>hr</li></ul></li><li>语义化标签<ul><li>加粗和强调 - strong</li><li>引用 - blockquote</li><li>缩写词和首字母缩写词 - abbr &#x2F; acronym</li><li>引文 - cite</li><li>所有者联系信息 - address</li><li>内容的修改 - ins &#x2F; del</li></ul></li></ul><h4 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h4><ul><li>有序列表（ordered list）- ol &#x2F; li</li><li>无序列表（unordered list）- ul &#x2F; li</li><li>定义列表（definition list）- dl &#x2F; dt &#x2F; dd</li></ul><h4 id="链接（anchor）"><a href="#链接（anchor）" class="headerlink" title="链接（anchor）"></a>链接（anchor）</h4><ul><li>页面链接</li><li>锚链接</li><li>功能链接</li></ul><h4 id="图像（image）"><a href="#图像（image）" class="headerlink" title="图像（image）"></a>图像（image）</h4><ul><li><p>图像存储位置</p><p><img src="/./res/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84.png"></p></li><li><p>图像及其宽高</p></li><li><p>选择正确的图像格式</p><ul><li>JPEG</li><li>GIF</li><li>PNG</li></ul></li><li><p>矢量图</p></li><li><p>语义化标签 - figure &#x2F; figcaption</p></li></ul><h4 id="表格（table）"><a href="#表格（table）" class="headerlink" title="表格（table）"></a>表格（table）</h4><ul><li>基本的表格结构 - table &#x2F; tr &#x2F; td &#x2F; th</li><li>表格的标题 - caption</li><li>跨行和跨列 - rowspan属性 &#x2F; colspan属性</li><li>长表格 - thead &#x2F; tbody &#x2F; tfoot</li></ul><h4 id="表单（form）"><a href="#表单（form）" class="headerlink" title="表单（form）"></a>表单（form）</h4><ul><li>重要属性 - action &#x2F; method &#x2F; enctype</li><li>表单控件（input）- type属性<ul><li>文本框 - <code>text</code> &#x2F; 密码框 - <code>password</code> &#x2F; 数字框 - <code>number</code></li><li>邮箱 - <code>email</code> &#x2F; 电话 - <code>tel</code> &#x2F; 日期 - <code>date</code> &#x2F; 滑条 - <code>range</code> &#x2F; URL - <code>url</code> &#x2F; 搜索 - <code>search</code></li><li>单选按钮 - <code>radio</code> &#x2F; 复选按钮 - <code>checkbox</code></li><li>文件上传 - <code>file</code> &#x2F; 隐藏域 - <code>hidden</code></li><li>提交按钮 - <code>submit</code> &#x2F; 图像按钮 - <code>image</code>  &#x2F; 重置按钮 - <code>reset</code></li></ul></li><li>下拉列表 - select &#x2F; option</li><li>文本域（多行文本）- textarea</li><li>组合表单元素 - fieldset &#x2F; legend</li></ul><h4 id="音视频（audio-video）"><a href="#音视频（audio-video）" class="headerlink" title="音视频（audio &#x2F; video）"></a>音视频（audio &#x2F; video）</h4><ul><li>视频格式和播放器</li><li>视频托管服务</li><li>添加视频的准备工作</li><li>video标签和属性 - autoplay &#x2F; controls &#x2F; loop &#x2F; muted &#x2F; preload &#x2F; src</li><li>audio标签和属性 - autoplay &#x2F; controls &#x2F; loop &#x2F; muted &#x2F; preload &#x2F; src &#x2F; width &#x2F; height &#x2F; poster</li></ul><h4 id="窗口（frame）"><a href="#窗口（frame）" class="headerlink" title="窗口（frame）"></a>窗口（frame）</h4><ul><li><p>框架集（过时，不建议使用） - frameset &#x2F; frame</p></li><li><p>内嵌窗口 - iframe</p></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>文档类型</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!doctype html&gt;</code></pre><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</code></pre><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</code></pre></li><li><p>注释</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- 这是一段注释，注释不能够嵌套 --&gt;</code></pre></li><li><p>属性</p><ul><li>id：唯一标识</li><li>class：元素所属的类，用于区分不同的元素</li><li>title：元素的额外信息（鼠标悬浮时会显示工具提示文本）</li><li>tabindex：Tab键切换顺序</li><li>contenteditable：元素是否可编辑</li><li>draggable：元素是否可拖拽</li></ul></li><li><p>块级元素 &#x2F; 行级元素</p></li><li><p>字符实体（实体替换符）</p><p><img src="/./res/%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93.png"></p></li></ul><h3 id="使用CSS渲染页面"><a href="#使用CSS渲染页面" class="headerlink" title="使用CSS渲染页面"></a>使用CSS渲染页面</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>CSS的作用</p></li><li><p>CSS的工作原理</p></li><li><p>规则、属性和值</p><p><img src="/./res/%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%AD%E6%B3%95.png"></p></li><li><p>常用选择器</p><p><img src="/./res/%E5%B8%B8%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8.png"></p></li></ul><h4 id="颜色（color）"><a href="#颜色（color）" class="headerlink" title="颜色（color）"></a>颜色（color）</h4><ul><li>如何指定颜色</li><li>颜色术语和颜色对比</li><li>背景色</li></ul><h4 id="文本（text-font）"><a href="#文本（text-font）" class="headerlink" title="文本（text &#x2F; font）"></a>文本（text &#x2F; font）</h4><ul><li><p>文本的大小和字型(font-size &#x2F; font-family)</p><p><img src="/./res/%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D.png"></p><p><img src="/./res/%E8%A1%AC%E7%BA%BF%E5%AD%97%E4%BD%93+%E9%9D%9E%E8%A1%AC%E7%BA%BF%E5%AD%97%E4%BD%93+%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93.png"></p></li><li><p>粗细、样式、拉伸和装饰(font-weight &#x2F; font-style &#x2F; font-stretch &#x2F; text-decoration)</p><p><img src="/./res/%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F.png"></p></li><li><p>行间距(line-height)、字母间距(letter-spacing)和单词间距(word-spacing)</p></li><li><p>对齐(text-align)方式和缩进(text-ident)</p></li><li><p>链接样式（:link &#x2F; :visited &#x2F; :active &#x2F; :hover）</p></li><li><p>CSS3新属性</p><ul><li>阴影效果 - text-shadow</li><li>首字母和首行文本(:first-letter &#x2F; :first-line)</li><li>响应用户</li></ul></li></ul><h4 id="盒子（box-model）"><a href="#盒子（box-model）" class="headerlink" title="盒子（box model）"></a>盒子（box model）</h4><ul><li><p>盒子大小的控制（width &#x2F; height）</p><p><img src="/./res/%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D.png"></p></li><li><p>盒子的边框、外边距和内边距（border &#x2F;  margin &#x2F; padding）</p><p><img src="/./res/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p></li><li><p>盒子的显示和隐藏（display &#x2F; visibility）</p></li><li><p>CSS3新属性</p><ul><li>边框图像（border-image）</li><li>投影（border-shadow）</li><li>圆角（border-radius）</li></ul></li></ul><h4 id="列表、表格和表单"><a href="#列表、表格和表单" class="headerlink" title="列表、表格和表单"></a>列表、表格和表单</h4><ul><li>列表的项目符号（list-style）</li><li>表格的边框和背景（border-collapse）</li><li>表单控件的外观</li><li>表单控件的对齐</li><li>浏览器的开发者工具</li></ul><h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><ul><li>控制图像的大小（display: inline-block）</li><li>对齐图像</li><li>背景图像（background &#x2F; background-image &#x2F; background-repeat &#x2F; background-position）</li></ul><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ul><li><p>控制元素的位置（position &#x2F; z-index）</p><ul><li>普通流</li><li>相对定位</li><li>绝对定位</li><li>固定定位</li><li>浮动元素（float &#x2F; clear）</li></ul></li><li><p>网站布局</p><ul><li><p>HTML5布局</p><p><img src="/./res/%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80-2.png"></p></li></ul></li><li><p>适配屏幕尺寸</p><ul><li>固定宽度布局</li><li>流体布局</li><li>布局网格</li></ul></li></ul><h3 id="使用JavaScript控制行为"><a href="#使用JavaScript控制行为" class="headerlink" title="使用JavaScript控制行为"></a>使用JavaScript控制行为</h3><h4 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h4><ul><li>语句和注释</li><li>变量和数据类型<ul><li>声明和赋值</li><li>简单数据类型和复杂数据类型</li><li>变量的命名规则</li></ul></li><li>表达式和运算符<ul><li>赋值运算符</li><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code></li></ul></li><li>分支结构<ul><li><code>if...else...</code></li><li><code>switch...cas...default...</code></li></ul></li><li>循环结构<ul><li><code>for</code>循环</li><li><code>while</code>循环</li><li><code>do...while</code>循环</li></ul></li><li>数组<ul><li>创建数组</li><li>操作数组中的元素</li></ul></li><li>函数<ul><li>声明函数</li><li>调用函数</li><li>参数和返回值</li><li>匿名函数</li><li>立即调用函数</li></ul></li></ul><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li>对象的概念</li><li>创建对象的字面量语法</li><li>访问成员运算符</li><li>创建对象的构造函数语法<ul><li><code>this</code>关键字</li></ul></li><li>添加和删除属性<ul><li><code>delete</code>关键字</li></ul></li><li>标准对象<ul><li><code>Number</code> &#x2F; <code>String</code> &#x2F; <code>Boolean</code> &#x2F; <code>Symbol</code> &#x2F; <code>Array</code> &#x2F; <code>Function</code> </li><li><code>Date</code> &#x2F; <code>Error</code> &#x2F; <code>Math</code> &#x2F; <code>RegExp</code> &#x2F; <code>Object</code> &#x2F; <code>Map</code> &#x2F; <code>Set</code></li><li><code>JSON</code> &#x2F; <code>Promise</code> &#x2F; <code>Generator</code> &#x2F; <code>Reflect</code> &#x2F; <code>Proxy</code></li></ul></li></ul><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ul><li><code>window</code>对象的属性和方法</li><li><code>history</code>对象<ul><li><code>forward()</code> &#x2F; <code>back()</code> &#x2F; <code>go()</code></li></ul></li><li><code>location</code>对象</li><li><code>navigator</code>对象</li><li><code>screen</code>对象</li></ul><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul><li>DOM树</li><li>访问元素<ul><li><code>getElementById()</code> &#x2F; <code>querySelector()</code></li><li><code>getElementsByClassName()</code> &#x2F; <code>getElementsByTagName()</code> &#x2F; <code>querySelectorAll()</code></li><li><code>parentNode</code> &#x2F; <code>previousSibling</code> &#x2F; <code>nextSibling</code> &#x2F; <code>children</code> &#x2F; <code>firstChild</code> &#x2F; <code>lastChild</code></li></ul></li><li>操作元素<ul><li><code>nodeValue</code></li><li><code>innerHTML</code> &#x2F; <code>textContent</code> &#x2F; <code>createElement()</code> &#x2F; <code>createTextNode()</code> &#x2F; <code>appendChild()</code> &#x2F; <code>insertBefore()</code> &#x2F; <code>removeChild()</code></li><li><code>className</code> &#x2F; <code>id</code> &#x2F; <code>hasAttribute()</code> &#x2F; <code>getAttribute()</code> &#x2F; <code>setAttribute()</code> &#x2F; <code>removeAttribute()</code></li></ul></li><li>事件处理<ul><li>事件类型<ul><li>UI事件：<code>load</code> &#x2F; <code>unload</code> &#x2F; <code>error</code> &#x2F; <code>resize</code> &#x2F; <code>scroll</code></li><li>键盘事件：<code>keydown</code> &#x2F; <code>keyup</code> &#x2F; <code>keypress</code></li><li>鼠标事件：<code>click</code> &#x2F; <code>dbclick</code> &#x2F; <code>mousedown</code> &#x2F; <code>mouseup</code> &#x2F; <code>mousemove</code> &#x2F; <code>mouseover</code> &#x2F; <code>mouseout</code></li><li>焦点事件：<code>focus</code> &#x2F; <code>blur</code></li><li>表单事件：<code>input</code> &#x2F; <code>change</code> &#x2F; <code>submit</code> &#x2F; <code>reset</code> &#x2F; <code>cut</code> &#x2F; <code>copy</code> &#x2F; <code>paste</code> &#x2F; <code>select</code></li></ul></li><li>事件绑定<ul><li>HTML事件处理程序（不推荐使用，因为要做到标签与代码分离）</li><li>传统的DOM事件处理程序（只能附加一个回调函数）</li><li>事件监听器（旧的浏览器中不被支持）</li></ul></li><li>事件流：事件捕获 &#x2F; 事件冒泡</li><li>事件对象（低版本IE中的window.event）<ul><li><code>target</code>（有些浏览器使用srcElement）</li><li><code>type</code></li><li><code>cancelable</code></li><li><code>preventDefault()</code></li><li><code>stopPropagation()</code>（低版本IE中的cancelBubble）</li></ul></li><li>鼠标事件 - 事件发生的位置<ul><li>屏幕位置：<code>screenX</code>和<code>screenY</code></li><li>页面位置：<code>pageX</code>和<code>pageY</code></li><li>客户端位置：<code>clientX</code>和<code>clientY</code></li></ul></li><li>键盘事件 - 哪个键被按下了<ul><li><code>keyCode</code>属性（有些浏览器使用<code>which</code>）</li><li><code>String.fromCharCode(event.keyCode)</code></li></ul></li><li>HTML5事件<ul><li><code>DOMContentLoaded</code></li><li><code>hashchange</code></li><li><code>beforeunload</code></li></ul></li></ul></li></ul><h4 id="JavaScript-API"><a href="#JavaScript-API" class="headerlink" title="JavaScript API"></a>JavaScript API</h4><ul><li><p>客户端存储 - <code>localStorage</code>和<code>sessionStorage</code></p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">localStorage.colorSetting &#x3D; &#39;#a4509b&#39;;localStorage[&#39;colorSetting&#39;] &#x3D; &#39;#a4509b&#39;;localStorage.setItem(&#39;colorSetting&#39;, &#39;#a4509b&#39;);</code></pre></li><li><p>获取位置信息 - <code>geolocation</code></p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">navigator.geolocation.getCurrentPosition(function(pos) &#123;       console.log(pos.coords.latitude)    console.log(pos.coords.longitude)&#125;)</code></pre></li><li><p>从服务器获取数据 - Fetch API</p></li><li><p>绘制图形 - <code>&lt;canvas&gt;</code>的API</p></li><li><p>音视频 - <code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>的API</p></li></ul><h3 id="使用jQuery"><a href="#使用jQuery" class="headerlink" title="使用jQuery"></a>使用jQuery</h3><h4 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h4><ol><li>Write Less Do More（用更少的代码来完成更多的工作）</li><li>使用CSS选择器来查找元素（更简单更方便）</li><li>使用jQuery方法来操作元素（解决浏览器兼容性问题、应用于所有元素并施加多个方法）</li></ol><h4 id="引入jQuery"><a href="#引入jQuery" class="headerlink" title="引入jQuery"></a>引入jQuery</h4><ul><li>下载jQuery的开发版和压缩版</li><li>从CDN加载jQuery</li></ul><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    window.jQuery ||         document.write(&#39;&lt;script src&#x3D;&quot;js&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;&#39;)&lt;&#x2F;script&gt;</code></pre><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul><li>选择器<ul><li>* &#x2F; element &#x2F; #id &#x2F; .class &#x2F; selector1, selector2</li><li>ancestor descendant &#x2F; parent&gt;child &#x2F; previous+next &#x2F; previous~siblings</li></ul></li><li>筛选器<ul><li>基本筛选器：:not(selector) &#x2F; :first &#x2F; :last &#x2F; :even &#x2F; :odd &#x2F; :eq(index) &#x2F; :gt(index) &#x2F; :lt(index) &#x2F; :animated &#x2F; :focus</li><li>内容筛选器：:contains(‘…’) &#x2F; :empty &#x2F; :parent &#x2F; :has(selector)</li><li>可见性筛选器：:hidden &#x2F; :visible</li><li>子节点筛选器：:nth-child(expr) &#x2F; :first-child &#x2F; :last-child &#x2F; :only-child</li><li>属性筛选器：[attribute] &#x2F; [attribute&#x3D;’value’] &#x2F; [attribute!&#x3D;’value’] &#x2F; [attribute^&#x3D;’value’] &#x2F; [attribute$&#x3D;’value’] &#x2F; [attribute|&#x3D;’value’] &#x2F; [attribute~&#x3D;’value’]</li></ul></li><li>表单：:input &#x2F; :text &#x2F; :password &#x2F; :radio &#x2F; :checkbox &#x2F; :submit &#x2F; :image &#x2F; :reset &#x2F; :button &#x2F; :file &#x2F; :selected &#x2F; :enabled &#x2F; :disabled &#x2F; :checked</li></ul><h4 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h4><ul><li>内容操作<ul><li>获取&#x2F;修改内容：<code>html()</code> &#x2F; <code>text()</code> &#x2F; <code>replaceWith()</code> &#x2F; <code>remove()</code></li><li>获取&#x2F;设置元素：<code>before()</code> &#x2F; <code>after()</code> &#x2F; <code>prepend()</code> &#x2F; <code>append()</code> &#x2F; <code>remove()</code> &#x2F; <code>clone()</code> &#x2F; <code>unwrap()</code> &#x2F; <code>detach()</code> &#x2F; <code>empty()</code> &#x2F; <code>add()</code></li><li>获取&#x2F;修改属性：<code>attr()</code> &#x2F; <code>removeAttr()</code> &#x2F; <code>addClass()</code> &#x2F; <code>removeClass()</code> &#x2F; <code>css()</code></li><li>获取&#x2F;设置表单值：<code>val()</code></li></ul></li><li>查找操作<ul><li>查找方法：<code>find()</code> &#x2F;  <code>parent()</code> &#x2F; <code>children()</code> &#x2F; <code>siblings()</code> &#x2F; <code>next()</code> &#x2F; <code>nextAll()</code> &#x2F; <code>prev()</code> &#x2F; <code>prevAll()</code></li><li>筛选器：<code>filter()</code> &#x2F; <code>not()</code> &#x2F; <code>has()</code> &#x2F; <code>is()</code> &#x2F; <code>contains()</code></li><li>索引编号：<code>eq()</code></li></ul></li><li>尺寸和位置<ul><li>尺寸相关：<code>height()</code> &#x2F; <code>width()</code> &#x2F; <code>innerHeight()</code> &#x2F; <code>innerWidth()</code> &#x2F; <code>outerWidth()</code> &#x2F; <code>outerHeight()</code></li><li>位置相关：<code>offset()</code> &#x2F; <code>position()</code> &#x2F; <code>scrollLeft()</code> &#x2F; <code>scrollTop()</code></li></ul></li><li>特效和动画<ul><li>基本动画：<code>show()</code> &#x2F; <code>hide()</code> &#x2F; <code>toggle()</code></li><li>消失出现：<code>fadeIn()</code> &#x2F; <code>fadeOut()</code> &#x2F; <code>fadeTo()</code> &#x2F; <code>fadeToggle()</code></li><li>滑动效果：<code>slideDown()</code> &#x2F; <code>slideUp()</code> &#x2F; <code>slideToggle()</code></li><li>自定义：<code>delay()</code> &#x2F; <code>stop()</code> &#x2F; <code>animate()</code></li></ul></li><li>事件<ul><li>文档加载：<code>ready()</code> &#x2F; <code>load()</code></li><li>用户交互：<code>on()</code> &#x2F; <code>off()</code></li></ul></li></ul><h4 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h4><h4 id="检测页面是否可用"><a href="#检测页面是否可用" class="headerlink" title="检测页面是否可用"></a>检测页面是否可用</h4><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script&gt;    $(document).ready(function() &#123;            &#125;);&lt;&#x2F;script&gt;</code></pre><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script&gt;    $(function() &#123;            &#125;);&lt;&#x2F;script&gt;</code></pre><h4 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h4><ul><li>jQuery Validation</li><li>jQuery Treeview</li><li>jQuery Autocomplete</li><li>jQuery UI</li></ul><h4 id="避免和其他库的冲突"><a href="#避免和其他库的冲突" class="headerlink" title="避免和其他库的冲突"></a>避免和其他库的冲突</h4><p>先引入其他库再引入jQuery的情况。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script src&#x3D;&quot;other.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;jquery.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;jQuery.noConflict();    jQuery(function() &#123;        jQuery(&#39;div&#39;).hide();    &#125;);&lt;&#x2F;script&gt;</code></pre><p>先引入jQuery再引入其他库的情况。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script src&#x3D;&quot;jquery.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;other.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    jQuery(function() &#123;        jQuery(&#39;div&#39;).hide();    &#125;);&lt;&#x2F;script&gt;</code></pre><h4 id="使用Ajax"><a href="#使用Ajax" class="headerlink" title="使用Ajax"></a>使用Ajax</h4><p>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><ul><li>原生的Ajax</li><li>基于jQuery的Ajax<ul><li>加载内容</li><li>提交表单</li></ul></li></ul><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><h4 id="渐进式框架-Vue-js"><a href="#渐进式框架-Vue-js" class="headerlink" title="渐进式框架 - Vue.js"></a>渐进式框架 - <a href="https://cn.vuejs.org/">Vue.js</a></h4><p>前后端分离开发（前端渲染）必选框架。</p><h5 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h5><ol><li><p>引入Vue的JavaScript文件，我们仍然推荐从CDN服务器加载它。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;</code></pre></li><li><p>数据绑定（声明式渲染 ）。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;h1&gt;&#123;&#123; product &#125;&#125;库存信息&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const app &#x3D; new Vue(&#123;el: &#39;#app&#39;,data: &#123;product: &#39;iPhone X&#39;&#125;&#125;);&lt;&#x2F;script&gt;</code></pre></li><li><p>条件与循环。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;h1&gt;库存信息&lt;&#x2F;h1&gt;    &lt;hr&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;product in products&quot;&gt;&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;&lt;span v-if&#x3D;&quot;product.quantity &#x3D;&#x3D;&#x3D; 0&quot;&gt;已经售罄&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const app &#x3D; new Vue(&#123;el: &#39;#app&#39;,data: &#123;products: [&#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;iPhone X&quot;, &quot;quantity&quot;: 20&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;华为 Mate20&quot;, &quot;quantity&quot;: 0&#125;,&#123;&quot;id&quot;: 3, &quot;name&quot;: &quot;小米 Mix3&quot;, &quot;quantity&quot;: 50&#125;]&#125;&#125;);&lt;&#x2F;script&gt;</code></pre></li><li><p>计算属性。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;h1&gt;库存信息&lt;&#x2F;h1&gt;&lt;hr&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;product in products&quot;&gt;&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;&lt;span v-if&#x3D;&quot;product.quantity &#x3D;&#x3D;&#x3D; 0&quot;&gt;已经售罄&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;h2&gt;库存总量：&#123;&#123; totalQuantity &#125;&#125;台&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const app &#x3D; new Vue(&#123;el: &#39;#app&#39;,data: &#123;products: [&#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;iPhone X&quot;, &quot;quantity&quot;: 20&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;华为 Mate20&quot;, &quot;quantity&quot;: 0&#125;,&#123;&quot;id&quot;: 3, &quot;name&quot;: &quot;小米 Mix3&quot;, &quot;quantity&quot;: 50&#125;]&#125;,computed: &#123;totalQuantity() &#123;return this.products.reduce((sum, product) &#x3D;&gt; &#123;return sum + product.quantity&#125;, 0);&#125;&#125;&#125;);&lt;&#x2F;script&gt;</code></pre></li><li><p>处理事件。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;h1&gt;库存信息&lt;&#x2F;h1&gt;&lt;hr&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;product in products&quot;&gt;&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;&lt;span v-if&#x3D;&quot;product.quantity &#x3D;&#x3D;&#x3D; 0&quot;&gt;已经售罄&lt;&#x2F;span&gt;&lt;button @click&#x3D;&quot;product.quantity +&#x3D; 1&quot;&gt;增加库存&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;h2&gt;库存总量：&#123;&#123; totalQuantity &#125;&#125;台&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const app &#x3D; new Vue(&#123;el: &#39;#app&#39;,data: &#123;products: [&#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;iPhone X&quot;, &quot;quantity&quot;: 20&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;华为 Mate20&quot;, &quot;quantity&quot;: 0&#125;,&#123;&quot;id&quot;: 3, &quot;name&quot;: &quot;小米 Mix3&quot;, &quot;quantity&quot;: 50&#125;]&#125;,computed: &#123;totalQuantity() &#123;return this.products.reduce((sum, product) &#x3D;&gt; &#123;return sum + product.quantity&#125;, 0);&#125;&#125;&#125;);&lt;&#x2F;script&gt;</code></pre></li><li><p>用户输入。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;h1&gt;库存信息&lt;&#x2F;h1&gt;&lt;hr&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;product in products&quot;&gt;&#123;&#123; product.name &#125;&#125; - &lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;product.quantity&quot; min&#x3D;&quot;0&quot;&gt;&lt;span v-if&#x3D;&quot;product.quantity &#x3D;&#x3D;&#x3D; 0&quot;&gt;已经售罄&lt;&#x2F;span&gt;&lt;button @click&#x3D;&quot;product.quantity +&#x3D; 1&quot;&gt;增加库存&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;h2&gt;库存总量：&#123;&#123; totalQuantity &#125;&#125;台&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const app &#x3D; new Vue(&#123;el: &#39;#app&#39;,data: &#123;products: [&#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;iPhone X&quot;, &quot;quantity&quot;: 20&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;华为 Mate20&quot;, &quot;quantity&quot;: 0&#125;,&#123;&quot;id&quot;: 3, &quot;name&quot;: &quot;小米 Mix3&quot;, &quot;quantity&quot;: 50&#125;]&#125;,computed: &#123;totalQuantity() &#123;return this.products.reduce((sum, product) &#x3D;&gt; &#123;return sum + product.quantity&#125;, 0);&#125;&#125;&#125;);&lt;&#x2F;script&gt;</code></pre></li><li><p>通过网络加载JSON数据。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;h2&gt;库存信息&lt;&#x2F;h2&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;product in products&quot;&gt;&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;&lt;span v-if&#x3D;&quot;product.quantity &#x3D;&#x3D;&#x3D; 0&quot;&gt;已经售罄&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const app &#x3D; new Vue(&#123;el: &#39;#app&#39;,data: &#123;products: []&#125;，created() &#123;fetch(&#39;https:&#x2F;&#x2F;jackfrued.top&#x2F;api&#x2F;products&#39;).then(response &#x3D;&gt; response.json()).then(json &#x3D;&gt; &#123;this.products &#x3D; json&#125;);&#125;&#125;);&lt;&#x2F;script&gt;</code></pre></li></ol><h5 id="使用脚手架-vue-cli"><a href="#使用脚手架-vue-cli" class="headerlink" title="使用脚手架 - vue-cli"></a>使用脚手架 - vue-cli</h5><p>Vue为商业项目开发提供了非常便捷的脚手架工具vue-cli，通过工具可以省去手工配置开发环境、测试环境和运行环境的步骤，让开发者只需要关注要解决的问题。</p><ol><li>安装脚手架。</li><li>创建项目。</li><li>安装依赖包。</li><li>运行项目。</li></ol><h4 id="UI框架-Element"><a href="#UI框架-Element" class="headerlink" title="UI框架 - Element"></a>UI框架 - <a href="http://element-cn.eleme.io/#/zh-CN">Element</a></h4><p>基于Vue 2.0的桌面端组件库，用于构造用户界面，支持响应式布局。</p><ol><li><p>引入Element的CSS和JavaScript文件。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- 引入样式 --&gt;&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;&lt;!-- 引入组件库 --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre></li><li><p>一个简单的例子。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;&lt;el-button @click&#x3D;&quot;visible &#x3D; true&quot;&gt;点我&lt;&#x2F;el-button&gt;&lt;el-dialog :visible.sync&#x3D;&quot;visible&quot; title&#x3D;&quot;Hello world&quot;&gt;&lt;p&gt;开始使用Element吧&lt;&#x2F;p&gt;&lt;&#x2F;el-dialog&gt;            &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;new Vue(&#123;el: &#39;#app&#39;,data: &#123;visible: false,&#125;&#125;)&lt;&#x2F;script&gt;&lt;&#x2F;html&gt;</code></pre></li><li><p>使用组件。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;&lt;el-table :data&#x3D;&quot;tableData&quot; stripe style&#x3D;&quot;width: 100%&quot;&gt;&lt;el-table-column prop&#x3D;&quot;date&quot; label&#x3D;&quot;日期&quot; width&#x3D;&quot;180&quot;&gt;&lt;&#x2F;el-table-column&gt;&lt;el-table-column prop&#x3D;&quot;name&quot; label&#x3D;&quot;姓名&quot; width&#x3D;&quot;180&quot;&gt;&lt;&#x2F;el-table-column&gt;&lt;el-table-column prop&#x3D;&quot;address&quot; label&#x3D;&quot;地址&quot;&gt;&lt;&#x2F;el-table-column&gt;&lt;&#x2F;el-table&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;new Vue(&#123;el: &#39;#app&#39;,data: &#123;tableData:  [&#123;date: &#39;2016-05-02&#39;,name: &#39;王一霸&#39;,address: &#39;上海市普陀区金沙江路 1518 弄&#39;&#125;, &#123;date: &#39;2016-05-04&#39;,name: &#39;刘二狗&#39;,address: &#39;上海市普陀区金沙江路 1517 弄&#39;&#125;, &#123;date: &#39;2016-05-01&#39;,name: &#39;杨三萌&#39;,address: &#39;上海市普陀区金沙江路 1519 弄&#39;&#125;, &#123;date: &#39;2016-05-03&#39;,name: &#39;陈四吹&#39;,address: &#39;上海市普陀区金沙江路 1516 弄&#39;&#125;]&#125;&#125;)&lt;&#x2F;script&gt;&lt;&#x2F;html&gt;</code></pre></li></ol><h4 id="报表框架-ECharts"><a href="#报表框架-ECharts" class="headerlink" title="报表框架 - ECharts"></a>报表框架 - <a href="https://echarts.baidu.com/">ECharts</a></h4><p>百度出品的开源可视化库，常用于生成各种类型的报表。</p><p><img src="/./res/baidu_echarts.png"></p><h4 id="基于弹性盒子的CSS框架-Bulma"><a href="#基于弹性盒子的CSS框架-Bulma" class="headerlink" title="基于弹性盒子的CSS框架 - Bulma"></a>基于弹性盒子的CSS框架 - <a href="https://bulma.io/">Bulma</a></h4><p>Bulma是一个基于Flexbox的现代化的CSS框架，其初衷就是移动优先（Mobile First），模块化设计，可以轻松用来实现各种简单或者复杂的内容布局，即使不懂CSS的开发者也能够使用它定制出漂亮的页面。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;Bulma&lt;&#x2F;title&gt;&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bulma&#x2F;0.7.4&#x2F;css&#x2F;bulma.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;div &#123; margin-top: 10px; &#125;.column &#123; color: #fff; background-color: #063; margin: 10px 10px; text-align: center; &#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;columns&quot;&gt;&lt;div class&#x3D;&quot;column&quot;&gt;1&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;column&quot;&gt;2&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;column&quot;&gt;3&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;column&quot;&gt;4&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;a class&#x3D;&quot;button is-primary&quot;&gt;Primary&lt;&#x2F;a&gt;&lt;a class&#x3D;&quot;button is-link&quot;&gt;Link&lt;&#x2F;a&gt;&lt;a class&#x3D;&quot;button is-info&quot;&gt;Info&lt;&#x2F;a&gt;&lt;a class&#x3D;&quot;button is-success&quot;&gt;Success&lt;&#x2F;a&gt;&lt;a class&#x3D;&quot;button is-warning&quot;&gt;Warning&lt;&#x2F;a&gt;&lt;a class&#x3D;&quot;button is-danger&quot;&gt;Danger&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;progress class&#x3D;&quot;progress is-danger is-medium&quot; max&#x3D;&quot;100&quot;&gt;60%&lt;&#x2F;progress&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;table class&#x3D;&quot;table is-hoverable&quot;&gt;&lt;tr&gt;&lt;th&gt;One&lt;&#x2F;th&gt;&lt;th&gt;Two&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Three&lt;&#x2F;td&gt;&lt;td&gt;Four&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Five&lt;&#x2F;td&gt;&lt;td&gt;Six&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Seven&lt;&#x2F;td&gt;&lt;td&gt;Eight&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Nine&lt;&#x2F;td&gt;&lt;td&gt;Ten&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Eleven&lt;&#x2F;td&gt;&lt;td&gt;Twelve&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h4 id="响应式布局框架-Bootstrap"><a href="#响应式布局框架-Bootstrap" class="headerlink" title="响应式布局框架 - Bootstrap"></a>响应式布局框架 - <a href="http://www.bootcss.com/">Bootstrap</a></h4><p>用于快速开发Web应用程序的前端框架，支持响应式布局。</p><ol><li><p>特点</p><ul><li>支持主流的浏览器和移动设备</li><li>容易上手</li><li>响应式设计</li></ul></li><li><p>内容</p><ul><li>网格系统</li><li>封装的CSS</li><li>现成的组件</li><li>JavaScript插件</li></ul></li><li><p>可视化</p><p><img src="/./res/bootstrap-layoutit.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>31-35.玩转Linux操作系统</title>
      <link href="/2024/07/01/31-35.wan-zhuan-linux-cao-zuo-xi-tong/"/>
      <url>/2024/07/01/31-35.wan-zhuan-linux-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>玩转Linux操作系统</p><blockquote><p><strong>说明</strong>：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。</p></blockquote><h3 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。</p><h4 id="没有操作系统（手工操作）"><a href="#没有操作系统（手工操作）" class="headerlink" title="没有操作系统（手工操作）"></a>没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。</p><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p><h4 id="分时系统和实时系统"><a href="#分时系统和实时系统" class="headerlink" title="分时系统和实时系统"></a>分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p><h4 id="通用操作系统"><a href="#通用操作系统" class="headerlink" title="通用操作系统"></a>通用操作系统</h4><ol><li><p>1960s：IBM的System&#x2F;360系列的机器有了统一的操作系统OS&#x2F;360。</p></li><li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p></li><li><p>1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。</p><blockquote><p>注：很难想象，Unix这么伟大的操作系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。</p></blockquote></li><li><p>1970年~1971年：Ken Thompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p><img src="res/ken-and-dennis-pdp-11.png" style="zoom:62%;" /></li><li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p></li><li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p></li><li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p></li><li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。</p><img src="res/andrew.jpg" style="zoom:50%;" /></li><li><p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。</p><p><img src="/./res/linus.png"></p></li></ol><p>下图是Unix操作系统家族的图谱。</p><p><img src="/./res/history-of-unix.png"></p><h3 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I&#x2F;O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p><p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free">点击这里</a>）。</p><h3 id="Linux系统优点"><a href="#Linux系统优点" class="headerlink" title="Linux系统优点"></a>Linux系统优点</h3><ol><li>通用操作系统，不跟特定的硬件绑定。</li><li>用C语言编写，可移植性强，有内核编程接口。</li><li>支持多用户和多任务，支持安全的分层文件系统。</li><li>大量的实用程序，完善的网络功能以及强大的支持文档。</li><li>可靠的安全性和良好的稳定性，对开发者更友好。</li></ol><h3 id="Linux系统发行版本"><a href="#Linux系统发行版本" class="headerlink" title="Linux系统发行版本"></a>Linux系统发行版本</h3><ol><li><a href="https://www.redhat.com/en">Redhat</a></li><li><a href="https://www.ubuntu.com/">Ubuntu</a></li><li><a href="https://www.centos.org/">CentOS</a></li><li><a href="https://getfedora.org/">Fedora</a></li><li><a href="https://www.debian.org/">Debian</a></li><li><a href="https://www.opensuse.org/">openSUSE</a></li></ol><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">命令名称 [命名参数] [命令对象]</code></pre><ol><li><p>获取登录信息 - <strong>w</strong> &#x2F; <strong>who</strong> &#x2F; <strong>last</strong>&#x2F; <strong>lastb</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# w 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     pts&#x2F;0    182.139.66.250   23:03    4.00s  0.02s  0.00s wjackfrue pts&#x2F;1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash[root ~]# whoroot     pts&#x2F;0        2018-04-12 23:03 (182.139.66.250)jackfrued pts&#x2F;1        2018-04-12 23:26 (182.139.66.250)[root ~]# who am iroot     pts&#x2F;0        2018-04-12 23:03 (182.139.66.250)[root ~]# who mom likesroot     pts&#x2F;0        2018-04-12 23:03 (182.139.66.250)[root ~]# lastroot     pts&#x2F;0        117.136.63.184   Sun May 26 18:57   still logged in   reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)   root     pts&#x2F;4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)    root     pts&#x2F;4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)    root     pts&#x2F;3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)    root     pts&#x2F;2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)    root     pts&#x2F;0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)    </code></pre></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ps  PID TTY          TIME CMD 3531 pts&#x2F;0    00:00:00 bash 3553 pts&#x2F;0    00:00:00 ps</code></pre></li><li><p>查看命令的说明和位置 - <strong>whatis</strong> &#x2F; <strong>which</strong> &#x2F; <strong>whereis</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# whatis psps (1)        - report a snapshot of the current processes.[root ~]# whatis pythonpython (1)    - an interpreted, interactive, object-oriented programming language[root ~]# whereis psps: &#x2F;usr&#x2F;bin&#x2F;ps &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;ps.1.gz[root ~]# whereis pythonpython: &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;python2.7 &#x2F;usr&#x2F;lib&#x2F;python2.7 &#x2F;usr&#x2F;lib64&#x2F;python2.7 &#x2F;etc&#x2F;python &#x2F;usr&#x2F;include&#x2F;python2.7 &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;python.1.gz[root ~]# which ps&#x2F;usr&#x2F;bin&#x2F;ps[root ~]# which python&#x2F;usr&#x2F;bin&#x2F;python</code></pre></li><li><p>清除屏幕上显示的内容 - <strong>clear</strong>。</p></li><li><p>查看帮助文档 - <strong>man</strong> &#x2F; <strong>info</strong> &#x2F; <strong>–help</strong> &#x2F; <strong>apropos</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try &#39;ps --help &lt;simple|list|output|threads|misc|all&gt;&#39;  or &#39;ps --help &lt;s|l|o|t|m|a&gt;&#39; for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1)                                User Commands                                PS(1)NAME       ps - report a snapshot of the current processes.SYNOPSIS       ps [options]DESCRIPTION...</code></pre></li><li><p>查看系统和主机名 - <strong>uname</strong> &#x2F; <strong>hostname</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat &#x2F;etc&#x2F;centos-releaseCentOS Linux release 7.6.1810 (Core)</code></pre><blockquote><p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p></blockquote></li><li><p>时间和日期 - <strong>date</strong> &#x2F; <strong>cal</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# dateWed Jun 20 12:53:19 CST 2018[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal      June 2018Su Mo Tu We Th Fr Sa                1  2 3  4  5  6  7  8  910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017      May 2017Su Mo Tu We Th Fr Sa    1  2  3  4  5  6 7  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31</code></pre></li><li><p>重启和关机 - <strong>reboot</strong> &#x2F; <strong>shutdown</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# shutdown -h +5Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use &#39;shutdown -c&#39; to cancel.[root ~]# Broadcast message from root (Sun 2019-05-26 19:29:27 CST):The system is going down for power-off at Sun 2019-05-26 19:34:27 CST![root ~]# shutdown -cBroadcast message from root (Sun 2019-05-26 19:30:22 CST):The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST![root ~]# shutdown -r 23:58Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use &#39;shutdown -c&#39; to cancel.[root ~]# shutdown -cBroadcast message from root (Sun 2019-05-26 19:31:06 CST):The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!</code></pre><blockquote><p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p></blockquote></li><li><p>退出登录 -  <strong>exit</strong> &#x2F; <strong>logout</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p></li></ol>  <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history...452  ls453  cd Python-3.6.5&#x2F;454  clear455  history[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</code></pre><blockquote><p><strong>说明</strong>：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote><h3 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h3><h4 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h4><ol><li><p>创建&#x2F;删除空目录 - <strong>mkdir</strong> &#x2F; <strong>rmdir</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# mkdir abc[root ~]# mkdir -p xyz&#x2F;abc[root ~]# rmdir abc</code></pre></li><li><p>创建&#x2F;删除文件 - <strong>touch</strong> &#x2F; <strong>rm</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# touch readme.txt[root ~]# touch error.txt[root ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root ~]# rm -rf xyz</code></pre><ul><li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li><code>rm</code>的几个重要参数：<ul><li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li><li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li><li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> &#x2F; <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li><code>-l</code>：以长格式查看文件和目录。</li><li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li><li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li><code>-d</code>：只列出目录，不列出其他内容。</li><li><code>-S</code> &#x2F; <code>-t</code>：按大小&#x2F;时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> &#x2F; <strong>tac</strong> &#x2F; <strong>head</strong> &#x2F; <strong>tail</strong> &#x2F; <strong>more</strong> &#x2F; <strong>less</strong> &#x2F; <strong>rev</strong> &#x2F; <strong>od</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# wget http:&#x2F;&#x2F;www.sohu.com&#x2F; -O sohu.html--2018-06-20 18:42:34--  http:&#x2F;&#x2F;www.sohu.com&#x2F;Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text&#x2F;html]Saving to: ‘sohu.html’100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 212,527     --.-K&#x2F;s   in 0.03s2018-06-20 18:42:34 (7.48 MB&#x2F;s) - ‘sohu.html’ saved [212527&#x2F;212527][root ~]# cat sohu.html...[root ~]# head -10 sohu.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;搜狐&lt;&#x2F;title&gt;&lt;meta name&#x3D;&quot;Keywords&quot; content&#x3D;&quot;搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧&quot;&#x2F;&gt;&lt;meta name&#x3D;&quot;Description&quot; content&#x3D;&quot;搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。&quot; &#x2F;&gt;&lt;meta name&#x3D;&quot;shenma-site-verification&quot; content&#x3D;&quot;1237e4d02a3d8d73e96cbd97b699e9c3_1504254750&quot;&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&#x2F;&gt;&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge,chrome&#x3D;1&quot;&#x2F;&gt;[root ~]# tail -2 sohu.html&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;[root ~]# less sohu.html...[root ~]# cat -n sohu.html | more...</code></pre><blockquote><p><strong>说明</strong>：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p></blockquote></li><li><p>拷贝&#x2F;移动文件 - <strong>cp</strong> &#x2F; <strong>mv</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# mkdir backup[root ~]# cp sohu.html backup&#x2F;[root ~]# cd backup[root backup]# lssohu.html[root backup]# mv sohu.html sohu_index.html[root backup]# lssohu_index.html</code></pre></li><li><p>文件重命名 - <strong>rename</strong>。</p></li></ol>  <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm</code></pre><ol start="8"><li><p>查找文件和查找内容 - <strong>find</strong> &#x2F; <strong>grep</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find &#x2F; -name &quot;*.html&quot;&#x2F;root&#x2F;sohu.html&#x2F;root&#x2F;backup&#x2F;sohu_index.html[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name &quot;*.swp&quot; -delete[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep &quot;&lt;script&gt;&quot; sohu.html -n20:&lt;script&gt;[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \&lt;\&#x2F;?script.*\&gt; sohu.html -n20:&lt;script&gt;22:&lt;&#x2F;script&gt;24:&lt;script src&#x3D;&quot;&#x2F;&#x2F;statics.itc.cn&#x2F;web&#x2F;v3&#x2F;static&#x2F;js&#x2F;es5-shim-08e41cfc3e.min.js&quot;&gt;&lt;&#x2F;script&gt;25:&lt;script src&#x3D;&quot;&#x2F;&#x2F;statics.itc.cn&#x2F;web&#x2F;v3&#x2F;static&#x2F;js&#x2F;es5-sham-1d5fa1124b.min.js&quot;&gt;&lt;&#x2F;script&gt;26:&lt;script src&#x3D;&quot;&#x2F;&#x2F;statics.itc.cn&#x2F;web&#x2F;v3&#x2F;static&#x2F;js&#x2F;html5shiv-21fc8c2ba6.js&quot;&gt;&lt;&#x2F;script&gt;29:&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;52:&lt;&#x2F;script&gt;...</code></pre><blockquote><p><strong>说明</strong>：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>创建链接和查看链接 - <strong>ln</strong> &#x2F; <strong>readlink</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln &#x2F;root&#x2F;sohu.html &#x2F;root&#x2F;backup&#x2F;sohu_backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln &#x2F;root&#x2F;sohu.html &#x2F;root&#x2F;backup&#x2F;sohu_backup2[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s &#x2F;etc&#x2F;centos-release sysinfo[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; &#x2F;etc&#x2F;centos-release[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat &#x2F;etc&#x2F;centos-releaseCentOS Linux release 7.4.1708 (Core)</code></pre><blockquote><p><strong>说明</strong>：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩&#x2F;解压缩和归档&#x2F;解归档 - <strong>gzip</strong> &#x2F; <strong>gunzip</strong> &#x2F; <strong>xz</strong>。</p></li></ol>  <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.10.tar.gz--2018-06-20 19:29:59--  http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.10.tar.gzResolving download.redis.io (download.redis.io)... 109.74.203.151Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1738465 (1.7M) [application&#x2F;x-gzip]Saving to: ‘redis-4.0.10.tar.gz’100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 1,738,465   70.1KB&#x2F;s   in 74s2018-06-20 19:31:14 (22.9 KB&#x2F;s) - ‘redis-4.0.10.tar.gz’ saved [1738465&#x2F;1738465][root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar</code></pre><ol start="11"><li>归档和解归档 - <strong>tar</strong>。</li></ol>   <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tarredis-4.0.10&#x2F;redis-4.0.10&#x2F;.gitignoreredis-4.0.10&#x2F;00-RELEASENOTESredis-4.0.10&#x2F;BUGSredis-4.0.10&#x2F;CONTRIBUTINGredis-4.0.10&#x2F;COPYINGredis-4.0.10&#x2F;INSTALLredis-4.0.10&#x2F;MANIFESTOredis-4.0.10&#x2F;Makefileredis-4.0.10&#x2F;README.mdredis-4.0.10&#x2F;deps&#x2F;redis-4.0.10&#x2F;deps&#x2F;Makefileredis-4.0.10&#x2F;deps&#x2F;README.md...</code></pre><blockquote><p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p></blockquote><ol start="12"><li>将标准输入转成命令行参数 - <strong>xargs</strong>。</li></ol><p>   下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p>   <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name &quot;*.html&quot; | xargs rm -f</code></pre><p>   下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p>   <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt</code></pre><blockquote><p><strong>说明</strong>：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p></blockquote><ol start="13"><li><p>显示文件或目录 - <strong>basename</strong> &#x2F; <strong>dirname</strong>。</p></li><li><p>其他相关工具。</p></li></ol><ul><li><strong>sort</strong> - 对内容排序</li><li><strong>uniq</strong> - 去掉相邻重复内容</li><li><strong>tr</strong> - 替换指定内容为新内容</li><li><strong>cut</strong> &#x2F; <strong>paste</strong> - 剪切&#x2F;黏贴内容</li><li><strong>split</strong> - 拆分文件</li><li><strong>file</strong> - 判断文件类型</li><li><strong>wc</strong> - 统计文件行数、单词数、字节数</li><li><strong>iconv</strong> - 编码转换</li></ul>   <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# cat foo.txtgrapeapplepitaya[root ~]# cat bar.txt100200300400[root ~]# paste foo.txt bar.txtgrape   100apple   200pitaya  300        400[root ~]# paste foo.txt bar.txt &gt; hello.txt[root ~]# cut -b 4-8 hello.txtpe      10le      20aya     30[root ~]# cat hello.txt | tr &#39;\t&#39; &#39;,&#39;grape,100apple,200pitaya,300,400[root ~]# split -l 100 sohu.html hello[root ~]# wget https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;bd_logo1.png[root ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root ~]# wc sohu.html  2979   6355 212527 sohu.html[root ~]# wc -l sohu.html2979 sohu.html[root ~]# wget http:&#x2F;&#x2F;www.qq.com -O qq.html[root ~]# iconv -f gb2312 -t utf-8 qq.html</code></pre><h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><ol><li><p>管道的使用 - <strong>|</strong>。</p><p>例子：查找当前目录下文件个数。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# find .&#x2F; | wc -l6152</code></pre><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ls | cat -n     1  dump.rdb     2  mongodb-3.6.5     3  Python-3.6.5     4  redis-3.2.11     5  redis.conf</code></pre><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l</code></pre></li><li><p>输出重定向和错误重定向 - <strong>&gt;</strong> &#x2F; <strong>&gt;&gt;</strong> &#x2F; <strong>2&gt;</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root ~]# cat readme.txt | sort | uniq &gt; result.txt[root ~]# cat result.txtapplebananagrapepearpitayawatermelon</code></pre></li><li><p>输入重定向 - <strong>&lt;</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# echo &#39;hello, world!&#39; &gt; hello.txt[root ~]# wall &lt; hello.txt[root ~]#Broadcast message from root (Wed Jun 20 19:43:05 2018):hello, world![root ~]# echo &#39;I will show you some code.&#39; &gt;&gt; hello.txt[root ~]# wall &lt; hello.txt[root ~]#Broadcast message from root (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code.</code></pre></li><li><p>多重定向 - <strong>tee</strong>。</p><p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ls | tee -a ls.txt</code></pre></li></ol><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><ol><li><p><strong>alias</strong></p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# alias ll&#x3D;&#39;ls -l&#39;[root ~]# alias frm&#x3D;&#39;rm -rf&#39;[root ~]# ll...drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc...[root ~]# frm abc</code></pre></li><li><p><strong>unalias</strong></p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# unalias frm[root ~]# frm sohu.html-bash: frm: command not found</code></pre></li></ol><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><ol><li><p>字符流编辑器 - <strong>sed</strong>。</p><p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# cat -n fruit.txt      1  banana     2  grape     3  apple     4  watermelon     5  orange</code></pre><p>接下来，我们在第2行后面添加一个pitaya。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sed &#39;2a pitaya&#39; fruit.txt bananagrapepitayaapplewatermelonorange</code></pre><blockquote><p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p></blockquote><p>在第2行前面插入一个waxberry。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sed &#39;2i waxberry&#39; fruit.txtbananawaxberrygrapeapplewatermelonorange</code></pre><p>删除第3行。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sed &#39;3d&#39; fruit.txtbananagrapewatermelonorange</code></pre><p>删除第2行到第4行。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sed &#39;2,4d&#39; fruit.txtbananaorange</code></pre><p>将文本中的字符a替换为@。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sed &#39;s#a#@#&#39; fruit.txt b@nanagr@pe@pplew@termelonor@nge</code></pre><p>将文本中的字符a替换为@，使用全局模式。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sed &#39;s#a#@#g&#39; fruit.txt b@n@n@gr@pe@pplew@termelonor@nge</code></pre></li><li><p>模式匹配和处理语言 - <strong>awk</strong>。</p><p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p><p>假设有一个名为fruit2.txt的文件，内容如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# cat fruit2.txt 1       banana      1202       grape       5003       apple       12304       watermelon  805       orange      400</code></pre><p>显示文件的第3行。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# awk &#39;NR&#x3D;&#x3D;3&#39; fruit2.txt 3       apple       1230</code></pre><p>显示文件的第2列。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# awk &#39;&#123;print $2&#125;&#39; fruit2.txt bananagrapeapplewatermelonorange</code></pre><p>显示文件的最后一列。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# awk &#39;&#123;print $NF&#125;&#39; fruit2.txt 120500123080400</code></pre><p>输出末尾数字大于等于300的行。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# awk &#39;&#123;if($3 &gt;&#x3D; 300) &#123;print $0&#125;&#125;&#39; fruit2.txt 2       grape       5003       apple       12305       orange      400</code></pre><p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p></li></ol><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol><li><p>创建和删除用户 - <strong>useradd</strong> &#x2F; <strong>userdel</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root home]# useradd hellokitty[root home]# userdel hellokitty</code></pre><ul><li><code>-d</code> - 创建用户时为用户指定用户主目录</li><li><code>-g</code> - 创建用户时指定用户所属的用户组</li></ul></li><li><p>创建和删除用户组 - <strong>groupadd</strong> &#x2F; <strong>groupdel</strong>。</p><blockquote><p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p></blockquote></li><li><p>修改密码 - <strong>passwd</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# passwd hellokittyNew password: Retype new password: passwd: all authentication tokens updated successfully.</code></pre><blockquote><p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p></blockquote><ul><li><code>-l</code> &#x2F; <code>-u</code> - 锁定&#x2F;解锁用户。</li><li><code>-d</code> - 清除用户密码。</li><li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li><li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li></ul></li><li><p>查看和修改密码有效期 - <strong>chage</strong>。</p><p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后7天禁用该用户。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">chage -M 100 -W 15 -I 7 hellokitty</code></pre></li><li><p>切换用户 - <strong>su</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# su hellokitty[hellokitty root]$</code></pre></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[hellokitty ~]$ ls &#x2F;rootls: cannot open directory &#x2F;root: Permission denied[hellokitty ~]$ sudo ls &#x2F;root[sudo] password for hellokitty:</code></pre><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p></blockquote></li><li><p>编辑sudoers文件 - <strong>visudo</strong>。</p><p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p><pre class="language-none"><code class="language-none">## Allow root to run any commands anywhere root    ALL&#x3D;(ALL)   ALL## Allows members of the &#39;sys&#39; group to run networking, software, ## service management apps and more.# %sys ALL &#x3D; NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS## Allows people in group wheel to run all commands%wheel  ALL&#x3D;(ALL)   ALL## Same thing without a password# %wheel    ALL&#x3D;(ALL)   NOPASSWD: ALL## Allows members of the users group to mount and unmount the## cdrom as root# %users  ALL&#x3D;&#x2F;sbin&#x2F;mount &#x2F;mnt&#x2F;cdrom, &#x2F;sbin&#x2F;umount &#x2F;mnt&#x2F;cdrom## Allows members of the users group to shutdown this system# %users  localhost&#x3D;&#x2F;sbin&#x2F;shutdown -h now</code></pre></li><li><p>显示用户与用户组的信息 - <strong>id</strong>。</p></li><li><p>给其他用户发消息 -<strong>write</strong> &#x2F; <strong>wall</strong>。</p><p>发送方：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# write hellokittyDinner is on me.Call me at 6pm.</code></pre><p>接收方：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[hellokitty ~]$ Message from root on pts&#x2F;0 at 17:41 ...Dinner is on me.Call me at 6pm.EOF</code></pre></li><li><p>查看&#x2F;设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p></li></ol>   <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[hellokitty ~]$ mesgis y[hellokitty ~]$ mesg n[hellokitty ~]$ mesgis n</code></pre><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="文件和路径"><a href="#文件和路径" class="headerlink" title="文件和路径"></a>文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ol><li>&#x2F;bin - 基本命令的二进制文件。</li><li>&#x2F;boot - 引导加载程序的静态文件。</li><li>&#x2F;dev - 设备文件。</li><li><strong>&#x2F;etc</strong> - 配置文件。</li><li>&#x2F;home - 普通用户主目录的父目录。</li><li>&#x2F;lib - 共享库文件。</li><li>&#x2F;lib64 - 共享64位库文件。</li><li>&#x2F;lost+found - 存放未链接文件。</li><li>&#x2F;media - 自动识别设备的挂载目录。</li><li>&#x2F;mnt - 临时挂载文件系统的挂载点。</li><li>&#x2F;opt - 可选插件软件包安装位置。</li><li>&#x2F;proc -  内核和进程信息。</li><li><strong>&#x2F;root</strong> - 超级管理员用户主目录。</li><li>&#x2F;run - 存放系统运行时需要的东西。</li><li>&#x2F;sbin - 超级用户的二进制文件。</li><li>&#x2F;sys - 设备的伪文件系统。</li><li>&#x2F;tmp - 临时文件夹。</li><li><strong>&#x2F;usr</strong> - 用户应用目录。</li><li>&#x2F;var - 变量数据目录。</li></ol><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...[root ~]# chmod g+w,o+w sohu.html[root ~]# ls -l...-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html...[root ~]# chmod 644 sohu.html[root ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...</code></pre><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="/./res/file-mode.png"></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ls -l...-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt...[root ~]# chown hellokitty readme.txt[root ~]# ls -l...-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt...</code></pre></li><li><p><strong>chgrp</strong> - 改变用户组。</p></li></ol><h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# df -hFilesystem      Size  Used Avail Use% Mounted on&#x2F;dev&#x2F;vda1        40G  5.0G   33G  14% &#x2F;devtmpfs        486M     0  486M   0% &#x2F;devtmpfs           497M     0  497M   0% &#x2F;dev&#x2F;shmtmpfs           497M  356K  496M   1% &#x2F;runtmpfs           497M     0  497M   0% &#x2F;sys&#x2F;fs&#x2F;cgrouptmpfs           100M     0  100M   0% &#x2F;run&#x2F;user&#x2F;0</code></pre></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# fdisk -lDisk &#x2F;dev&#x2F;vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits &#x3D; sectors of 1 * 512 &#x3D; 512 bytesSector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytesI&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytesDisk label type: dosDisk identifier: 0x000a42f4   Device Boot      Start         End      Blocks   Id  System&#x2F;dev&#x2F;vda1   *        2048    83884031    41940992   83  LinuxDisk &#x2F;dev&#x2F;vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits &#x3D; sectors of 1 * 512 &#x3D; 512 bytesSector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytesI&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</code></pre></li><li><p>磁盘分区工具 - <strong>parted</strong>。</p></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# mkfs -t ext4 -v &#x2F;dev&#x2F;sdb</code></pre><ul><li><code>-t</code> - 指定文件系统的类型。</li><li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li><li><code>-v</code> - 显示详细信息。</li></ul></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>转换或拷贝文件 - <strong>dd</strong>。</p></li><li><p>挂载&#x2F;卸载 - <strong>mount</strong> &#x2F; <strong>umount</strong>。</p></li><li><p>创建&#x2F;激活&#x2F;关闭交换分区 - <strong>mkswap</strong> &#x2F; <strong>swapon</strong> &#x2F; <strong>swapoff</strong>。</p></li></ol><blockquote><p><strong>说明</strong>：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p></blockquote><h3 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 - vim"></a>编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# vim guess.py</code></pre></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示&#x2F;不显示行号：<code>set nu</code> &#x2F; <code>set nonu</code></p></li><li><p>设置启用&#x2F;关闭高亮语法：<code>syntax on</code> &#x2F; <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用&#x2F;关闭搜索结果高亮：<code>set hls</code> &#x2F; <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# vim -d foo.txt bar.txt</code></pre><p><img src="/./res/vim-diff.png"></p></li><li><p>打开多个文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# vim foo.txt bar.txt hello.txt</code></pre><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="/./res/vim-multi-window.png"></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p><p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。</p><p><img src="/./res/vim-macro.png"></p></li></ul></li></ul></li></ol><h3 id="软件安装和配置"><a href="#软件安装和配置" class="headerlink" title="软件安装和配置"></a>软件安装和配置</h3><h4 id="使用包管理工具"><a href="#使用包管理工具" class="headerlink" title="使用包管理工具"></a>使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# yum -y install nginx...Installed:  nginx.x86_64 1:1.12.2-2.el7Dependency Installed:  nginx-all-modules.noarch 1:1.12.2-2.el7  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7  nginx-mod-mail.x86_64 1:1.12.2-2.el7  nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName        : nginxArch        : x86_64Epoch       : 1Version     : 1.12.2Release     : 2.el7Size        : 1.5 MRepo        : installedFrom repo   : epelSummary     : A high performance web server and reverse proxy serverURL         : http:&#x2F;&#x2F;nginx.org&#x2F;License     : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and            : IMAP protocols, with a strong focus on high concurrency, performance and low            : memory usage.[root ~]# nginx -vnginx version: nginx&#x2F;1.12.2</code></pre><p>移除Nginx。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# yum -y remove nginx</code></pre><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root mysql]# yum -y remove mariadb-libs[root mysql]# yum -y install libaio[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm...</code></pre><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I&#x2F;O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# rpm -qa | grep mysql | xargs rpm -e</code></pre><h4 id="下载解压配置环境变量"><a href="#下载解压配置环境变量" class="headerlink" title="下载解压配置环境变量"></a>下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# wget https:&#x2F;&#x2F;fastdl.mongodb.org&#x2F;linux&#x2F;mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53--  https:&#x2F;&#x2F;fastdl.mongodb.org&#x2F;linux&#x2F;mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application&#x2F;x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 100,564,462  630KB&#x2F;s   in 2m 9s2018-06-21 18:35:04 (760 KB&#x2F;s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462&#x2F;100564462][root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5&#x2F;READMEmongodb-linux-x86_64-rhel70-3.6.5&#x2F;THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5&#x2F;MPL-2mongodb-linux-x86_64-rhel70-3.6.5&#x2F;GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongodumpmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongorestoremongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongoexportmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongoimportmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongostatmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongotopmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;bsondumpmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongofilesmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongoreplaymongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongoperfmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongodmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongosmongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;mongomongodb-linux-x86_64-rhel70-3.6.5&#x2F;bin&#x2F;install_compass[root ~]# vim .bash_profile...PATH&#x3D;$PATH:$HOME&#x2F;bin:$HOME&#x2F;mongodb-linux-x86_64-rhel70-3.6.5&#x2F;binexport PATH...[root ~]# source .bash_profile[root ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64[root ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64</code></pre><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/">官方网站</a>上给出的说明。</p></blockquote><h4 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# yum install gcc[root ~]# wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.6.5&#x2F;Python-3.6.5.tgz[root ~]# gunzip Python-3.6.5.tgz[root ~]# tar -xvf Python-3.6.5.tar[root ~]# cd Python-3.6.5[root ~]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python36 --enable-optimizations[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root ~]# make &amp;&amp; make install...[root ~]# ln -s &#x2F;usr&#x2F;local&#x2F;python36&#x2F;bin&#x2F;python3.6 &#x2F;usr&#x2F;bin&#x2F;python3[root ~]# python3 --versionPython 3.6.5[root ~]# python3 -m pip install -U pip[root ~]# pip3 --version</code></pre><blockquote><p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者&#x2F;etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p></blockquote></li><li><p>安装Redis-3.2.12。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.12.tar.gz[root ~]# gunzip redis-3.2.12.tar.gz[root ~]# tar -xvf redis-3.2.12.tar[root ~]# cd redis-3.2.12[root ~]# make &amp;&amp; make install[root ~]# redis-server --versionRedis server v&#x3D;3.2.12 sha&#x3D;00000000:0 malloc&#x3D;jemalloc-4.0.3 bits&#x3D;64 build&#x3D;5bc5cd3c03d6ceb6[root ~]# redis-cli --versionredis-cli 3.2.12</code></pre></li></ol><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p><ol><li><p>启动防火墙服务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# systemctl start firewalld</code></pre></li><li><p>终止防火墙服务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# systemctl stop firewalld</code></pre></li><li><p>重启防火墙服务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# systemctl restart firewalld</code></pre></li><li><p>查看防火墙服务状态。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# systemctl status firewalld</code></pre></li><li><p>设置&#x2F;禁用防火墙服务开机自启。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# systemctl enable firewalldCreated symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dbus-org.fedoraproject.FirewallD1.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service.Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;firewalld.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service.[root ~]# systemctl disable firewalldRemoved symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;firewalld.service.Removed symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol><li><p>在指定的时间执行命令。</p><ul><li><strong>at</strong> - 将任务排队，在指定的时间执行。</li><li><strong>atq</strong> - 查看待执行的任务队列。</li><li><strong>atrm</strong> - 从队列中删除待执行的任务。</li></ul><p>指定3天以后下午5点要执行的任务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# at 5pm+3daysat&gt; rm -f &#x2F;root&#x2F;*.htmlat&gt; &lt;EOT&gt;job 9 at Wed Jun  5 17:00:00 2019</code></pre><p>查看待执行的任务队列。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# atq9       Wed Jun  5 17:00:00 2019 a root</code></pre><p>从队列中删除指定的任务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]$ atrm 9</code></pre></li><li><p>计划任务表 - <strong>crontab</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# crontab -e* * * * * echo &quot;hello, world!&quot; &gt;&gt; &#x2F;root&#x2F;hello.txt59 23 * * * rm -f &#x2F;root&#x2F;*.log</code></pre><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向&#x2F;root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除&#x2F;root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照&#x2F;etc&#x2F;crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p></blockquote><p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# cd &#x2F;etc[root etc]# ls -l | grep cron-rw-------.  1 root root      541 Aug  3  2017 anacrontabdrwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.ddrwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily-rw-------.  1 root root        0 Aug  3  2017 cron.denydrwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourlydrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly-rw-r--r--   1 root root      493 Jun 23 15:09 crontabdrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly[root etc]# vim crontab  1 SHELL&#x3D;&#x2F;bin&#x2F;bash  2 PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin  3 MAILTO&#x3D;root  4  5 # For details see man 4 crontabs  6  7 # Example of job definition:  8 # .---------------- minute (0 - 59)  9 # |  .------------- hour (0 - 23) 10 # |  |  .---------- day of month (1 - 31) 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # |  |  |  |  | 14 # *  *  *  *  * user-name  command to be executed</code></pre></li></ol><h3 id="网络访问和管理"><a href="#网络访问和管理" class="headerlink" title="网络访问和管理"></a>网络访问和管理</h3><ol><li><p>安全远程连接 - <strong>ssh</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]$ ssh root@120.77.222.217The authenticity of host &#39;120.77.222.217 (120.77.222.217)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.Are you sure you want to continue connecting (yes&#x2F;no)? yesWarning: Permanently added &#39;120.77.222.217&#39; (ECDSA) to the list of known hosts.root@120.77.222.217&#39;s password: </code></pre></li><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>发送和接收邮件 - <strong>mail</strong>。</p></li><li><p>网络配置工具（旧） - <strong>ifconfig</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ifconfig eth0eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)        RX packets 1067841  bytes 1296732947 (1.2 GiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 409912  bytes 43569163 (41.5 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions </code></pre></li><li><p>网络配置工具（新） - <strong>ip</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ip address1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000    link&#x2F;ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff    inet 172.18.61.250&#x2F;20 brd 172.18.63.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq&#x3D;1 ttl&#x3D;51 time&#x3D;36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq&#x3D;2 ttl&#x3D;51 time&#x3D;36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq&#x3D;3 ttl&#x3D;51 time&#x3D;36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 36.392&#x2F;36.406&#x2F;36.427&#x2F;0.156 ms</code></pre></li><li><p>显示或管理路由表 - <strong>route</strong>。</p></li><li><p>查看网络服务和端口 - <strong>netstat</strong> &#x2F; <strong>ss</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# netstat -nap | grep nginx</code></pre></li><li><p>网络监听抓包 - <strong>tcpdump</strong>。</p></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p></li></ol>  <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# scp root@1.2.3.4:&#x2F;root&#x2F;guido.jpg hellokitty@4.3.2.1:&#x2F;home&#x2F;hellokitty&#x2F;pic.jpg</code></pre><ol start="11"><li><p>文件同步工具 - <strong>rsync</strong>。</p><blockquote><p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p></blockquote></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sftp root@1.2.3.4root@1.2.3.4&#39;s password:Connected to 1.2.3.4.sftp&gt;</code></pre><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>&#x2F;<code>lls</code>：显示远端&#x2F;本地目录列表。</p></li><li><p><code>cd</code>&#x2F;<code>lcd</code>：切换远端&#x2F;本地路径。</p></li><li><p><code>mkdir</code>&#x2F;<code>lmkdir</code>：创建远端&#x2F;本地目录。</p></li><li><p><code>pwd</code>&#x2F;<code>lpwd</code>：显示远端&#x2F;本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>&#x2F;<code>exit</code>&#x2F;<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p>查看进程 - <strong>ps</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 Jun23 ?        00:00:05 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd --switched-root --system --deserialize 21root         2     0  0 Jun23 ?        00:00:00 [kthreadd]...[root ~]# ps -ef | grep mysqldroot      4943  4581  0 22:45 pts&#x2F;0    00:00:00 grep --color&#x3D;auto mysqldmysql    25257     1  0 Jun25 ?        00:00:39 &#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</code></pre></li><li><p>显示进程状态树 - <strong>pstree</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# pstreesystemd─┬─AliYunDun───18*[&#123;AliYunDun&#125;]        ├─AliYunDunUpdate───3*[&#123;AliYunDunUpdate&#125;]        ├─2*[agetty]        ├─aliyun-service───2*[&#123;aliyun-service&#125;]        ├─atd        ├─auditd───&#123;auditd&#125;        ├─dbus-daemon        ├─dhclient        ├─irqbalance        ├─lvmetad        ├─mysqld───28*[&#123;mysqld&#125;]        ├─nginx───2*[nginx]        ├─ntpd        ├─polkitd───6*[&#123;polkitd&#125;]        ├─rsyslogd───2*[&#123;rsyslogd&#125;]        ├─sshd───sshd───bash───pstree        ├─systemd-journal        ├─systemd-logind        ├─systemd-udevd        └─tuned───4*[&#123;tuned&#125;]</code></pre></li><li><p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]$ pgrep mysqld3584</code></pre></li><li><p>通过进程号终止进程 - <strong>kill</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]$ kill -l 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR111) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+338) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+843) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-758) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-263) SIGRTMAX-1  64) SIGRTMAX[root ~]# kill 1234[root ~]# kill -9 1234</code></pre></li><li><p>通过进程名终止进程 - <strong>killall</strong> &#x2F; <strong>pkill</strong>。</p><p> 结束名为mysqld的进程。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# pkill mysqld</code></pre><p> 结束hellokitty用户的所有进程。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# pkill -u hellokitty</code></pre><blockquote><p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p></blockquote></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li><li><code>&amp;</code> - 将进程置于后台运行。</li></ul><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# mongod &amp;[root ~]# redis-server...^Z[4]+  Stopped                 redis-server</code></pre></li><li><p>查询后台进程 - <strong>jobs</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# jobs[2]   Running                 mongod &amp;[3]-  Stopped                 cat[4]+  Stopped                 redis-server</code></pre></li><li><p>让进程在后台继续运行 - <strong>bg</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# bg %4[4]+ redis-server &amp;[root ~]# jobs[2]   Running                 mongod &amp;[3]+  Stopped                 cat[4]-  Running                 redis-server &amp;</code></pre></li><li><p>将后台进程置于前台 - <strong>fg</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# fg %4redis-server</code></pre><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p>调整程序&#x2F;进程运行时优先级 - <strong>nice</strong> &#x2F; <strong>renice</strong>。</p></li><li><p>用户登出后进程继续工作 - <strong>nohup</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# nohup ping www.baidu.com &gt; result.txt &amp;</code></pre></li><li><p>跟踪进程系统调用情况 - <strong>strace</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# pgrep mysqld8803[root ~]# strace -c -p 8803strace: Process 8803 attached^Cstrace: Process 8803 detached% time     seconds  usecs&#x2F;call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 99.18    0.005719        5719         1           restart_syscall  0.49    0.000028          28         1           mprotect  0.24    0.000014          14         1           clone  0.05    0.000003           3         1           mmap  0.03    0.000002           2         1           accept------ ----------- ----------- --------- --------- ----------------100.00    0.005766                     5           total</code></pre><blockquote><p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p></blockquote></li><li><p>查看当前运行级别 - <strong>runlevel</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# runlevelN 3</code></pre></li><li><p>实时监控进程占用资源状况 - <strong>top</strong>。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# toptop - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff&#x2F;cacheKiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem...</code></pre><ul><li><code>-c</code> - 显示进程的整个路径。</li><li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li><li><code>-i</code> - 不显示闲置进程或僵尸进程。</li><li><code>-p</code> - 显示指定进程的信息。</li></ul></li></ol><h3 id="系统诊断"><a href="#系统诊断" class="headerlink" title="系统诊断"></a>系统诊断</h3><ol><li><p>系统启动异常诊断 - <strong>dmesg</strong>。</p></li><li><p>查看系统活动信息 - <strong>sar</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# sar -u -r 5 10Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06&#x2F;02&#x2F;2019      _x86_64_        (2 CPU)06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.8006:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0</code></pre><ul><li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li><li><code>-u</code> - 显示所有CPU的负载情况。</li><li><code>-d</code> - 显示所有磁盘的使用情况。</li><li><code>-r</code> - 显示内存的使用情况。</li><li><code>-n</code> - 显示网络运行状态。</li></ul></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# free              total        used        free      shared  buff&#x2F;cache   availableMem:        1016168      323924      190452         356      501792      531800Swap:             0           0           0</code></pre></li><li><p>虚拟内存统计 - <strong>vmstat</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# vmstatprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0</code></pre></li><li><p>CPU信息统计 - <strong>mpstat</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# mpstatLinux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05&#x2F;30&#x2F;2019      _x86_64_        (1 CPU)01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07</code></pre></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ps  PID TTY          TIME CMD 4581 pts&#x2F;0    00:00:00 bash 5664 pts&#x2F;0    00:00:00 ps[root ~]# pmap 45814581:   -bash0000000000400000    884K r-x-- bash00000000006dc000      4K r---- bash00000000006dd000     36K rw--- bash00000000006e6000     24K rw---   [ anon ]0000000001de0000    400K rw---   [ anon ]00007f82fe805000     48K r-x-- libnss_files-2.17.so00007f82fe811000   2044K ----- libnss_files-2.17.so...</code></pre></li><li><p>报告设备CPU和I&#x2F;O统计信息 - <strong>iostat</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06&#x2F;26&#x2F;2018      _x86_64_       (1 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.79    0.00    0.20    0.04    0.00   98.97Device:            tps    kB_read&#x2F;s    kB_wrtn&#x2F;s    kB_read    kB_wrtnvda               0.85         6.78        21.32    2106565    6623024vdb               0.00         0.01         0.00       2088          0</code></pre></li><li><p>显示所有PCI设备 - <strong>lspci</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# lspci00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma&#x2F;Triton II]00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma&#x2F;Triton II]00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma&#x2F;Triton II] (rev 01)00:01.3 Bridge: Intel Corporation 82371AB&#x2F;EB&#x2F;MB PIIX4 ACPI (rev 03)00:02.0 VGA compatible controller: Cirrus Logic GD 544600:03.0 Ethernet controller: Red Hat, Inc. Virtio network device00:04.0 Communication controller: Red Hat, Inc. Virtio console00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon</code></pre></li><li><p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[root ~]# ipcs------ Message Queues --------key        msqid      owner      perms      used-bytes   messages    ------ Shared Memory Segments --------key        shmid      owner      perms      bytes      nattch     status      ------ Semaphore Arrays --------key        semid      owner      perms      nsems</code></pre></li></ol><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p><p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p><p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">#!&#x2F;usr&#x2F;bin&#x2F;bashprintf &#39;m &#x3D; &#39;read mprintf &#39;n &#x3D; &#39;read na&#x3D;$msum&#x3D;0while [ $a -le $n ]do    sum&#x3D;$[ sum + a ]    a&#x3D;$[ a + 1 ]doneecho &#39;结果: &#39;$sum</code></pre><p>例子2：自动创建文件夹和指定数量的文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">#!&#x2F;usr&#x2F;bin&#x2F;bashprintf &#39;输入文件夹名: &#39;read dirprintf &#39;输入文件名: &#39;read fileprintf &#39;输入文件数量(&lt;1000): &#39;read numif [ $num -ge 1000 ]then    echo &#39;文件数量不能超过1000&#39;else    if [ -e $dir -a -d $dir ]    then        rm -rf $dir    else        if [ -e $dir -a -f $dir ]        then            rm -f $dir        fi    fi    mkdir -p $dir    index&#x3D;1    while [ $index -le $num ]    do        if [ $index -lt 10 ]        then            pre&#x3D;&#39;00&#39;        elif [ $index -lt 100 ]        then            pre&#x3D;&#39;0&#39;        else            pre&#x3D;&#39;&#39;        fi        touch $dir&#39;&#x2F;&#39;$file&#39;_&#39;$pre$index        index&#x3D;$[ index + 1 ]    donefi</code></pre><p>例子3：自动安装指定版本的Redis。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">#!&#x2F;usr&#x2F;bin&#x2F;bashinstall_redis() &#123;    if ! which redis-server &gt; &#x2F;dev&#x2F;null    then        cd &#x2F;root        wget $1$2&#39;.tar.gz&#39; &gt;&gt; install.log        gunzip &#x2F;root&#x2F;$2&#39;.tar.gz&#39;        tar -xf &#x2F;root&#x2F;$2&#39;.tar&#39;        cd &#x2F;root&#x2F;$2        make &gt;&gt; install.log        make install &gt;&gt; install.log        echo &#39;安装完成&#39;    else        echo &#39;已经安装过Redis&#39;    fi&#125;install_redis &#39;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;&#39; $1</code></pre><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ol><li><p>Linux命令行常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>tab</td><td>自动补全命令或路径</td></tr><tr><td>Ctrl+a</td><td>将光标移动到命令行行首</td></tr><tr><td>Ctrl+e</td><td>将光标移动到命令行行尾</td></tr><tr><td>Ctrl+f</td><td>将光标向右移动一个字符</td></tr><tr><td>Ctrl+b</td><td>将光标向左移动一个字符</td></tr><tr><td>Ctrl+k</td><td>剪切从光标到行尾的字符</td></tr><tr><td>Ctrl+u</td><td>剪切从光标到行首的字符</td></tr><tr><td>Ctrl+w</td><td>剪切光标前面的一个单词</td></tr><tr><td>Ctrl+y</td><td>复制剪切命名剪切的内容</td></tr><tr><td>Ctrl+c</td><td>中断正在执行的任务</td></tr><tr><td>Ctrl+h</td><td>删除光标前面的一个字符</td></tr><tr><td>Ctrl+d</td><td>退出当前命令行</td></tr><tr><td>Ctrl+r</td><td>搜索历史命令</td></tr><tr><td>Ctrl+g</td><td>退出历史命令搜索</td></tr><tr><td>Ctrl+l</td><td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td></tr><tr><td>Ctrl+s</td><td>锁定终端使之暂时无法输入内容</td></tr><tr><td>Ctrl+q</td><td>退出终端锁定</td></tr><tr><td>Ctrl+z</td><td>将正在终端执行的任务停下来放到后台</td></tr><tr><td>!!</td><td>执行上一条命令</td></tr><tr><td>!数字</td><td>执行数字对应的历史命令</td></tr><tr><td>!字母</td><td>执行最近的以字母打头的命令</td></tr><tr><td>!$ &#x2F; Esc+.</td><td>获得上一条命令最后一个参数</td></tr><tr><td>Esc+b</td><td>移动到当前单词的开头</td></tr><tr><td>Esc+f</td><td>移动到当前单词的结尾</td></tr></tbody></table></li><li><p>man查阅命令手册的内容说明</p><table><thead><tr><th>手册中的标题</th><th>功能说明</th></tr></thead><tbody><tr><td>NAME</td><td>命令的说明和介绍</td></tr><tr><td>SYNOPSIS</td><td>使用该命令的基本语法</td></tr><tr><td>DESCRIPTION</td><td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td></tr><tr><td>OPTIONS</td><td>命令相关参数选项的说明</td></tr><tr><td>EXAMPLES</td><td>使用该命令的参考例子</td></tr><tr><td>EXIT STATUS</td><td>命令结束的退出状态码，通常0表示成功执行</td></tr><tr><td>SEE ALSO</td><td>和命令相关的其他命令或信息</td></tr><tr><td>BUGS</td><td>和命令相关的缺陷的描述</td></tr><tr><td>AUTHOR</td><td>该命令的作者介绍</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36.关系型数据库和MySQL概述</title>
      <link href="/2024/07/01/36.guan-xi-xing-shu-ju-ku-he-mysql-gai-shu/"/>
      <url>/2024/07/01/36.guan-xi-xing-shu-ju-ku-he-mysql-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="关系型数据库和MySQL概述"><a href="#关系型数据库和MySQL概述" class="headerlink" title="关系型数据库和MySQL概述"></a>关系型数据库和MySQL概述</h2><h3 id="关系型数据库概述"><a href="#关系型数据库概述" class="headerlink" title="关系型数据库概述"></a>关系型数据库概述</h3><ol><li><p>数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。</p></li><li><p>数据库发展史 - 网状数据库、层次数据库、关系数据库、NoSQL 数据库、NewSQL 数据库。</p><blockquote><p>1970年，IBM的研究员E.F.Codd在<em>Communication of the ACM</em>上发表了名为<em>A Relational Model of Data for Large Shared Data Banks</em>的论文，提出了<strong>关系模型</strong>的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。</p></blockquote></li><li><p>关系数据库特点。</p><ul><li>理论基础：<strong>关系代数</strong>（集合论、一阶谓词、关系运算）。</li><li>具体表象：用<strong>二维表</strong>（有行和列）组织数据。</li><li>编程语言：<strong>结构化查询语言</strong>（SQL）。<ul><li>DDL：数据定义语言</li><li>DML：数据操作语言</li><li>DCL：数据控制语言</li><li>TCL：事务控制语言</li></ul></li></ul></li><li><p>ER模型（实体关系模型）和概念模型图。</p><p><strong>ER模型</strong>，全称为<strong>实体关系模型</strong>（Entity-Relationship Model），由美籍华裔计算机科学家陈品山先生提出，是概念数据模型的高层描述方式，如下图所示。</p><img src="res/er_diagram.png" width="75%"><ul><li>实体 - 矩形框</li><li>属性 - 椭圆框</li><li>关系 - 菱形框</li><li>重数 - 1:1（一对一） &#x2F; 1:N（一对多） &#x2F; M:N（多对多）</li></ul><p>实际项目开发中，我们可以利用数据库建模工具（如：PowerDesigner）来绘制概念数据模型，然后再设置好目标数据库系统，将概念模型转换成物理模型（如下图所示），最终生成创建二维表的 SQL（很多工具都可以根据我们设计的物理模型图以及设定的目标数据库来导出 SQL 或直接生成数据表）。</p><img src="res/conceptual_model.png" style="zoom:50%;"></li><li><p>关系数据库产品。</p><ul><li><a href="https://www.oracle.com/index.html">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在 Oracle 较新的版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li><li><a href="https://www.ibm.com/analytics/us/en/db2/">DB2</a> - IBM 公司开发的、主要运行于 Unix（包括 IBM 自家的 <a href="https://zh.wikipedia.org/wiki/AIX">AIX</a>）、Linux、以及 Windows 服务器版等系统的关系数据库产品。DB2 历史悠久且被认为是最早使用 SQL 的数据库产品，它拥有较为强大的商业智能功能。</li><li><a href="https://www.microsoft.com/en-us/sql-server/">SQL Server</a> - 由 Microsoft 开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li><li><a href="https://www.mysql.com/">MySQL</a> - MySQL 是开放源代码的，任何人都可以在 GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL 因为其速度、可靠性和适应性而备受关注。</li><li><a href="">PostgreSQL</a> - 在 BSD 许可证下发行的开放源代码的关系数据库产品。</li></ul></li></ol><h3 id="MySQL-简介"><a href="#MySQL-简介" class="headerlink" title="MySQL 简介"></a>MySQL 简介</h3><p>MySQL 最早是由瑞典的 MySQL AB 公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此 MySQL 目前也是 Oracle 旗下产品。</p><p>MySQL 在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着 MySQL 的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、百度、淘宝、腾讯、新浪、去哪儿等都使用了 MySQL 来提供数据持久化服务。</p><p>甲骨文公司收购后昇阳微系统公司，大幅调涨 MySQL 商业版的售价，且甲骨文公司不再支持另一个自由软件项目 <a href="https://zh.wikipedia.org/wiki/OpenSolaris">OpenSolaris </a> 的发展，因此导致自由软件社区对于 Oracle 是否还会持续支持 MySQL 社区版（MySQL 的各个发行版本中唯一免费的版本）有所担忧，MySQL 的创始人麦克尔·维德纽斯以 MySQL 为基础，创建了 <a href="https://zh.wikipedia.org/wiki/MariaDB">MariaDB</a>（以他女儿的名字命名的数据库）分支。有许多原来使用 MySQL 数据库的公司（例如：维基百科）已经陆续完成了从 MySQL 数据库到 MariaDB 数据库的迁移。</p><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><h4 id="Windows-环境"><a href="#Windows-环境" class="headerlink" title="Windows 环境"></a>Windows 环境</h4><ol><li><p>通过<a href="https://www.mysql.com/">官方网站</a>提供的<a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">下载链接</a>下载“MySQL社区版服务器”安装程序，如下图所示，建议大家下载离线安装版的MySQL Installer。</p> <img src="res/20211105230905.png" style="zoom:50%"></li><li><p>运行 Installer，按照下面的步骤进行安装。</p><ul><li>选择自定义安装。</li></ul> <img src="res/20211105231152.jpg" style="zoom:35%"><ul><li>选择需要安装的组件。</li></ul> <img src="res/20211105231255.jpg" style="zoom:35%"><ul><li>如果缺少依赖项，需要先安装依赖项。</li></ul> <img src="res/20211105231620.png" style="zoom:35%"><ul><li>准备开始安装。</li></ul> <img src="res/20211105231719.jpg" style="zoom:35%"><ul><li>安装完成。</li></ul> <img src="res/20211105232024.jpg" style="zoom:35%"><ul><li>准备执行配置向导。</li></ul> <img src="res/20211105231815.jpg" style="zoom:35%"></li><li><p>执行安装后的配置向导。</p><ul><li>配置服务器类型和网络。</li></ul> <img src="res/20211105232109.jpg" style="zoom:35%"><ul><li><p>配置认证方法（保护密码的方式）。</p>  <img src="res/20211105232408.jpg" style="zoom:35%"></li><li><p>配置用户和角色。</p>  <img src="res/20211105232521.jpg" style="zoom:35%"></li><li><p>配置Windows服务名以及是否开机自启。</p>  <img src="res/20211105232608.jpg" style="zoom:35%"></li><li><p>配置日志。</p>  <img src="res/20211105232641.jpg" style="zoom:35%"></li><li><p>配置高级选项。</p>  <img src="res/20211105232724.jpg" alt="ACAC15B8633133B65476286A49BFBD7E" style="zoom:35%"></li><li><p>应用配置。</p>  <img src="res/20211105232800.jpg" style="zoom:35%"></li></ul></li><li><p>可以在 Windows 系统的“服务”窗口中启动或停止 MySQL。</p> <img src="res/20211105232926.jpg" style="zoom:50%"></li><li><p>配置 PATH 环境变量，以便在命令行提示符窗口使用 MySQL 客户端工具。</p><ul><li><p>打开 Windows 的“系统”窗口并点击“高级系统设置”。</p>  <img src="res/20211105233054.jpg" style="zoom:50%"></li><li><p>在“系统属性”的“高级”窗口，点击“环境变量”按钮。</p>  <img src="res/20211105233312.jpg" style="zoom:50%"></li><li><p>修改PATH环境变量，将MySQL安装路径下的<code>bin</code>文件夹的路径配置到PATH环境变量中。</p>  <img src="res/20211105233359.jpg" style="zoom:50%"></li><li><p>配置完成后，可以尝试在“命令提示符”下使用 MySQL 的命令行工具。</p>  <img src="res/20211105233643.jpg" style="zoom:50%"></li></ul></li></ol><h4 id="Linux-环境"><a href="#Linux-环境" class="headerlink" title="Linux 环境"></a>Linux 环境</h4><p>下面以 CentOS 7.x 环境为例，演示如何安装 MySQL 5.7.x，如果需要在其他 Linux 系统下安装其他版本的 MySQL，请读者自行在网络上查找对应的安装教程。</p><ol><li><p>安装 MySQL。</p><p>可以在 <a href="https://www.mysql.com/">MySQL 官方网站</a>下载安装文件。首先在下载页面中选择平台和版本，然后找到对应的下载链接，直接下载包含所有安装文件的归档文件，解归档之后通过包管理工具进行安装。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-5.7.26-1.el7.x86_64.rpm-bundle.tartar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></pre><p>如果系统上有 MariaDB 相关的文件，需要先移除 MariaDB 相关的文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum list installed | grep mariadb | awk &#39;&#123;print $1&#125;&#39; | xargs yum erase -y</code></pre><p>更新和安装可能用到的底层依赖库。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">yum updateyum install -y libaio libaio-devel</code></pre><p>接下来可以按照如下所示的顺序用 RPM（Redhat Package Manager）工具安装 MySQL。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</code></pre><p>可以使用下面的命令查看已经安装的 MySQL 相关的包。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">rpm -qa | grep mysql</code></pre></li><li><p>配置 MySQL。</p><p>MySQL 的配置文件在<code>/etc</code>目录下，名为<code>my.cnf</code>，默认的配置文件内容如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cat &#x2F;etc&#x2F;my.cnf</code></pre><pre class="language-INI" data-language="INI"><code class="language-INI"># For advice on how to change settings please see# http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-configuration-defaults.html[mysqld]## Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size &#x3D; 128M## Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin## Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size &#x3D; 128M# sort_buffer_size &#x3D; 2M# read_rnd_buffer_size &#x3D; 2Mdatadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqlsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links&#x3D;0log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.logpid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</code></pre><p>通过配置文件，我们可以修改 MySQL 服务使用的端口、字符集、最大连接数、套接字队列大小、最大数据包大小、日志文件的位置、日志过期时间等配置。当然，我们还可以通过修改配置文件来对 MySQL 服务器进行性能调优和安全管控。</p></li><li><p>启动 MySQL 服务。</p><p>可以使用下面的命令来启动 MySQL。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">service mysqld start</code></pre><p>在 CentOS 7 中，更推荐使用下面的命令来启动 MySQL。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">systemctl start mysqld</code></pre><p>启动 MySQL 成功后，可以通过下面的命令来检查网络端口使用情况，MySQL 默认使用<code>3306</code>端口。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">netstat -ntlp | grep mysql</code></pre><p>也可以使用下面的命令查找是否有名为<code>mysqld</code>的进程。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pgrep mysqld</code></pre></li><li><p>使用 MySQL 客户端工具连接服务器。</p><p>命令行工具：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">mysql -u root -p</code></pre><blockquote><p>说明：启动客户端时，<code>-u</code>参数用来指定用户名，MySQL 默认的超级管理账号为<code>root</code>；<code>-p</code>表示要输入密码（用户口令）；如果连接的是其他主机而非本机，可以用<code>-h</code>来指定连接主机的主机名或IP地址。</p></blockquote><p>如果是首次安装 MySQL，可以使用下面的命令来找到默认的初始密码。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password</code></pre><p>上面的命令会查看 MySQL 的日志带有<code>password</code>的行，在显示的结果中<code>root@localhost:</code>后面的部分就是默认设置的初始密码。</p><p>进入客户端工具后，可以通过下面的指令来修改超级管理员（root）的访问口令为<code>123456</code>。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">set global validate_password_policy&#x3D;0;set global validate_password_length&#x3D;6;alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</code></pre><blockquote><p><strong>说明</strong>：MySQL 较新的版本默认不允许使用弱口令作为用户口令，所以上面的代码修改了验证用户口令的策略和口令的长度。事实上我们不应该使用弱口令，因为存在用户口令被暴力破解的风险。近年来，<strong>攻击数据库窃取数据和劫持数据库勒索比特币</strong>的事件屡见不鲜，要避免这些潜在的风险，最为重要的一点是<strong>不要让数据库服务器暴露在公网上</strong>（最好的做法是将数据库置于内网，至少要做到不向公网开放数据库服务器的访问端口），另外要保管好<code>root</code>账号的口令，应用系统需要访问数据库时，通常不使用<code>root</code>账号进行访问，而是<strong>创建其他拥有适当权限的账号来访问</strong>。</p></blockquote><p>再次使用客户端工具连接 MySQL 服务器时，就可以使用新设置的口令了。在实际开发中，为了方便用户操作，可以选择图形化的客户端工具来连接 MySQL 服务器，包括：</p><ul><li><p>MySQL Workbench（官方工具）</p>  <img src="res/20211106063939.png" style="zoom:50%"></li><li><p>Navicat for MySQL（界面简单友好）</p>  <img src="res/20210521152457.png" style="zoom:50%;"></li></ul></li></ol><h4 id="macOS环境"><a href="#macOS环境" class="headerlink" title="macOS环境"></a>macOS环境</h4><p>macOS 系统安装 MySQL 是比较简单的，只需要从刚才说到的官方网站下载 DMG 安装文件并运行就可以了，下载的时候需要根据自己使用的是 Intel 的芯片还是苹果的 M1 芯片选择下载链接，如下图所示。</p><img src="res/20211121215901.png" style="zoom:50%;"><p>安装成功后，可以在“系统偏好设置”中找到“MySQL”，在如下所示的画面中，可以启动和停止 MySQL 服务器，也可以对 MySQL 核心文件的路径进行配置。</p><img src="res/20211121215153.png" style="zoom:40%;"><h3 id="MySQL-基本命令"><a href="#MySQL-基本命令" class="headerlink" title="MySQL 基本命令"></a>MySQL 基本命令</h3><h4 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h4><ol><li>查看所有数据库</li></ol><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show databases;</code></pre><ol start="2"><li>查看所有字符集</li></ol><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show character set;</code></pre><ol start="3"><li>查看所有的排序规则</li></ol><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show collation;</code></pre><ol start="4"><li>查看所有的引擎</li></ol><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show engines;</code></pre><ol start="5"><li>查看所有日志文件</li></ol><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show binary logs;</code></pre><ol start="6"><li>查看数据库下所有表</li></ol><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show tables;</code></pre><h4 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h4><p>在 MySQL 命令行工具中，可以使用<code>help</code>命令或<code>?</code>来获取帮助，如下所示。</p><ol><li><p>查看<code>show</code>命令的帮助。</p> <pre class="language-MySQL" data-language="MySQL"><code class="language-MySQL">? show</code></pre></li><li><p>查看有哪些帮助内容。</p> <pre class="language-MySQL" data-language="MySQL"><code class="language-MySQL">? contents</code></pre></li><li><p>获取函数的帮助。</p> <pre class="language-MySQL" data-language="MySQL"><code class="language-MySQL">? functions</code></pre></li><li><p>获取数据类型的帮助。</p> <pre class="language-MySQL" data-language="MySQL"><code class="language-MySQL">? data types</code></pre></li></ol><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><ol><li><p>新建&#x2F;重建服务器连接 - <code>connect</code> &#x2F; <code>resetconnection</code>。</p></li><li><p>清空当前输入 - <code>\c</code>。在输入错误时，可以及时使用<code>\c</code>清空当前输入并重新开始。</p></li><li><p>修改终止符（定界符）- <code>delimiter</code>。默认的终止符是<code>;</code>，可以使用该命令修改成其他的字符，例如修改为<code>$</code>符号，可以用<code>delimiter $</code>命令。</p></li><li><p>打开系统默认编辑器 - <code>edit</code>。编辑完成保存关闭之后，命令行会自动执行编辑的内容。</p></li><li><p>查看服务器状态 - <code>status</code>。</p></li><li><p>修改默认提示符 - <code>prompt</code>。</p></li><li><p>执行系统命令 - <code>system</code>。可以将系统命令跟在<code>system</code>命令的后面执行，<code>system</code>命令也可以缩写为<code>\!</code>。</p></li><li><p>执行 SQL 文件 - <code>source</code>。<code>source</code>命令后面跟 SQL 文件路径。</p></li><li><p>重定向输出 - <code>tee</code> &#x2F; <code>notee</code>。可以将命令的输出重定向到指定的文件中。</p></li><li><p>切换数据库 - <code>use</code>。</p></li><li><p>显示警告信息 - <code>warnings</code>。</p></li><li><p>退出命令行 - <code>quit</code>或<code>exit</code>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>37.SQL详解之DDL</title>
      <link href="/2024/07/01/37.sql-xiang-jie-zhi-ddl/"/>
      <url>/2024/07/01/37.sql-xiang-jie-zhi-ddl/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL详解之DDL"><a href="#SQL详解之DDL" class="headerlink" title="SQL详解之DDL"></a>SQL详解之DDL</h2><p>我们通常可以将 SQL 分为四类，分别是 DDL（数据定义语言）、DML（数据操作语言）、 DCL（数据控制语言）和 TCL（事务控制语言）。DDL 主要用于创建、删除、修改数据库中的对象，比如创建、删除和修改二维表，核心的关键字包括<code>create</code>、<code>drop</code>和<code>alter</code>；DML 主要负责数据的插入、删除、更新和查询，关键词包括<code>insert</code>、<code>delete</code>、<code>update</code>和<code>select</code>；DCL 用于授予和召回权限，核心关键词是<code>grant</code>和<code>revoke</code>；TCL 通常用于事务控制。</p><blockquote><p><strong>说明</strong>：SQL 是不区分大小写的语言，有人会建议将关键字大写，其他部分小写。为了书写和识别方便，下面的 SQL 我都是使用小写字母进行书写的。 如果公司的 SQL 编程规范有强制规定，那么就按照公司的要求来，个人的喜好不应该凌驾于公司的编程规范之上，这一点对职业人来说应该是常识。</p></blockquote><h3 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h3><p>下面我们来实现一个非常简单的学校选课系统的数据库。我们将数据库命名为<code>school</code>，四个关键的实体分别是学院、老师、学生和课程，其中，学生跟学院是从属关系，这个关系从数量上来讲是多对一关系，因为一个学院可以有多名学生，而一个学生通常只属于一个学院；同理，老师跟学院的从属关系也是多对一关系。一名老师可以讲授多门课程，一门课程如果只有一个授课老师的话，那么课程跟老师也是多对一关系；如果允许多个老师合作讲授一门课程，那么课程和老师就是多对多关系。简单起见，我们将课程和老师设计为多对一关系。学生和课程是典型的多对多关系，因为一个学生可以选择多门课程，一门课程也可以被多个学生选择，而关系型数据库需要借助中间表才能维持维持两个实体的多对多关系。最终，我们的学校选课系统一共有五张表，分别是学院表（<code>tb_college</code>）、学生表（<code>tb_student</code>）、教师表（<code>tb_teacher</code>）、课程表（<code>tb_course</code>）和选课记录表（<code>tb_record</code>），其中选课记录表就是维持学生跟课程多对多关系的中间表。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 如果存在名为school的数据库就删除它drop database if exists &#96;school&#96;;-- 创建名为school的数据库并设置默认的字符集和排序方式create database &#96;school&#96; default character set utf8mb4 collate utf8mb4_general_ci;-- 切换到school数据库上下文环境use &#96;school&#96;;-- 创建学院表create table &#96;tb_college&#96;(&#96;col_id&#96; int unsigned auto_increment comment &#39;编号&#39;,&#96;col_name&#96; varchar(50) not null comment &#39;名称&#39;,&#96;col_intro&#96; varchar(500) default &#39;&#39; comment &#39;介绍&#39;,primary key (&#96;col_id&#96;)) engine&#x3D;innodb auto_increment&#x3D;1 comment &#39;学院表&#39;;-- 创建学生表create table &#96;tb_student&#96;(&#96;stu_id&#96; int unsigned not null comment &#39;学号&#39;,&#96;stu_name&#96; varchar(20) not null comment &#39;姓名&#39;,&#96;stu_sex&#96; boolean default 1 not null comment &#39;性别&#39;,&#96;stu_birth&#96; date not null comment &#39;出生日期&#39;,&#96;stu_addr&#96; varchar(255) default &#39;&#39; comment &#39;籍贯&#39;,&#96;col_id&#96; int unsigned not null comment &#39;所属学院&#39;,primary key (&#96;stu_id&#96;),constraint &#96;fk_student_col_id&#96; foreign key (&#96;col_id&#96;) references &#96;tb_college&#96; (&#96;col_id&#96;)) engine&#x3D;innodb comment &#39;学生表&#39;;-- 创建教师表create table &#96;tb_teacher&#96;(&#96;tea_id&#96; int unsigned not null comment &#39;工号&#39;,&#96;tea_name&#96; varchar(20) not null comment &#39;姓名&#39;,&#96;tea_title&#96; varchar(10) default &#39;助教&#39; comment &#39;职称&#39;,&#96;col_id&#96; int unsigned not null comment &#39;所属学院&#39;,primary key (&#96;tea_id&#96;),constraint &#96;fk_teacher_col_id&#96; foreign key (&#96;col_id&#96;) references &#96;tb_college&#96; (&#96;col_id&#96;)) engine&#x3D;innodb comment &#39;老师表&#39;;-- 创建课程表create table &#96;tb_course&#96;(&#96;cou_id&#96; int unsigned not null comment &#39;编号&#39;,&#96;cou_name&#96; varchar(50) not null comment &#39;名称&#39;,&#96;cou_credit&#96; int not null comment &#39;学分&#39;,&#96;tea_id&#96; int unsigned not null comment &#39;授课老师&#39;,primary key (&#96;cou_id&#96;),constraint &#96;fk_course_tea_id&#96; foreign key (&#96;tea_id&#96;) references &#96;tb_teacher&#96; (&#96;tea_id&#96;)) engine&#x3D;innodb comment &#39;课程表&#39;;-- 创建选课记录表create table &#96;tb_record&#96;(&#96;rec_id&#96; bigint unsigned auto_increment comment &#39;选课记录号&#39;,&#96;stu_id&#96; int unsigned not null comment &#39;学号&#39;,&#96;cou_id&#96; int unsigned not null comment &#39;课程编号&#39;,&#96;sel_date&#96; date not null comment &#39;选课日期&#39;,&#96;score&#96; decimal(4,1) comment &#39;考试成绩&#39;,primary key (&#96;rec_id&#96;),constraint &#96;fk_record_stu_id&#96; foreign key (&#96;stu_id&#96;) references &#96;tb_student&#96; (&#96;stu_id&#96;),constraint &#96;fk_record_cou_id&#96; foreign key (&#96;cou_id&#96;) references &#96;tb_course&#96; (&#96;cou_id&#96;),constraint &#96;uk_record_stu_cou&#96; unique (&#96;stu_id&#96;, &#96;cou_id&#96;)) engine&#x3D;innodb comment &#39;选课记录表&#39;;</code></pre><p>上面的DDL有几个地方需要强调一下：</p><ul><li><p>首先，上面 SQL 中的数据库名、表名、字段名都被反引号（&#96;）包裹起来，反引号并不是必须的，但是却可以解决表名、字段名等跟 SQL 关键字（SQL 中有特殊含义的单词）冲突的问题。</p></li><li><p>创建数据库时，我们通过<code>default character set utf8mb4</code>指定了数据库默认使用的字符集为<code>utf8mb4</code>（最大<code>4</code>字节的<code>utf-8</code>编码），我们推荐使用该字符集，它也是 MySQL 8.x 默认使用的字符集，因为它能够支持国际化编码，还可以存储 Emoji 字符。可以通过下面的命令查看 MySQL 支持的字符集以及默认的排序规则。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show character set;</code></pre><pre class="language-none"><code class="language-none">+----------+---------------------------------+---------------------+--------+| Charset  | Description                     | Default collation   | Maxlen |+----------+---------------------------------+---------------------+--------+| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 || dec8     | DEC West European               | dec8_swedish_ci     |      1 || cp850    | DOS West European               | cp850_general_ci    |      1 || hp8      | HP West European                | hp8_english_ci      |      1 || koi8r    | KOI8-R Relcom Russian           | koi8r_general_ci    |      1 || latin1   | cp1252 West European            | latin1_swedish_ci   |      1 || latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 || swe7     | 7bit Swedish                    | swe7_swedish_ci     |      1 || ascii    | US ASCII                        | ascii_general_ci    |      1 || ujis     | EUC-JP Japanese                 | ujis_japanese_ci    |      3 || sjis     | Shift-JIS Japanese              | sjis_japanese_ci    |      2 || hebrew   | ISO 8859-8 Hebrew               | hebrew_general_ci   |      1 || tis620   | TIS620 Thai                     | tis620_thai_ci      |      1 || euckr    | EUC-KR Korean                   | euckr_korean_ci     |      2 || koi8u    | KOI8-U Ukrainian                | koi8u_general_ci    |      1 || gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 || greek    | ISO 8859-7 Greek                | greek_general_ci    |      1 || cp1250   | Windows Central European        | cp1250_general_ci   |      1 || gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 || latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 || armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 || utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 || ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 || cp866    | DOS Russian                     | cp866_general_ci    |      1 || keybcs2  | DOS Kamenicky Czech-Slovak      | keybcs2_general_ci  |      1 || macce    | Mac Central European            | macce_general_ci    |      1 || macroman | Mac West European               | macroman_general_ci |      1 || cp852    | DOS Central European            | cp852_general_ci    |      1 || latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 || utf8mb4  | UTF-8 Unicode                   | utf8mb4_general_ci  |      4 || cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 || utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 || utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 || cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 || cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 || utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 || binary   | Binary pseudo charset           | binary              |      1 || geostd8  | GEOSTD8 Georgian                | geostd8_general_ci  |      1 || cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 || eucjpms  | UJIS for Windows Japanese       | eucjpms_japanese_ci |      3 || gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |+----------+---------------------------------+---------------------+--------+41 rows in set (0.00 sec)</code></pre><p>如果要设置 MySQL 服务启动时默认使用的字符集，可以修改MySQL的配置并添加以下内容。</p><pre class="language-INI" data-language="INI"><code class="language-INI">[mysqld]character-set-server&#x3D;utf8</code></pre><blockquote><p><strong>提示</strong>：如果不清楚如何修改 MySQL 的配置文件就先不要管它。</p></blockquote></li><li><p>创建和删除数据库时，关键字<code>database</code>也可以替换为<code>schema</code>，二者作用相同。</p></li><li><p>建表语句中的<code>not null</code>是非空约束，它限定了字段不能为空；<code>default</code>用于为字段指定默认值，我们称之为默认值约束；<code>primary key</code>是主键约束，它设定了能够唯一确定一条记录的列，也确保了每条记录都是独一无二的，因为主键不允许重复；<code>foreign key</code>是外键约束，它维持了两张表的参照完整性，举个例子，由于学生表中为 col_id 字段添加了外键约束，限定其必须引用（<code>references</code>）学院表中的 col_id，因此学生表中的学院编号必须来自于学院表中的学院编号，不能够随意为该字段赋值。如果需要给主键约束、外键约束等起名字，可以使用<code>constriant</code>关键字并在后面跟上约束的名字。</p></li><li><p>建表语句中的<code>comment</code> 关键字用来给列和表添加注释，增强代码的可读性和可维护性。</p></li><li><p>在创建表的时候，可以自行选择底层的存储引擎。MySQL 支持多种存储引擎，可以通过<code>show engines</code>命令进行查看。MySQL 5.5 以后的版本默认使用的存储引擎是 InnoDB，它是我们推荐大家使用的存储引擎（因为更适合当下互联网应用对高并发、性能以及事务支持等方面的需求），为了 SQL 语句的向下兼容性，我们可以在建表语句结束处右圆括号的后面通过<code>engine=innodb</code>来指定使用 InnoDB 存储引擎。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show engines\G</code></pre><blockquote><p><strong>说明</strong>：上面的 \G 是为了换一种输出方式，在命令行客户端中，如果表的字段很多一行显示不完，就会导致输出的内容看起来非常不舒服，使用 \G 可以将记录的每个列以独占整行的的方式输出，这种输出方式在命令行客户端中看起来会舒服很多。</p></blockquote><pre class="language-none"><code class="language-none">*************************** 1. row ***************************      Engine: InnoDB     Support: DEFAULT     Comment: Supports transactions, row-level locking, and foreign keysTransactions: YES          XA: YES  Savepoints: YES*************************** 2. row ***************************      Engine: MRG_MYISAM     Support: YES     Comment: Collection of identical MyISAM tablesTransactions: NO          XA: NO  Savepoints: NO*************************** 3. row ***************************      Engine: MEMORY     Support: YES     Comment: Hash based, stored in memory, useful for temporary tablesTransactions: NO          XA: NO  Savepoints: NO*************************** 4. row ***************************      Engine: BLACKHOLE     Support: YES     Comment: &#x2F;dev&#x2F;null storage engine (anything you write to it disappears)Transactions: NO          XA: NO  Savepoints: NO*************************** 5. row ***************************      Engine: MyISAM     Support: YES     Comment: MyISAM storage engineTransactions: NO          XA: NO  Savepoints: NO*************************** 6. row ***************************      Engine: CSV     Support: YES     Comment: CSV storage engineTransactions: NO          XA: NO  Savepoints: NO*************************** 7. row ***************************      Engine: ARCHIVE     Support: YES     Comment: Archive storage engineTransactions: NO          XA: NO  Savepoints: NO*************************** 8. row ***************************      Engine: PERFORMANCE_SCHEMA     Support: YES     Comment: Performance SchemaTransactions: NO          XA: NO  Savepoints: NO*************************** 9. row ***************************      Engine: FEDERATED     Support: NO     Comment: Federated MySQL storage engineTransactions: NULL          XA: NULL  Savepoints: NULL9 rows in set (0.00 sec)</code></pre><p>下面的表格对MySQL几种常用的数据引擎进行了简单的对比。</p><table><thead><tr><th>特性</th><th>InnoDB</th><th>MRG_MYISAM</th><th>MEMORY</th><th>MyISAM</th></tr></thead><tbody><tr><td>存储限制</td><td>有</td><td>没有</td><td>有</td><td>有</td></tr><tr><td>事务</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td></tr><tr><td>全文检索</td><td>支持（5.6+）</td><td></td><td></td><td>支持</td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>数据缓存</td><td>支持</td><td></td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td></td><td></td><td>支持</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中</td><td>低</td></tr><tr><td>存储空间使用</td><td>高</td><td>低</td><td></td><td>低</td></tr><tr><td>批量插入性能</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>是否支持外键</td><td>支持</td><td></td><td></td><td></td></tr></tbody></table><p>通过上面的比较我们可以了解到，InnoDB 是唯一能够支持外键、事务以及行锁的存储引擎，所以我们之前说它更适合互联网应用，而且在较新版本的 MySQL 中，它也是默认使用的存储引擎。</p></li><li><p>在定义表结构为每个字段选择数据类型时，如果不清楚哪个数据类型更合适，可以通过 MySQL 的帮助系统来了解每种数据类型的特性、数据的长度和精度等相关信息。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">? data types</code></pre><blockquote><p><strong>说明</strong>：在 MySQLWorkbench 中，不能使用<code>?</code>获取帮助，要使用对应的命令<code>help</code>。</p></blockquote><pre class="language-none"><code class="language-none">You asked for help about help category: &quot;Data Types&quot;For more information, type &#39;help &lt;item&gt;&#39;, where &lt;item&gt; is one of the followingtopics:   AUTO_INCREMENT   BIGINT   BINARY   BIT   BLOB   BLOB DATA TYPE   BOOLEAN   CHAR   CHAR BYTE   DATE   DATETIME   DEC   DECIMAL   DOUBLE   DOUBLE PRECISION   ENUM   FLOAT   INT   INTEGER   LONGBLOB   LONGTEXT   MEDIUMBLOB   MEDIUMINT   MEDIUMTEXT   SET DATA TYPE   SMALLINT   TEXT   TIME   TIMESTAMP   TINYBLOB   TINYINT   TINYTEXT   VARBINARY   VARCHAR   YEAR DATA TYPE</code></pre><p>获取 varchar 类型的帮助：</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">? varchar</code></pre><p>执行结果：</p><pre class="language-none"><code class="language-none">Name: &#39;VARCHAR&#39;Description:[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATEcollation_name]A variable-length string. M represents the maximum column length incharacters. The range of M is 0 to 65,535. The effective maximum lengthof a VARCHAR is subject to the maximum row size (65,535 bytes, which isshared among all columns) and the character set used. For example, utf8characters can require up to three bytes per character, so a VARCHARcolumn that uses the utf8 character set can be declared to be a maximumof 21,844 characters. Seehttp:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;column-count-limit.html.MySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plusdata. The length prefix indicates the number of bytes in the value. AVARCHAR column uses one length byte if values require no more than 255bytes, two length bytes if values may require more than 255 bytes.*Note*:MySQL follows the standard SQL specification, and does not removetrailing spaces from VARCHAR values.VARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is thestandard SQL way to define that a VARCHAR column should use somepredefined character set. MySQL uses utf8 as this predefined characterset. http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;charset-national.html.NVARCHAR is shorthand for NATIONAL VARCHAR.URL: http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;string-type-overview.html</code></pre><p>在数据类型的选择上，保存字符串数据通常都使用 VARCHAR 和 CHAR 两种类型，前者通常称为变长字符串，而后者通常称为定长字符串；对于 InnoDB 存储引擎，行存储格式没有区分固定长度和可变长度列，因此 VARCHAR 类型和 CHAR 类型没有本质区别，后者不一定比前者性能更好。如果要保存的很大字符串，可以使用 TEXT 类型；如果要保存很大的字节串，可以使用 BLOB（二进制大对象）类型。在 MySQL 中，TEXT 和 BLOB又分别包括 TEXT、MEDIUMTEXT、LONGTEXT 和 BLOB、MEDIUMBLOB、LONGBLOB 三种不同的类型，它们主要的区别在于存储数据的最大大小不同。保存浮点数可以用 FLOAT 或 DOUBLE 类型，FLOAT 已经不推荐使用了，而且在 MySQL 后续的版本中可能会被移除掉。而保存定点数应该使用 DECIMAL 类型，它可以指定小数点前后有效数字的位数。如果要保存时间日期，DATETIME 类型优于 TIMESTAMP 类型，因为前者能表示的时间日期范围更大，后者底层其实就是一个整数，记录了指定的日期时间和 1970-01-01 00:00:00 相差多少个毫秒，该类型在 2038-01-19 03:14:07 之后就会溢出。</p><p>对于自增字段 AUTO_INCREMENT，如果使用 MySQL 5.x 版本要注意自增字段的回溯问题，当然这个问题在 MySQL 8.x 中已经得到了很好的解决，当然，MySQL 8.x 还有很多其他的好处，不管是功能还是性能上都有很多的优化和调整，因此强烈推荐大家使用 MySQL 8.x 版本。对于高并发访问数据库的场景，AUTO_INCREMENT 不仅存在性能上的问题，还可能在多机结构上产生重复的 ID 值，在这种场景下，使用分布式 ID 生成算法（SnowFlake、TinyID等）才是最好的选择，有兴趣的读者可以自行研究。</p></li></ul><h3 id="删除表和修改表"><a href="#删除表和修改表" class="headerlink" title="删除表和修改表"></a>删除表和修改表</h3><p>下面以学生表为例，为大家说明如何删除表和修改表。删除表可以使用<code>drop table</code>，代码如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop table &#96;tb_student&#96;;</code></pre><p>或</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop table if exists &#96;tb_student&#96;;</code></pre><p>需要注意的是，如果学生表已经录入了数据而且该数据被其他表引用了，那么就不能删除学生表，否则上面的操作会报错。在下一课中，我们会讲解如何向表中插入数据，到时候大家可以试一试，能否顺利删除学生表。</p><p>如果要修改学生表，可以使用<code>alter table</code>，具体可以分为以下几种情况：</p><p>修改表，添加一个新列，例如给学生表添加一个联系电话的列。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; add column &#96;stu_tel&#96; varchar(20) not null comment &#39;联系电话&#39;;</code></pre><blockquote><p><strong>注意</strong>：如果新增列的时候指定了非空约束（<code>not null</code>），那么学生表不能够有数据，否则原来的数据增加了 stu_tel 列之后是没有数据的，这就违反了非空约束的要求；当然，我们在添加列的时候也可以使用默认值约束来解决这个问题。</p></blockquote><p>修改表，删除指定的列，例如将上面添加的联系电话列删除掉。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; drop column &#96;stu_tel&#96;;</code></pre><p>修改表，修改列的数据类型，例如将学生表的 stu_sex 修改为字符。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; modify column &#96;stu_sex&#96; char(1) not null default &#39;M&#39; comment &#39;性别&#39;;</code></pre><p>修改表，修改列的命名，例如将学生表的 stu_sex 修改为 stu_gender。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; change column &#96;stu_sex&#96; &#96;stu_gender&#96; boolean default 1 comment &#39;性别&#39;;</code></pre><p>修改表，删除约束条件，例如删除学生表的 col_id 列的外键约束。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; drop foreign key &#96;fk_student_col_id&#96;;</code></pre><p>修改表，添加约束条件，例如给学生表的 col_id 列加上外键约束。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; add foreign key (&#96;col_id&#96;) references &#96;tb_college&#96; (&#96;col_id&#96;);</code></pre><p>或</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; add constraint &#96;fk_student_col_id&#96; foreign key (&#96;col_id&#96;) references &#96;tb_college&#96; (&#96;col_id&#96;);</code></pre><blockquote><p><strong>说明</strong>：在添加外键约束时，还可以通过<code>on update</code>和<code>on delete</code>来指定在被引用的表发生删除和更新操作时，应该进行何种处理，二者的默认值都是<code>restrict</code>，表示如果存在外键约束，则不允许更新和删除被引用的数据。除了<code>restrict</code>之外，这里可能的取值还有<code>cascade</code>（级联操作）和<code>set null</code>（设置为空），有兴趣的读者可以自行研究。</p></blockquote><p>修改表的名字，例如将学生表的名字修改为 tb_stu_info。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table &#96;tb_student&#96; rename to &#96;tb_stu_info&#96;;</code></pre><blockquote><p><strong>提示</strong>：一般情况下，请不要轻易修改数据库或表的名字。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>38.SQL详解之DML</title>
      <link href="/2024/07/01/38.sql-xiang-jie-zhi-dml/"/>
      <url>/2024/07/01/38.sql-xiang-jie-zhi-dml/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL详解之DML"><a href="#SQL详解之DML" class="headerlink" title="SQL详解之DML"></a>SQL详解之DML</h2><p>我们接着上一课中创建的学校选课系统数据库，为大家讲解 DML 的使用。DML 可以帮助将数据插入到二维表（<code>insert</code>操作）、从二维表删除数据（<code>delete</code>操作）以及更新二维表的数据（<code>update</code>操作）。在执行 DML 之前，我们先通过下面的<code>use</code>命令切换到<code>school</code>数据库。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">use &#96;school&#96;;</code></pre><h3 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a>insert操作</h3><p>顾名思义，<code>insert</code>是用来插入行到二维表中的，插入的方式包括：插入完整的行、插入行的一部分、插入多行、插入查询的结果。我们通过如下所示的 SQL 向学院表中添加一个学院。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">insert into &#96;tb_college&#96; values (default, &#39;计算机学院&#39;, &#39;学习计算机科学与技术的地方&#39;);</code></pre><p>其中，由于学院表的主键是一个自增字段，因此上面的 SQL 中用<code>default</code>表示该列使用默认值，我们也可以使用下面的方式完成同样的操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">insert into &#96;tb_college&#96; (&#96;col_name&#96;, &#96;col_intro&#96;) values (&#39;计算机学院&#39;, &#39;学习计算机科学与技术的地方&#39;);</code></pre><p>我们推荐大家使用下面这种做法，指定为哪些字段赋值，这样做可以不按照建表时设定的字段顺序赋值，可以按照<code>values</code>前面的元组中给定的字段顺序为字段赋值，但是需要注意，除了允许为<code>null</code>和有默认值的字段外，其他的字段都必须要一一列出并在<code>values</code>后面的元组中为其赋值。如果希望一次性插入多条记录，我们可以在<code>values</code>后面跟上多个元组来实现批量插入，代码如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">insert into &#96;tb_college&#96;     (&#96;col_name&#96;, &#96;col_intro&#96;) values     (&#39;外国语学院&#39;, &#39;学习歪果仁的语言的学院&#39;),    (&#39;经济管理学院&#39;, &#39;经世济民，治理国家；管理科学，兴国之道&#39;),    (&#39;体育学院&#39;, &#39;发展体育运动，增强人民体质&#39;);</code></pre><p>在插入数据时，要注意主键是不能重复的，如果插入的数据与表中已有记录主键相同，那么<code>insert</code>操作将会产生 Duplicated Entry 的报错信息。再次提醒大家，如果<code>insert</code>操作省略了某些列，那么这些列要么有默认值，要么允许为<code>null</code>，否则也将产生错误。在业务系统中，为了让<code>insert</code>操作不影响其他操作（主要是后面要讲的<code>select</code>操作）的性能，可以在<code>insert</code>和<code>into</code>之间加一个<code>low_priority</code>来降低<code>insert</code>操作的优先级，这个做法也适用于下面要讲的<code>delete</code>和<code>update</code>操作。</p><p>假如有一张名为<code>tb_temp</code>的表中有<code>a</code>和<code>b</code>两个列，分别保存了学院的名称和学院的介绍，我们也可以通过查询操作获得<code>tb_temp</code>表的数据并插入到学院表中，如下所示，其中的<code>select</code>就是我们之前提到的 DQL，在下一课中会详细讲解。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">insert into &#96;tb_college&#96;    (&#96;col_name&#96;, &#96;col_intro&#96;)select &#96;a&#96;, &#96;b&#96; from &#96;tb_temp&#96;;</code></pre><h3 id="delete-操作"><a href="#delete-操作" class="headerlink" title="delete 操作"></a>delete 操作</h3><p>如果需要从表中删除数据，可以使用<code>delete</code>操作，它可以帮助我们删除指定行或所有行，例如我们要删除编号为<code>1</code>的学院，就可以使用如下所示的 SQL。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">delete from &#96;tb_college&#96; where col_id&#x3D;1;</code></pre><p>注意，上面的<code>delete</code>操作中的<code>where</code>子句是用来指定条件的，只有满足条件的行会被删除。如果我们不小心写出了下面的 SQL，就会删除学院表中所有的记录，这是相当危险的，在实际工作中通常也不会这么做。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">delete from &#96;tb_college&#96;;</code></pre><p>需要说明的是，即便删除了所有的数据，<code>delete</code>操作不会删除表本身，也不会让 AUTO_INCREMENT 字段的值回到初始值。如果需要删除所有的数据而且让 AUTO_INCREMENT 字段回到初始值，可以使用<code>truncate table</code>执行截断表操作，<code>truncate</code>的本质是删除原来的表并重新创建一个表，它的速度其实更快，因为不需要逐行删除数据。但是请大家记住一点，用<code>truncate table</code>删除数据是非常危险的，因为它会删除所有的数据，而且由于原来的表已经被删除了，要想恢复误删除的数据也会变得极为困难。</p><h3 id="update-操作"><a href="#update-操作" class="headerlink" title="update 操作"></a>update 操作</h3><p>如果要修改表中的数据，可以使用<code>update</code>操作，它可以用来删除指定的行或所有的行。例如，我们将学生表中的“杨过”修改为“杨逍”，这里我们假设“杨过”的学号为<code>1001</code>，代码如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">update &#96;tb_student&#96; set &#96;stu_name&#96;&#x3D;&#39;杨逍&#39; where &#96;stu_id&#96;&#x3D;1001;</code></pre><p>注意上面 SQL 中的<code>where</code>子句，我们使用学号作为条件筛选出对应的学生，然后通过前面的赋值操作将其姓名修改为“杨逍”。这里为什么不直接使用姓名作为筛选条件，那是因为学生表中可能有多个名为“杨过”的学生，如果使用 stu_name 作为筛选条件，那么我们的<code>update</code>操作有可能会一次更新多条数据，这显然不是我们想要看到的。还有一个需要注意的地方是<code>update</code>操作中的<code>set</code>关键字，因为 SQL 中的<code>=</code>并不表示赋值，而是判断相等的运算符，只有出现在<code>set</code> 关键字后面的<code>=</code>，才具备赋值的能力。</p><p>如果要同时修改学生的姓名和生日，我们可以对上面的<code>update</code>语句稍作修改，如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">update &#96;tb_student&#96; set &#96;stu_name&#96;&#x3D;&#39;杨逍&#39;, &#96;stu_birth&#96;&#x3D;&#39;1975-12-29&#39; where &#96;stu_id&#96;&#x3D;1001;</code></pre><p><code>update</code>语句中也可以使用查询的方式获得数据并以此来更新指定的表数据，有兴趣的读者可以自行研究。在书写<code>update</code>语句时，通常都会有<code>where</code>子句，因为实际工作中几乎不太会用到更新全表的操作，这一点大家一定要注意。</p><h3 id="完整的数据"><a href="#完整的数据" class="headerlink" title="完整的数据"></a>完整的数据</h3><p>下面我们给出完整的向 school 数据库的五张表中插入数据的 SQL。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">use &#96;school&#96;;-- 插入学院数据insert into &#96;tb_college&#96;     (&#96;col_name&#96;, &#96;col_intro&#96;) values     (&#39;计算机学院&#39;, &#39;计算机学院1958年设立计算机专业，1981年建立计算机科学系，1998年设立计算机学院，2005年5月，为了进一步整合教学和科研资源，学校决定，计算机学院和软件学院行政班子合并统一运作、实行教学和学生管理独立运行的模式。 学院下设三个系：计算机科学与技术系、物联网工程系、计算金融系；两个研究所：图象图形研究所、网络空间安全研究院（2015年成立）；三个教学实验中心：计算机基础教学实验中心、IBM技术中心和计算机专业实验中心。&#39;),    (&#39;外国语学院&#39;, &#39;外国语学院设有7个教学单位，6个文理兼收的本科专业；拥有1个一级学科博士授予点，3个二级学科博士授予点，5个一级学科硕士学位授权点，5个二级学科硕士学位授权点，5个硕士专业授权领域，同时还有2个硕士专业学位（MTI）专业；有教职员工210余人，其中教授、副教授80余人，教师中获得中国国内外名校博士学位和正在职攻读博士学位的教师比例占专任教师的60%以上。&#39;),    (&#39;经济管理学院&#39;, &#39;经济学院前身是创办于1905年的经济科；已故经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代学者刘诗白等曾先后在此任教或学习。&#39;);-- 插入学生数据insert into &#96;tb_student&#96;     (&#96;stu_id&#96;, &#96;stu_name&#96;, &#96;stu_sex&#96;, &#96;stu_birth&#96;, &#96;stu_addr&#96;, &#96;col_id&#96;) values    (1001, &#39;杨过&#39;, 1, &#39;1990-3-4&#39;, &#39;湖南长沙&#39;, 1),    (1002, &#39;任我行&#39;, 1, &#39;1992-2-2&#39;, &#39;湖南长沙&#39;, 1),    (1033, &#39;王语嫣&#39;, 0, &#39;1989-12-3&#39;, &#39;四川成都&#39;, 1),    (1572, &#39;岳不群&#39;, 1, &#39;1993-7-19&#39;, &#39;陕西咸阳&#39;, 1),    (1378, &#39;纪嫣然&#39;, 0, &#39;1995-8-12&#39;, &#39;四川绵阳&#39;, 1),    (1954, &#39;林平之&#39;, 1, &#39;1994-9-20&#39;, &#39;福建莆田&#39;, 1),    (2035, &#39;东方不败&#39;, 1, &#39;1988-6-30&#39;, null, 2),    (3011, &#39;林震南&#39;, 1, &#39;1985-12-12&#39;, &#39;福建莆田&#39;, 3),    (3755, &#39;项少龙&#39;, 1, &#39;1993-1-25&#39;, &#39;四川成都&#39;, 3),    (3923, &#39;杨不悔&#39;, 0, &#39;1985-4-17&#39;, &#39;四川成都&#39;, 3);-- 插入老师数据insert into &#96;tb_teacher&#96;     (&#96;tea_id&#96;, &#96;tea_name&#96;, &#96;tea_title&#96;, &#96;col_id&#96;) values     (1122, &#39;张三丰&#39;, &#39;教授&#39;, 1),    (1133, &#39;宋远桥&#39;, &#39;副教授&#39;, 1),    (1144, &#39;杨逍&#39;, &#39;副教授&#39;, 1),    (2255, &#39;范遥&#39;, &#39;副教授&#39;, 2),    (3366, &#39;韦一笑&#39;, default, 3);-- 插入课程数据insert into &#96;tb_course&#96;     (&#96;cou_id&#96;, &#96;cou_name&#96;, &#96;cou_credit&#96;, &#96;tea_id&#96;) values     (1111, &#39;Python程序设计&#39;, 3, 1122),    (2222, &#39;Web前端开发&#39;, 2, 1122),    (3333, &#39;操作系统&#39;, 4, 1122),    (4444, &#39;计算机网络&#39;, 2, 1133),    (5555, &#39;编译原理&#39;, 4, 1144),    (6666, &#39;算法和数据结构&#39;, 3, 1144),    (7777, &#39;经贸法语&#39;, 3, 2255),    (8888, &#39;成本会计&#39;, 2, 3366),    (9999, &#39;审计学&#39;, 3, 3366);-- 插入选课数据insert into &#96;tb_record&#96;     (&#96;stu_id&#96;, &#96;cou_id&#96;, &#96;sel_date&#96;, &#96;score&#96;) values     (1001, 1111, &#39;2017-09-01&#39;, 95),    (1001, 2222, &#39;2017-09-01&#39;, 87.5),    (1001, 3333, &#39;2017-09-01&#39;, 100),    (1001, 4444, &#39;2018-09-03&#39;, null),    (1001, 6666, &#39;2017-09-02&#39;, 100),    (1002, 1111, &#39;2017-09-03&#39;, 65),    (1002, 5555, &#39;2017-09-01&#39;, 42),    (1033, 1111, &#39;2017-09-03&#39;, 92.5),    (1033, 4444, &#39;2017-09-01&#39;, 78),    (1033, 5555, &#39;2017-09-01&#39;, 82.5),    (1572, 1111, &#39;2017-09-02&#39;, 78),    (1378, 1111, &#39;2017-09-05&#39;, 82),    (1378, 7777, &#39;2017-09-02&#39;, 65.5),    (2035, 7777, &#39;2018-09-03&#39;, 88),    (2035, 9999, &#39;2019-09-02&#39;, null),    (3755, 1111, &#39;2019-09-02&#39;, null),    (3755, 8888, &#39;2019-09-02&#39;, null),    (3755, 9999, &#39;2017-09-01&#39;, 92);</code></pre><blockquote><p><strong>注意</strong>：上面的<code>insert</code>语句使用了批处理的方式来插入数据，这种做法插入数据的效率比较高。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>39.SQL详解之DQL</title>
      <link href="/2024/07/01/39.sql-xiang-jie-zhi-dql/"/>
      <url>/2024/07/01/39.sql-xiang-jie-zhi-dql/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL详解之DQL"><a href="#SQL详解之DQL" class="headerlink" title="SQL详解之DQL"></a>SQL详解之DQL</h2><p>接下来，我们利用之前创建的学校选课系统数据库，为大家讲解 DML 中的查询操作。无论对于开发人员还是数据分析师，查询都是非常重要的，它关系着我们能否从关系数据库中获取我们需要的数据。建议大家把上上一节课中建库建表的 DDL 以及 上一节课中插入数据的 DML 重新执行一次，确保表和数据跟没有问题再执行下面的操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">USE school;-- 查询所有学生的所有信息SELECT stu_id,       stu_name,       stu_sex,       stu_birth,       stu_addr,       col_id  FROM tb_student;-- 查询学生的学号、姓名和籍贯(投影和别名)SELECT stu_id AS 学号,       stu_name AS 姓名,       stu_addr AS 籍贯  FROM tb_student;-- 查询所有课程的名称及学分(投影和别名)SELECT cou_name AS 课程名称,       cou_credit AS 学分  FROM tb_course;-- 查询所有女学生的姓名和出生日期(数据筛选)SELECT stu_name,       stu_birth  FROM tb_student WHERE stu_sex &#x3D; 0;-- 查询籍贯为“四川成都”的女学生的姓名和出生日期(数据筛选)SELECT stu_name,       stu_birth  FROM tb_student WHERE stu_sex &#x3D; 0       AND stu_addr &#x3D; &#39;四川成都&#39;;-- 查询籍贯为“四川成都”或者性别是女的学生(数据筛选)SELECT stu_name,       stu_birth  FROM tb_student WHERE stu_sex &#x3D; 0       OR stu_addr &#x3D; &#39;四川成都&#39;;-- 查询所有80后学生的姓名、性别和出生日期(数据筛选)SELECT stu_name,       stu_sex,       stu_birth  FROM tb_student WHERE &#39;1980-1-1&#39; &lt;&#x3D; stu_birth        AND stu_birth &lt;&#x3D; &#39;1989-12-31&#39;;       SELECT stu_name,       stu_sex,       stu_birth  FROM tb_student WHERE stu_birth BETWEEN &#39;1980-1-1&#39; AND &#39;1989-12-31&#39;;-- 查询学分大于2的课程的名称和学分(数据筛选)SELECT cou_name,   cou_credit  FROM tb_course WHERE cou_credit &gt; 2;-- 查询学分是奇数的课程的名称和学分(数据筛选)SELECT cou_name,   cou_credit  FROM tb_course WHERE cou_credit MOD 2 &lt;&gt; 0;-- 查询选择选了1111的课程考试成绩在90分以上的学生学号(数据筛选)SELECT stu_id  FROM tb_record WHERE cou_id &#x3D; 1111       AND score &gt; 90;-- 查询名字叫“杨过”的学生的姓名和性别(数据筛选)SELECT stu_name AS 姓名,        CASE stu_sex WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END AS 性别  FROM tb_student WHERE stu_name &#x3D; &#39;杨过&#39;; SELECT stu_name AS 姓名,        IF(stu_sex, &#39;男&#39;, &#39;女&#39;) AS 性别  FROM tb_student WHERE stu_name &#x3D; &#39;杨过&#39;;    -- 查询姓“杨”的学生姓名和性别(模糊匹配)-- 通配符 % 匹配零个或任意多个字符SELECT stu_name AS 姓名,        CASE stu_sex WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END AS 性别  FROM tb_student WHERE stu_name LIKE &#39;杨%&#39;;-- 查询姓“杨”名字两个字的学生姓名和性别(模糊匹配)-- 通过符 _ 匹配一个字符SELECT stu_name AS 姓名,        CASE stu_sex WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END AS 性别  FROM tb_student WHERE stu_name LIKE &#39;杨_&#39;;-- 查询姓“杨”名字三个字的学生姓名和性别(模糊匹配)SELECT stu_name AS 姓名,        CASE stu_sex WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END AS 性别  FROM tb_student WHERE stu_name LIKE &#39;杨__&#39;; -- 查询学号最后一位是3的学生的学号和姓名(模糊匹配)SELECT stu_id,       stu_name  FROM tb_student WHERE stu_id LIKE &#39;%3&#39;;-- 查询名字中有“不”字或“嫣”字的学生的学号和姓名(模糊匹配和并集运算)SELECT stu_id,       stu_name  FROM tb_student WHERE stu_name LIKE &#39;%不%&#39;       OR stu_name LIKE &#39;%嫣%&#39;;       SELECT stu_id,       stu_name  FROM tb_student WHERE stu_name LIKE &#39;%不%&#39; UNIONSELECT stu_id,       stu_name  FROM tb_student WHERE stu_name LIKE &#39;%嫣%&#39;;-- 查询姓“杨”或姓“林”名字三个字的学生的学号和姓名(正则表达式模糊匹配)SELECT stu_id,       stu_name  FROM tb_student WHERE stu_name REGEXP &#39;[林杨][\\u4e00-\\u9fa5]&#123;2&#125;&#39;;-- 查询没有录入籍贯的学生姓名(空值处理)SELECT stu_name  FROM tb_student WHERE TRIM(stu_addr) &#x3D; &#39;&#39;       OR stu_addr is null; -- 查询录入了籍贯的学生姓名(空值处理)SELECT stu_name  FROM tb_student WHERE TRIM(stu_addr) &lt;&gt; &#39;&#39;       AND stu_addr is not null;-- 查询学生选课的所有日期(去重)SELECT DISTINCT sel_date  FROM tb_record;-- 查询学生的籍贯(去重)SELECT DISTINCT stu_addr  FROM tb_student WHERE TRIM(stu_addr) &lt;&gt; &#39;&#39;       AND stu_addr is not null;-- 查询男学生的姓名和生日按年龄从大到小排列(排序)SELECT stu_name,       stu_birth  FROM tb_student WHERE stu_sex &#x3D; 1 ORDER BY stu_birth ASC; -- 补充：将上面的生日换算成年龄(日期函数、数值函数)SELECT stu_name AS 姓名,       FLOOR(DATEDIFF(CURDATE(), stu_birth) &#x2F; 365) AS 年龄  FROM tb_student WHERE stu_sex &#x3D; 1 ORDER BY 年龄 DESC;-- 查询年龄最大的学生的出生日期(聚合函数)SELECT MIN(stu_birth)  FROM tb_student;-- 查询年龄最小的学生的出生日期(聚合函数)SELECT MAX(stu_birth)  FROM tb_student;-- 查询编号为1111的课程考试成绩的最高分(聚合函数)SELECT MAX(score)  FROM tb_record WHERE cou_id &#x3D; 1111;-- 查询学号为1001的学生考试成绩的最低分、最高分、平均分、标准差、方差(聚合函数)SELECT MIN(score) AS 最低分,       MAX(score) AS 最高分,   ROUND(AVG(score), 1) AS 平均分,       STDDEV(score) AS 标准差,       VARIANCE(score) AS 方差  FROM tb_record WHERE stu_id &#x3D; 1001;-- 查询学号为1001的学生考试成绩的平均分，如果有null值，null值算0分(聚合函数)SELECT ROUND(SUM(score) &#x2F; COUNT(*), 1) AS 平均分  FROM tb_record WHERE stu_id &#x3D; 1001;-- 查询男女学生的人数(分组和聚合函数)SELECT CASE stu_sex WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END AS 性别,       COUNT(*) AS 人数  FROM tb_student GROUP BY stu_sex;-- 查询每个学院学生人数(分组和聚合函数)SELECT col_id AS 学院编号,       COUNT(*) AS 人数  FROM tb_student GROUP BY col_id  WITH ROLLUP;-- 查询每个学院男女学生人数(分组和聚合函数)SELECT col_id AS 学院编号,       CASE stu_sex WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END AS 性别,       COUNT(*) AS 人数  FROM tb_student GROUP BY col_id, stu_sex;-- 查询每个学生的学号和平均成绩(分组和聚合函数)SELECT stu_id AS 学号,   ROUND(AVG(score), 1) AS 平均分  FROM tb_record GROUP BY stu_id;-- 查询平均成绩大于等于90分的学生的学号和平均成绩(分组后的数据筛选)SELECT stu_id AS 学号,   ROUND(AVG(score), 1) AS 平均分  FROM tb_record GROUP BY stu_idHAVING 平均分 &gt;&#x3D; 90;-- 查询1111、2222、3333三门课程平均成绩大于等于90分的学生的学号和平均成绩(分组前后的数据筛选)SELECT stu_id AS 学号,   ROUND(AVG(score), 1) AS 平均分  FROM tb_record WHERE cou_id in (1111, 2222, 3333) GROUP BY stu_idHAVING 平均分 &gt;&#x3D; 90 ORDER BY 平均分 ASC;-- 查询年龄最大的学生的姓名(子查询)SELECT stu_name  FROM tb_student WHERE stu_birth &#x3D; (SELECT MIN(stu_birth)                      FROM tb_student);-- 查询选了两门以上的课程的学生姓名(子查询和集合运算)SELECT stu_name  FROM tb_student WHERE stu_id in (SELECT stu_id    FROM tb_record   GROUP BY stu_id  HAVING COUNT(*) &gt; 2);-- 查询学生的姓名、生日和所在学院名称(表连接)SELECT stu_name,       stu_birth,       col_name  FROM tb_student AS t1, tb_college AS t2 WHERE t1.col_id &#x3D; t2.col_id; SELECT stu_name,       stu_birth,   col_name  FROM tb_student INNER JOIN tb_college       ON tb_student.col_id &#x3D; tb_college.col_id;SELECT stu_name,       stu_birth,   col_name  FROM tb_student NATURAL JOIN tb_college;  SELECT stu_name,       stu_birth,   col_name  FROM tb_student CROSS JOIN tb_college;-- 查询学生姓名、课程名称以及成绩(表连接)SELECT stu_name,       cou_name,   score  FROM tb_student, tb_course, tb_record WHERE tb_student.stu_id &#x3D; tb_record.stu_id       AND tb_course.cou_id &#x3D; tb_record.cou_id       AND score is not null;SELECT stu_name,       cou_name,   score  FROM tb_student        INNER JOIN tb_record       ON tb_student.stu_id &#x3D; tb_record.stu_id   INNER JOIN tb_course       ON tb_course.cou_id &#x3D; tb_record.cou_id WHERE score is not null; SELECT stu_name,       cou_name,       score  FROM tb_student    NATURAL JOIN tb_record       NATURAL JOIN tb_course WHERE score is not null;-- 补充：上面的查询结果取前5条数据(分页查询)SELECT stu_name,       cou_name,       score  FROM tb_student    NATURAL JOIN tb_record       NATURAL JOIN tb_course WHERE score is not null ORDER BY cou_id ASC, score DESC LIMIT 5;-- 补充：上面的查询结果取第6-10条数据(分页查询)SELECT stu_name,       cou_name,       score  FROM tb_student    NATURAL JOIN tb_record       NATURAL JOIN tb_course WHERE score is not null ORDER BY cou_id ASC, score DESC LIMIT 5OFFSET 5;-- 补充：上面的查询结果取第11-15条数据(分页查询)SELECT stu_name,       cou_name,       score  FROM tb_student    NATURAL JOIN tb_record       NATURAL JOIN tb_course WHERE score is not null ORDER BY cou_id ASC, score DESC LIMIT 10, 5;-- 查询选课学生的姓名和平均成绩(子查询和表连接)-- Error Code: 1248. Every derived table must have its own aliasSELECT stu_name,   avg_score  FROM tb_student       NATURAL JOIN (SELECT stu_id,                            ROUND(AVG(score), 1) AS avg_score                       FROM tb_record                      GROUP BY stu_id) as tmp;-- 查询学生的姓名和选课的数量(子查询和表连接)SELECT stu_name,   total  FROM tb_student       NATURAL JOIN (SELECT stu_id,                            COUNT(*) AS total                       FROM tb_record                      GROUP BY stu_id) as tmp;-- 查询每个学生的姓名和选课数量(子查询和左外连接)SELECT stu_name AS 姓名,   COALESCE(total, 0) AS 选课数量  FROM tb_student AS t1   LEFT JOIN (SELECT stu_id,             COUNT(*) AS total            FROM tb_record   GROUP BY stu_id) AS t2       ON t1.stu_id &#x3D; t2.stu_id;</code></pre><p>有几个地方需要加以说明：</p><ol><li><p>MySQL目前的版本不支持全外连接，上面我们通过<code>union</code>操作，将左外连接和右外连接的结果求并集实现全外连接的效果。大家可以通过下面的图来加深对连表操作的认识。</p><img src="http://localhost/mypic/20211121135117.png" style="zoom:50%"></li><li><p>MySQL 中支持多种类型的运算符，包括：算术运算符（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>）、比较运算符（<code>=</code>、<code>&lt;&gt;</code>、<code>&lt;=&gt;</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>BETWEEN...AND..</code>.、<code>IN</code>、<code>IS NULL</code>、<code>IS NOT NULL</code>、<code>LIKE</code>、<code>RLIKE</code>、<code>REGEXP</code>）、逻辑运算符（<code>NOT</code>、<code>AND</code>、<code>OR</code>、<code>XOR</code>）和位运算符（<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&gt;&gt;</code>、<code>&lt;&lt;</code>），我们可以在 DML 中使用这些运算符处理数据。</p></li><li><p>在查询数据时，可以在<code>SELECT</code>语句及其子句（如<code>WHERE</code>子句、<code>ORDER BY</code>子句、<code>HAVING</code>子句等）中使用函数，这些函数包括字符串函数、数值函数、时间日期函数、流程函数等，如下面的表格所示。</p><p>常用字符串函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>CONCAT</code></td><td>将多个字符串连接成一个字符串</td></tr><tr><td><code>FORMAT</code></td><td>将数值格式化成字符串并指定保留几位小数</td></tr><tr><td><code>FROM_BASE64</code> &#x2F; <code>TO_BASE64</code></td><td>BASE64解码&#x2F;编码</td></tr><tr><td><code>BIN</code> &#x2F; <code>OCT</code> &#x2F; <code>HEX</code></td><td>将数值转换成二进制&#x2F;八进制&#x2F;十六进制字符串</td></tr><tr><td><code>LOCATE</code></td><td>在字符串中查找一个子串的位置</td></tr><tr><td><code>LEFT</code> &#x2F; <code>RIGHT</code></td><td>返回一个字符串左边&#x2F;右边指定长度的字符</td></tr><tr><td><code>LENGTH</code> &#x2F; <code>CHAR_LENGTH</code></td><td>返回字符串的长度以字节&#x2F;字符为单位</td></tr><tr><td><code>LOWER</code> &#x2F; <code>UPPER</code></td><td>返回字符串的小写&#x2F;大写形式</td></tr><tr><td><code>LPAD</code> &#x2F; <code>RPAD</code></td><td>如果字符串的长度不足，在字符串左边&#x2F;右边填充指定的字符</td></tr><tr><td><code>LTRIM</code> &#x2F; <code>RTRIM</code></td><td>去掉字符串前面&#x2F;后面的空格</td></tr><tr><td><code>ORD</code> &#x2F; <code>CHAR</code></td><td>返回字符对应的编码&#x2F;返回编码对应的字符</td></tr><tr><td><code>STRCMP</code></td><td>比较字符串，返回-1、0、1分别表示小于、等于、大于</td></tr><tr><td><code>SUBSTRING</code></td><td>返回字符串指定范围的子串</td></tr></tbody></table><p>常用数值函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>ABS</code></td><td>返回一个数的绝度值</td></tr><tr><td><code>CEILING</code> &#x2F; <code>FLOOR</code></td><td>返回一个数上取整&#x2F;下取整的结果</td></tr><tr><td><code>CONV</code></td><td>将一个数从一种进制转换成另一种进制</td></tr><tr><td><code>CRC32</code></td><td>计算循环冗余校验码</td></tr><tr><td><code>EXP</code> &#x2F; <code>LOG</code> &#x2F; <code>LOG2</code> &#x2F; <code>LOG10</code></td><td>计算指数&#x2F;对数</td></tr><tr><td><code>POW</code></td><td>求幂</td></tr><tr><td><code>RAND</code></td><td>返回[0,1)范围的随机数</td></tr><tr><td><code>ROUND</code></td><td>返回一个数四舍五入后的结果</td></tr><tr><td><code>SQRT</code></td><td>返回一个数的平方根</td></tr><tr><td><code>TRUNCATE</code></td><td>截断一个数到指定的精度</td></tr><tr><td><code>SIN</code> &#x2F; <code>COS</code> &#x2F; <code>TAN</code> &#x2F; <code>COT</code> &#x2F; <code>ASIN</code> &#x2F; <code>ACOS</code> &#x2F; <code>ATAN</code></td><td>三角函数</td></tr></tbody></table><p>常用时间日期函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>CURDATE</code> &#x2F; <code>CURTIME</code> &#x2F; <code>NOW</code></td><td>获取当前日期&#x2F;时间&#x2F;日期和时间</td></tr><tr><td><code>ADDDATE</code> &#x2F; <code>SUBDATE</code></td><td>将两个日期表达式相加&#x2F;相减并返回结果</td></tr><tr><td><code>DATE</code> &#x2F; <code>TIME</code></td><td>从字符串中获取日期&#x2F;时间</td></tr><tr><td><code>YEAR</code> &#x2F; <code>MONTH</code> &#x2F; <code>DAY</code></td><td>从日期中获取年&#x2F;月&#x2F;日</td></tr><tr><td><code>HOUR</code> &#x2F; <code>MINUTE</code> &#x2F; <code>SECOND</code></td><td>从时间中获取时&#x2F;分&#x2F;秒</td></tr><tr><td><code>DATEDIFF</code> &#x2F; <code>TIMEDIFF</code> &#x2F; <code>TIMESTAMPDIFF</code></td><td>返回两个时间日期表达式相差多少天&#x2F;小时</td></tr><tr><td><code>MAKEDATE</code> &#x2F; <code>MAKETIME</code></td><td>制造一个日期&#x2F;时间</td></tr></tbody></table><p>常用流程控制函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>IF</code></td><td>根据条件是否成立返回不同的值</td></tr><tr><td><code>IFNULL</code></td><td>如果为NULL则返回指定的值否则就返回本身</td></tr><tr><td><code>NULLIF</code></td><td>两个表达式相等就返回NULL否则返回第一个表达式的值</td></tr></tbody></table><p>其他常用函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>MD5</code> &#x2F; <code>SHA1</code> &#x2F; <code>SHA2</code></td><td>返回字符串对应的哈希摘要</td></tr><tr><td><code>CHARSET</code> &#x2F; <code>COLLATION</code></td><td>返回字符集&#x2F;校对规则</td></tr><tr><td><code>USER</code> &#x2F; <code>CURRENT_USER</code></td><td>返回当前用户</td></tr><tr><td><code>DATABASE</code></td><td>返回当前数据库名</td></tr><tr><td><code>VERSION</code></td><td>返回当前数据库版本</td></tr><tr><td><code>FOUND_ROWS</code> &#x2F; <code>ROW_COUNT</code></td><td>返回查询到的行数&#x2F;受影响的行数</td></tr><tr><td><code>LAST_INSERT_ID</code></td><td>返回最后一个自增主键的值</td></tr><tr><td><code>UUID</code> &#x2F; <code>UUID_SHORT</code></td><td>返回全局唯一标识符</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40.SQL详解之DCL</title>
      <link href="/2024/07/01/40.sql-xiang-jie-zhi-dcl/"/>
      <url>/2024/07/01/40.sql-xiang-jie-zhi-dcl/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL详解之DCL"><a href="#SQL详解之DCL" class="headerlink" title="SQL详解之DCL"></a>SQL详解之DCL</h2><p>数据库服务器通常包含了非常重要的数据，可以通过访问控制来确保这些数据的安全，而 DCL 就是解决这一问题的，它可以为指定的用户授予访问权限或者从指定用户处召回指定的权限。DCL 对数据库管理员来说非常重要，因为用户权限的管理关系到数据库的安全。简单的说，我们可以通过 DCL 允许受信任的用户访问数据库，阻止不受信任的用户访问数据库，同时还可以通过 DCL 将每个访问者的的权限最小化（让访问者的权限刚刚够用）。</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>我们可以使用下面的 SQL 来创建一个用户并为其指定访问口令。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create user &#39;wangdachui&#39;@&#39;%&#39; identified by &#39;Wang.618&#39;;</code></pre><p>上面的 SQL 创建了名为 wangdachui 的用户，它的访问口令是 Wang.618，该用户可以从任意主机访问数据库服务器，因为 @ 后面使用了可以表示任意多个字符的通配符 %。如果要限制 wangdachui 这个用户只能从 192.168.0.x 这个网段的主机访问数据库服务器，可以按照下面的方式来修改 SQL 语句。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop user if exists &#39;wangdachui&#39;@&#39;%&#39;;create user &#39;wangdachui&#39;@&#39;192.168.0.%&#39; identified by &#39;Wang.618&#39;;</code></pre><p>此时，如果我们使用 wangdachui 这个账号访问数据库服务器，我们几乎不能做任何操作，因为该账号没有任何操作权限。</p><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><p>我们用下面的语句为 wangdachui 授予查询 school 数据库学院表（<code>tb_college</code>）的权限。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">grant select on &#96;school&#96;.&#96;tb_college&#96; to &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><p>我们也可以让 wangdachui 对 school 数据库的所有对象都具有查询权限，代码如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">grant select on &#96;school&#96;.* to &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><p>如果我们希望 wangdachui 还有 insert、delete 和 update 权限，可以使用下面的方式进行操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">grant insert, delete, update on &#96;school&#96;.* to &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><p>如果我们还想授予 wangdachui 执行 DDL 的权限，可以使用如下所示的 SQL。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">grant create, drop, alter on &#96;school&#96;.* to &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><p>如果我们希望 wangdachui 账号对所有数据库的所有对象都具备所有的操作权限，可以执行如下所示的操作，但是一般情况下，我们不会这样做，因为我们之前说过，权限刚刚够用就行，一个普通的账号不应该拥有这么大的权限。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">grant all privileges on *.* to &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><h3 id="召回权限"><a href="#召回权限" class="headerlink" title="召回权限"></a>召回权限</h3><p>如果要召回 wangdachui 对 school 数据库的 insert、delete 和 update 权限，可以使用下面的操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">revoke insert, delete, update on &#96;school&#96;.* from &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><p>如果要召回所有的权限，可以按照如下所示的方式进行操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">revoke all privileges on *.* from &#39;wangdachui&#39;@&#39;192.168.0.%&#39;;</code></pre><p>需要说明的是，由于数据库可能会缓存用户的权限，可以在授予或召回权限后执行下面的语句使新的权限即时生效。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>41.MySQL新特性</title>
      <link href="/2024/07/01/41.mysql-xin-te-xing/"/>
      <url>/2024/07/01/41.mysql-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL新特性"><a href="#MySQL新特性" class="headerlink" title="MySQL新特性"></a>MySQL新特性</h2><h3 id="JSON类型"><a href="#JSON类型" class="headerlink" title="JSON类型"></a>JSON类型</h3><p>很多开发者在使用关系型数据库做数据持久化的时候，常常感到结构化的存储缺乏灵活性，因为必须事先设计好所有的列以及对应的数据类型。在业务发展和变化的过程中，如果需要修改表结构，这绝对是比较麻烦和难受的事情。从 MySQL 5.7 版本开始，MySQL引入了对 JSON 数据类型的支持（MySQL 8.0 解决了 JSON 的日志性能瓶颈问题），用好 JSON 类型，其实就是打破了关系型数据库和非关系型数据库之间的界限，为数据持久化操作带来了更多的便捷。</p><p>JSON 类型主要分为 JSON 对象和 JSON数组两种，如下所示。</p><ol><li>JSON 对象</li></ol><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;&quot;name&quot;: &quot;骆昊&quot;, &quot;tel&quot;: &quot;13122335566&quot;, &quot;QQ&quot;: &quot;957658&quot;&#125;</code></pre><ol start="2"><li>JSON 数组</li></ol><pre class="language-JSON" data-language="JSON"><code class="language-JSON">[1, 2, 3]</code></pre><pre class="language-JSON" data-language="JSON"><code class="language-JSON">[&#123;&quot;name&quot;: &quot;骆昊&quot;, &quot;tel&quot;: &quot;13122335566&quot;&#125;, &#123;&quot;name&quot;: &quot;王大锤&quot;, &quot;QQ&quot;: &quot;123456&quot;&#125;]</code></pre><p>哪些地方需要用到JSON类型呢？举一个简单的例子，现在很多产品的用户登录都支持多种方式，例如手机号、微信、QQ、新浪微博等，但是一般情况下我们又不会要求用户提供所有的这些信息，那么用传统的设计方式，就需要设计多个列来对应多种登录方式，可能还需要允许这些列存在空值，这显然不是很好的选择；另一方面，如果产品又增加了一种登录方式，那么就必然要修改之前的表结构，这就更让人痛苦了。但是，有了 JSON 类型，刚才的问题就迎刃而解了，我们可以做出如下所示的设计。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create table &#96;tb_test&#96;(&#96;user_id&#96; bigint unsigned,&#96;login_info&#96; json,primary key (&#96;user_id&#96;)) engine&#x3D;innodb;insert into &#96;tb_test&#96; values     (1, &#39;&#123;&quot;tel&quot;: &quot;13122335566&quot;, &quot;QQ&quot;: &quot;654321&quot;, &quot;wechat&quot;: &quot;jackfrued&quot;&#125;&#39;),    (2, &#39;&#123;&quot;tel&quot;: &quot;13599876543&quot;, &quot;weibo&quot;: &quot;wangdachui123&quot;&#125;&#39;);</code></pre><p>如果要查询用户的手机和微信号，可以用如下所示的 SQL 语句。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select     &#96;user_id&#96;,    json_unquote(json_extract(&#96;login_info&#96;, &#39;$.tel&#39;)) as 手机号,    json_unquote(json_extract(&#96;login_info&#96;, &#39;$.wechat&#39;)) as 微信 from &#96;tb_test&#96;;</code></pre><pre class="language-none"><code class="language-none">+---------+-------------+-----------+| user_id | 手机号      | 微信       |+---------+-------------+-----------+|       1 | 13122335566 | jackfrued ||       2 | 13599876543 | NULL      |+---------+-------------+-----------+</code></pre><p>因为支持 JSON 类型，MySQL 也提供了配套的处理 JSON 数据的函数，就像上面用到的<code>json_extract</code>和<code>json_unquote</code>。当然，上面的 SQL 还有更为便捷的写法，如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;user_id&#96;,    &#96;login_info&#96; -&gt;&gt; &#39;$.tel&#39; as 手机号,    &#96;login_info&#96; -&gt;&gt; &#39;$.wechat&#39; as 微信from &#96;tb_test&#96;;</code></pre><p>再举个例子，如果我们的产品要实现用户画像功能（给用户打标签），然后基于用户画像给用户推荐平台的服务或消费品之类的东西，我们也可以使用 JSON 类型来保存用户画像数据，示意代码如下所示。</p><p>创建画像标签表。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create table &#96;tb_tags&#96;(&#96;tag_id&#96; int unsigned not null comment &#39;标签ID&#39;,&#96;tag_name&#96; varchar(20) not null comment &#39;标签名&#39;,primary key (&#96;tag_id&#96;)) engine&#x3D;innodb;insert into &#96;tb_tags&#96; (&#96;tag_id&#96;, &#96;tag_name&#96;) values    (1, &#39;70后&#39;),    (2, &#39;80后&#39;),    (3, &#39;90后&#39;),    (4, &#39;00后&#39;),    (5, &#39;爱运动&#39;),    (6, &#39;高学历&#39;),    (7, &#39;小资&#39;),    (8, &#39;有房&#39;),    (9, &#39;有车&#39;),    (10, &#39;爱看电影&#39;),    (11, &#39;爱网购&#39;),    (12, &#39;常点外卖&#39;);</code></pre><p>为用户打标签。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create table &#96;tb_users_tags&#96;(&#96;user_id&#96; bigint unsigned not null comment &#39;用户ID&#39;,&#96;user_tags&#96; json not null comment &#39;用户标签&#39;) engine&#x3D;innodb;insert into &#96;tb_users_tags&#96; values     (1, &#39;[2, 6, 8, 10]&#39;),    (2, &#39;[3, 10, 12]&#39;),    (3, &#39;[3, 8, 9, 11]&#39;);</code></pre><p>接下来，我们通过一组查询来了解 JSON 类型的巧妙之处。</p><ol><li><p>查询爱看电影（有<code>10</code>这个标签）的用户ID。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;user_id&#96; from &#96;tb_users_tags&#96; where 10 member of (&#96;user_tags&#96;-&gt;&#39;$&#39;);</code></pre></li><li><p>查询爱看电影（有<code>10</code>这个标签）的80后（有<code>2</code>这个标签）用户ID。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;user_id&#96; from &#96;tb_users_tags&#96; where json_contains(&#96;user_tags&#96;-&gt;&#39;$&#39;, &#39;[2, 10]&#39;);</code></pre></li><li><p>查询爱看电影或80后或90后的用户ID。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;user_id&#96; from &#96;tb_users_tags&#96; where json_overlaps(user_tags-&gt;&#39;$&#39;, &#39;[2, 3, 10]&#39;);</code></pre></li></ol><blockquote><p><strong>说明</strong>：上面的查询用到了<code>member of</code>谓词和两个 JSON 函数，<code>json_contains</code>可以检查 JSON 数组是否包含了指定的元素，而<code>json_overlaps</code>可以检查 JSON 数组是否与指定的数组有重叠部分。</p></blockquote><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>MySQL 从8.0开始支持窗口函数，大多数商业数据库和一些开源数据库早已提供了对窗口函数的支持，有的也将其称之为 OLAP（联机分析和处理）函数，听名字就知道跟统计和分析相关。为了帮助大家理解窗口函数，我们先说说窗口的概念。</p><p>窗口可以理解为记录的集合，窗口函数也就是在满足某种条件的记录集合上执行的特殊函数，对于每条记录都要在此窗口内执行函数。窗口函数和我们上面讲到的聚合函数比较容易混淆，二者的区别主要在于聚合函数是将多条记录聚合为一条记录，窗口函数是每条记录都会执行，执行后记录条数不会变。窗口函数不仅仅是几个函数，它是一套完整的语法，函数只是该语法的一部分，基本语法如下所示：</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">&lt;窗口函数&gt; over (partition by &lt;用于分组的列名&gt; order by &lt;用于排序的列名&gt;  rows between ... and ...)&lt;窗口函数&gt; over (partition by &lt;用于分组的列名&gt; order by &lt;用于排序的列名&gt; range between ... and ...)</code></pre><p>上面语法中，窗口函数的位置可以放以下两种函数：</p><ol><li>专用窗口函数，包括：<code>lead</code>、<code>lag</code>、<code>first_value</code>、<code>last_value</code>、<code>rank</code>、<code>dense_rank</code>和<code>row_number</code>等。</li><li>聚合函数，包括：<code>sum</code>、<code>avg</code>、<code>max</code>、<code>min</code>和<code>count</code>等。</li></ol><p>下面为大家举几个使用窗口函数的简单例子，我们直接使用上一课创建的 hrs 数据库。</p><p>例子1：查询按月薪从高到低排在第4到第6名的员工的姓名和月薪。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select * from (select &#96;ename&#96;, &#96;sal&#96;,row_number() over (order by &#96;sal&#96; desc) as &#96;rank&#96;from &#96;tb_emp&#96;) &#96;temp&#96; where &#96;rank&#96; between 4 and 6;</code></pre><blockquote><p><strong>说明</strong>：上面使用的函数<code>row_number()</code>可以为每条记录生成一个行号，在实际工作中可以根据需要将其替换为<code>rank()</code>或<code>dense_rank()</code>函数，三者的区别可以参考官方文档或阅读<a href="https://zhuanlan.zhihu.com/p/92654574">《通俗易懂的学会：SQL窗口函数》</a>进行了解。在MySQL 8以前的版本，我们可以通过下面的方式来完成类似的操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;rank&#96;, &#96;ename&#96;, &#96;sal&#96; from (       select @a:&#x3D;@a+1 as &#96;rank&#96;, &#96;ename&#96;, &#96;sal&#96;        from &#96;tb_emp&#96;, (select @a:&#x3D;0) as t1 order by &#96;sal&#96; desc) as &#96;temp&#96; where &#96;rank&#96; between 4 and 6;</code></pre></blockquote><p>例子2：查询每个部门月薪最高的两名的员工的姓名和部门名称。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;ename&#96;, &#96;sal&#96;, &#96;dname&#96; from (    select         &#96;ename&#96;, &#96;sal&#96;, &#96;dno&#96;,        rank() over (partition by &#96;dno&#96; order by &#96;sal&#96; desc) as &#96;rank&#96;    from &#96;tb_emp&#96;) as &#96;temp&#96; natural join &#96;tb_dept&#96; where &#96;rank&#96;&lt;&#x3D;2;</code></pre><blockquote><p>说明：在MySQL 8以前的版本，我们可以通过下面的方式来完成类似的操作。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select &#96;ename&#96;, &#96;sal&#96;, &#96;dname&#96; from &#96;tb_emp&#96; as &#96;t1&#96; natural join &#96;tb_dept&#96; where (       select count(*) from &#96;tb_emp&#96; as &#96;t2&#96;        where &#96;t1&#96;.&#96;dno&#96;&#x3D;&#96;t2&#96;.&#96;dno&#96; and &#96;t2&#96;.&#96;sal&#96;&gt;&#96;t1&#96;.&#96;sal&#96; )&lt;2 order by &#96;dno&#96; asc, &#96;sal&#96; desc;</code></pre></blockquote><h3 id="公用表表达式（CTE）"><a href="#公用表表达式（CTE）" class="headerlink" title="公用表表达式（CTE）"></a>公用表表达式（CTE）</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>42.视图、函数和过程</title>
      <link href="/2024/07/01/42.shi-tu-han-shu-he-guo-cheng/"/>
      <url>/2024/07/01/42.shi-tu-han-shu-he-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="视图、函数和过程"><a href="#视图、函数和过程" class="headerlink" title="视图、函数和过程"></a>视图、函数和过程</h2><p>为了讲解视图、函数和过程，我们首先用下面的 DDL 和 DML 创建名为 hrs 的数据库并为其二维表添加如下所示的数据。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 创建名为hrs的数据库并指定默认的字符集create database &#96;hrs&#96; default charset utf8mb4;-- 切换到hrs数据库use &#96;hrs&#96;;-- 创建部门表create table &#96;tb_dept&#96;(&#96;dno&#96; int not null comment &#39;编号&#39;,&#96;dname&#96; varchar(10) not null comment &#39;名称&#39;,&#96;dloc&#96; varchar(20) not null comment &#39;所在地&#39;,primary key (&#96;dno&#96;));-- 插入4个部门insert into &#96;tb_dept&#96; values     (10, &#39;会计部&#39;, &#39;北京&#39;),    (20, &#39;研发部&#39;, &#39;成都&#39;),    (30, &#39;销售部&#39;, &#39;重庆&#39;),    (40, &#39;运维部&#39;, &#39;深圳&#39;);-- 创建员工表create table &#96;tb_emp&#96;(&#96;eno&#96; int not null comment &#39;员工编号&#39;,&#96;ename&#96; varchar(20) not null comment &#39;员工姓名&#39;,&#96;job&#96; varchar(20) not null comment &#39;员工职位&#39;,&#96;mgr&#96; int comment &#39;主管编号&#39;,&#96;sal&#96; int not null comment &#39;员工月薪&#39;,&#96;comm&#96; int comment &#39;每月补贴&#39;,&#96;dno&#96; int not null comment &#39;所在部门编号&#39;,primary key (&#96;eno&#96;),constraint &#96;fk_emp_mgr&#96; foreign key (&#96;mgr&#96;) references tb_emp (&#96;eno&#96;),constraint &#96;fk_emp_dno&#96; foreign key (&#96;dno&#96;) references tb_dept (&#96;dno&#96;));-- 插入14个员工insert into &#96;tb_emp&#96; values     (7800, &#39;张三丰&#39;, &#39;总裁&#39;, null, 9000, 1200, 20),    (2056, &#39;乔峰&#39;, &#39;分析师&#39;, 7800, 5000, 1500, 20),    (3088, &#39;李莫愁&#39;, &#39;设计师&#39;, 2056, 3500, 800, 20),    (3211, &#39;张无忌&#39;, &#39;程序员&#39;, 2056, 3200, null, 20),    (3233, &#39;丘处机&#39;, &#39;程序员&#39;, 2056, 3400, null, 20),    (3251, &#39;张翠山&#39;, &#39;程序员&#39;, 2056, 4000, null, 20),    (5566, &#39;宋远桥&#39;, &#39;会计师&#39;, 7800, 4000, 1000, 10),    (5234, &#39;郭靖&#39;, &#39;出纳&#39;, 5566, 2000, null, 10),    (3344, &#39;黄蓉&#39;, &#39;销售主管&#39;, 7800, 3000, 800, 30),    (1359, &#39;胡一刀&#39;, &#39;销售员&#39;, 3344, 1800, 200, 30),    (4466, &#39;苗人凤&#39;, &#39;销售员&#39;, 3344, 2500, null, 30),    (3244, &#39;欧阳锋&#39;, &#39;程序员&#39;, 3088, 3200, null, 20),    (3577, &#39;杨过&#39;, &#39;会计&#39;, 5566, 2200, null, 10),    (3588, &#39;朱九真&#39;, &#39;会计&#39;, 5566, 2500, null, 10);</code></pre><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的 SQL 语句。</p><p>使用视图可以获得以下好处：</p><ol><li>可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。</li><li>在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。</li><li>重用 SQL 语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。</li><li>视图可以返回与实体数据表不同格式的数据，在创建视图的时候可以对数据进行格式化处理。</li></ol><p>创建视图。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create view &#96;vw_emp_simple&#96;asselect  &#96;eno&#96;,        &#96;ename&#96;,        &#96;job&#96;,        &#96;dno&#96;  from  &#96;tb_emp&#96;;</code></pre><blockquote><p><strong>提示</strong>：因为视图不包含数据，所以每次使用视图时，都必须执行查询以获得数据，如果你使用了连接查询、嵌套查询创建了较为复杂的视图，你可能会发现查询性能下降得很厉害。因此，在使用复杂的视图前，应该进行测试以确保其性能能够满足应用的需求。</p></blockquote><p>有了上面的视图，我们就可以使用之前讲过的 DCL， 限制某些用户只能从视图中获取员工信息，这样员工表中的工资（<code>sal</code>）、补贴（<code>comm</code>）等敏感字段便不会暴露给用户。下面的代码演示了如何从视图中获取数据。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select * from &#96;vw_emp_simple&#96;;</code></pre><p>查询结果：</p><pre class="language-none"><code class="language-none">+------+-----------+--------------+-----+| eno  | ename     | job          | dno |+------+-----------+--------------+-----+| 1359 | 胡二刀    | 销售员       |  30 || 2056 | 乔峰      | 分析师       |  20 || 3088 | 李莫愁    | 设计师       |  20 || 3211 | 张无忌    | 程序员       |  20 || 3233 | 丘处机    | 程序员       |  20 || 3244 | 欧阳锋    | 程序员       |  20 || 3251 | 张翠山    | 程序员       |  20 || 3344 | 黄蓉      | 销售主管     |  30 || 3577 | 杨过      | 会计         |  10 || 3588 | 朱九真    | 会计         |  10 || 4466 | 苗人凤    | 销售员       |  30 || 5234 | 郭靖      | 出纳         |  10 || 5566 | 宋远桥    | 会计师       |  10 || 7800 | 张三丰    | 总裁         |  20 |+------+-----------+--------------+-----+</code></pre><p>既然视图是一张虚拟的表，那么视图的中的数据可以更新吗？视图的可更新性要视具体情况而定，以下类型的视图是不能更新的：</p><ol><li>使用了聚合函数（<code>SUM</code>、<code>MIN</code>、<code>MAX</code>、<code>AVG</code>、<code>COUNT</code>等）、<code>DISTINCT</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>或者<code>UNION ALL</code>的视图。</li><li><code>SELECT</code>中包含了子查询的视图。</li><li><code>FROM</code>子句中包含了一个不能更新的视图的视图。</li><li><code>WHERE</code>子句的子查询引用了<code>FROM</code>子句中的表的视图。</li></ol><p>删除视图。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop view if exists &#96;vw_emp_simple&#96;;</code></pre><blockquote><p><strong>说明</strong>：如果希望更新视图，可以先用上面的命令删除视图，也可以通过<code>create or replace view</code>来更新视图。</p></blockquote><p>视图的规则和限制。</p><ol><li>视图可以嵌套，可以利用从其他视图中检索的数据来构造一个新的视图。视图也可以和表一起使用。</li><li>创建视图时可以使用<code>order by</code>子句，但如果从视图中检索数据时也使用了<code>order by</code>，那么该视图中原先的<code>order by</code>会被覆盖。</li><li>视图无法使用索引，也不会激发触发器（实际开发中因为性能等各方面的考虑，通常不建议使用触发器，所以我们也不对这个概念进行介绍）的执行。</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>MySQL 中的函数跟 Python 中的函数大同小异，因为函数都是用来封装功能上相对独立且会被重复使用的代码的。如果非要找出一些差别来，那么 MySQL 中的函数是可以执行 SQL 语句的。下面的例子，我们通过自定义函数实现了截断超长字符串的功能。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">delimiter $$create function fn_truncate_string(    content varchar(10000),    max_length int unsigned) returns varchar(10000) no sqlbegin    declare result varchar(10000) default content;    if char_length(content) &gt; max_length then        set result &#x3D; left(content, max_length);        set result &#x3D; concat(result, &#39;……&#39;);    end if;    return result;end $$delimiter ;</code></pre><blockquote><p><strong>说明1</strong>：函数声明后面的<code>no sql</code>是声明函数体并没有使用 SQL 语句；如果函数体中需要通过 SQL 读取数据，需要声明为<code>reads sql data</code>。</p><p><strong>说明2</strong>：定义函数前后的<code>delimiter</code>命令是为了修改终止符（定界符），因为函数体中的语句都是用<code>;</code>表示结束，如果不重新定义定界符，那么遇到的<code>;</code>的时候代码就会被截断执行，显然这不是我们想要的效果。</p></blockquote><p>在查询中调用自定义函数。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select fn_truncate_string(&#39;和我在成都的街头走一走，直到所有的灯都熄灭了也不停留&#39;, 10) as short_string;</code></pre><pre class="language-none"><code class="language-none">+--------------------------------------+| short_string                         |+--------------------------------------+| 和我在成都的街头走一……                 |+--------------------------------------+</code></pre><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>过程（又称存储过程）是事先编译好存储在数据库中的一组 SQL 的集合，调用过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能也是有帮助的。其实迄今为止，我们使用的 SQL 语句都是针对一个或多个表的单条语句，但在实际开发中经常会遇到某个操作需要多条 SQL 语句才能完成的情况。例如，电商网站在受理用户订单时，需要做以下一系列的处理。 </p><ol><li>通过查询来核对库存中是否有对应的物品以及库存是否充足。</li><li>如果库存有物品，需要锁定库存以确保这些物品不再卖给别人， 并且要减少可用的物品数量以反映正确的库存量。</li><li>如果库存不足，可能需要进一步与供应商进行交互或者至少产生一条系统提示消息。 </li><li>不管受理订单是否成功，都需要产生流水记录，而且需要给对应的用户产生一条通知信息。</li></ol><p>我们可以通过过程将复杂的操作封装起来，这样不仅有助于保证数据的一致性，而且将来如果业务发生了变动，只需要调整和修改过程即可。对于调用过程的用户来说，过程并没有暴露数据表的细节，而且执行过程比一条条的执行一组 SQL 要快得多。</p><p>下面的过程实现 hrs 数据库中员工工资的普调，具体的规则是：<code>10</code>部门的员工薪资上浮<code>300</code>， <code>20</code>部门的员工薪资上浮<code>800</code>，<code>30</code>部门的员工薪资上浮<code>500</code>。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">delimiter $$create procedure sp_upgrade_salary()begin    declare flag boolean default 1;    -- 定义一个异常处理器    declare continue handler for sqlexception set flag&#x3D;0;    -- 开启事务环境    start transaction;        update tb_emp set sal&#x3D;sal+300 where dno&#x3D;10;    update tb_emp set sal&#x3D;sal+800 where dno&#x3D;20;    update tb_emp set sal&#x3D;sal+500 where dno&#x3D;30;    -- 提交或回滚事务    if flag then        commit;    else        rollback;    end if;end $$delimiter ;</code></pre><blockquote><p><strong>说明</strong>：上面的过程代码中使用了<code>start transaction</code>来开启事务环境，关于事务，在本课的最后有一个简单的介绍。为了确定代码中是否发生异常，从而提交或回滚事务，上面的过程中定义了一个名为<code>flag</code>的变量和一个异常处理器，如果发生了异常，<code>flag</code>将会被赋值为<code>0</code>，后面的分支结构会根据<code>flag</code>的值来决定是执行<code>commit</code>，还是执行<code>rollback</code>。</p></blockquote><p>调用过程。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">call sp_upgrade_salary();</code></pre><p>删除过程。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop procedure if exists sp_upgrade_salary;</code></pre><p>在过程中，我们可以定义变量、条件，可以使用分支和循环语句，可以通过游标操作查询结果，还可以使用事件调度器，这些内容我们暂时不在此处进行介绍。虽然我们说了很多过程的好处，但是在实际开发中，如果频繁的使用过程并将大量复杂的运算放到过程中，会给据库服务器造成巨大的压力，而数据库往往都是性能瓶颈所在，使用过程无疑是雪上加霜的操作。所以，对于互联网产品开发，我们一般建议让数据库只做好存储，复杂的运算和处理交给应用服务器上的程序去完成，如果应用服务器变得不堪重负了，我们可以比较容易的部署多台应用服务器来分摊这些压力。</p><p>如果大家对上面讲到的视图、函数、过程包括我们没有讲到的触发器这些知识有兴趣，建议大家阅读 MySQL 的入门读物<a href="https://item.jd.com/12818982.html">《MySQL必知必会》</a>进行一般性了解即可，因为这些知识点在大家将来的工作中未必用得上，学了也可能仅仅是为了应付面试而已。</p><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="范式理论"><a href="#范式理论" class="headerlink" title="范式理论"></a>范式理论</h4><p>范式理论是设计关系型数据库中二维表的指导思想。</p><ol><li>第一范式：数据表的每个列的值域都是由原子值组成的，不能够再分割。</li><li>第二范式：数据表里的所有数据都要和该数据表的键（主键与候选键）有完全依赖关系。</li><li>第三范式：所有非键属性都只和候选键有相关性，也就是说非键属性之间应该是独立无关的。</li></ol><blockquote><p><strong>说明</strong>：实际工作中，出于效率的考虑，我们在设计表时很有可能做出反范式设计，即故意降低方式级别，增加冗余数据来获得更好的操作性能。</p></blockquote><h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><ol><li><p>实体完整性 - 每个实体都是独一无二的</p><ul><li>主键（<code>primary key</code>） &#x2F; 唯一约束（<code>unique</code>）</li></ul></li><li><p>引用完整性（参照完整性）- 关系中不允许引用不存在的实体</p><ul><li>外键（<code>foreign key</code>）</li></ul></li><li><p>域（domain）完整性 - 数据是有效的</p><ul><li><p>数据类型及长度</p></li><li><p>非空约束（<code>not null</code>）</p></li><li><p>默认值约束（<code>default</code>）</p></li><li><p>检查约束（<code>check</code>）</p><blockquote><p><strong>说明</strong>：在 MySQL 8.x 以前，检查约束并不起作用。</p></blockquote></li></ul></li></ol><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4><ol><li><p>事务：一系列对数据库进行读&#x2F;写的操作，这些操作要么全都成功，要么全都失败。</p></li><li><p>事务的 ACID 特性</p><ul><li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态</li><li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ul></li><li><p>MySQL 中的事务操作</p><ul><li><p>开启事务环境</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">start transaction</code></pre></li><li><p>提交事务</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">commit</code></pre></li><li><p>回滚事务</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">rollback</code></pre></li></ul></li><li><p>查看事务隔离级别</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">show variables like &#39;transaction_isolation&#39;;</code></pre> <pre class="language-none"><code class="language-none">+-----------------------+-----------------+| Variable_name         | Value           |+-----------------------+-----------------+| transaction_isolation | REPEATABLE-READ |+-----------------------+-----------------+</code></pre><p> 可以看出，MySQL 默认的事务隔离级别是<code>REPEATABLE-READ</code>。</p></li><li><p>修改（当前会话）事务隔离级别</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">set session transaction isolation level read committed;</code></pre><p> 重新查看事务隔离级别，结果如下所示。</p> <pre class="language-none"><code class="language-none">+-----------------------+----------------+| Variable_name         | Value          |+-----------------------+----------------+| transaction_isolation | READ-COMMITTED |+-----------------------+----------------+</code></pre></li></ol><p>关系型数据库的事务是一个很大的话题，因为当存在多个并发事务访问数据时，就有可能出现三类读数据的问题（脏读、不可重复读、幻读）和两类更新数据的问题（第一类丢失更新、第二类丢失更新）。想了解这五类问题的，可以阅读我发布在 CSDN 网站上的<a href="https://blog.csdn.net/jackfrued/article/details/44921941">《Java面试题全集（上）》</a>一文的第80题。为了避免这些问题，关系型数据库底层是有对应的锁机制的，按锁定对象不同可以分为表级锁和行级锁，按并发事务锁定关系可以分为共享锁和独占锁。然而直接使用锁是非常麻烦的，为此数据库为用户提供了自动锁机制，只要用户指定适当的事务隔离级别，数据库就会通过分析 SQL 语句，然后为事务访问的资源加上合适的锁。此外，数据库还会维护这些锁通过各种手段提高系统的性能，这些对用户来说都是透明的。想了解 MySQL 事务和锁的细节知识，推荐大家阅读进阶读物<a href="https://item.jd.com/11220393.html">《高性能MySQL》</a>，这也是数据库方面的经典书籍。</p><p>ANSI&#x2F;ISO SQL 92标准定义了4个等级的事务隔离级别，如下表所示。需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定到底使用哪种事务隔离级别，这个地方没有万能的原则。</p><img src="http://localhost/mypic/20211121225327.png" style="zoom:50%;"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于 MySQL 的知识肯定远远不止上面列出的这些，比如 MySQL 性能调优、MySQL 运维相关工具、MySQL 数据的备份和恢复、监控 MySQL 服务、部署高可用架构等，这一系列的问题在这里都没有办法逐一展开来讨论，那就留到有需要的时候再进行讲解吧，各位读者也可以自行探索。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>43.索引</title>
      <link href="/2024/07/01/43.suo-yin/"/>
      <url>/2024/07/01/43.suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是关系型数据库中用来提升查询性能最为重要的手段。关系型数据库中的索引就像一本书的目录，我们可以想象一下，如果要从一本书中找出某个知识点，但是这本书没有目录，这将是一件多么可怕的事情！我们估计得一篇一篇的翻下去，才能确定这个知识点到底在什么位置。创建索引虽然会带来存储空间上的开销，就像一本书的目录会占用一部分篇幅一样，但是在牺牲空间后换来的查询时间的减少也是非常显著的。</p><p>MySQL 数据库中所有数据类型的列都可以被索引。对于MySQL 8.0 版本的 InnoDB 存储引擎来说，它支持三种类型的索引，分别是 B+ 树索引、全文索引和 R 树索引。这里，我们只介绍使用得最为广泛的 B+ 树索引。使用 B+ 树的原因非常简单，因为它是目前在基于磁盘进行海量数据存储和排序上最有效率的数据结构。B+ 树是一棵<a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B3%E8%A1%A1%E6%A0%91">平衡树</a>，树的高度通常为3或4，但是却可以保存从百万级到十亿级的数据，而从这些数据里面查询一条数据，只需要3次或4次 I&#x2F;O 操作。</p><p>B+ 树由根节点、中间节点和叶子节点构成，其中叶子节点用来保存排序后的数据。由于记录在索引上是排序过的，因此在一个叶子节点内查找数据时可以使用二分查找，这种查找方式效率非常的高。当数据很少的时候，B+ 树只有一个根节点，数据也就保存在根节点上。随着记录越来越多，B+ 树会发生分裂，根节点不再保存数据，而是提供了访问下一层节点的指针，帮助快速确定数据在哪个叶子节点上。</p><p>在创建二维表时，我们通常都会为表指定主键列，主键列上默认会创建索引，而对于 MySQL InnoDB 存储引擎来说，因为它使用的是索引组织表这种数据存储结构，所以主键上的索引就是整张表的数据，而这种索引我们也将其称之为<strong>聚集索引</strong>（clustered index）。很显然，一张表只能有一个聚集索引，否则表的数据岂不是要保存多次。我们自己创建的索引都是二级索引（secondary index），更常见的叫法是<strong>非聚集索引</strong>（non-clustered index）。通过我们自定义的非聚集索引只能定位记录的主键，在获取数据时可能需要再通过主键上的聚集索引进行查询，这种现象称为“回表”，因此通过非聚集索引检索数据通常比使用聚集索引检索数据要慢。</p><p>接下来我们通过一个简单的例子来说明索引的意义，比如我们要根据学生的姓名来查找学生，这个场景在实际开发中应该经常遇到，就跟通过商品名称查找商品是一个道理。我们可以使用 MySQL 的<code>explain</code>关键字来查看 SQL 的执行计划（数据库执行 SQL 语句的具体步骤）。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">explain select * from tb_student where stuname&#x3D;&#39;林震南&#39;\G</code></pre><pre class="language-none"><code class="language-none">*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_student   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 11     filtered: 10.00        Extra: Using where1 row in set, 1 warning (0.00 sec)</code></pre><p>在上面的 SQL 执行计划中，有几项值得我们关注：</p><ol><li><code>select_type</code>：查询的类型。<ul><li><code>SIMPLE</code>：简单 SELECT，不需要使用 UNION 操作或子查询。</li><li><code>PRIMARY</code>：如果查询包含子查询，最外层的 SELECT 被标记为 PRIMARY。</li><li><code>UNION</code>：UNION 操作中第二个或后面的 SELECT 语句。</li><li><code>SUBQUERY</code>：子查询中的第一个 SELECT。</li><li><code>DERIVED</code>：派生表的 SELECT 子查询。</li></ul></li><li><code>table</code>：查询对应的表。</li><li><code>type</code>：MySQL 在表中找到满足条件的行的方式，也称为访问类型，包括：<code>ALL</code>（全表扫描）、<code>index</code>（索引全扫描，只遍历索引树）、<code>range</code>（索引范围扫描）、<code>ref</code>（非唯一索引扫描）、<code>eq_ref</code>（唯一索引扫描）、<code>const</code> &#x2F; <code>system</code>（常量级查询）、<code>NULL</code>（不需要访问表或索引）。在所有的访问类型中，很显然 ALL 是性能最差的，它代表的全表扫描是指要扫描表中的每一行才能找到匹配的行。</li><li><code>possible_keys</code>：MySQL 可以选择的索引，但是<strong>有可能不会使用</strong>。</li><li><code>key</code>：MySQL 真正使用的索引，如果为<code>NULL</code>就表示没有使用索引。</li><li><code>key_len</code>：使用的索引的长度，在不影响查询的情况下肯定是长度越短越好。</li><li><code>rows</code>：执行查询需要扫描的行数，这是一个<strong>预估值</strong>。</li><li><code>extra</code>：关于查询额外的信息。<ul><li><code>Using filesort</code>：MySQL 无法利用索引完成排序操作。</li><li><code>Using index</code>：只使用索引的信息而不需要进一步查表来获取更多的信息。</li><li><code>Using temporary</code>：MySQL 需要使用临时表来存储结果集，常用于分组和排序。</li><li><code>Impossible where</code>：<code>where</code>子句会导致没有符合条件的行。</li><li><code>Distinct</code>：MySQL 发现第一个匹配行后，停止为当前的行组合搜索更多的行。</li><li><code>Using where</code>：查询的列未被索引覆盖，筛选条件并不是索引的前导列。</li></ul></li></ol><p>从上面的执行计划可以看出，当我们通过学生名字查询学生时实际上是进行了全表扫描，不言而喻这个查询性能肯定是非常糟糕的，尤其是在表中的行很多的时候。如果我们需要经常通过学生姓名来查询学生，那么就应该在学生姓名对应的列上创建索引，通过索引来加速查询。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create index idx_student_name on tb_student(stuname);</code></pre><p>再次查看刚才的 SQL 对应的执行计划。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">explain select * from tb_student where stuname&#x3D;&#39;林震南&#39;\G</code></pre><pre class="language-none"><code class="language-none">*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_student   partitions: NULL         type: refpossible_keys: idx_student_name          key: idx_student_name      key_len: 62          ref: const         rows: 1     filtered: 100.00        Extra: NULL1 row in set, 1 warning (0.00 sec)</code></pre><p>可以注意到，在对学生姓名创建索引后，刚才的查询已经不是全表扫描而是基于索引的查询，而且扫描的行只有唯一的一行，这显然大大的提升了查询的性能。MySQL 中还允许创建前缀索引，即对索引字段的前N个字符创建索引，这样的话可以减少索引占用的空间（但节省了空间很有可能会浪费时间，<strong>时间和空间是不可调和的矛盾</strong>），如下所示。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create index idx_student_name_1 on tb_student(stuname(1));</code></pre><p>上面的索引相当于是根据学生姓名的第一个字来创建的索引，我们再看看 SQL 执行计划。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">explain select * from tb_student where stuname&#x3D;&#39;林震南&#39;\G</code></pre><pre class="language-none"><code class="language-none">*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_student   partitions: NULL         type: refpossible_keys: idx_student_name          key: idx_student_name      key_len: 5          ref: const         rows: 2     filtered: 100.00        Extra: Using where1 row in set, 1 warning (0.00 sec)</code></pre><p>不知道大家是否注意到，这一次扫描的行变成了2行，因为学生表中有两个姓“林”的学生，我们只用姓名的第一个字作为索引的话，在查询时通过索引就会找到这两行。</p><p>如果要删除索引，可以使用下面的SQL。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table tb_student drop index idx_student_name;</code></pre><p>或者</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop index idx_student_name on tb_student;</code></pre><p>在创建索引时，我们还可以使用复合索引、函数索引（MySQL 5.7 开始支持），用好复合索引实现<strong>索引覆盖</strong>可以减少不必要的排序和回表操作，这样就会让查询的性能成倍的提升，有兴趣的读者可以自行研究。</p><p>我们简单的为大家总结一下索引的设计原则：</p><ol><li><strong>最适合</strong>索引的列是出现在<strong>WHERE子句</strong>和连接子句中的列。</li><li>索引列的基数越大（取值多、重复值少），索引的效果就越好。</li><li>使用<strong>前缀索引</strong>可以减少索引占用的空间，内存中可以缓存更多的索引。</li><li><strong>索引不是越多越好</strong>，虽然索引加速了读操作（查询），但是写操作（增、删、改）都会变得更慢，因为数据的变化会导致索引的更新，就如同书籍章节的增删需要更新目录一样。</li><li>使用 InnoDB 存储引擎时，表的普通索引都会保存主键的值，所以<strong>主键要尽可能选择较短的数据类型</strong>，这样可以有效的减少索引占用的空间，提升索引的缓存效果。</li></ol><p>最后，还有一点需要说明，InnoDB 使用的 B-tree 索引，数值类型的列除了等值判断时索引会生效之外，使用<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>BETWEEN...AND... </code>、<code>&lt;&gt;</code>时，索引仍然生效；对于字符串类型的列，如果使用不以通配符开头的模糊查询，索引也是起作用的，但是其他的情况会导致索引失效，这就意味着很有可能会做全表查询。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>44.Python接入MySQL数据库</title>
      <link href="/2024/07/01/44.python-jie-ru-mysql-shu-ju-ku/"/>
      <url>/2024/07/01/44.python-jie-ru-mysql-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="Python接入MySQL数据库"><a href="#Python接入MySQL数据库" class="headerlink" title="Python接入MySQL数据库"></a>Python接入MySQL数据库</h2><p>在 Python3 中，我们可以使用<code>mysqlclient</code>或者<code>pymysql</code>三方库来接入 MySQL 数据库并实现数据持久化操作。二者的用法完全相同，只是导入的模块名不一样。我们推荐大家使用纯 Python 的三方库<code>pymysql</code>，因为它更容易安装成功。下面我们仍然以之前创建的名为<code>hrs</code>的数据库为例，为大家演示如何通过 Python 程序操作 MySQL 数据库实现数据持久化操作。</p><h3 id="接入MySQL"><a href="#接入MySQL" class="headerlink" title="接入MySQL"></a>接入MySQL</h3><p>首先，我们可以在命令行或者 PyCharm 的终端中通过下面的命令安装<code>pymysql</code>，如果需要接入 MySQL 8，还需要安装一个名为<code>cryptography</code>的三方库来支持 MySQL 8 的密码认证方式。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install pymysql cryptography</code></pre><p>使用<code>pymysql</code>操作 MySQL 的步骤如下所示：</p><ol><li>创建连接。MySQL 服务器启动后，提供了基于 TCP （传输控制协议）的网络服务。我们可以通过<code>pymysql</code>模块的<code>connect</code>函数连接 MySQL 服务器。在调用<code>connect</code>函数时，需要指定主机（<code>host</code>）、端口（<code>port</code>）、用户名（<code>user</code>）、口令（<code>password</code>）、数据库（<code>database</code>）、字符集（<code>charset</code>）等参数，该函数会返回一个<code>Connection</code>对象。</li><li>获取游标。连接 MySQL 服务器成功后，接下来要做的就是向数据库服务器发送 SQL 语句，MySQL 会执行接收到的 SQL 并将执行结果通过网络返回。要实现这项操作，需要先通过连接对象的<code>cursor</code>方法获取游标（<code>Cursor</code>）对象。</li><li>发出 SQL。通过游标对象的<code>execute</code>方法，我们可以向数据库发出 SQL 语句。</li><li>如果执行<code>insert</code>、<code>delete</code>或<code>update</code>操作，需要根据实际情况提交或回滚事务。因为创建连接时，默认开启了事务环境，在操作完成后，需要使用连接对象的<code>commit</code>或<code>rollback</code>方法，实现事务的提交或回滚，<code>rollback</code>方法通常会放在异常捕获代码块<code>except</code>中。如果执行<code>select</code>操作，需要通过游标对象抓取查询的结果，对应的方法有三个，分别是：<code>fetchone</code>、<code>fetchmany</code>和<code>fetchall</code>。其中<code>fetchone</code>方法会抓取到一条记录，并以元组或字典的方式返回；<code>fetchmany</code>和<code>fetchall</code>方法会抓取到多条记录，以嵌套元组或列表装字典的方式返回。</li><li>关闭连接。在完成持久化操作后，请不要忘记关闭连接，释放外部资源。我们通常会在<code>finally</code>代码块中使用连接对象的<code>close</code>方法来关闭连接。</li></ol><h3 id="代码实操"><a href="#代码实操" class="headerlink" title="代码实操"></a>代码实操</h3><p>下面，我们通过代码实操的方式为大家演示上面说的五个步骤。</p><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysqlno &#x3D; int(input(&#39;部门编号: &#39;))name &#x3D; input(&#39;部门名称: &#39;)location &#x3D; input(&#39;部门所在地: &#39;)# 1. 创建连接（Connection）conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306,                       user&#x3D;&#39;guest&#39;, password&#x3D;&#39;Guest.618&#39;,                       database&#x3D;&#39;hrs&#39;, charset&#x3D;&#39;utf8mb4&#39;)try:    # 2. 获取游标对象（Cursor）    with conn.cursor() as cursor:        # 3. 通过游标对象向数据库服务器发出SQL语句        affected_rows &#x3D; cursor.execute(            &#39;insert into &#96;tb_dept&#96; values (%s, %s, %s)&#39;,            (no, name, location)        )        if affected_rows &#x3D;&#x3D; 1:            print(&#39;新增部门成功!!!&#39;)    # 4. 提交事务（transaction）    conn.commit()except pymysql.MySQLError as err:    # 4. 回滚事务    conn.rollback()    print(type(err), err)finally:    # 5. 关闭连接释放资源    conn.close()</code></pre><blockquote><p><strong>说明</strong>：上面的<code>127.0.0.1</code>称为回环地址，它代表的是本机。下面的<code>guest</code>是我提前创建好的用户，该用户拥有对<code>hrs</code>数据库的<code>insert</code>、<code>delete</code>、<code>update</code>和<code>select</code>权限。我们不建议大家在项目中直接使用<code>root</code>超级管理员账号访问数据库，这样做实在是太危险了。我们可以使用下面的命令创建名为<code>guest</code>的用户并为其授权。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create user &#39;guest&#39;@&#39;%&#39; identified by &#39;Guest.618&#39;;grant insert, delete, update, select on &#96;hrs&#96;.* to &#39;guest&#39;@&#39;%&#39;;</code></pre></blockquote><p>如果要插入大量数据，建议使用游标对象的<code>executemany</code>方法做批处理（一个<code>insert</code>操作后面跟上多组数据），大家可以尝试向一张表插入10000条记录，然后看看不使用批处理一条条的插入和使用批处理有什么差别。游标对象的<code>executemany</code>方法第一个参数仍然是 SQL 语句，第二个参数可以是包含多组数据的列表或元组。</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysqlno &#x3D; int(input(&#39;部门编号: &#39;))# 1. 创建连接（Connection）conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306,                       user&#x3D;&#39;guest&#39;, password&#x3D;&#39;Guest.618&#39;,                       database&#x3D;&#39;hrs&#39;, charset&#x3D;&#39;utf8mb4&#39;,                       autocommit&#x3D;True)try:    # 2. 获取游标对象（Cursor）    with conn.cursor() as cursor:        # 3. 通过游标对象向数据库服务器发出SQL语句        affected_rows &#x3D; cursor.execute(            &#39;delete from &#96;tb_dept&#96; where &#96;dno&#96;&#x3D;%s&#39;,            (no, )        )        if affected_rows &#x3D;&#x3D; 1:            print(&#39;删除部门成功!!!&#39;)finally:    # 5. 关闭连接释放资源    conn.close()</code></pre><blockquote><p><strong>说明</strong>：如果不希望每次 SQL 操作之后手动提交或回滚事务，可以<code>connect</code>函数中加一个名为<code>autocommit</code>的参数并将它的值设置为<code>True</code>，表示每次执行 SQL 成功后自动提交。但是我们建议大家手动提交或回滚，这样可以根据实际业务需要来构造事务环境。如果不愿意捕获异常并进行处理，可以在<code>try</code>代码块后直接跟<code>finally</code>块，省略<code>except</code>意味着发生异常时，代码会直接崩溃并将异常栈显示在终端中。</p></blockquote><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysqlno &#x3D; int(input(&#39;部门编号: &#39;))name &#x3D; input(&#39;部门名称: &#39;)location &#x3D; input(&#39;部门所在地: &#39;)# 1. 创建连接（Connection）conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306,                       user&#x3D;&#39;guest&#39;, password&#x3D;&#39;Guest.618&#39;,                       database&#x3D;&#39;hrs&#39;, charset&#x3D;&#39;utf8mb4&#39;)try:    # 2. 获取游标对象（Cursor）    with conn.cursor() as cursor:        # 3. 通过游标对象向数据库服务器发出SQL语句        affected_rows &#x3D; cursor.execute(            &#39;update &#96;tb_dept&#96; set &#96;dname&#96;&#x3D;%s, &#96;dloc&#96;&#x3D;%s where &#96;dno&#96;&#x3D;%s&#39;,            (name, location, no)        )        if affected_rows &#x3D;&#x3D; 1:            print(&#39;更新部门信息成功!!!&#39;)    # 4. 提交事务    conn.commit()except pymysql.MySQLError as err:    # 4. 回滚事务    conn.rollback()    print(type(err), err)finally:    # 5. 关闭连接释放资源    conn.close()</code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><ol><li>查询部门表的数据。</li></ol><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysql# 1. 创建连接（Connection）conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306,                       user&#x3D;&#39;guest&#39;, password&#x3D;&#39;Guest.618&#39;,                       database&#x3D;&#39;hrs&#39;, charset&#x3D;&#39;utf8mb4&#39;)try:    # 2. 获取游标对象（Cursor）    with conn.cursor() as cursor:        # 3. 通过游标对象向数据库服务器发出SQL语句        cursor.execute(&#39;select &#96;dno&#96;, &#96;dname&#96;, &#96;dloc&#96; from &#96;tb_dept&#96;&#39;)        # 4. 通过游标对象抓取数据        row &#x3D; cursor.fetchone()        while row:            print(row)            row &#x3D; cursor.fetchone()except pymysql.MySQLError as err:    print(type(err), err)finally:    # 5. 关闭连接释放资源    conn.close()</code></pre><blockquote><p><strong>说明</strong>：上面的代码中，我们通过构造一个<code>while</code>循环实现了逐行抓取查询结果的操作。这种方式特别适合查询结果有非常多行的场景。因为如果使用<code>fetchall</code>一次性将所有记录抓取到一个嵌套元组中，会造成非常大的内存开销，这在很多场景下并不是一个好主意。如果不愿意使用<code>while</code>循环，还可以考虑使用<code>iter</code>函数构造一个迭代器来逐行抓取数据，有兴趣的读者可以自行研究。</p></blockquote><ol start="2"><li>分页查询员工表的数据。</li></ol><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysqlpage &#x3D; int(input(&#39;页码: &#39;))size &#x3D; int(input(&#39;大小: &#39;))# 1. 创建连接（Connection）con &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306,                      user&#x3D;&#39;guest&#39;, password&#x3D;&#39;Guest.618&#39;,                      database&#x3D;&#39;hrs&#39;, charset&#x3D;&#39;utf8&#39;)try:    # 2. 获取游标对象（Cursor）    with con.cursor(pymysql.cursors.DictCursor) as cursor:        # 3. 通过游标对象向数据库服务器发出SQL语句        cursor.execute(            &#39;select &#96;eno&#96;, &#96;ename&#96;, &#96;job&#96;, &#96;sal&#96; from &#96;tb_emp&#96; order by &#96;sal&#96; desc limit %s,%s&#39;,            ((page - 1) * size, size)        )        # 4. 通过游标对象抓取数据        for emp_dict in cursor.fetchall():            print(emp_dict)finally:    # 5. 关闭连接释放资源    con.close()</code></pre><h3 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>下面我们为大家讲解一个将数据库表数据导出到 Excel 文件的例子，我们需要先安装<code>openpyxl</code>三方库，命令如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install openpyxl</code></pre><p>接下来，我们通过下面的代码实现了将数据库<code>hrs</code>中所有员工的编号、姓名、职位、月薪、补贴和部门名称导出到一个 Excel 文件中。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import openpyxlimport pymysql# 创建工作簿对象workbook &#x3D; openpyxl.Workbook()# 获得默认的工作表sheet &#x3D; workbook.active# 修改工作表的标题sheet.title &#x3D; &#39;员工基本信息&#39;# 给工作表添加表头sheet.append((&#39;工号&#39;, &#39;姓名&#39;, &#39;职位&#39;, &#39;月薪&#39;, &#39;补贴&#39;, &#39;部门&#39;))# 创建连接（Connection）conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306,                       user&#x3D;&#39;guest&#39;, password&#x3D;&#39;Guest.618&#39;,                       database&#x3D;&#39;hrs&#39;, charset&#x3D;&#39;utf8mb4&#39;)try:    # 获取游标对象（Cursor）    with conn.cursor() as cursor:        # 通过游标对象执行SQL语句        cursor.execute(            &#39;select &#96;eno&#96;, &#96;ename&#96;, &#96;job&#96;, &#96;sal&#96;, coalesce(&#96;comm&#96;, 0), &#96;dname&#96; &#39;            &#39;from &#96;tb_emp&#96; natural join &#96;tb_dept&#96;&#39;        )        # 通过游标抓取数据        row &#x3D; cursor.fetchone()        while row:            # 将数据逐行写入工作表中            sheet.append(row)            row &#x3D; cursor.fetchone()    # 保存工作簿    workbook.save(&#39;hrs.xlsx&#39;)except pymysql.MySQLError as err:    print(err)finally:    # 关闭连接释放资源    conn.close()</code></pre><p>大家可以参考上面的例子，试一试把 Excel 文件的数据导入到指定数据库的指定表中，看看是否可以成功。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45.大数据平台和HiveSQL</title>
      <link href="/2024/07/01/45.da-shu-ju-ping-tai-he-hivesql/"/>
      <url>/2024/07/01/45.da-shu-ju-ping-tai-he-hivesql/</url>
      
        <content type="html"><![CDATA[<h2 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h2><p><a href="https://hive.apache.org/">Hive</a> 是 Facebook 开源的一款基于 Hadoop 的数据仓库工具，目前由 Apache 软件基金会维护，它是应用最广泛的大数据处理解决方案，它能将 SQL 查询转变为 MapReduce（Google提出的一个软件架构，用于大规模数据集的并行运算）任务，对 SQL 提供了完美的支持，能够非常方便的实现大数据统计。</p><img src="res/sql_to_mr.png" style="zoom:50%;"><img src="res/HADOOP-ECOSYSTEM-Edureka.png"><blockquote><p><strong>说明</strong>：可以通过<a href="https://www.edureka.co/blog/hadoop-ecosystem">https://www.edureka.co/blog/hadoop-ecosystem</a>来了解 Hadoop 生态圈。</p></blockquote><p>如果要简单的介绍 Hive，那么以下两点是其核心：</p><ol><li>把 HDFS 中结构化的数据映射成表。</li><li>通过把 HQL 进行解析和转换，最终生成一系列基于 Hadoop 的 MapReduce 任务或 Spark 任务，通过执行这些任务完成对数据的处理。也就是说，即便不学习 Java、Scala 这样的编程语言，一样可以实现对数据的处理。</li></ol><p>Hive的应用场景。</p><img src="res/what_hive_can_do.png" style="zoom:50%;"><img src="res/what_hive_can_not_do.png" style="zoom:35%;"><p>Hive和传统关系型数据库的对比如下图和下表所示。</p><img src="res/hive_vs_rdbms.png" style="zoom:50%;"><table><thead><tr><th></th><th>Hive</th><th>RDBMS</th></tr></thead><tbody><tr><td>查询语言</td><td>HQL</td><td>SQL</td></tr><tr><td>存储数据</td><td>HDFS</td><td>本地文件系统</td></tr><tr><td>执行方式</td><td>MapReduce &#x2F; Spark</td><td>Executor</td></tr><tr><td>执行延迟</td><td>高</td><td>低</td></tr><tr><td>数据规模</td><td>大</td><td>小</td></tr></tbody></table><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>搭建如下图所示的大数据平台。</p> <img src="res/20220210080638.png" style="zoom:60%;"></li><li><p>通过Client节点（跳板机）访问大数据平台。</p> <img src="res/20220210080655.png" style="zoom:50%;"></li><li><p>创建文件Hadoop的文件系统。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">hdfs dfs -mkdir &#x2F;user&#x2F;root</code></pre></li><li><p>将准备好的数据文件拷贝到Hadoop文件系统中。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">hdfs dfs -put &#x2F;home&#x2F;ubuntu&#x2F;data&#x2F;* &#x2F;user&#x2F;root</code></pre></li><li><p>进入 hive 命令行。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">hive</code></pre></li></ol><h3 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h3><ol><li><p>创建。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">create database eshop;</code></pre></li><li><p>删除。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop database eshop cascade;</code></pre></li><li><p>切换。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">use eshop;</code></pre></li></ol><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Hive的数据类型如下所示。</p><img src="res/hive_data_types.png" style="zoom:50%;"><p>基本数据类型：</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>支持版本</th></tr></thead><tbody><tr><td>tinyint</td><td>1-Byte</td><td></td></tr><tr><td>smallint</td><td>2-Byte</td><td></td></tr><tr><td>int</td><td>4-Byte</td><td></td></tr><tr><td>bigint</td><td>8-Byte</td><td></td></tr><tr><td>boolean</td><td></td><td></td></tr><tr><td>float</td><td>4-Byte</td><td></td></tr><tr><td>double</td><td>8-Byte</td><td></td></tr><tr><td>string</td><td></td><td></td></tr><tr><td>binary</td><td></td><td>0.8版本</td></tr><tr><td>timestamp</td><td></td><td>0.8版本</td></tr><tr><td>decimal</td><td></td><td>0.11版本</td></tr><tr><td>char</td><td></td><td>0.13版本</td></tr><tr><td>varchar</td><td></td><td>0.12版本</td></tr><tr><td>date</td><td></td><td>0.12版本</td></tr></tbody></table><p>复合数据类型：</p><table><thead><tr><th>数据类型</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>struct</td><td>和C语言中的结构体类似</td><td><code>struct&lt;first_name:string, last_name:string&gt;</code></td></tr><tr><td>map</td><td>由键值对构成的元素的集合</td><td><code>map&lt;string,int&gt;</code></td></tr><tr><td>array</td><td>具有相同类型的变量的容器</td><td><code>array&lt;string&gt;</code></td></tr></tbody></table><ol start="4"><li><p>创建内部表。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">create table if not exists dim_user_info (user_id string,user_name string, sex string,age int,city string,firstactivetime string,level int,extra1 string,extra2 map&lt;string,string&gt;)row format delimited fields terminated by &#39;\t&#39;collection items terminated by &#39;,&#39;map keys terminated by &#39;:&#39;lines terminated by &#39;\n&#39;stored as textfile;</code></pre></li><li><p>加载数据。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">load data local inpath &#39;&#x2F;home&#x2F;ubuntu&#x2F;data&#x2F;user_info&#x2F;user_info.txt&#39; overwrite into table dim_user_info;</code></pre><p> 或</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">load data inpath &#39;&#x2F;user&#x2F;root&#x2F;user_info.txt&#39; overwrite into table dim_user_info;</code></pre></li><li><p>创建分区表。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">create table if not exists fact_user_trade (user_name string,piece int,price double,pay_amount double,goods_category string,pay_time bigint)  partitioned by (dt string)row format delimited fields terminated by &#39;\t&#39;;</code></pre></li><li><p>提供分区数据。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">hdfs dfs -put &#x2F;home&#x2F;ubuntu&#x2F;data&#x2F;user_trade&#x2F;* &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;eshop.db&#x2F;fact_user_trade</code></pre></li><li><p>设置动态分区。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">set hive.exec.dynamic.partition&#x3D;true;set hive.exec.dynamic.partition.mode&#x3D;nonstrict;set hive.exec.max.dynamic.partitions&#x3D;10000;set hive.exec.max.dynamic.partitions.pernode&#x3D;10000;</code></pre></li><li><p>修复分区。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">msck repair table fact_user_trade;</code></pre></li></ol><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 查询北京女用户的姓名取前10个select user_name from dim_user_info where city&#x3D;&#39;beijing&#39; and sex&#x3D;&#39;female&#39; limit 10;-- 查询2019年3月24日购买了food类商品的用户名、购买数量和支付金额（不聚合）select user_name, piece, pay_amount from fact_user_trade where dt&#x3D;&#39;2019-03-24&#39; and goods_category&#x3D;&#39;food&#39;;-- 统计用户 ELLA 在2018年的总支付金额和最近最远两次消费间隔天数select sum(pay_amount) as total, datediff(max(from_unixtime(pay_time, &#39;yyyy-MM-dd&#39;)), min(from_unixtime(pay_time, &#39;yyyy-MM-dd&#39;))) from fact_user_trade where year(dt)&#x3D;&#39;2018&#39; and user_name&#x3D;&#39;ELLA&#39;;</code></pre><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 查询2019年1月到4月，每个品类有多少人购买，累计金额是多少select goods_category, count(distinct user_name) as total_user, sum(pay_amount) as total_pay from fact_user_trade where dt between &#39;2019-01-01&#39; and &#39;2019-04-30&#39; group by goods_category;</code></pre><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 查询2019年4月支付金额超过5万元的用户select user_name, sum(pay_amount) as total from fact_user_trade where dt between &#39;2019-04-01&#39; and &#39;2019-04-30&#39; group by user_name having sum(pay_amount) &gt; 50000;</code></pre><pre class="language-hive" data-language="hive"><code class="language-hive">-- 查询2018年购买的商品品类在两个以上的用户数select count(tmp.user_name) from (select user_name, count(distinct goods_category) as total from fact_user_trade where year(dt)&#x3D;&#39;2018&#39; group by user_name having count(distinct goods_category)&gt;2) tmp;</code></pre><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 查询2019年4月支付金额最多的用户前5名select user_name, sum(pay_amount) as total from fact_user_trade where dt between &#39;2019-04-01&#39; and &#39;2019-04-30&#39; group by user_name order by total desc limit 5;</code></pre><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ol><li><p><code>from_unixtime</code>：将时间戳转换成日期</p> <pre class="language-hive" data-language="hive"><code class="language-hive">select from_unixtime(pay_time, &#39;yyyy-MM-dd hh:mm:ss&#39;) from fact_user_trade limit 10;</code></pre></li><li><p><code>unix_timestamp</code>：将日期转换成时间戳</p></li><li><p><code>datediff</code>：计算两个日期的时间差</p> <pre class="language-Hive" data-language="Hive"><code class="language-Hive">-- 用户首次激活时间与设定参照时间的间隔select user_name, datediff(&#39;2019-4-1&#39;, to_date(firstactivetime)) from dim_user_info limit 10;</code></pre></li><li><p><code>if</code>：根据条件返回不同的值</p> <pre class="language-Hive" data-language="Hive"><code class="language-Hive">-- 统计不同年龄段的用户数select case when age &lt; 20 then &#39;20岁以下&#39; when age &lt; 30 then &#39;30岁以下&#39; when age &lt; 40 then &#39;40岁以下&#39; else &#39;40岁以上&#39; end as age_seg, count(distinct user_id) as total from dim_user_info group by case when age &lt; 20 then &#39;20岁以下&#39; when age &lt; 30 then &#39;30岁以下&#39; when age &lt; 40 then &#39;40岁以下&#39; else &#39;40岁以上&#39; end;</code></pre> <pre class="language-Hive" data-language="Hive"><code class="language-Hive">-- 不同性别高级等用户数量select sex, if(level &gt; 5, &#39;高&#39;, &#39;低&#39;) as level_type, count(distinct user_id) as total from dim_user_info group by sex, if(level &gt; 5, &#39;高&#39;, &#39;低&#39;);</code></pre></li><li><p><code>substr</code>：字符串取子串</p> <pre class="language-Hive" data-language="Hive"><code class="language-Hive">-- 统计每个月激活的新用户数select substr(firstactivetime, 1, 7) as month, count(distinct user_id) as total from dim_user_info group by substr(firstactivetime, 1, 7);</code></pre></li><li><p><code>get_json_object</code>：从JSON字符串中取出指定的<code>key</code>对应的<code>value</code>，如：<code>get_json_object(info, &#39;$.first_name&#39;)</code>。</p> <pre class="language-Hive" data-language="Hive"><code class="language-Hive">-- 统计不同手机品牌的用户数select get_json_object(extra1, &#39;$.phonebrand&#39;) as phone, count(distinct user_id) as total from user_info group by get_json_object(extra1, &#39;$.phonebrand&#39;);select extra2[&#39;phonebrand&#39;] as phone, count(distinct user_id) as total from user_info group by extra2[&#39;phonebrand&#39;];</code></pre><blockquote><p>说明：MySQL对应的函数名字叫<code>json_extract</code>。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>46.Django快速上手</title>
      <link href="/2024/07/01/46.django-kuai-su-shang-shou/"/>
      <url>/2024/07/01/46.django-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="Django快速上手"><a href="#Django快速上手" class="headerlink" title="Django快速上手"></a>Django快速上手</h2><p>Web开发的早期阶段，开发者需要手动编写每个页面，例如一个新闻门户网站，每天都要修改它的HTML页面，随着网站规模和体量的增大，这种做法一定是非常糟糕的。为了解决这个问题，开发人员想到了用程序来为Web服务器生成动态内容，也就是说网页中的动态内容不再通过手动编写而是通过程序自动生成。最早的时候，这项技术被称为CGI（公共网关接口），当然随着时间的推移，CGI暴露出的问题也越来越多，例如大量重复的样板代码，总体性能较为低下等。在时代呼唤新英雄的背景下，PHP、ASP、JSP这类Web应用开发技术在上世纪90年代中后期如雨后春笋般涌现。通常我们说的Web应用是指通过浏览器来访问网络资源的应用程序，因为浏览器的普及性以及易用性，Web应用使用起来方便简单，免除了安装和更新应用程序带来的麻烦；站在开发者的角度，也不用关心用户使用什么样的操作系统，甚至不用区分是PC端还是移动端。</p><h3 id="Web应用机制和术语"><a href="#Web应用机制和术语" class="headerlink" title="Web应用机制和术语"></a>Web应用机制和术语</h3><p>下图向我们展示了Web应用的工作流程，其中涉及到的术语如下表所示。</p><p><img src="/./res/web-application.png"></p><blockquote><p>说明：相信有经验的读者会发现，这张图中其实还少了很多东西，例如反向代理服务器、数据库服务器、防火墙等，而且图中的每个节点在实际项目部署时可能是一组节点组成的集群。当然，如果你对这些没有什么概念也不要紧，继续下去就行了，后面会给大家一一讲解的。</p></blockquote><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td><strong>URL&#x2F;URI</strong></td><td>统一资源定位符&#x2F;统一资源标识符，网络资源的唯一标识</td></tr><tr><td><strong>域名</strong></td><td>与Web服务器地址对应的一个易于记忆的字符串名字</td></tr><tr><td><strong>DNS</strong></td><td>域名解析服务，可以将域名转换成对应的IP地址</td></tr><tr><td><strong>IP地址</strong></td><td>网络上的主机的身份标识，通过IP地址可以区分不同的主机</td></tr><tr><td><strong>HTTP</strong></td><td>超文本传输协议，构建在TCP之上的应用级协议，万维网数据通信的基础</td></tr><tr><td><strong>反向代理</strong></td><td>代理客户端向服务器发出请求，然后将服务器返回的资源返回给客户端</td></tr><tr><td><strong>Web服务器</strong></td><td>接受HTTP请求，然后返回HTML文件、纯文本文件、图像等资源给请求者</td></tr><tr><td><strong>Nginx</strong></td><td>高性能的Web服务器，也可以用作<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>，<a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载均衡</a> 和 <a href="https://zh.wikipedia.org/wiki/HTTP%E7%BC%93%E5%AD%98">HTTP缓存</a></td></tr></tbody></table><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>这里我们先费一些笔墨来说说HTTP这个协议。HTTP（超文本传输协议）是构建于TCP（传输控制协议）之上应用级协议，它利用了TCP提供的可靠的传输服务实现了Web应用中的数据交换。按照维基百科上的介绍，设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>页面的方法，也就是说这个协议是浏览器和Web服务器之间传输的数据的载体。关于这个协议的详细信息以及目前的发展状况，大家可以阅读<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>、<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">《互联网协议入门》</a>系列以及<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">《图解HTTPS协议》</a>这几篇文章进行了解。下图是我在四川省网络通信技术重点实验室学习和工作期间使用开源协议分析工具Ethereal（抓包工具WireShark的前身）截取的访问百度首页时的HTTP请求和响应的报文（协议数据），由于Ethereal截取的是经过网络适配器的数据，因此可以清晰的看到从物理链路层到应用层的协议数据。</p><p>HTTP请求（请求行+请求头+空行+[消息体]）：</p><p><img src="/./res/http-request.png"></p><p>HTTP响应（响应行+响应头+空行+消息体）：</p><p><img src="/./res/http-response.png"></p><blockquote><p> <strong>说明</strong>：这两张图是在2009年9月10日凌晨获得的，但愿这两张如同泛黄的照片般的截图能帮助你了解HTTP到底是什么样子的。当然，如果没有专业的抓包工具，也可以通过浏览器提供的“开发者工具”来查看HTTP请求和响应的数据格式。</p></blockquote><h3 id="Django概述"><a href="#Django概述" class="headerlink" title="Django概述"></a>Django概述</h3><p>Python的Web框架有上百个，比它的关键字还要多。所谓Web框架，就是用于开发Web服务器端应用的基础设施，说得通俗一点就是一系列封装好的模块和工具。事实上，即便没有Web框架，我们仍然可以通过socket或<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3">CGI</a>来开发Web服务器端应用，但是这样做的成本和代价在商业项目中通常是不能接受的。通过Web框架，我们可以化繁为简，降低创建、更新、扩展应用程序的工作量。刚才我们说到Python有上百个Web框架，这些框架包括Django、Flask、Tornado、Sanic、Pyramid、Bottle、Web2py、web.py等。</p><p>在上述Python的Web框架中，Django无疑是最有代表性的重量级选手，开发者可以基于Django快速的开发可靠的Web应用程序，因为它减少了Web开发中不必要的开销，对常用的设计和开发模式进行了封装，并对MVC架构提供了支持（Django中称之为MTV架构）。MVC是软件系统开发领域中一种放之四海而皆准的架构，它将系统中的组件分为模型（Model）、视图（View）和控制器（Controller）三个部分并借此实现模型（数据）和视图（显示）的解耦合。由于模型和视图进行了分离，所以需要一个中间人将解耦合的模型和视图联系起来，扮演这个角色的就是控制器。稍具规模的软件系统都会使用MVC架构（或者是从MVC演进出的其他架构），Django项目中我们称之为MTV，MTV中的M跟MVC中的M没有区别，就是代表数据的模型，T代表了网页模板（显示数据的视图），而V代表了视图函数，在Django框架中，视图函数和Django框架本身一起扮演了MVC中C的角色。</p><p><img src="/./res/mvc.png"></p><p>Django框架诞生于2003年，它是一个在真正的应用中成长起来的项目，由劳伦斯出版集团旗下在线新闻网站的内容管理系统（CMS）研发团队（主要是Adrian Holovaty和Simon Willison）开发，以比利时的吉普赛爵士吉他手Django Reinhardt来命名。Django框架在2005年夏天作为开源框架发布，使用Django框架能用很短的时间构建出功能完备的网站，因为它代替程序员完成了那些重复乏味的劳动，剩下真正有意义的核心业务给程序员来开发，这一点就是对DRY（Don’t Repeat Yourself）理念的最好践行。许多成功的网站和应用都是基于Python语言进行开发的，国内比较有代表性的网站包括：知乎、豆瓣网、果壳网、搜狐闪电邮箱、101围棋网、海报时尚网、背书吧、堆糖、手机搜狐网、咕咚、爱福窝、果库等，其中不乏使用了Django框架的产品。</p><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="第一个Django项目"><a href="#第一个Django项目" class="headerlink" title="第一个Django项目"></a>第一个Django项目</h4><ol><li><p>检查Python环境：Django 1.11需要Python 2.7或Python 3.4以上的版本；Django 2.0需要Python 3.4以上的版本；Django 2.1和2.2需要Python 3.5以上的版本；Django 3.0需要Python 3.6以上版本。</p><blockquote><p><strong>说明</strong>：Django框架不同版本所需的Python解释器环境，可以在Django官方文档的<a href="https://docs.djangoproject.com/zh-hans/3.0/faq/install/#faq-python-version-support">FAQ</a>中找到。</p></blockquote><p>可以在macOS的终端中输入下面的命令检查Python解释器版本，Windows系统可以在命令行提示符中输入<code>python --version</code>。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">python3 --version</code></pre><p>也可以在Python的交互式环境中执行下面的代码来查看Python解释器的版本。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">import syssys.versionsys.version_info</code></pre></li><li><p>更新包管理工具并安装Django环境（用于创建Django项目）。</p><blockquote><p><strong>说明</strong>：在更新这个文档时，Django最新的正式版本是3.0.7，Django 3.0提供了对ASGI的支持，可以实现全双工的异步通信，但是目前的使用体验一般，所以暂时不推荐大家使用Django 3.0，下面我们安装的是Django 2.2.13版本。使用<code>pip</code>安装三方库和工具时，可以通过<code>==</code>来指定安装的版本。</p></blockquote><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip3 install -U pippip3 install django&#x3D;&#x3D;2.2.13</code></pre></li><li><p>检查Django环境并使用<code>django-admin</code>命令创建Django项目（项目名称为hellodjango）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">django-admin --versiondjango-admin startproject hellodjango</code></pre></li><li><p>用PyCharm打开创建好的Djang项目，并为其添加虚拟环境。</p><p><img src="/res/pycharm-django-project.png"></p><p>如上图所示，PyCharm的项目浏览器中，最顶层的文件夹<code>hellodjango</code>是Python项目文件夹，这个文件夹的名字并不重要，Django项目也不关心这个文件夹叫什么名字。该文件夹下有一个同名的文件夹，它是Django项目文件夹，其中包含了<code>__init__.py</code>、<code>settings.py</code>、<code>urls.py</code>、<code>wsgi.py</code>四个文件，与名为<code>hellodjango</code>的Django项目文件夹同级的还有一个名为<code>manage.py</code> 的文件，这些文件的作用如下所示：</p><ul><li><code>hellodjango/__init__.py</code>：空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li><li><code>hellodjango/settings.py</code>：Django项目的配置文件。</li><li><code>hellodjango/urls.py</code>：Django项目的URL映射声明，就像是网站的“目录”。</li><li><code>hellodjango/wsgi.py</code>：项目运行在WSGI兼容Web服务器上的入口文件。</li><li><code>manage.py</code>： 管理Django项目的脚本程序。</li></ul><blockquote><p>说明：WSGI全称是Web服务器网关接口，维基百科上给出的解释是“为Python语言定义的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8">Web服务器</a>和<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">Web应用程序</a>或框架之间的一种简单而通用的接口”。</p></blockquote><p>创建虚拟环境的界面如下图所示。</p><p><img src="/res/pycharm-django-virtual-environment.png" alt="pycharm-django-virtual-environment"></p></li><li><p>安装项目依赖项。</p><p>方法一：打开PyCharm的终端，在终端中通过<code>pip</code>命令安装Django项目的依赖项。</p><blockquote><p><strong>说明</strong>：由于已经基于Python 3解释器环境为项目创建了虚拟环境，所以虚拟环境中的<code>python</code>命令对应的是Python 3的解释器，而<code>pip</code>命令对应的是Python 3的包管理工具。</p></blockquote><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install django&#x3D;&#x3D;2.2.13</code></pre><p>方法二：在PyCharm的偏好设置中，可以找到项目的解释器环境和已经安装的三方库，可以通过点击添加按钮来安装新的依赖项，需要提醒大家的是在安装Django依赖项时，需要指定版本号，否则将默认安装更新本文时最新的3.0.7版本。</p><p><img src="/res/pycharm-install-django.png"></p><p>下图展示了Django版本和Python版本的对应关系，请大家自行对号入座。</p><table><thead><tr><th>Django版本</th><th>Python版本</th></tr></thead><tbody><tr><td>1.8</td><td>2.7、3.2、3.3、3.4、3.5</td></tr><tr><td>1.9、1.10</td><td>2.7、3.4、3.5</td></tr><tr><td>1.11</td><td>2.7、3.4、3.5、3.6、3.7（Django 1.11.17）</td></tr><tr><td>2.0</td><td>3.4、3.5、3.6、3.7</td></tr><tr><td>2.1</td><td>3.5、3.6、3.7</td></tr><tr><td>2.2</td><td>3.5、3.6、3.7、3.8（Django 2.2.8）</td></tr><tr><td>3.0</td><td>3.6、3.7、3.8</td></tr></tbody></table></li><li><p>启动Django自带的服务器运行项目。</p><p>方法一：在“Run”菜单选择“Edit Configuration”，配置“Django server”运行项目（适用于专业版PyCharm）。</p><p><img src="/res/pycharm-django-server.png"></p><p>方法二：在“Run”菜单选择“Edit Configuration”，配置运行“Python”程序运行项目（适用于专业版和社区版PyCharm）。</p><p><img src="/res/pycharm-python-manage.png"></p><p>方法三：在PyCharm的终端（Terminal）中通过命令运行项目（适用于专业版和社区版PyCharm）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py runserver</code></pre></li><li><p>查看运行效果。</p></li></ol><p>  在浏览器中输入<code>http://127.0.0.1:8000</code>访问我们的服务器，效果如下图所示。</p><p>   <img src="/./res/django-index-1.png"></p><blockquote><p><strong>说明</strong>：</p><ol><li>刚刚启动的Django自带的服务器只能用于开发和测试环境，因为这个服务器是纯Python编写的轻量级Web服务器，不适合在生产环境中使用。</li><li>如果修改了代码，不需要为了让修改的代码生效而重新启动Django自带的服务器。但是，在添加新的项目文件时，该服务器不会自动重新加载，这个时候就得手动重启服务器。</li><li>可以在终端中通过<code>python manage.py help</code>命令查看Django管理脚本程序可用的命令参数。</li><li>使用<code>python manage.py runserver</code>启动服务器时，可以在后面添加参数来指定IP地址和端口号，默认情况下启动的服务器将运行在本机的<code>8000</code>端口。</li><li>在终端中运行的服务器，可以通过Ctrl+C来停止它 。通过PyCharm的“运行配置”运行的服务器直接点击窗口上的关闭按钮就可以终止服务器的运行。</li><li>不能在同一个端口上启动多个服务器，因为会导致地址的冲突（端口是对IP地址的扩展，也是计算机网络地址的一部分）。</li><li>修改项目的配置文件<code>settings.py</code>。</li></ol></blockquote><p>   Django是一个支持国际化和本地化的框架，因此刚才我们看到的Django项目的默认首页也是支持国际化的，我们可以通过修改配置文件将默认语言修改为中文，时区设置为东八区。</p><p>   找到修改前的配置（在<code>settings.py</code>文件第100行以后）。</p>   <pre class="language-Python" data-language="Python"><code class="language-Python">LANGUAGE_CODE &#x3D; &#39;en-us&#39;TIME_ZONE &#x3D; &#39;UTC&#39;</code></pre><p>   修改为以下内容。</p>   <pre class="language-Python" data-language="Python"><code class="language-Python">LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;TIME_ZONE &#x3D; &#39;Asia&#x2F;Chongqing&#39;</code></pre><p>   刷新刚才的页面，可以看到修改语言代码和时区之后的结果。</p><p>   <img src="/./res/django-index-2.png"></p><h4 id="创建自己的应用"><a href="#创建自己的应用" class="headerlink" title="创建自己的应用"></a>创建自己的应用</h4><p>如果要开发自己的Web应用，需要先在Django项目中创建“应用”，一个Django项目可以包含一个或多个应用。</p><ol><li><p>在PyCharm的终端中执行下面的命令，创建名为<code>first</code>的应用。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py startapp first</code></pre><p>执行上面的命令会在当前路径下创建<code>first</code>目录，其目录结构如下所示：</p><ul><li><code>__init__.py</code>：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li><li><code>admin.py</code>：可以用来注册模型，用于在Django框架自带的管理后台中管理模型。</li><li><code>apps.py</code>：当前应用的配置文件。</li><li><code>migrations</code>：存放与模型有关的数据库迁移信息。<ul><li><code>__init__.py</code>：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li></ul></li><li><code>models.py</code>：存放应用的数据模型（MTV中的M）。</li><li><code>tests.py</code>：包含测试应用各项功能的测试类和测试函数。</li><li><code>views.py</code>：处理用户HTTP请求并返回HTTP响应的函数或类（MTV中的V）。</li></ul></li><li><p>修改应用目录下的视图文件<code>views.py</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.http import HttpResponsedef show_index(request):    return HttpResponse(&#39;&lt;h1&gt;Hello, Django!&lt;&#x2F;h1&gt;&#39;)</code></pre></li><li><p>修改Django项目目录下的<code>urls.py</code>文件，将视图函数和用户在浏览器中请求的路径对应。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom django.urls import path, includefrom first.views import show_indexurlpatterns &#x3D; [    path(&#39;admin&#x2F;&#39;, admin.site.urls),    path(&#39;hello&#x2F;&#39;, show_index),]</code></pre></li><li><p>重新运行项目，并打开浏览器中访问<code>http://127.0.0.1:8000/hello/</code>。</p></li><li><p>上面我们通过代码为浏览器生成了内容，但仍然是静态内容，如果要生成动态内容，可以修改<code>views.py</code>文件并添加如下所示的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import samplefrom django.http import HttpResponsedef show_index(request):    fruits &#x3D; [        &#39;Apple&#39;, &#39;Orange&#39;, &#39;Pitaya&#39;, &#39;Durian&#39;, &#39;Waxberry&#39;, &#39;Blueberry&#39;,        &#39;Grape&#39;, &#39;Peach&#39;, &#39;Pear&#39;, &#39;Banana&#39;, &#39;Watermelon&#39;, &#39;Mango&#39;    ]    selected_fruits &#x3D; sample(fruits, 3)    content &#x3D; &#39;&lt;h3&gt;今天推荐的水果是：&lt;&#x2F;h3&gt;&#39;    content +&#x3D; &#39;&lt;hr&gt;&#39;    content +&#x3D; &#39;&lt;ul&gt;&#39;    for fruit in selected_fruits:        content +&#x3D; f&#39;&lt;li&gt;&#123;fruit&#125;&lt;&#x2F;li&gt;&#39;    content +&#x3D; &#39;&lt;&#x2F;ul&gt;&#39;    return HttpResponse(content)</code></pre></li><li><p>刷新页面查看程序的运行结果，看看每次刷新的网页的时候，是不是可以看到不一样的内容。</p></li></ol><h4 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h4><p>上面通过拼接HTML代码的方式为浏览器生成动态内容的做法在实际开发中是无能接受的，因为实际项目中的前端页面可能非常复杂，无法用这种拼接动态内容的方式来完成，这一点大家一定能够想到。为了解决这个问题，我们可以提前准备一个模板页（MTV中的T），所谓模板页就是一个带占位符和模板指令的HTML页面。</p><p>Django框架中有一个名为<code>render</code>的便捷函数可以来完成渲染模板的操作。所谓的渲染就是用数据替换掉模板页中的模板指令和占位符，当然这里的渲染称为后端渲染，即在服务器端完成页面的渲染再输出到浏览器中。后端渲染的做法在Web应用的访问量较大时，会让服务器承受较大的负担，所以越来越多的Web应用会选择前端渲染的方式，即服务器只提供页面所需的数据（通常是JSON格式），在浏览器中通过JavaScript代码获取这些数据并渲染页面上。关于前端渲染的内容，我们会在后续的课程中为大家讲解，目前我们使用的是通过模板页进行后端渲染的做法，具体步骤如下所示。</p><p>使用模板页的步骤如下所示。</p><ol><li><p>在项目目录下创建名为templates文件夹。</p><p><img src="/res/pycharm-django-template.png"></p></li><li><p>添加模板页<code>index.html</code>。</p><blockquote><p><strong>说明</strong>：实际项目开发中，静态页由前端开发者提供，后端开发者需要将静态页修改为模板页，以便通过Python程序对其进行渲染，这种做法就是上面提到的后端渲染。</p></blockquote><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;        &lt;title&gt;首页&lt;&#x2F;title&gt;        &lt;style&gt;            #fruits &#123;                font-size: 1.25em;            &#125;        &lt;&#x2F;style&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;h1&gt;今天推荐的水果是：&lt;&#x2F;h1&gt;        &lt;hr&gt;        &lt;ul id&#x3D;&quot;fruits&quot;&gt;            &#123;% for fruit in fruits %&#125;            &lt;li&gt;&#123;&#123; fruit &#125;&#125;&lt;&#x2F;li&gt;            &#123;% endfor %&#125;        &lt;&#x2F;ul&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>在上面的模板页中我们使用了<code>&#123;&#123; fruit &#125;&#125;</code>这样的模板占位符语法，也使用了<code>&#123;% for %&#125;</code>这样的模板指令，这些都是Django模板语言（DTL）的一部分。关于模板语法和指令，大家可以看看官方文档，相信这些内容还是很容易理解的，并不需要过多的赘述，大家也可以参考<a href="">官方文档</a>了解模板指令和语法。</p></li><li><p>修改<code>views.py</code>文件，调用<code>render</code>函数渲染模板页。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import samplefrom django.shortcuts import renderdef show_index(request):    fruits &#x3D; [        &#39;Apple&#39;, &#39;Orange&#39;, &#39;Pitaya&#39;, &#39;Durian&#39;, &#39;Waxberry&#39;, &#39;Blueberry&#39;,        &#39;Grape&#39;, &#39;Peach&#39;, &#39;Pear&#39;, &#39;Banana&#39;, &#39;Watermelon&#39;, &#39;Mango&#39;    ]    selected_fruits &#x3D; sample(fruits, 3)    return render(request, &#39;index.html&#39;, &#123;&#39;fruits&#39;: selected_fruits&#125;)</code></pre><p><code>render</code>函数的第一个参数是请求对象request，第二个参数是我们要渲染的模板页的名字，第三个参数是要渲染到页面上的数据，我们通过一个字典将数据交给模板页，字典中的键就是模板页中使用的模板指令或占位符中的变量名。</p></li><li><p>到此为止，视图函数中的<code>render</code>还无法找到模板文件<code>index.html</code>，需要修改<code>settings.py</code>文件，配置模板文件所在的路径。修改<code>settings.py</code>文件，找到<code>TEMPLATES</code>配置，修改其中的<code>DIRS</code>配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python">TEMPLATES &#x3D; [    &#123;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;), ],        &#39;APP_DIRS&#39;: True,        &#39;OPTIONS&#39;: &#123;            &#39;context_processors&#39;: [                &#39;django.template.context_processors.debug&#39;,                &#39;django.template.context_processors.request&#39;,                &#39;django.contrib.auth.context_processors.auth&#39;,                &#39;django.contrib.messages.context_processors.messages&#39;,            ],        &#125;,    &#125;,]</code></pre></li><li><p>重新运行项目或直接刷新页面查看结果。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，我们已经利用Django框架完成了一个非常小的Web应用，虽然它并没有任何的实际价值，但是可以通过这个项目对Django框架有一个感性的认识。学习Django最好的资料肯定是它的<a href="https://docs.djangoproject.com/zh-hans/2.0/">官方文档</a>，官方文档提供了对多国语言的支持，而且有新手教程引导初学者学习使用Django框架，建议大家通过阅读Django的官方文档来学习和使用这个框架。当然图灵社区出版的<a href="http://www.ituring.com.cn/book/2630">《Django基础教程》</a>也是非常适合初学者的入门级读物，有兴趣的读者可以点击链接进行购买。 </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>47.深入模型</title>
      <link href="/2024/07/01/47.shen-ru-mo-xing/"/>
      <url>/2024/07/01/47.shen-ru-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="深入模型"><a href="#深入模型" class="headerlink" title="深入模型"></a>深入模型</h2><p>在上一个章节中，我们提到了Django是基于MVC架构的Web框架，MVC架构追求的是“模型”和“视图”的解耦合。所谓“模型”说得更直白一些就是数据（的表示），所以通常也被称作“数据模型”。在实际的项目中，数据模型通常通过数据库实现持久化操作，而关系型数据库在过去和当下都是持久化的首选方案，下面我们通过完成一个投票项目来讲解和模型相关的知识点。投票项目的首页会展示某在线教育平台所有的学科；点击学科可以查看到该学科的老师及其信息；用户登录后在查看老师的页面为老师投票，可以投赞成票和反对票；未登录的用户可以通过登录页进行登录；尚未注册的用户可以通过注册页输入个人信息进行注册。在这个项目中，我们使用MySQL数据库来实现数据持久化操作。</p><h3 id="创建项目和应用"><a href="#创建项目和应用" class="headerlink" title="创建项目和应用"></a>创建项目和应用</h3><p>我们首先创建Django项目<code>vote</code>并为其添加虚拟环境和依赖项。接下来，在项目下创建名为<code>polls</code>的应用和保存模板页的文件夹<code>tempaltes</code>，项目文件夹的结构如下所示。</p><p><img src="/res/pycharm-vote-project.png"></p><p>根据上面描述的项目需求，我们准备了四个静态页面，分别是展示学科的页面<code>subjects.html</code>，显示学科老师的页面<code>teachers.html</code>，登录页面<code>login.html</code>，注册页面<code>register.html</code>，稍后我们会将静态页修改为Django项目所需的模板页。</p><h3 id="配置关系型数据库MySQL"><a href="#配置关系型数据库MySQL" class="headerlink" title="配置关系型数据库MySQL"></a>配置关系型数据库MySQL</h3><ol><li><p>在MySQL中创建数据库，创建用户，授权用户访问该数据库。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create database vote default charset utf8;create user &#39;hellokitty&#39;@&#39;%&#39; identified by &#39;Hellokitty.618&#39;;grant all privileges on vote.* to &#39;hellokitty&#39;@&#39;%&#39;;flush privileges;</code></pre></li><li><p>在MySQL中创建保存学科和老师信息的二维表（保存用户信息的表稍后处理）。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">use vote;-- 创建学科表create table &#96;tb_subject&#96;(&#96;no&#96; integer auto_increment comment &#39;学科编号&#39;,    &#96;name&#96; varchar(50) not null comment &#39;学科名称&#39;,    &#96;intro&#96; varchar(1000) not null default &#39;&#39; comment &#39;学科介绍&#39;,    &#96;is_hot&#96; boolean not null default 0 comment &#39;是不是热门学科&#39;,    primary key (&#96;no&#96;));-- 创建老师表create table &#96;tb_teacher&#96;(    &#96;no&#96; integer auto_increment comment &#39;老师编号&#39;,    &#96;name&#96; varchar(20) not null comment &#39;老师姓名&#39;,    &#96;sex&#96; boolean not null default 1 comment &#39;老师性别&#39;,    &#96;birth&#96; date not null comment &#39;出生日期&#39;,    &#96;intro&#96; varchar(1000) not null default &#39;&#39; comment &#39;老师介绍&#39;,    &#96;photo&#96; varchar(255) not null default &#39;&#39; comment &#39;老师照片&#39;,    &#96;gcount&#96; integer not null default 0 comment &#39;好评数&#39;,    &#96;bcount&#96; integer not null default 0 comment &#39;差评数&#39;,    &#96;sno&#96; integer not null comment &#39;所属学科&#39;,    primary key (&#96;no&#96;),    foreign key (&#96;sno&#96;) references &#96;tb_subject&#96; (&#96;no&#96;));</code></pre></li><li><p>在虚拟环境中安装连接MySQL数据库所需的依赖项。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install mysqlclient</code></pre><blockquote><p><strong>说明</strong>：如果因为某些原因无法安装<code>mysqlclient</code>三方库，可以使用它的替代品<code>pymysql</code>，<code>pymysql</code>是用纯Python开发的连接MySQL的Python库，安装更容易成功，但是需要在Django项目文件夹的<code>__init__.py</code>中添加如下所示的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysqlpymysql.install_as_MySQLdb()</code></pre><p>如果使用Django 2.2及以上版本，还会遇到PyMySQL跟Django框架的兼容性问题，兼容性问题会导致项目无法运行，需要按照GitHub上PyMySQL仓库<a href="https://github.com/PyMySQL/PyMySQL/issues/790">Issues</a>中提供的方法进行处理。总体来说，使用<code>pymysql</code>会比较麻烦，强烈建议大家首选安装<code>mysqlclient</code>。</p></blockquote></li><li><p>修改项目的settings.py文件，首先将我们创建的应用<code>polls</code>添加已安装的项目（<code>INSTALLED_APPS</code>）中，然后配置MySQL作为持久化方案。</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;polls&#39;,]DATABASES &#x3D; &#123;    &#39;default&#39;: &#123;        # 数据库引擎配置        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        # 数据库的名字        &#39;NAME&#39;: &#39;vote&#39;,        # 数据库服务器的IP地址（本机可以写localhost或127.0.0.1）        &#39;HOST&#39;: &#39;localhost&#39;,        # 启动MySQL服务的端口号        &#39;PORT&#39;: 3306,        # 数据库用户名和口令        &#39;USER&#39;: &#39;hellokitty&#39;,        &#39;PASSWORD&#39;: &#39;Hellokitty.618&#39;,        # 数据库使用的字符集        &#39;CHARSET&#39;: &#39;utf8&#39;,        # 数据库时间日期的时区设定        &#39;TIME_ZONE&#39;: &#39;Asia&#x2F;Chongqing&#39;,    &#125;&#125;</code></pre><p>在配置ENGINE属性时，常用的可选值包括：</p><ul><li><code>&#39;django.db.backends.sqlite3&#39;</code>：SQLite嵌入式数据库。</li><li><code>&#39;django.db.backends.postgresql&#39;</code>：BSD许可证下发行的开源关系型数据库产品。</li><li><code>&#39;django.db.backends.mysql&#39;</code>：甲骨文公司经济高效的数据库产品。</li><li><code>&#39;django.db.backends.oracle&#39;</code>：甲骨文公司关系型数据库旗舰产品。</li></ul><p>其他的配置可以参考官方文档中<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/databases/#third-party-notes">数据库配置</a>的部分。</p></li><li><p>Django框架提供了ORM来解决数据持久化问题，ORM翻译成中文叫“对象关系映射”。因为Python是面向对象的编程语言，我们在Python程序中使用对象模型来保存数据，而关系型数据库使用关系模型，用二维表来保存数据，这两种模型并不匹配。使用ORM是为了实现对象模型到关系模型的<strong>双向转换</strong>，这样就不用在Python代码中书写SQL语句和游标操作，因为这些都会由ORM自动完成。利用Django的ORM，我们可以直接将刚才创建的学科表和老师表变成Django中的模型类。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">python manage.py inspectdb &gt; polls&#x2F;models.py</code></pre><p>我们可以对自动生成的模型类稍作调整，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.db import modelsclass Subject(models.Model):    no &#x3D; models.AutoField(primary_key&#x3D;True, verbose_name&#x3D;&#39;编号&#39;)    name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;&#39;名称&#39;)    intro &#x3D; models.CharField(max_length&#x3D;1000, verbose_name&#x3D;&#39;介绍&#39;)    is_hot &#x3D; models.BooleanField(verbose_name&#x3D;&#39;是否热门&#39;)    class Meta:        managed &#x3D; False        db_table &#x3D; &#39;tb_subject&#39;class Teacher(models.Model):    no &#x3D; models.AutoField(primary_key&#x3D;True, verbose_name&#x3D;&#39;编号&#39;)    name &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;&#39;姓名&#39;)    sex &#x3D; models.BooleanField(default&#x3D;True, verbose_name&#x3D;&#39;性别&#39;)    birth &#x3D; models.DateField(verbose_name&#x3D;&#39;出生日期&#39;)    intro &#x3D; models.CharField(max_length&#x3D;1000, verbose_name&#x3D;&#39;个人介绍&#39;)    photo &#x3D; models.ImageField(max_length&#x3D;255, verbose_name&#x3D;&#39;照片&#39;)    good_count &#x3D; models.IntegerField(default&#x3D;0, db_column&#x3D;&#39;gcount&#39;, verbose_name&#x3D;&#39;好评数&#39;)    bad_count &#x3D; models.IntegerField(default&#x3D;0, db_column&#x3D;&#39;bcount&#39;, verbose_name&#x3D;&#39;差评数&#39;)    subject &#x3D; models.ForeignKey(Subject, models.DO_NOTHING, db_column&#x3D;&#39;sno&#39;)    class Meta:        managed &#x3D; False        db_table &#x3D; &#39;tb_teacher&#39;</code></pre><blockquote><p><strong>说明</strong>：模型类都直接或间接继承自<code>Model</code>类，模型类跟关系型数据库的二维表对应，模型对象跟表中的记录对应，模型对象的属性跟表中的字段对应。如果对上面模型类的属性定义不是特别理解，可以看看本文后面提供的“模型定义参考”部分的内容。</p></blockquote></li></ol><h3 id="使用ORM完成模型的CRUD操作"><a href="#使用ORM完成模型的CRUD操作" class="headerlink" title="使用ORM完成模型的CRUD操作"></a>使用ORM完成模型的CRUD操作</h3><p>有了Django框架的ORM，我们可以直接使用面向对象的方式来实现对数据的CRUD（增删改查）操作。我们可以在PyCharm的终端中输入下面的命令进入到Django项目的交互式环境，然后尝试对模型的操作。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">python manage.py shell</code></pre><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><pre class="language-Python" data-language="Python"><code class="language-Python">from polls.models import Subjectsubject1 &#x3D; Subject(name&#x3D;&#39;Python全栈开发&#39;, intro&#x3D;&#39;当下最热门的学科&#39;, is_hot&#x3D;True)subject1.save()subject2 &#x3D; Subject(name&#x3D;&#39;全栈软件测试&#39;, intro&#x3D;&#39;学习自动化测试的学科&#39;, is_hot&#x3D;False)subject2.save()subject3 &#x3D; Subject(name&#x3D;&#39;JavaEE分布式开发&#39;, intro&#x3D;&#39;基于Java语言的服务器应用开发&#39;, is_hot&#x3D;True)</code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre class="language-Python" data-language="Python"><code class="language-Python">subject &#x3D; Subject.objects.get(no&#x3D;2)subject.delete()</code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><pre class="language-Shell" data-language="Shell"><code class="language-Shell">subject &#x3D; Subject.objects.get(no&#x3D;1)subject.name &#x3D; &#39;Python全栈+人工智能&#39;subject.save()</code></pre><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ol><li>查询所有对象。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">Subjects.objects.all()</code></pre><ol start="2"><li>过滤数据。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell"># 查询名称为“Python全栈+人工智能”的学科Subject.objects.filter(name&#x3D;&#39;Python全栈+人工智能&#39;)# 查询名称包含“全栈”的学科（模糊查询）Subject.objects.filter(name__contains&#x3D;&#39;全栈&#39;)Subject.objects.filter(name__startswith&#x3D;&#39;全栈&#39;)Subject.objects.filter(name__endswith&#x3D;&#39;全栈&#39;)# 查询所有热门学科Subject.objects.filter(is_hot&#x3D;True)# 查询编号大于3小于10的学科Subject.objects.filter(no__gt&#x3D;3).filter(no__lt&#x3D;10)Subject.objects.filter(no__gt&#x3D;3, no__lt&#x3D;10)# 查询编号在3到7之间的学科Subject.objects.filter(no__ge&#x3D;3, no__le&#x3D;7)Subject.objects.filter(no__range&#x3D;(3, 7))</code></pre><ol start="3"><li>查询单个对象。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell"># 查询主键为1的学科Subject.objects.get(pk&#x3D;1)Subject.objects.get(no&#x3D;1)Subject.objects.filter(no&#x3D;1).first()Subject.objects.filter(no&#x3D;1).last()</code></pre><ol start="4"><li>排序。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell"># 查询所有学科按编号升序排列Subject.objects.order_by(&#39;no&#39;)# 查询所有部门按部门编号降序排列Subject.objects.order_by(&#39;-no&#39;)</code></pre><ol start="5"><li>切片（分页查询）。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell"># 按编号从小到大查询前3个学科Subject.objects.order_by(&#39;no&#39;)[:3]</code></pre><ol start="6"><li>计数。</li></ol><pre class="language-Python" data-language="Python"><code class="language-Python"># 查询一共有多少个学科Subject.objects.count()</code></pre><ol start="7"><li>高级查询。</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell"># 查询编号为1的学科的老师Teacher.objects.filter(subject__no&#x3D;1)Subject.objects.get(pk&#x3D;1).teacher_set.all() # 查询学科名称有“全栈”二字的学科的老师Teacher.objects.filter(subject__name__contains&#x3D;&#39;全栈&#39;) </code></pre><blockquote><p><strong>说明1</strong>：由于老师与学科之间存在多对一外键关联，所以能通过学科反向查询到该学科的老师（从一对多关系中“一”的一方查询“多”的一方），反向查询属性默认的名字是<code>类名小写_set</code>（如上面例子中的<code>teacher_set</code>），当然也可以在创建模型时通过<code>ForeingKey</code>的<code>related_name</code>属性指定反向查询属性的名字。如果不希望执行反向查询可以将<code>related_name</code>属性设置为<code>&#39;+&#39;</code>或者以<code>&#39;+&#39;</code>开头的字符串。</p></blockquote><blockquote><p><strong>说明2</strong>：ORM查询多个对象时会返回QuerySet对象，QuerySet使用了惰性查询，即在创建QuerySet对象的过程中不涉及任何数据库活动，等真正用到对象时（对QuerySet求值）才向数据库发送SQL语句并获取对应的结果，这一点在实际开发中需要引起注意！</p></blockquote><blockquote><p><strong>说明3</strong>：如果希望更新多条数据，不用先逐一获取模型对象再修改对象属性，可以直接使用QuerySet对象的<code>update()</code>方法一次性更新多条数据。</p></blockquote><h3 id="利用Django后台管理模型"><a href="#利用Django后台管理模型" class="headerlink" title="利用Django后台管理模型"></a>利用Django后台管理模型</h3><p>在创建好模型类之后，可以通过Django框架自带的后台管理应用（<code>admin</code>应用）实现对模型的管理。虽然实际应用中，这个后台可能并不能满足我们的需求，但是在学习Django框架时，我们可以利用<code>admin</code>应用来管理我们的模型，同时也通过它来了解一个项目的后台管理系统需要哪些功能。使用Django自带的<code>admin</code>应用步骤如下所示。</p><ol><li><p>将<code>admin</code>应用所需的表迁移到数据库中。<code>admin</code>应用本身也需要数据库的支持，而且在<code>admin</code>应用中已经定义好了相关的数据模型类，我们只需要通过模型迁移操作就能自动在数据库中生成所需的二维表。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">python manage.py migrate</code></pre></li><li><p>创建访问<code>admin</code>应用的超级用户账号，这里需要输入用户名、邮箱和口令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py createsuperuser</code></pre><blockquote><p><strong>说明</strong>：输入口令时没有回显也不能退格，需要一气呵成完成输入。</p></blockquote></li><li><p>运行项目，在浏览器中访问<code>http://127.0.0.1:8000/admin</code>，输入刚才创建的超级用户账号和密码进行登录。</p><p><img src="/Users/Hao/Desktop/Python-100-Days/Day41-55/res/django-admin-login.png"></p><p>登录后进入管理员操作平台。</p><p><img src="/res/django-admin-apps.png"></p><p>注意，我们暂时还没能在<code>admin</code>应用中看到之前创建的模型类，为此需要在<code>polls</code>应用的<code>admin.py</code>文件中对需要管理的模型进行注册。</p></li><li><p>注册模型类。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom polls.models import Subject, Teacheradmin.site.register(Subject)admin.site.register(Teacher)</code></pre><p>注册模型类后，就可以在后台管理系统中看到它们。</p><p><img src="/./res/django-admin-models.png"></p></li><li><p>对模型进行CRUD操作。</p><p>可以在管理员平台对模型进行C（新增）、R（查看）、U（更新）、D（删除）操作，如下图所示。</p><ul><li><p>添加学科。</p><p>  <img src="/res/django-admin-add-model.png"></p></li><li><p>查看所有学科。</p><p>  <img src="/res/django-admin-view-models.png"></p></li><li><p>删除和更新学科。</p><p>  <img src="/res/django-admin-delete-update-model.png"></p></li></ul></li><li><p>注册模型管理类。</p><p>可能大家已经注意到了，刚才在后台查看部门信息的时候，显示的部门信息并不直观，为此我们再修改<code>admin.py</code>文件，通过注册模型管理类，可以在后台管理系统中更好的管理模型。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom polls.models import Subject, Teacherclass SubjectModelAdmin(admin.ModelAdmin):    list_display &#x3D; (&#39;no&#39;, &#39;name&#39;, &#39;intro&#39;, &#39;is_hot&#39;)    search_fields &#x3D; (&#39;name&#39;, )    ordering &#x3D; (&#39;no&#39;, )class TeacherModelAdmin(admin.ModelAdmin):    list_display &#x3D; (&#39;no&#39;, &#39;name&#39;, &#39;sex&#39;, &#39;birth&#39;, &#39;good_count&#39;, &#39;bad_count&#39;, &#39;subject&#39;)    search_fields &#x3D; (&#39;name&#39;, )    ordering &#x3D; (&#39;no&#39;, )admin.site.register(Subject, SubjectModelAdmin)admin.site.register(Teacher, TeacherModelAdmin)</code></pre><p><img src="/res/django-admin-view-models-subject.png"></p><p><img src="/res/django-admin-view-models-teacher.png"></p><p>为了更好的查看模型，我们为<code>Subject</code>类添加<code>__str__</code>魔法方法，并在该方法中返回学科名字。这样在如上图所示的查看老师的页面上显示老师所属学科时，就不再是<code>Subject object(1)</code>这样晦涩的信息，而是学科的名称。</p></li></ol><h3 id="实现学科页和老师页效果"><a href="#实现学科页和老师页效果" class="headerlink" title="实现学科页和老师页效果"></a>实现学科页和老师页效果</h3><ol><li><p>修改<code>polls/views.py</code>文件，编写视图函数实现对学科页和老师页的渲染。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">from django.shortcuts import render, redirectfrom polls.models import Subject, Teacherdef show_subjects(request):    subjects &#x3D; Subject.objects.all().order_by(&#39;no&#39;)    return render(request, &#39;subjects.html&#39;, &#123;&#39;subjects&#39;: subjects&#125;)def show_teachers(request):    try:        sno &#x3D; int(request.GET.get(&#39;sno&#39;))        teachers &#x3D; []        if sno:            subject &#x3D; Subject.objects.only(&#39;name&#39;).get(no&#x3D;sno)            teachers &#x3D; Teacher.objects.filter(subject&#x3D;subject).order_by(&#39;no&#39;)        return render(request, &#39;teachers.html&#39;, &#123;            &#39;subject&#39;: subject,            &#39;teachers&#39;: teachers        &#125;)    except (ValueError, Subject.DoesNotExist):        return redirect(&#39;&#x2F;&#39;)</code></pre></li><li><p>修改<code>templates/subjects.html</code>和<code>templates/teachers.html</code>模板页。</p><p> <code>subjects.html</code></p>  <pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;学科信息&lt;&#x2F;title&gt;    &lt;style&gt;        #container &#123;            width: 80%;            margin: 10px auto;        &#125;        .user &#123;            float: right;            margin-right: 10px;        &#125;        .user&gt;a &#123;            margin-right: 10px;        &#125;        #main&gt;dl&gt;dt &#123;            font-size: 1.5em;            font-weight: bold;        &#125;        #main&gt;dl&gt;dd &#123;            font-size: 1.2em;        &#125;        a &#123;            text-decoration: none;            color: darkcyan;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;user&quot;&gt;            &lt;a href&#x3D;&quot;login.html&quot;&gt;用户登录&lt;&#x2F;a&gt;            &lt;a href&#x3D;&quot;register.html&quot;&gt;快速注册&lt;&#x2F;a&gt;        &lt;&#x2F;div&gt;        &lt;h1&gt;扣丁学堂所有学科&lt;&#x2F;h1&gt;        &lt;hr&gt;        &lt;div id&#x3D;&quot;main&quot;&gt;            &#123;% for subject in subjects %&#125;            &lt;dl&gt;                &lt;dt&gt;                    &lt;a href&#x3D;&quot;&#x2F;teachers&#x2F;?sno&#x3D;&#123;&#123; subject.no &#125;&#125;&quot;&gt;&#123;&#123; subject.name &#125;&#125;&lt;&#x2F;a&gt;                    &#123;% if subject.is_hot %&#125;                    &lt;img src&#x3D;&quot;&#x2F;static&#x2F;images&#x2F;hot-icon-small.png&quot;&gt;                    &#123;% endif %&#125;                &lt;&#x2F;dt&gt;                &lt;dd&gt;&#123;&#123; subject.intro &#125;&#125;&lt;&#x2F;dd&gt;            &lt;&#x2F;dl&gt;            &#123;% endfor %&#125;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p> <code>teachers.html</code></p> <pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;老师信息&lt;&#x2F;title&gt;    &lt;style&gt;        #container &#123;            width: 80%;            margin: 10px auto;        &#125;        .teacher &#123;            width: 100%;            margin: 0 auto;            padding: 10px 0;            border-bottom: 1px dashed gray;            overflow: auto;        &#125;        .teacher&gt;div &#123;            float: left;        &#125;        .photo &#123;            height: 140px;            border-radius: 75px;            overflow: hidden;            margin-left: 20px;        &#125;        .info &#123;            width: 75%;            margin-left: 30px;        &#125;        .info div &#123;            clear: both;            margin: 5px 10px;        &#125;        .info span &#123;            margin-right: 25px;        &#125;        .info a &#123;            text-decoration: none;            color: darkcyan;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;container&quot;&gt;        &lt;h1&gt;&#123;&#123; subject.name &#125;&#125;学科的老师信息&lt;&#x2F;h1&gt;        &lt;hr&gt;        &#123;% if not teachers %&#125;            &lt;h2&gt;暂无该学科老师信息&lt;&#x2F;h2&gt;        &#123;% endif %&#125;        &#123;% for teacher in teachers %&#125;        &lt;div class&#x3D;&quot;teacher&quot;&gt;            &lt;div class&#x3D;&quot;photo&quot;&gt;                &lt;img src&#x3D;&quot;&#x2F;static&#x2F;images&#x2F;&#123;&#123; teacher.photo &#125;&#125;&quot; height&#x3D;&quot;140&quot; alt&#x3D;&quot;&quot;&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;                &lt;div&gt;                    &lt;span&gt;&lt;strong&gt;姓名：&#123;&#123; teacher.name &#125;&#125;&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;                    &lt;span&gt;性别：&#123;&#123; teacher.sex | yesno:&#39;男,女&#39; &#125;&#125;&lt;&#x2F;span&gt;                    &lt;span&gt;出生日期：&#123;&#123; teacher.birth | date:&#39;Y年n月j日&#39;&#125;&#125;&lt;&#x2F;span&gt;                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;intro&quot;&gt;&#123;&#123; teacher.intro &#125;&#125;&lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;comment&quot;&gt;                    &lt;a href&#x3D;&quot;&quot;&gt;好评&lt;&#x2F;a&gt;&nbsp;(&lt;strong&gt;&#123;&#123; teacher.good_count &#125;&#125;&lt;&#x2F;strong&gt;)                    &nbsp;&nbsp;&nbsp;&nbsp;                    &lt;a href&#x3D;&quot;&quot;&gt;差评&lt;&#x2F;a&gt;&nbsp;&lt;strong&gt;&#123;&#123; teacher.bad_count &#125;&#125;&lt;&#x2F;strong&gt;)                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &#123;% endfor %&#125;        &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;返回首页&lt;&#x2F;a&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></li><li><p>修改<code>vote/urls.py</code>文件，实现映射URL。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom django.urls import pathfrom polls.views import show_subjects, show_teachersurlpatterns &#x3D; [    path(&#39;admin&#x2F;&#39;, admin.site.urls),    path(&#39;&#39;, show_subjects),    path(&#39;teachers&#x2F;&#39;, show_teachers),]</code></pre></li></ol><p>到此为止，页面上需要的图片（静态资源）还没有能够正常展示，我们在下一章节中为大家介绍如何处理模板页上的需要的静态资源。</p><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><h4 id="Django模型最佳实践"><a href="#Django模型最佳实践" class="headerlink" title="Django模型最佳实践"></a>Django模型最佳实践</h4><ol><li>正确的为模型和关系字段命名。</li><li>设置适当的<code>related_name</code>属性。</li><li>用<code>OneToOneField</code>代替<code>ForeignKeyField(unique=True)</code>。</li><li>通过“迁移操作”（migrate）来添加模型。</li><li>用NoSQL来应对需要降低范式级别的场景。</li><li>如果布尔类型可以为空要使用<code>NullBooleanField</code>。</li><li>在模型中放置业务逻辑。</li><li>用<code>&lt;ModelName&gt;.DoesNotExists</code>取代<code>ObjectDoesNotExists</code>。</li><li>在数据库中不要出现无效数据。</li><li>不要对<code>QuerySet</code>调用<code>len()</code>函数。</li><li>将<code>QuerySet</code>的<code>exists()</code>方法的返回值用于<code>if</code>条件。</li><li>用<code>DecimalField</code>来存储货币相关数据而不是<code>FloatField</code>。</li><li>定义<code>__str__</code>方法。</li><li>不要将数据文件放在同一个目录中。</li></ol><blockquote><p><strong>说明</strong>：以上内容来自于STEELKIWI网站的<a href="https://steelkiwi.com/blog/best-practices-working-django-models-python/"><em>Best Practice working with Django models in Python</em></a>，有兴趣的小伙伴可以阅读原文。</p></blockquote><h4 id="模型定义参考"><a href="#模型定义参考" class="headerlink" title="模型定义参考"></a>模型定义参考</h4><h5 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h5><p>对字段名称的限制</p><ul><li>字段名不能是Python的保留字，否则会导致语法错误</li><li>字段名不能有多个连续下划线，否则影响ORM查询操作</li></ul><p>Django模型字段类</p><table><thead><tr><th>字段类</th><th>说明</th></tr></thead><tbody><tr><td><code>AutoField</code></td><td>自增ID字段</td></tr><tr><td><code>BigIntegerField</code></td><td>64位有符号整数</td></tr><tr><td><code>BinaryField</code></td><td>存储二进制数据的字段，对应Python的<code>bytes</code>类型</td></tr><tr><td><code>BooleanField</code></td><td>存储<code>True</code>或<code>False</code></td></tr><tr><td><code>CharField</code></td><td>长度较小的字符串</td></tr><tr><td><code>DateField</code></td><td>存储日期，有<code>auto_now</code>和<code>auto_now_add</code>属性</td></tr><tr><td><code>DateTimeField</code></td><td>存储日期和日期，两个附加属性同上</td></tr><tr><td><code>DecimalField</code></td><td>存储固定精度小数，有<code>max_digits</code>（有效位数）和<code>decimal_places</code>（小数点后面）两个必要的参数</td></tr><tr><td><code>DurationField</code></td><td>存储时间跨度</td></tr><tr><td><code>EmailField</code></td><td>与<code>CharField</code>相同，可以用<code>EmailValidator</code>验证</td></tr><tr><td><code>FileField</code></td><td>文件上传字段</td></tr><tr><td><code>FloatField</code></td><td>存储浮点数</td></tr><tr><td><code>ImageField</code></td><td>其他同<code>FileFiled</code>，要验证上传的是不是有效图像</td></tr><tr><td><code>IntegerField</code></td><td>存储32位有符号整数。</td></tr><tr><td><code>GenericIPAddressField</code></td><td>存储IPv4或IPv6地址</td></tr><tr><td><code>NullBooleanField</code></td><td>存储<code>True</code>、<code>False</code>或<code>null</code>值</td></tr><tr><td><code>PositiveIntegerField</code></td><td>存储无符号整数（只能存储正数）</td></tr><tr><td><code>SlugField</code></td><td>存储slug（简短标注）</td></tr><tr><td><code>SmallIntegerField</code></td><td>存储16位有符号整数</td></tr><tr><td><code>TextField</code></td><td>存储数据量较大的文本</td></tr><tr><td><code>TimeField</code></td><td>存储时间</td></tr><tr><td><code>URLField</code></td><td>存储URL的<code>CharField</code></td></tr><tr><td><code>UUIDField</code></td><td>存储全局唯一标识符</td></tr></tbody></table><h5 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h5><p>通用字段属性</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>null</code></td><td>数据库中对应的字段是否允许为<code>NULL</code>，默认为<code>False</code></td></tr><tr><td><code>blank</code></td><td>后台模型管理验证数据时，是否允许为<code>NULL</code>，默认为<code>False</code></td></tr><tr><td><code>choices</code></td><td>设定字段的选项，各元组中的第一个值是设置在模型上的值，第二值是人类可读的值</td></tr><tr><td><code>db_column</code></td><td>字段对应到数据库表中的列名，未指定时直接使用字段的名称</td></tr><tr><td><code>db_index</code></td><td>设置为<code>True</code>时将在该字段创建索引</td></tr><tr><td><code>db_tablespace</code></td><td>为有索引的字段设置使用的表空间，默认为<code>DEFAULT_INDEX_TABLESPACE</code></td></tr><tr><td><code>default</code></td><td>字段的默认值</td></tr><tr><td><code>editable</code></td><td>字段在后台模型管理或<code>ModelForm</code>中是否显示，默认为<code>True</code></td></tr><tr><td><code>error_messages</code></td><td>设定字段抛出异常时的默认消息的字典，其中的键包括<code>null</code>、<code>blank</code>、<code>invalid</code>、<code>invalid_choice</code>、<code>unique</code>和<code>unique_for_date</code></td></tr><tr><td><code>help_text</code></td><td>表单小组件旁边显示的额外的帮助文本。</td></tr><tr><td><code>primary_key</code></td><td>将字段指定为模型的主键，未指定时会自动添加<code>AutoField</code>用于主键，只读。</td></tr><tr><td><code>unique</code></td><td>设置为<code>True</code>时，表中字段的值必须是唯一的</td></tr><tr><td><code>verbose_name</code></td><td>字段在后台模型管理显示的名称，未指定时使用字段的名称</td></tr></tbody></table><p><code>ForeignKey</code>属性</p><ol><li><code>limit_choices_to</code>：值是一个Q对象或返回一个Q对象，用于限制后台显示哪些对象。</li><li><code>related_name</code>：用于获取关联对象的关联管理器对象（反向查询），如果不允许反向，该属性应该被设置为<code>&#39;+&#39;</code>，或者以<code>&#39;+&#39;</code>结尾。</li><li><code>to_field</code>：指定关联的字段，默认关联对象的主键字段。</li><li><code>db_constraint</code>：是否为外键创建约束，默认值为<code>True</code>。</li><li><code>on_delete</code>：外键关联的对象被删除时对应的动作，可取的值包括<code>django.db.models</code>中定义的：<ul><li><code>CASCADE</code>：级联删除。</li><li><code>PROTECT</code>：抛出<code>ProtectedError</code>异常，阻止删除引用的对象。</li><li><code>SET_NULL</code>：把外键设置为<code>null</code>，当<code>null</code>属性被设置为<code>True</code>时才能这么做。</li><li><code>SET_DEFAULT</code>：把外键设置为默认值，提供了默认值才能这么做。</li></ul></li></ol><p><code>ManyToManyField</code>属性</p><ol><li><code>symmetrical</code>：是否建立对称的多对多关系。</li><li><code>through</code>：指定维持多对多关系的中间表的Django模型。</li><li><code>throughfields</code>：定义了中间模型时可以指定建立多对多关系的字段。</li><li><code>db_table</code>：指定维持多对多关系的中间表的表名。</li></ol><h5 id="模型元数据选项"><a href="#模型元数据选项" class="headerlink" title="模型元数据选项"></a>模型元数据选项</h5><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>设置为True时模型是抽象父类</td></tr><tr><td><code>app_label</code></td><td>如果定义模型的应用不在INSTALLED_APPS中可以用该属性指定</td></tr><tr><td><code>db_table</code></td><td>模型使用的数据表名称</td></tr><tr><td><code>db_tablespace</code></td><td>模型使用的数据表空间</td></tr><tr><td><code>default_related_name</code></td><td>关联对象回指这个模型时默认使用的名称，默认为<model_name>_set</td></tr><tr><td><code>get_latest_by</code></td><td>模型中可排序字段的名称。</td></tr><tr><td><code>managed</code></td><td>设置为True时，Django在迁移中创建数据表并在执行flush管理命令时把表移除</td></tr><tr><td><code>order_with_respect_to</code></td><td>标记对象为可排序的</td></tr><tr><td><code>ordering</code></td><td>对象的默认排序</td></tr><tr><td><code>permissions</code></td><td>创建对象时写入权限表的额外权限</td></tr><tr><td><code>default_permissions</code></td><td>默认为<code>(&#39;add&#39;, &#39;change&#39;, &#39;delete&#39;)</code></td></tr><tr><td><code>unique_together</code></td><td>设定组合在一起时必须独一无二的字段名</td></tr><tr><td><code>index_together</code></td><td>设定一起建立索引的多个字段名</td></tr><tr><td><code>verbose_name</code></td><td>为对象设定人类可读的名称</td></tr><tr><td><code>verbose_name_plural</code></td><td>设定对象的复数名称</td></tr></tbody></table><h4 id="查询参考"><a href="#查询参考" class="headerlink" title="查询参考"></a>查询参考</h4><h5 id="按字段查找可以用的条件"><a href="#按字段查找可以用的条件" class="headerlink" title="按字段查找可以用的条件"></a>按字段查找可以用的条件</h5><ol><li><code>exact</code> &#x2F; <code>iexact</code>：精确匹配&#x2F;忽略大小写的精确匹配查询</li><li><code>contains</code> &#x2F; <code>icontains</code> &#x2F; <code>startswith</code> &#x2F; <code>istartswith</code> &#x2F; <code>endswith</code> &#x2F; <code>iendswith</code>：基于<code>like</code>的模糊查询</li><li><code>in</code> ：集合运算</li><li><code>gt</code> &#x2F; <code>gte</code> &#x2F; <code>lt</code> &#x2F; <code>lte</code>：大于&#x2F;大于等于&#x2F;小于&#x2F;小于等于关系运算</li><li><code>range</code>：指定范围查询（SQL中的<code>between…and…</code>）</li><li><code>year</code> &#x2F; <code>month</code> &#x2F; <code>day</code> &#x2F; <code>week_day</code> &#x2F; <code>hour</code> &#x2F; <code>minute</code> &#x2F; <code>second</code>：查询时间日期</li><li><code>isnull</code>：查询空值（True）或非空值（False）</li><li><code>search</code>：基于全文索引的全文检索（一般很少使用）</li><li><code>regex</code> &#x2F; <code>iregex</code>：基于正则表达式的模糊匹配查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>48.静态资源和Ajax请求</title>
      <link href="/2024/07/01/48.jing-tai-zi-yuan-he-ajax-qing-qiu/"/>
      <url>/2024/07/01/48.jing-tai-zi-yuan-he-ajax-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h2 id="静态资源和Ajax请求"><a href="#静态资源和Ajax请求" class="headerlink" title="静态资源和Ajax请求"></a>静态资源和Ajax请求</h2><h3 id="加载静态资源"><a href="#加载静态资源" class="headerlink" title="加载静态资源"></a>加载静态资源</h3><p>如果要在Django项目中使用静态资源，可以先创建一个用于保存静态资源的目录。在<code>vote</code>项目中，我们将静态资源置于名为<code>static</code>的文件夹中，在该文件夹包含了三个子文件夹：css、js和images，分别用来保存外部CSS文件、外部JavaScript文件和图片资源，如下图所示。</p><p><img src="/res/pycharm-django-static.png"></p><p>为了能够找到保存静态资源的文件夹，我们还需要修改Django项目的配置文件<code>settings.py</code>，如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">STATICFILES_DIRS &#x3D; [os.path.join(BASE_DIR, &#39;static&#39;), ]STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</code></pre><p>配置好静态资源之后，大家可以运行项目，然后看看之前我们写的页面上的图片是否能够正常加载出来。需要说明的是，在项目正式部署到线上环境后，我们通常会把静态资源交给专门的静态资源服务器（如Nginx、Apache）来处理，而不是有运行Python代码的服务器来管理静态资源，所以上面的配置并不适用于生产环境，仅供项目开发阶段测试使用。使用静态资源的正确姿势我们会在后续的章节为大家讲解。</p><h3 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h3><p>接下来就可以实现“好评”和“差评”的功能了，很明显如果能够在不刷新页面的情况下实现这两个功能会带来更好的用户体验，因此我们考虑使用<a href="https://zh.wikipedia.org/wiki/AJAX">Ajax</a>技术来实现“好评”和“差评”。Ajax是Asynchronous Javascript And XML的缩写 , 简单的说，使用Ajax技术可以在不重新加载整个页面的情况下对页面进行局部刷新。</p><p>对于传统的Web应用，每次页面上需要加载新的内容都需要重新请求服务器并刷新整个页面，如果服务器短时间内无法给予响应或者网络状况并不理想，那么可能会造成浏览器长时间的空白并使得用户处于等待状态，在这个期间用户什么都做不了，如下图所示。很显然，这样的Web应用并不能带来很好的用户体验。</p><p><img src="/res/synchronous-web-request.png"></p><p>对于使用Ajax技术的Web应用，浏览器可以向服务器发起异步请求来获取数据。异步请求不会中断用户体验，当服务器返回了新的数据，我们可以通过JavaScript代码进行DOM操作来实现对页面的局部刷新，这样就相当于在不刷新整个页面的情况下更新了页面的内容，如下图所示。</p><p><img src="/res/asynchronous-web-request.png"></p><p>在使用Ajax技术时，浏览器跟服务器通常会交换XML或JSON格式的数据，XML是以前使用得非常多的一种数据格式，近年来几乎已经完全被JSON取代，下面是两种数据格式的对比。</p><p>XML格式：</p><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;message&gt;&lt;from&gt;Alice&lt;&#x2F;from&gt;    &lt;to&gt;Bob&lt;&#x2F;to&gt;    &lt;content&gt;Dinner is on me!&lt;&#x2F;content&gt;&lt;&#x2F;message&gt;</code></pre><p>JSON格式：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;from&quot;: &quot;Alice&quot;,    &quot;to&quot;: &quot;Bob&quot;,    &quot;content&quot;: &quot;Dinner is on me!&quot;&#125;</code></pre><p>通过上面的对比，明显JSON格式的数据要紧凑得多，所以传输效率更高，而且JSON本身也是JavaScript中的一种对象表达式语法，在JavaScript代码中处理JSON格式的数据更加方便。</p><h3 id="用Ajax实现投票功能"><a href="#用Ajax实现投票功能" class="headerlink" title="用Ajax实现投票功能"></a>用Ajax实现投票功能</h3><p>下面，我们使用Ajax技术来实现投票的功能，首先修改项目的<code>urls.py</code>文件，为“好评”和“差评”功能映射对应的URL。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom django.urls import pathfrom vote import viewsurlpatterns &#x3D; [    path(&#39;&#39;, views.show_subjects),    path(&#39;teachers&#x2F;&#39;, views.show_teachers),    path(&#39;praise&#x2F;&#39;, views.praise_or_criticize),    path(&#39;criticize&#x2F;&#39;, views.praise_or_criticize),    path(&#39;admin&#x2F;&#39;, admin.site.urls),]</code></pre><p>设计视图函数<code>praise_or_criticize</code>来支持“好评”和“差评”功能，该视图函数通过Django封装的JsonResponse类将字典序列化成JSON字符串作为返回给浏览器的响应内容。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def praise_or_criticize(request):    &quot;&quot;&quot;好评&quot;&quot;&quot;    try:        tno &#x3D; int(request.GET.get(&#39;tno&#39;))        teacher &#x3D; Teacher.objects.get(no&#x3D;tno)        if request.path.startswith(&#39;&#x2F;praise&#39;):            teacher.good_count +&#x3D; 1            count &#x3D; teacher.good_count        else:            teacher.bad_count +&#x3D; 1            count &#x3D; teacher.bad_count        teacher.save()        data &#x3D; &#123;&#39;code&#39;: 20000, &#39;mesg&#39;: &#39;操作成功&#39;, &#39;count&#39;: count&#125;    except (ValueError, Teacher.DoseNotExist):        data &#x3D; &#123;&#39;code&#39;: 20001, &#39;mesg&#39;: &#39;操作失败&#39;&#125;    return JsonResponse(data)</code></pre><p>修改显示老师信息的模板页，引入jQuery库来实现事件处理、Ajax请求和DOM操作。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;老师信息&lt;&#x2F;title&gt;    &lt;style&gt;        #container &#123;            width: 80%;            margin: 10px auto;        &#125;        .teacher &#123;            width: 100%;            margin: 0 auto;            padding: 10px 0;            border-bottom: 1px dashed gray;            overflow: auto;        &#125;        .teacher&gt;div &#123;            float: left;        &#125;        .photo &#123;            height: 140px;            border-radius: 75px;            overflow: hidden;            margin-left: 20px;        &#125;        .info &#123;            width: 75%;            margin-left: 30px;        &#125;        .info div &#123;            clear: both;            margin: 5px 10px;        &#125;        .info span &#123;            margin-right: 25px;        &#125;        .info a &#123;            text-decoration: none;            color: darkcyan;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;container&quot;&gt;        &lt;h1&gt;&#123;&#123; subject.name &#125;&#125;学科的老师信息&lt;&#x2F;h1&gt;        &lt;hr&gt;        &#123;% if not teachers %&#125;            &lt;h2&gt;暂无该学科老师信息&lt;&#x2F;h2&gt;        &#123;% endif %&#125;        &#123;% for teacher in teachers %&#125;        &lt;div class&#x3D;&quot;teacher&quot;&gt;            &lt;div class&#x3D;&quot;photo&quot;&gt;                &lt;img src&#x3D;&quot;&#x2F;static&#x2F;images&#x2F;&#123;&#123; teacher.photo &#125;&#125;&quot; height&#x3D;&quot;140&quot; alt&#x3D;&quot;&quot;&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;                &lt;div&gt;                    &lt;span&gt;&lt;strong&gt;姓名：&#123;&#123; teacher.name &#125;&#125;&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;                    &lt;span&gt;性别：&#123;&#123; teacher.sex | yesno:&#39;男,女&#39; &#125;&#125;&lt;&#x2F;span&gt;                    &lt;span&gt;出生日期：&#123;&#123; teacher.birth &#125;&#125;&lt;&#x2F;span&gt;                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;intro&quot;&gt;&#123;&#123; teacher.intro &#125;&#125;&lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;comment&quot;&gt;                    &lt;a href&#x3D;&quot;&#x2F;praise&#x2F;?tno&#x3D;&#123;&#123; teacher.no &#125;&#125;&quot;&gt;好评&lt;&#x2F;a&gt;&nbsp;&nbsp;                    (&lt;strong&gt;&#123;&#123; teacher.good_count &#125;&#125;&lt;&#x2F;strong&gt;)                    &nbsp;&nbsp;&nbsp;&nbsp;                    &lt;a href&#x3D;&quot;&#x2F;criticize&#x2F;?tno&#x3D;&#123;&#123; teacher.no &#125;&#125;&quot;&gt;差评&lt;&#x2F;a&gt;&nbsp;&nbsp;                    (&lt;strong&gt;&#123;&#123; teacher.bad_count &#125;&#125;&lt;&#x2F;strong&gt;)                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &#123;% endfor %&#125;        &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;返回首页&lt;&#x2F;a&gt;    &lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        $(() &#x3D;&gt; &#123;            $(&#39;.comment&gt;a&#39;).on(&#39;click&#39;, (evt) &#x3D;&gt; &#123;                evt.preventDefault()                let url &#x3D; $(evt.target).attr(&#39;href&#39;)                $.getJSON(url, (json) &#x3D;&gt; &#123;                    if (json.code &#x3D;&#x3D; 20000) &#123;                        $(evt.target).next().text(json.count)                    &#125; else &#123;                        alert(json.mesg)                    &#125;                &#125;)            &#125;)        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>上面的前端代码中，使用了jQuery库封装的<code>getJSON</code>方法向服务器发送异步请求，如果不熟悉前端的jQuery库，可以参考<a href="https://www.runoob.com/manual/jquery/">《jQuery API手册》</a>。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>到此为止，这个投票项目的核心功能已然完成，在下面的章节中我们会要求用户必须登录才能投票，没有账号的用户可以通过注册功能注册一个账号。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>49.Cookie和Session</title>
      <link href="/2024/07/01/49.cookie-he-session/"/>
      <url>/2024/07/01/49.cookie-he-session/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2><p>我们继续来完成上一章节中的项目，实现“用户登录”的功能，并限制只有登录的用户才能投票。</p><h3 id="用户登录的准备工作"><a href="#用户登录的准备工作" class="headerlink" title="用户登录的准备工作"></a>用户登录的准备工作</h3><p>我们先为实现用户登录做一些准备工作。</p><ol><li><p>创建用户模型。之前我们讲解过如果通过Django的ORM实现从二维表到模型的转换（反向工程），这次我们尝试把模型变成二维表（正向工程）。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">class User(models.Model):    &quot;&quot;&quot;用户&quot;&quot;&quot;    no &#x3D; models.AutoField(primary_key&#x3D;True, verbose_name&#x3D;&#39;编号&#39;)    username &#x3D; models.CharField(max_length&#x3D;20, unique&#x3D;True, verbose_name&#x3D;&#39;用户名&#39;)    password &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&#39;密码&#39;)    tel &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;&#39;手机号&#39;)    reg_date &#x3D; models.DateTimeField(auto_now_add&#x3D;True, verbose_name&#x3D;&#39;注册时间&#39;)    last_visit &#x3D; models.DateTimeField(null&#x3D;True, verbose_name&#x3D;&#39;最后登录时间&#39;)    class Meta:        db_table &#x3D; &#39;tb_user&#39;        verbose_name &#x3D; &#39;用户&#39;        verbose_name_plural &#x3D; &#39;用户&#39;</code></pre></li><li><p>使用下面的命令生成迁移文件并执行迁移，将<code>User</code>模型直接变成关系型数据库中的二维表<code>tb_user</code>。</p> <pre class="language-Bash" data-language="Bash"><code class="language-Bash">python manage.py makemigrations pollspython manage.py migrate polls</code></pre></li><li><p>用下面的SQL语句直接插入两条测试数据，通常不能将用户的密码直接保存在数据库中，因此我们将用户密码处理成对应的MD5摘要。MD5消息摘要算法是一种被广泛使用的密码哈希函数（散列函数），可以产生出一个128位（比特）的哈希值（散列值），用于确保信息传输完整一致。在使用哈希值时，通常会将哈希值表示为16进制字符串，因此128位的MD5摘要通常表示为32个十六进制符号。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">insert into &#96;tb_user&#96;    (&#96;username&#96;, &#96;password&#96;, &#96;tel&#96;, &#96;reg_date&#96;)values    (&#39;wangdachui&#39;, &#39;1c63129ae9db9c60c3e8aa94d3e00495&#39;, &#39;13122334455&#39;, now()),    (&#39;hellokitty&#39;, &#39;c6f8cf68e5f68b0aa4680e089ee4742c&#39;, &#39;13890006789&#39;, now());</code></pre><blockquote><p><strong>说明</strong>：上面创建的两个用户<code>wangdachui</code>和<code>hellokitty</code>密码分别是<code>1qaz2wsx</code>和<code>Abc123!!</code>。</p></blockquote></li><li><p>我们在应用下增加一个名为<code>utils.py</code>的模块用来保存需要使用的工具函数。Python标准库中的<code>hashlib</code>模块封装了常用的哈希算法，包括：MD5、SHA1、SHA256等。下面是使用<code>hashlib</code>中的<code>md5</code>类将字符串处理成MD5摘要的函数如下所示。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">import hashlibdef gen_md5_digest(content):    return hashlib.md5(content.encode()).hexdigest()</code></pre></li><li><p>编写用户登录的视图函数和模板页。</p><p> 添加渲染登录页面的视图函数：</p> <pre class="language-Python" data-language="Python"><code class="language-Python">def login(request: HttpRequest) -&gt; HttpResponse:    hint &#x3D; &#39;&#39;    return render(request, &#39;login.html&#39;, &#123;&#39;hint&#39;: hint&#125;)</code></pre><p> 增加<code>login.html</code>模板页：</p> <pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;用户登录&lt;&#x2F;title&gt;    &lt;style&gt;        #container &#123;            width: 520px;            margin: 10px auto;        &#125;        .input &#123;            margin: 20px 0;            width: 460px;            height: 40px;        &#125;        .input&gt;label &#123;            display: inline-block;            width: 140px;            text-align: right;        &#125;        .input&gt;img &#123;            width: 150px;            vertical-align: middle;        &#125;        input[name&#x3D;captcha] &#123;            vertical-align: middle;        &#125;        form+div &#123;            margin-top: 20px;        &#125;        form+div&gt;a &#123;            text-decoration: none;            color: darkcyan;            font-size: 1.2em;        &#125;        .button &#123;            width: 500px;            text-align: center;            margin-top: 20px;        &#125;        .hint &#123;            color: red;            font-size: 12px;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;container&quot;&gt;        &lt;h1&gt;用户登录&lt;&#x2F;h1&gt;        &lt;hr&gt;        &lt;p class&#x3D;&quot;hint&quot;&gt;&#123;&#123; hint &#125;&#125;&lt;&#x2F;p&gt;        &lt;form action&#x3D;&quot;&#x2F;login&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;            &#123;% csrf_token %&#125;            &lt;fieldset&gt;                &lt;legend&gt;用户信息&lt;&#x2F;legend&gt;                &lt;div class&#x3D;&quot;input&quot;&gt;                    &lt;label&gt;用户名：&lt;&#x2F;label&gt;                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;input&quot;&gt;                    &lt;label&gt;密码：&lt;&#x2F;label&gt;                    &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;input&quot;&gt;                    &lt;label&gt;验证码：&lt;&#x2F;label&gt;                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;captcha&quot;&gt;                    &lt;img id&#x3D;&quot;code&quot; src&#x3D;&quot;&#x2F;captcha&#x2F;&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;150&quot; height&#x3D;&quot;40&quot;&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;fieldset&gt;            &lt;div class&#x3D;&quot;button&quot;&gt;                &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;                &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;form&gt;        &lt;div&gt;            &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;返回首页&lt;&#x2F;a&gt;            &lt;a href&#x3D;&quot;&#x2F;register&#x2F;&quot;&gt;注册新用户&lt;&#x2F;a&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p> 注意，在上面的表单中，我们使用了模板指令<code>&#123;% csrf_token %&#125;</code>为表单添加一个隐藏域（大家可以在浏览器中显示网页源代码就可以看到这个指令生成的<code>type</code>属性为<code>hidden</code>的<code>input</code>标签），它的作用是在表单中生成一个随机令牌（token）来防范<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">跨站请求伪造</a>（简称为CSRF），这也是Django在提交表单时的硬性要求。如果我们的表单中没有这样的令牌，那么提交表单时，Django框架会产生一个响应状态码为<code>403</code>的响应（禁止访问），除非我们设置了免除CSRF令牌。下图是一个关于CSRF简单生动的例子。</p><p> <img src="/./res/csrf-simple.png"></p></li></ol><p>接下来，我们可以编写提供验证码和实现用户登录的视图函数，在此之前，我们先说说一个Web应用实现用户跟踪的方式以及Django框架对实现用户跟踪所提供的支持。对一个Web应用来说，用户登录成功后必然要让服务器能够记住该用户已经登录，这样服务器才能为这个用户提供更好的服务，而且上面说到的CSRF也是通过钓鱼网站来套取用户登录信息进行恶意操作的攻击手段，这些都是以用户跟踪技术为基础的。在理解了这些背景知识后，我们就清楚用户登录时到底需要执行哪些操作。</p><h3 id="实现用户跟踪"><a href="#实现用户跟踪" class="headerlink" title="实现用户跟踪"></a>实现用户跟踪</h3><p>如今，一个网站如果不通过某种方式记住你是谁以及你之前在网站的活动情况，失去的就是网站的可用性和便利性，继而很有可能导致网站用户的流式，所以记住一个用户（更专业的说法叫<strong>用户跟踪</strong>）对绝大多数Web应用来说都是必需的功能。</p><p>在服务器端，我们想记住一个用户最简单的办法就是创建一个对象，通过这个对象就可以把用户相关的信息都保存起来，这个对象就是我们常说的session（用户会话对象）。那么问题来了，HTTP本身是一个<strong>无连接</strong>（每次请求和响应的过程中，服务器一旦完成对客户端请求的响应之后就断开连接）、<strong>无状态</strong>（客户端再次发起对服务器的请求时，服务器无法得知这个客户端之前的任何信息）的协议，即便服务器通过session对象保留了用户数据，还得通过某种方式来确定当前的请求与之前保存过的哪一个session是有关联的。相信很多人都能想到，我们可以给每个session对象分配一个全局唯一的标识符来识别session对象，我们姑且称之为sessionid，每次客户端发起请求时，只要携带上这个sessionid，就有办法找到与之对应的session对象，从而实现在两次请求之间记住该用户的信息，也就是我们之前说的用户跟踪。</p><p>要让客户端记住并在每次请求时带上sessionid又有以下几种做法：</p><ol><li><p>URL重写。所谓URL重写就是在URL中携带sessionid，例如：<code>http://www.example.com/index.html?sessionid=123456</code>，服务器通过获取sessionid参数的值来取到与之对应的session对象。</p></li><li><p>隐藏域（隐式表单域）。在提交表单的时候，可以通过在表单中设置隐藏域向服务器发送额外的数据。例如：<code>&lt;input type=&quot;hidden&quot; name=&quot;sessionid&quot; value=&quot;123456&quot;&gt;</code>。</p></li><li><p>本地存储。现在的浏览器都支持多种本地存储方案，包括：cookie、localStorage、sessionStorage、IndexedDB等。在这些方案中，cookie是历史最为悠久也是被诟病得最多的一种方案，也是我们接下来首先为大家讲解的一种方案。简单的说，cookie是一种以键值对方式保存在浏览器临时文件中的数据，每次请求时，请求头中会携带本站点的cookie到服务器，那么只要将sessionid写入cookie，下次请求时服务器只要读取请求头中的cookie就能够获得这个sessionid，如下图所示。</p><p><img src="/./res/sessionid_from_cookie.png"></p><p>在HTML5时代要，除了cookie，还可以使用新的本地存储API来保存数据，就是刚才提到的localStorage、sessionStorage、IndexedDB等技术，如下图所示。</p><p><img src="/./res/cookie_xstorage_indexeddb.png"></p></li></ol><p><strong>总结一下</strong>，要实现用户跟踪，服务器端可以为每个用户会话创建一个session对象并将session对象的ID写入到浏览器的cookie中；用户下次请求服务器时，浏览器会在HTTP请求头中携带该网站保存的cookie信息，这样服务器就可以从cookie中找到session对象的ID并根据此ID获取到之前创建的session对象；由于session对象可以用键值对的方式保存用户数据，这样之前保存在session对象中的信息可以悉数取出，服务器也可以根据这些信息判定用户身份和了解用户偏好，为用户提供更好的个性化服务。</p><h3 id="Django框架对session的支持"><a href="#Django框架对session的支持" class="headerlink" title="Django框架对session的支持"></a>Django框架对session的支持</h3><p>在创建Django项目时，默认的配置文件<code>settings.py</code>文件中已经激活了一个名为<code>SessionMiddleware</code>的中间件（关于中间件的知识我们在后面的章节做详细讲解，这里只需要知道它的存在即可），因为这个中间件的存在，我们可以直接通过请求对象的<code>session</code>属性来操作会话对象。前面我们说过，<code>session</code>属性是一个像字典一样可以读写数据的容器对象，因此我们可以使用“键值对”的方式来保留用户数据。与此同时，<code>SessionMiddleware</code>中间件还封装了对cookie的操作，在cookie中保存了sessionid，这一点我们在上面已经提到过了。</p><p>在默认情况下，Django将session的数据序列化后保存在关系型数据库中，在Django 1.6以后的版本中，默认的序列化数据的方式是JSON序列化，而在此之前一直使用Pickle序列化。JSON序列化和Pickle序列化的差别在于前者将对象序列化为字符串（字符形式），而后者将对象序列化为字节串（二进制形式），因为安全方面的原因，JSON序列化成为了目前Django框架默认序列化数据的方式，这就要求在我们保存在session中的数据必须是能够JSON序列化的，否则就会引发异常。还有一点需要说明的是，使用关系型数据库保存session中的数据在大多数时候并不是最好的选择，因为数据库可能会承受巨大的压力而成为系统性能的瓶颈，在后面的章节中我们会告诉大家如何将session保存到缓存服务中以提升系统的性能。</p><h3 id="实现用户登录验证"><a href="#实现用户登录验证" class="headerlink" title="实现用户登录验证"></a>实现用户登录验证</h3><p>首先，我们在刚才的<code>polls/utils.py</code>文件中编写生成随机验证码的函数<code>gen_random_code</code>，内容如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomALL_CHARS &#x3D; &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;def gen_random_code(length&#x3D;4):    return &#39;&#39;.join(random.choices(ALL_CHARS, k&#x3D;length))</code></pre><p>编写生成验证码图片的类<code>Captcha</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;图片验证码&quot;&quot;&quot;import osimport randomfrom io import BytesIOfrom PIL import Imagefrom PIL import ImageFilterfrom PIL.ImageDraw import Drawfrom PIL.ImageFont import truetypeclass Bezier:    &quot;&quot;&quot;贝塞尔曲线&quot;&quot;&quot;    def __init__(self):        self.tsequence &#x3D; tuple([t &#x2F; 20.0 for t in range(21)])        self.beziers &#x3D; &#123;&#125;    def make_bezier(self, n):        &quot;&quot;&quot;绘制贝塞尔曲线&quot;&quot;&quot;        try:            return self.beziers[n]        except KeyError:            combinations &#x3D; pascal_row(n - 1)            result &#x3D; []            for t in self.tsequence:                tpowers &#x3D; (t ** i for i in range(n))                upowers &#x3D; ((1 - t) ** i for i in range(n - 1, -1, -1))                coefs &#x3D; [c * a * b for c, a, b in zip(combinations,                                                      tpowers, upowers)]                result.append(coefs)            self.beziers[n] &#x3D; result            return resultclass Captcha:    &quot;&quot;&quot;验证码&quot;&quot;&quot;    def __init__(self, width, height, fonts&#x3D;None, color&#x3D;None):        self._image &#x3D; None        self._fonts &#x3D; fonts if fonts else \            [os.path.join(os.path.dirname(__file__), &#39;fonts&#39;, font)             for font in [&#39;Arial.ttf&#39;, &#39;Georgia.ttf&#39;, &#39;Action.ttf&#39;]]        self._color &#x3D; color if color else random_color(0, 200, random.randint(220, 255))        self._width, self._height &#x3D; width, height    @classmethod    def instance(cls, width&#x3D;200, height&#x3D;75):        &quot;&quot;&quot;用于获取Captcha对象的类方法&quot;&quot;&quot;        prop_name &#x3D; f&#39;_instance_&#123;width&#125;_&#123;height&#125;&#39;        if not hasattr(cls, prop_name):            setattr(cls, prop_name, cls(width, height))        return getattr(cls, prop_name)    def _background(self):        &quot;&quot;&quot;绘制背景&quot;&quot;&quot;        Draw(self._image).rectangle([(0, 0), self._image.size],                                    fill&#x3D;random_color(230, 255))    def _smooth(self):        &quot;&quot;&quot;平滑图像&quot;&quot;&quot;        return self._image.filter(ImageFilter.SMOOTH)    def _curve(self, width&#x3D;4, number&#x3D;6, color&#x3D;None):        &quot;&quot;&quot;绘制曲线&quot;&quot;&quot;        dx, height &#x3D; self._image.size        dx &#x2F;&#x3D; number        path &#x3D; [(dx * i, random.randint(0, height))                for i in range(1, number)]        bcoefs &#x3D; Bezier().make_bezier(number - 1)        points &#x3D; []        for coefs in bcoefs:            points.append(tuple(sum([coef * p for coef, p in zip(coefs, ps)])                                for ps in zip(*path)))        Draw(self._image).line(points, fill&#x3D;color if color else self._color, width&#x3D;width)    def _noise(self, number&#x3D;50, level&#x3D;2, color&#x3D;None):        &quot;&quot;&quot;绘制扰码&quot;&quot;&quot;        width, height &#x3D; self._image.size        dx, dy &#x3D; width &#x2F; 10, height &#x2F; 10        width, height &#x3D; width - dx, height - dy        draw &#x3D; Draw(self._image)        for i in range(number):            x &#x3D; int(random.uniform(dx, width))            y &#x3D; int(random.uniform(dy, height))            draw.line(((x, y), (x + level, y)),                      fill&#x3D;color if color else self._color, width&#x3D;level)    def _text(self, captcha_text, fonts, font_sizes&#x3D;None, drawings&#x3D;None, squeeze_factor&#x3D;0.75, color&#x3D;None):        &quot;&quot;&quot;绘制文本&quot;&quot;&quot;        color &#x3D; color if color else self._color        fonts &#x3D; tuple([truetype(name, size)                       for name in fonts                       for size in font_sizes or (65, 70, 75)])        draw &#x3D; Draw(self._image)        char_images &#x3D; []        for c in captcha_text:            font &#x3D; random.choice(fonts)            c_width, c_height &#x3D; draw.textsize(c, font&#x3D;font)            char_image &#x3D; Image.new(&#39;RGB&#39;, (c_width, c_height), (0, 0, 0))            char_draw &#x3D; Draw(char_image)            char_draw.text((0, 0), c, font&#x3D;font, fill&#x3D;color)            char_image &#x3D; char_image.crop(char_image.getbbox())            for drawing in drawings:                d &#x3D; getattr(self, drawing)                char_image &#x3D; d(char_image)            char_images.append(char_image)        width, height &#x3D; self._image.size        offset &#x3D; int((width - sum(int(i.size[0] * squeeze_factor)                                  for i in char_images[:-1]) -                      char_images[-1].size[0]) &#x2F; 2)        for char_image in char_images:            c_width, c_height &#x3D; char_image.size            mask &#x3D; char_image.convert(&#39;L&#39;).point(lambda i: i * 1.97)            self._image.paste(char_image,                              (offset, int((height - c_height) &#x2F; 2)),                              mask)            offset +&#x3D; int(c_width * squeeze_factor)    @staticmethod    def _warp(image, dx_factor&#x3D;0.3, dy_factor&#x3D;0.3):        &quot;&quot;&quot;图像扭曲&quot;&quot;&quot;        width, height &#x3D; image.size        dx &#x3D; width * dx_factor        dy &#x3D; height * dy_factor        x1 &#x3D; int(random.uniform(-dx, dx))        y1 &#x3D; int(random.uniform(-dy, dy))        x2 &#x3D; int(random.uniform(-dx, dx))        y2 &#x3D; int(random.uniform(-dy, dy))        warp_image &#x3D; Image.new(            &#39;RGB&#39;,            (width + abs(x1) + abs(x2), height + abs(y1) + abs(y2)))        warp_image.paste(image, (abs(x1), abs(y1)))        width2, height2 &#x3D; warp_image.size        return warp_image.transform(            (width, height),            Image.QUAD,            (x1, y1, -x1, height2 - y2, width2 + x2, height2 + y2, width2 - x2, -y1))    @staticmethod    def _offset(image, dx_factor&#x3D;0.1, dy_factor&#x3D;0.2):        &quot;&quot;&quot;图像偏移&quot;&quot;&quot;        width, height &#x3D; image.size        dx &#x3D; int(random.random() * width * dx_factor)        dy &#x3D; int(random.random() * height * dy_factor)        offset_image &#x3D; Image.new(&#39;RGB&#39;, (width + dx, height + dy))        offset_image.paste(image, (dx, dy))        return offset_image    @staticmethod    def _rotate(image, angle&#x3D;25):        &quot;&quot;&quot;图像旋转&quot;&quot;&quot;        return image.rotate(random.uniform(-angle, angle),                            Image.BILINEAR, expand&#x3D;1)    def generate(self, captcha_text&#x3D;&#39;&#39;, fmt&#x3D;&#39;PNG&#39;):        &quot;&quot;&quot;生成验证码(文字和图片)        :param captcha_text: 验证码文字        :param fmt: 生成的验证码图片格式        :return: 验证码图片的二进制数据        &quot;&quot;&quot;        self._image &#x3D; Image.new(&#39;RGB&#39;, (self._width, self._height), (255, 255, 255))        self._background()        self._text(captcha_text, self._fonts,                   drawings&#x3D;[&#39;_warp&#39;, &#39;_rotate&#39;, &#39;_offset&#39;])        self._curve()        self._noise()        self._smooth()        image_bytes &#x3D; BytesIO()        self._image.save(image_bytes, format&#x3D;fmt)        return image_bytes.getvalue()def pascal_row(n&#x3D;0):    &quot;&quot;&quot;生成毕达哥拉斯三角形（杨辉三角）&quot;&quot;&quot;    result &#x3D; [1]    x, numerator &#x3D; 1, n    for denominator in range(1, n &#x2F;&#x2F; 2 + 1):        x *&#x3D; numerator        x &#x2F;&#x3D; denominator        result.append(x)        numerator -&#x3D; 1    if n &amp; 1 &#x3D;&#x3D; 0:        result.extend(reversed(result[:-1]))    else:        result.extend(reversed(result))    return resultdef random_color(start&#x3D;0, end&#x3D;255, opacity&#x3D;255):    &quot;&quot;&quot;获得随机颜色&quot;&quot;&quot;    red &#x3D; random.randint(start, end)    green &#x3D; random.randint(start, end)    blue &#x3D; random.randint(start, end)    if opacity is None:        return red, green, blue    return red, green, blue, opacity</code></pre><blockquote><p><strong>说明</strong>：上面的代码中用到了三个字体文件，字体文件位于<code>polls/fonts</code>目录下，大家可以自行添加字体文件，但是需要注意字体文件的文件名跟上面代码的第45行保持一致。</p></blockquote><p>接下来，我们先完成提供验证码的视图函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def get_captcha(request: HttpRequest) -&gt; HttpResponse:    &quot;&quot;&quot;验证码&quot;&quot;&quot;    captcha_text &#x3D; gen_random_code()    request.session[&#39;captcha&#39;] &#x3D; captcha_text    image_data &#x3D; Captcha.instance().generate(captcha_text)    return HttpResponse(image_data, content_type&#x3D;&#39;image&#x2F;png&#39;)</code></pre><p>注意上面代码中的第4行，我们将随机生成的验证码字符串保存到session中，稍后用户登录时，我们要将保存在session中的验证码字符串和用户输入的验证码字符串进行比对，如果用户输入了正确的验证码才能够执行后续的登录流程，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def login(request: HttpRequest) -&gt; HttpResponse:    hint &#x3D; &#39;&#39;    if request.method &#x3D;&#x3D; &#39;POST&#39;:        username &#x3D; request.POST.get(&#39;username&#39;)        password &#x3D; request.POST.get(&#39;password&#39;)        if username and password:            password &#x3D; gen_md5_digest(password)            user &#x3D; User.objects.filter(username&#x3D;username, password&#x3D;password).first()            if user:                request.session[&#39;userid&#39;] &#x3D; user.no                request.session[&#39;username&#39;] &#x3D; user.username                return redirect(&#39;&#x2F;&#39;)            else:                hint &#x3D; &#39;用户名或密码错误&#39;        else:            hint &#x3D; &#39;请输入有效的用户名和密码&#39;    return render(request, &#39;login.html&#39;, &#123;&#39;hint&#39;: hint&#125;)</code></pre><blockquote><p><strong>说明</strong>：上面的代码没有对用户名和密码没有进行验证，实际项目中建议使用正则表达式验证用户输入信息，否则有可能将无效的数据交给数据库进行处理或者造成其他安全方面的隐患。</p></blockquote><p>上面的代码中，我们设定了登录成功后会在session中保存用户的编号（<code>userid</code>）和用户名（<code>username</code>），页面会重定向到首页。接下来我们可以稍微对首页的代码进行调整，在页面的右上角显示出登录用户的用户名。我们将这段代码单独写成了一个名为header.html的HTML文件，首页中可以通过在<code>&lt;body&gt;</code>标签中添加<code>&#123;% include 'header.html' %&#125;</code>来包含这个页面，代码如下所示。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class&#x3D;&quot;user&quot;&gt;    &#123;% if request.session.userid %&#125;    &lt;span&gt;&#123;&#123; request.session.username &#125;&#125;&lt;&#x2F;span&gt;    &lt;a href&#x3D;&quot;&#x2F;logout&quot;&gt;注销&lt;&#x2F;a&gt;    &#123;% else %&#125;    &lt;a href&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;a&gt;&nbsp;&nbsp;    &#123;% endif %&#125;    &lt;a href&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</code></pre><p>如果用户没有登录，页面会显示登录和注册的超链接；而用户登录成功后，页面上会显示用户名和注销的链接，注销链接对应的视图函数如下所示，URL的映射与之前讲过的类似，不再赘述。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def logout(request):    &quot;&quot;&quot;注销&quot;&quot;&quot;    request.session.flush()    return redirect(&#39;&#x2F;&#39;)</code></pre><p>上面的代码通过session对象<code>flush</code>方法来销毁session，一方面清除了服务器上session对象保存的用户数据，一方面将保存在浏览器cookie中的sessionid删除掉，稍后我们会对如何读写cookie的操作加以说明。</p><p>我们可以通过项目使用的数据库中名为<code>django_session</code> 的表来找到所有的session，该表的结构如下所示：</p><table><thead><tr><th>session_key</th><th>session_data</th><th>expire_date</th></tr></thead><tbody><tr><td>c9g2gt5cxo0k2evykgpejhic5ae7bfpl</td><td>MmI4YzViYjJhOGMyMDJkY2M5Yzg3…</td><td>2019-05-25 23:16:13.898522</td></tr></tbody></table><p>其中，第1列就是浏览器cookie中保存的sessionid；第2列是经过BASE64编码后的session中的数据，如果使用Python的<code>base64</code>对其进行解码，解码的过程和结果如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import base64base64.b64decode(&#39;MmI4YzViYjJhOGMyMDJkY2M5Yzg3ZWIyZGViZmUzYmYxNzdlNDdmZjp7ImNhcHRjaGEiOiJzS3d0Iiwibm8iOjEsInVzZXJuYW1lIjoiamFja2ZydWVkIn0&#x3D;&#39;)</code></pre><p>第3列是session的过期时间，session过期后浏览器保存的cookie中的sessionid就会失效，但是数据库中的这条对应的记录仍然会存在，如果想清除过期的数据，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py clearsessions</code></pre><p>Django框架默认的session过期时间为两周（1209600秒），如果想修改这个时间，可以在项目的配置文件中添加如下所示的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 配置会话的超时时间为1天（86400秒）SESSION_COOKIE_AGE &#x3D; 86400</code></pre><p>有很多对安全性要求较高的应用都必须在关闭浏览器窗口时让会话过期，不再保留用户的任何信息，如果希望在关闭浏览器窗口时就让会话过期（cookie中的sessionid失效），可以加入如下所示的配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 设置为True在关闭浏览器窗口时session就过期SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True</code></pre><p>如果不希望将session的数据保存在数据库中，可以将其放入缓存中，对应的配置如下所示，缓存的配置和使用我们在后面讲解。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 配置将会话对象放到缓存中存储SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;# 配置使用哪一组缓存来保存会话SESSION_CACHE_ALIAS &#x3D; &#39;default&#39;</code></pre><p>如果要修改session数据默认的序列化方式，可以将默认的<code>JSONSerializer</code>修改为<code>PickleSerializer</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">SESSION_SERIALIZER &#x3D; &#39;django.contrib.sessions.serializers.PickleSerializer&#39;</code></pre><p>接下来，我们就可以限制只有登录用户才能为老师投票，修改后的<code>praise_or_criticize</code>函数如下所示，我们通过从<code>request.session</code>中获取<code>userid</code>来判定用户是否登录。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def praise_or_criticize(request: HttpRequest) -&gt; HttpResponse:    if request.session.get(&#39;userid&#39;):        try:            tno &#x3D; int(request.GET.get(&#39;tno&#39;))            teacher &#x3D; Teacher.objects.get(no&#x3D;tno)            if request.path.startswith(&#39;&#x2F;praise&#x2F;&#39;):                teacher.good_count +&#x3D; 1                count &#x3D; teacher.good_count            else:                teacher.bad_count +&#x3D; 1                count &#x3D; teacher.bad_count            teacher.save()            data &#x3D; &#123;&#39;code&#39;: 20000, &#39;mesg&#39;: &#39;投票成功&#39;, &#39;count&#39;: count&#125;        except (ValueError, Teacher.DoesNotExist):            data &#x3D; &#123;&#39;code&#39;: 20001, &#39;mesg&#39;: &#39;投票失败&#39;&#125;    else:        data &#x3D; &#123;&#39;code&#39;: 20002, &#39;mesg&#39;: &#39;请先登录&#39;&#125;    return JsonResponse(data)</code></pre><p>当然，在修改了视图函数后，<code>teachers.html</code>也需要进行调整，用户如果没有登录，就将用户引导至登录页，登录成功再返回到投票页，此处不再赘述。</p><h3 id="在视图函数中读写cookie"><a href="#在视图函数中读写cookie" class="headerlink" title="在视图函数中读写cookie"></a>在视图函数中读写cookie</h3><p>下面我们对如何使用cookie做一个更为细致的说明以便帮助大家在Web项目中更好的使用这项技术。Django封装的<code>HttpRequest</code>和<code>HttpResponse</code>对象分别提供了读写cookie的操作。</p><p>HttpRequest封装的属性和方法：</p><ol><li><code>COOKIES</code>属性 - 该属性包含了HTTP请求携带的所有cookie。</li><li><code>get_signed_cookie</code>方法 - 获取带签名的cookie，如果签名验证失败，会产生<code>BadSignature</code>异常。</li></ol><p>HttpResponse封装的方法：</p><ol><li><code>set_cookie</code>方法 - 该方法可以设置一组键值对并将其最终将写入浏览器。</li><li><code>set_signed_cookie</code>方法 - 跟上面的方法作用相似，但是会对cookie进行签名来达到防篡改的作用。因为如果篡改了cookie中的数据，在不知道<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5">密钥</a>和<a href="https://zh.wikipedia.org/wiki/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)">盐</a>的情况下是无法生成有效的签名，这样服务器在读取cookie时会发现数据与签名不一致从而产生<code>BadSignature</code>异常。需要说明的是，这里所说的密钥就是我们在Django项目配置文件中指定的<code>SECRET_KEY</code>，而盐是程序中设定的一个字符串，你愿意设定为什么都可以，只要是一个有效的字符串。</li></ol><p>上面提到的方法，如果不清楚它们的具体用法，可以自己查阅一下Django的<a href="https://docs.djangoproject.com/en/2.1/ref/request-response/">官方文档</a>，没有什么资料比官方文档能够更清楚的告诉你这些方法到底如何使用。</p><p>刚才我们说过了，激活<code>SessionMiddleware</code>之后，每个<code>HttpRequest</code>对象都会绑定一个session属性，它是一个类似字典的对象，除了保存用户数据之外还提供了检测浏览器是否支持cookie的方法，包括：</p><ol><li><code>set_test_cookie</code>方法 - 设置用于测试的cookie。</li><li><code>test_cookie_worked</code>方法 - 检测测试cookie是否工作。</li><li><code>delete_test_cookie</code>方法 - 删除用于测试的cookie。</li><li><code>set_expiry</code>方法 - 设置会话的过期时间。</li><li><code>get_expire_age</code>&#x2F;<code>get_expire_date</code>方法 - 获取会话的过期时间。</li><li><code>clear_expired</code>方法 - 清理过期的会话。</li></ol><p>下面是在执行登录之前检查浏览器是否支持cookie的代码。通常情况下，浏览器默认开启了对cookie的支持，但是可能因为某种原因，用户禁用了浏览器的cookie功能，遇到这种情况我们可以在视图函数中提供一个检查功能，如果检查到用户浏览器不支持cookie，可以给出相应的提示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def login(request):    if request.method &#x3D;&#x3D; &#39;POST&#39;:        if request.session.test_cookie_worked():            request.session.delete_test_cookie()            # Add your code to perform login process here        else:            return HttpResponse(&quot;Please enable cookies and try again.&quot;)    request.session.set_test_cookie()    return render_to_response(&#39;login.html&#39;)</code></pre><h3 id="Cookie的替代品"><a href="#Cookie的替代品" class="headerlink" title="Cookie的替代品"></a>Cookie的替代品</h3><p>之前我们说过了，cookie的名声一直都不怎么好，当然我们在实际开发中是不会在cookie中保存用户的敏感信息（如用户的密码、信用卡的账号等）的，而且保存在cookie中的数据一般也会做好编码和签名的工作。对于支持HTML5的浏览器来说，可以使用localStorage和sessionStorage做为cookie的替代方案，相信从名字上你就能听出二者的差别，存储在<code>localStorage</code>的数据可以长期保留；而存储在<code>sessionStorage</code>的数据会在浏览器关闭时会被清除 。关于这些cookie替代品的用法，建议大家查阅<a href="https://developer.mozilla.org/zh-CN/docs/Web">MDN</a>来进行了解。 </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50.制作报表</title>
      <link href="/2024/07/01/50.zhi-zuo-bao-biao/"/>
      <url>/2024/07/01/50.zhi-zuo-bao-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="制作报表"><a href="#制作报表" class="headerlink" title="制作报表"></a>制作报表</h2><h3 id="导出Excel报表"><a href="#导出Excel报表" class="headerlink" title="导出Excel报表"></a>导出Excel报表</h3><p>报表就是用表格、图表等格式来动态显示数据，所以有人用这样的公式来描述报表：</p><pre class="language-none"><code class="language-none">报表 &#x3D; 多样的格式 + 动态的数据</code></pre><p>有很多的三方库支持在Python程序中写Excel文件，包括<a href="https://xlwt.readthedocs.io/en/latest/"><code>xlwt</code></a>、<a href="https://docs.xlwings.org/en/latest/quickstart.html"><code>xlwings</code></a>、<a href="https://openpyxl.readthedocs.io/en/latest/"><code>openpyxl</code></a>、<a href="https://xlsxwriter.readthedocs.io/"><code>xlswriter</code></a>等，其中的xlwt虽然只支持写xls格式的Excel文件，但在性能方面的表现还是不错的。下面我们就以<code>xlwt</code>为例，来演示如何在Django项目中导出Excel报表。</p><p>安装<code>xlwt</code>。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install xlwt</code></pre><p>导出包含所有老师信息的Excel表格的视图函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def export_teachers_excel(request):    # 创建工作簿    wb &#x3D; xlwt.Workbook()    # 添加工作表    sheet &#x3D; wb.add_sheet(&#39;老师信息表&#39;)    # 查询所有老师的信息    queryset &#x3D; Teacher.objects.all()    # 向Excel表单中写入表头    colnames &#x3D; (&#39;姓名&#39;, &#39;介绍&#39;, &#39;好评数&#39;, &#39;差评数&#39;, &#39;学科&#39;)    for index, name in enumerate(colnames):        sheet.write(0, index, name)    # 向单元格中写入老师的数据    props &#x3D; (&#39;name&#39;, &#39;detail&#39;, &#39;good_count&#39;, &#39;bad_count&#39;, &#39;subject&#39;)    for row, teacher in enumerate(queryset):        for col, prop in enumerate(props):            value &#x3D; getattr(teacher, prop, &#39;&#39;)            if isinstance(value, Subject):                value &#x3D; value.name            sheet.write(row + 1, col, value)    # 保存Excel    buffer &#x3D; BytesIO()    wb.save(buffer)    # 将二进制数据写入响应的消息体中并设置MIME类型    resp &#x3D; HttpResponse(buffer.getvalue(), content_type&#x3D;&#39;application&#x2F;vnd.ms-excel&#39;)    # 中文文件名需要处理成百分号编码    filename &#x3D; quote(&#39;老师.xls&#39;)    # 通过响应头告知浏览器下载该文件以及对应的文件名    resp[&#39;content-disposition&#39;] &#x3D; f&#39;attachment; filename*&#x3D;utf-8\&#39;\&#39;&#123;filename&#125;&#39;    return resp</code></pre><p>映射URL。</p><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [        path(&#39;excel&#x2F;&#39;, views.export_teachers_excel),    ]</code></pre><h3 id="导出PDF报表"><a href="#导出PDF报表" class="headerlink" title="导出PDF报表"></a>导出PDF报表</h3><p>在Django项目中，如果需要导出PDF报表，可以借助三方库<code>reportlab</code>来生成PDF文件的内容，再将文件的二进制数据输出给浏览器并指定MIME类型为<code>application/pdf</code>，具体的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def export_pdf(request: HttpRequest) -&gt; HttpResponse:    buffer &#x3D; io.BytesIO()    pdf &#x3D; canvas.Canvas(buffer)    pdf.setFont(&quot;Helvetica&quot;, 80)    pdf.setFillColorRGB(0.2, 0.5, 0.3)    pdf.drawString(100, 550, &#39;hello, world!&#39;)    pdf.showPage()    pdf.save()    resp &#x3D; HttpResponse(buffer.getvalue(), content_type&#x3D;&#39;application&#x2F;pdf&#39;)    resp[&#39;content-disposition&#39;] &#x3D; &#39;inline; filename&#x3D;&quot;demo.pdf&quot;&#39;    return resp</code></pre><p>关于如何用<code>reportlab</code>定制PDF报表的内容，可以参考reportlab的<a href="https://www.reportlab.com/docs/reportlab-userguide.pdf">官方文档</a>。</p><h3 id="生成前端统计图表"><a href="#生成前端统计图表" class="headerlink" title="生成前端统计图表"></a>生成前端统计图表</h3><p>如果项目中需要生成前端统计图表，可以使用百度的<a href="https://echarts.baidu.com/">ECharts</a>。具体的做法是后端通过提供数据接口返回统计图表所需的数据，前端使用ECharts来渲染出柱状图、折线图、饼图、散点图等图表。例如我们要生成一个统计所有老师好评数和差评数的报表，可以按照下面的方式来做。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def get_teachers_data(request):    queryset &#x3D; Teacher.objects.all()    names &#x3D; [teacher.name for teacher in queryset]    good_counts &#x3D; [teacher.good_count for teacher in queryset]    bad_counts &#x3D; [teacher.bad_count for teacher in queryset]    return JsonResponse(&#123;&#39;names&#39;: names, &#39;good&#39;: good_counts, &#39;bad&#39;: bad_counts&#125;)</code></pre><p>映射URL。</p><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [    path(&#39;teachers_data&#x2F;&#39;, views.get_teachers_data),]</code></pre><p>使用ECharts生成柱状图。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;老师评价统计&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px; height: 400px&quot;&gt;&lt;&#x2F;div&gt;    &lt;p&gt;        &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;返回首页&lt;&#x2F;a&gt;    &lt;&#x2F;p&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;echarts&#x2F;4.2.1-rc1&#x2F;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        var myChart &#x3D; echarts.init(document.querySelector(&#39;#main&#39;))        fetch(&#39;&#x2F;teachers_data&#x2F;&#39;)            .then(resp &#x3D;&gt; resp.json())            .then(json &#x3D;&gt; &#123;                var option &#x3D; &#123;                    color: [&#39;#f00&#39;, &#39;#00f&#39;],                    title: &#123;                        text: &#39;老师评价统计图&#39;                    &#125;,                    tooltip: &#123;&#125;,                    legend: &#123;                        data:[&#39;好评&#39;, &#39;差评&#39;]                    &#125;,                    xAxis: &#123;                        data: json.names                    &#125;,                    yAxis: &#123;&#125;,                    series: [                        &#123;                            name: &#39;好评&#39;,                            type: &#39;bar&#39;,                            data: json.good                        &#125;,                        &#123;                            name: &#39;差评&#39;,                            type: &#39;bar&#39;,                            data: json.bad                        &#125;                    ]                &#125;                myChart.setOption(option)            &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>运行效果如下图所示。</p><p><img src="/./res/echarts_bar_graph.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51.日志和调试工具栏</title>
      <link href="/2024/07/01/51.ri-zhi-he-diao-shi-gong-ju-lan/"/>
      <url>/2024/07/01/51.ri-zhi-he-diao-shi-gong-ju-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="日志和调试工具栏"><a href="#日志和调试工具栏" class="headerlink" title="日志和调试工具栏"></a>日志和调试工具栏</h2><h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><p>项目开发阶段，显示足够的调试信息以辅助开发人员调试代码还是非常必要的；项目上线以后，将系统运行时出现的警告、错误等信息记录下来以备相关人员了解系统运行状况并维护代码也是很有必要的。与此同时，采集日志数据也是为网站做数字化运营奠定一个基础，通过对系统运行日志的分析，我们可以监测网站的流量以及流量分布，同时还可以挖掘出用户的使用习惯和行为模式。</p><p>接下来，我们先看看如何通过Django的配置文件来配置日志。Django的日志配置基本可以参照官方文档再结合项目实际需求来进行，这些内容基本上可以从官方文档上复制下来，然后进行局部的调整即可，下面给出一些参考配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python">LOGGING &#x3D; &#123;    &#39;version&#39;: 1,    # 是否禁用已经存在的日志器    &#39;disable_existing_loggers&#39;: False,    # 日志格式化器    &#39;formatters&#39;: &#123;        &#39;simple&#39;: &#123;            &#39;format&#39;: &#39;%(asctime)s %(module)s.%(funcName)s: %(message)s&#39;,            &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,        &#125;,        &#39;verbose&#39;: &#123;            &#39;format&#39;: &#39;%(asctime)s %(levelname)s [%(process)d-%(threadName)s] &#39;                      &#39;%(module)s.%(funcName)s line %(lineno)d: %(message)s&#39;,            &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,        &#125;    &#125;,    # 日志过滤器    &#39;filters&#39;: &#123;        # 只有在Django配置文件中DEBUG值为True时才起作用        &#39;require_debug_true&#39;: &#123;            &#39;()&#39;: &#39;django.utils.log.RequireDebugTrue&#39;,        &#125;,    &#125;,    # 日志处理器    &#39;handlers&#39;: &#123;        # 输出到控制台        &#39;console&#39;: &#123;            &#39;class&#39;: &#39;logging.StreamHandler&#39;,            &#39;level&#39;: &#39;DEBUG&#39;,            &#39;filters&#39;: [&#39;require_debug_true&#39;],            &#39;formatter&#39;: &#39;simple&#39;,        &#125;,        # 输出到文件(每周切割一次)        &#39;file1&#39;: &#123;            &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,            &#39;filename&#39;: &#39;access.log&#39;,            &#39;when&#39;: &#39;W0&#39;,            &#39;backupCount&#39;: 12,            &#39;formatter&#39;: &#39;simple&#39;,            &#39;level&#39;: &#39;INFO&#39;,        &#125;,        # 输出到文件(每天切割一次)        &#39;file2&#39;: &#123;            &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,            &#39;filename&#39;: &#39;error.log&#39;,            &#39;when&#39;: &#39;D&#39;,            &#39;backupCount&#39;: 31,            &#39;formatter&#39;: &#39;verbose&#39;,            &#39;level&#39;: &#39;WARNING&#39;,        &#125;,    &#125;,    # 日志器记录器    &#39;loggers&#39;: &#123;        &#39;django&#39;: &#123;            # 需要使用的日志处理器            &#39;handlers&#39;: [&#39;console&#39;, &#39;file1&#39;, &#39;file2&#39;],            # 是否向上传播日志信息            &#39;propagate&#39;: True,            # 日志级别(不一定是最终的日志级别)            &#39;level&#39;: &#39;DEBUG&#39;,        &#125;,    &#125;&#125;</code></pre><p>大家可能已经注意到了，上面日志配置中的<code>formatters</code>是<strong>日志格式化器</strong>，它代表了如何格式化输出日志，其中格式占位符分别表示：</p><ol><li><code>%(name)s</code> - 记录器的名称</li><li><code>%(levelno)s</code> - 数字形式的日志记录级别</li><li><code>%(levelname)s</code> - 日志记录级别的文本名称</li><li><code>%(filename)s</code> - 执行日志记录调用的源文件的文件名称</li><li><code>%(pathname)s</code> - 执行日志记录调用的源文件的路径名称</li><li><code>%(funcName)s</code> - 执行日志记录调用的函数名称</li><li><code>%(module)s</code> - 执行日志记录调用的模块名称</li><li><code>%(lineno)s</code> - 执行日志记录调用的行号</li><li><code>%(created)s</code> - 执行日志记录的时间</li><li><code>%(asctime)s</code> - 日期和时间</li><li><code>%(msecs)s</code> - 毫秒部分</li><li><code>%(thread)d</code> - 线程ID（整数）</li><li><code>%(threadName)s</code> - 线程名称</li><li><code>%(process)d</code> - 进程ID （整数）</li></ol><p>日志配置中的handlers用来指定<strong>日志处理器</strong>，简单的说就是指定将日志输出到控制台还是文件又或者是网络上的服务器，可用的处理器包括：</p><ol><li><code>logging.StreamHandler(stream=None)</code> - 可以向类似与<code>sys.stdout</code>或者<code>sys.stderr</code>的任何文件对象输出信息</li><li><code>logging.FileHandler(filename, mode=&#39;a&#39;, encoding=None, delay=False)</code> - 将日志消息写入文件</li><li><code>logging.handlers.DatagramHandler(host, port)</code> - 使用UDP协议，将日志信息发送到指定主机和端口的网络主机上</li><li><code>logging.handlers.HTTPHandler(host, url)</code> - 使用HTTP的GET或POST方法将日志消息上传到一台HTTP 服务器</li><li><code>logging.handlers.RotatingFileHandler(filename, mode=&#39;a&#39;, maxBytes=0, backupCount=0, encoding=None, delay=False)</code> - 将日志消息写入文件，如果文件的大小超出<code>maxBytes</code>指定的值，那么将重新生成一个文件来记录日志</li><li><code>logging.handlers.SocketHandler(host, port)</code> - 使用TCP协议，将日志信息发送到指定主机和端口的网络主机上 </li><li><code>logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0)</code> - 将日志输出到指定的邮件地址</li><li><code>logging.MemoryHandler(capacity, flushLevel=ERROR, target=None, flushOnClose=True)</code> - 将日志输出到内存指定的缓冲区中</li></ol><p>上面每个日志处理器都指定了一个名为<code>level</code>的属性，它代表了日志的级别，不同的日志级别反映出日志中记录信息的严重性。Python中定义了六个级别的日志，按照从低到高的顺序依次是：NOTSET、DEBUG、INFO、WARNING、ERROR、CRITICAL。</p><p>最后配置的<strong>日志记录器</strong>是用来真正输出日志的，Django框架提供了如下所示的内置记录器：</p><ol><li><code>django</code> - 在Django层次结构中的所有消息记录器</li><li><code>django.request</code> - 与请求处理相关的日志消息。5xx响应被视为错误消息；4xx响应被视为为警告消息</li><li><code>django.server</code> - 与通过runserver调用的服务器所接收的请求相关的日志消息。5xx响应被视为错误消息；4xx响应被记录为警告消息；其他一切都被记录为INFO</li><li><code>django.template</code> - 与模板渲染相关的日志消息</li><li><code>django.db.backends</code> - 有与数据库交互产生的日志消息，如果希望显示ORM框架执行的SQL语句，就可以使用该日志记录器。</li></ol><p>日志记录器中配置的日志级别有可能不是最终的日志级别，因为还要参考日志处理器中配置的日志级别，取二者中级别较高者作为最终的日志级别。</p><h3 id="配置Django-Debug-Toolbar"><a href="#配置Django-Debug-Toolbar" class="headerlink" title="配置Django-Debug-Toolbar"></a>配置Django-Debug-Toolbar</h3><p>如果想调试你的Django项目，你一定不能不过名为Django-Debug-Toolbar的神器，它是项目开发阶段辅助调试和优化的必备工具，只要配置了它，就可以很方便的查看到如下表所示的项目运行信息，这些信息对调试项目和优化Web应用性能都是至关重要的。</p><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>Versions</td><td>Django的版本</td></tr><tr><td>Time</td><td>显示视图耗费的时间</td></tr><tr><td>Settings</td><td>配置文件中设置的值</td></tr><tr><td>Headers</td><td>HTTP请求头和响应头的信息</td></tr><tr><td>Request</td><td>和请求相关的各种变量及其信息</td></tr><tr><td>StaticFiles</td><td>静态文件加载情况</td></tr><tr><td>Templates</td><td>模板的相关信息</td></tr><tr><td>Cache</td><td>缓存的使用情况</td></tr><tr><td>Signals</td><td>Django内置的信号信息</td></tr><tr><td>Logging</td><td>被记录的日志信息</td></tr><tr><td>SQL</td><td>向数据库发送的SQL语句及其执行时间</td></tr></tbody></table><ol><li><p>安装Django-Debug-Toolbar。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install django-debug-toolbar</code></pre></li><li><p>配置 - 修改settings.py。</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    &#39;debug_toolbar&#39;,]MIDDLEWARE &#x3D; [    &#39;debug_toolbar.middleware.DebugToolbarMiddleware&#39;,]DEBUG_TOOLBAR_CONFIG &#x3D; &#123;    # 引入jQuery库    &#39;JQUERY_URL&#39;: &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&#39;,    # 工具栏是否折叠    &#39;SHOW_COLLAPSED&#39;: True,    # 是否显示工具栏    &#39;SHOW_TOOLBAR_CALLBACK&#39;: lambda x: True,&#125;</code></pre></li><li><p>配置 - 修改urls.py。</p><pre class="language-Python" data-language="Python"><code class="language-Python">if settings.DEBUG:    import debug_toolbar    urlpatterns.insert(0, path(&#39;__debug__&#x2F;&#39;, include(debug_toolbar.urls)))</code></pre></li><li><p>在配置好Django-Debug-Toolbar之后，页面右侧会看到一个调试工具栏，如下图所示，上面包括了如前所述的各种调试信息，包括执行时间、项目设置、请求头、SQL、静态资源、模板、缓存、信号等，查看起来非常的方便。</p><p><img src="/res/debug-toolbar.png"></p></li></ol><h3 id="优化ORM代码"><a href="#优化ORM代码" class="headerlink" title="优化ORM代码"></a>优化ORM代码</h3><p>在配置了日志或Django-Debug-Toolbar之后，我们可以查看一下之前将老师数据导出成Excel报表的视图函数执行情况，这里我们关注的是ORM框架生成的SQL查询到底是什么样子的，相信这里的结果会让你感到有一些意外。执行<code>Teacher.objects.all()</code>之后我们可以注意到，在控制台看到的或者通过Django-Debug-Toolbar输出的SQL是下面这样的：</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT &#96;tb_teacher&#96;.&#96;no&#96;, &#96;tb_teacher&#96;.&#96;name&#96;, &#96;tb_teacher&#96;.&#96;detail&#96;, &#96;tb_teacher&#96;.&#96;photo&#96;, &#96;tb_teacher&#96;.&#96;good_count&#96;, &#96;tb_teacher&#96;.&#96;bad_count&#96;, &#96;tb_teacher&#96;.&#96;sno&#96; FROM &#96;tb_teacher&#96;; args&#x3D;()SELECT &#96;tb_subject&#96;.&#96;no&#96;, &#96;tb_subject&#96;.&#96;name&#96;, &#96;tb_subject&#96;.&#96;intro&#96;, &#96;tb_subject&#96;.&#96;create_date&#96;, &#96;tb_subject&#96;.&#96;is_hot&#96; FROM &#96;tb_subject&#96; WHERE &#96;tb_subject&#96;.&#96;no&#96; &#x3D; 101; args&#x3D;(101,)SELECT &#96;tb_subject&#96;.&#96;no&#96;, &#96;tb_subject&#96;.&#96;name&#96;, &#96;tb_subject&#96;.&#96;intro&#96;, &#96;tb_subject&#96;.&#96;create_date&#96;, &#96;tb_subject&#96;.&#96;is_hot&#96; FROM &#96;tb_subject&#96; WHERE &#96;tb_subject&#96;.&#96;no&#96; &#x3D; 101; args&#x3D;(101,)SELECT &#96;tb_subject&#96;.&#96;no&#96;, &#96;tb_subject&#96;.&#96;name&#96;, &#96;tb_subject&#96;.&#96;intro&#96;, &#96;tb_subject&#96;.&#96;create_date&#96;, &#96;tb_subject&#96;.&#96;is_hot&#96; FROM &#96;tb_subject&#96; WHERE &#96;tb_subject&#96;.&#96;no&#96; &#x3D; 101; args&#x3D;(101,)SELECT &#96;tb_subject&#96;.&#96;no&#96;, &#96;tb_subject&#96;.&#96;name&#96;, &#96;tb_subject&#96;.&#96;intro&#96;, &#96;tb_subject&#96;.&#96;create_date&#96;, &#96;tb_subject&#96;.&#96;is_hot&#96; FROM &#96;tb_subject&#96; WHERE &#96;tb_subject&#96;.&#96;no&#96; &#x3D; 101; args&#x3D;(101,)SELECT &#96;tb_subject&#96;.&#96;no&#96;, &#96;tb_subject&#96;.&#96;name&#96;, &#96;tb_subject&#96;.&#96;intro&#96;, &#96;tb_subject&#96;.&#96;create_date&#96;, &#96;tb_subject&#96;.&#96;is_hot&#96; FROM &#96;tb_subject&#96; WHERE &#96;tb_subject&#96;.&#96;no&#96; &#x3D; 103; args&#x3D;(103,)SELECT &#96;tb_subject&#96;.&#96;no&#96;, &#96;tb_subject&#96;.&#96;name&#96;, &#96;tb_subject&#96;.&#96;intro&#96;, &#96;tb_subject&#96;.&#96;create_date&#96;, &#96;tb_subject&#96;.&#96;is_hot&#96; FROM &#96;tb_subject&#96; WHERE &#96;tb_subject&#96;.&#96;no&#96; &#x3D; 103; args&#x3D;(103,)</code></pre><p>这里的问题通常被称为“1+N查询”（有的地方也将其称之为“N+1查询”），原本获取老师的数据只需要一条SQL，但是由于老师关联了学科，当我们查询到<code>N</code>条老师的数据时，Django的ORM框架又向数据库发出了<code>N</code>条SQL去查询老师所属学科的信息。每条SQL执行都会有较大的开销而且会给数据库服务器带来压力，如果能够在一条SQL中完成老师和学科的查询肯定是更好的做法，这一点也很容易做到，相信大家已经想到怎么做了。是的，我们可以使用连接查询，但是在使用Django的ORM框架时如何做到这一点呢？对于多对一关联（如投票应用中的老师和学科），我们可以使用<code>QuerySet</code>的用<code>select_related()</code>方法来加载关联对象；而对于多对多关联（如电商网站中的订单和商品），我们可以使用<code>prefetch_related()</code>方法来加载关联对象。</p><p>在导出老师Excel报表的视图函数中，我们可以按照下面的方式优化代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">queryset &#x3D; Teacher.objects.all().select_related(&#39;subject&#39;)</code></pre><p>事实上，用ECharts生成前端报表的视图函数中，查询老师好评和差评数据的操作也能够优化，因为在这个例子中，我们只需要获取老师的姓名、好评数和差评数这三项数据，但是在默认的情况生成的SQL会查询老师表的所有字段。可以用<code>QuerySet</code>的<code>only()</code>方法来指定需要查询的属性，也可以用<code>QuerySet</code>的<code>defer()</code>方法来指定暂时不需要查询的属性，这样生成的SQL会通过投影操作来指定需要查询的列，从而改善查询性能，代码如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">queryset &#x3D; Teacher.objects.all().only(&#39;name&#39;, &#39;good_count&#39;, &#39;bad_count&#39;)</code></pre><p>当然，如果要统计出每个学科的老师好评和差评的平均数，利用Django的ORM框架也能够做到，代码如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">queryset &#x3D; Teacher.objects.values(&#39;subject&#39;).annotate(good&#x3D;Avg(&#39;good_count&#39;), bad&#x3D;Avg(&#39;bad_count&#39;))</code></pre><p>这里获得的<code>QuerySet</code>中的元素是字典对象，每个字典中有三组键值对，分别是代表学科编号的<code>subject</code>、代表好评数的<code>good</code>和代表差评数的<code>bad</code>。如果想要获得学科的名称而不是编号，可以按照如下所示的方式调整代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">queryset &#x3D; Teacher.objects.values(&#39;subject__name&#39;).annotate(good&#x3D;Avg(&#39;good_count&#39;), bad&#x3D;Avg(&#39;bad_count&#39;))</code></pre><p>可见，Django的ORM框架允许我们用面向对象的方式完成关系数据库中的分组和聚合查询。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>52.中间件的应用</title>
      <link href="/2024/07/01/52.zhong-jian-jian-de-ying-yong/"/>
      <url>/2024/07/01/52.zhong-jian-jian-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="中间件的应用"><a href="#中间件的应用" class="headerlink" title="中间件的应用"></a>中间件的应用</h2><p>之前我们已经实现了用户必须登录才能投票的限制，但是一个新的问题来了。如果我们的应用中有很多功能都需要用户先登录才能执行，例如将前面导出Excel报表和查看统计图表的功能都做了必须登录才能访问的限制，那么我们是不是需要在每个视图函数中添加代码来检查session中是否包含<code>userid</code>的代码呢？答案是否定的，如果这样做了，我们的视图函数中必然会充斥着大量的重复代码。编程大师<em>Martin Fowler</em>曾经说过：<strong>代码有很多种坏味道，重复是最坏的一种</strong>。在Python程序中，我们可以通过装饰器来为函数提供额外的能力；在Django项目中，我们可以把类似于验证用户是否登录这样的重复性代码放到<strong>中间件</strong>中。</p><h3 id="Django中间件概述"><a href="#Django中间件概述" class="headerlink" title="Django中间件概述"></a>Django中间件概述</h3><p>中间件是安插在Web应用请求和响应过程之间的组件，它在整个Web应用中扮演了拦截过滤器的角色，通过中间件可以拦截请求和响应，并对请求和响应进行过滤（简单的说就是执行额外的处理）。通常，一个中间件组件只专注于完成一件特定的事，例如：Django框架通过<code>SessionMiddleware</code>中间件实现了对session的支持，又通过<code>AuthenticationMiddleware</code>中间件实现了基于session的请求认证。通过把多个中间件组合在一起，我们可以完成更为复杂的任务，Django框架就是这么做的。</p><p>Django项目的配置文件中就包含了对中间件的配置，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">MIDDLEWARE &#x3D; [    &#39;django.middleware.security.SecurityMiddleware&#39;,    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,    &#39;django.middleware.common.CommonMiddleware&#39;,    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,]</code></pre><p>我们稍微为大家解释一下这些中间件的作用：</p><ol><li><code>CommonMiddleware</code> - 基础设置中间件，可以处理以下一些配置参数。<ul><li>DISALLOWED_USER_AGENTS - 不被允许的用户代理（浏览器）</li><li>APPEND_SLASH - 是否追加<code>/</code></li><li>USE_ETAG - 浏览器缓存相关</li></ul></li><li><code>SecurityMiddleware</code> - 安全相关中间件，可以处理和安全相关的配置项。<ul><li>SECURE_HSTS_SECONDS - 强制使用HTTPS的时间</li><li>SECURE_HSTS_INCLUDE_SUBDOMAINS - HTTPS是否覆盖子域名</li><li>SECURE_CONTENT_TYPE_NOSNIFF - 是否允许浏览器推断内容类型</li><li>SECURE_BROWSER_XSS_FILTER - 是否启用跨站脚本攻击过滤器</li><li>SECURE_SSL_REDIRECT - 是否重定向到HTTPS连接</li><li>SECURE_REDIRECT_EXEMPT - 免除重定向到HTTPS</li></ul></li><li><code>SessionMiddleware</code> - 会话中间件。</li><li><code>CsrfViewMiddleware</code> - 通过生成令牌，防范跨请求份伪的造中间件。</li><li><code>XFrameOptionsMiddleware</code> - 通过设置请求头参数，防范点击劫持攻击的中间件。</li></ol><p>在请求的过程中，上面的中间件会按照书写的顺序从上到下执行，然后是URL解析，最后请求才会来到视图函数；在响应的过程中，上面的中间件会按照书写的顺序从下到上执行，与请求时中间件执行的顺序正好相反。</p><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><p>Django中的中间件有两种实现方式：基于类的实现方式和基于函数的实现方式，后者更接近于装饰器的写法。装饰器实际上是代理模式的应用，将横切关注功能（与正常业务逻辑没有必然联系的功能，例如：身份认证、日志记录、编码转换之类的功能）置于代理中，由代理对象来完成被代理对象的行为并添加额外的功能。中间件对用户请求和响应进行拦截过滤并增加额外的处理，在这一点上它跟装饰器是完全一致的，所以基于函数的写法来实现中间件就跟装饰器的写法几乎一模一样。下面我们用自定义的中间件来实现用户登录验证的功能。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;middlewares.py&quot;&quot;&quot;from django.http import JsonResponsefrom django.shortcuts import redirect# 需要登录才能访问的资源路径LOGIN_REQUIRED_URLS &#x3D; &#123;&#39;&#x2F;praise&#x2F;&#39;, &#39;&#x2F;criticize&#x2F;&#39;, &#39;&#x2F;excel&#x2F;&#39;, &#39;&#x2F;teachers_data&#x2F;&#39;&#125;def check_login_middleware(get_resp):    def wrapper(request, *args, **kwargs):        # 请求的资源路径在上面的集合中        if request.path in LOGIN_REQUIRED_URLS:            # 会话中包含userid则视为已经登录            if &#39;userid&#39; not in request.session:                # 判断是不是Ajax请求                if request.is_ajax():                    # Ajax请求返回JSON数据提示用户登录                    return JsonResponse(&#123;&#39;code&#39;: 10003, &#39;hint&#39;: &#39;请先登录&#39;&#125;)                else:                    backurl &#x3D; request.get_full_path()                    # 非Ajax请求直接重定向到登录页                    return redirect(f&#39;&#x2F;login&#x2F;?backurl&#x3D;&#123;backurl&#125;&#39;)        return get_resp(request, *args, **kwargs)    return wrapper</code></pre><p>当然，我们也可以定义一个类来充当装饰器，如果类中有<code>__call__</code>魔术方法，这个类的对象就像函数一样可调用，所以下面是另一种实现中间件的方式，道理跟上面的代码完全一样。</p><p>还有一种基于类实现中间件的方式，这种方式在较新版本的Django中已经不推荐使用了，但是大家接触到的代码中，仍然有可能遇到这种写法，大致的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.utils.deprecation import MiddlewareMixinclass MyMiddleware(MiddlewareMixin):    def process_request(self, request):        pass    def process_view(self, request, view_func, view_args, view_kwargs):        pass    def process_template_response(self, request, response):        pass    def process_response(self, request, response):        pass    def process_exception(self, request, exception):        pass</code></pre><p>上面类中的五个方法都是中间件的钩子函数，分别在收到用户请求、进入视图函数之前、渲染模板、返回响应和出现异常的时候被回调。当然，写不写这些方法是根据中间件的需求来确定的，并不是所有的场景都需要重写五个方法，下面的图相信能够帮助大家理解这种写法。</p><p><img src="/res/django-middleware.png"></p><p>写好中间件代码后，需要修改配置文件来激活中间件使其生效。</p><pre class="language-Python" data-language="Python"><code class="language-Python">MIDDLEWARE &#x3D; [    &#39;django.middleware.security.SecurityMiddleware&#39;,    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,    &#39;django.middleware.common.CommonMiddleware&#39;,    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,    &#39;debug_toolbar.middleware.DebugToolbarMiddleware&#39;,    &#39;vote.middlewares.check_login_middleware&#39;,]</code></pre><p>注意上面这个中间件列表中元素的顺序，当收到来自用户的请求时，中间件按照从上到下的顺序依次执行，这行完这些中间件以后，请求才会最终到达视图函数。当然，在这个过程中，用户的请求可以被拦截，就像上面我们自定义的中间件那样，如果用户在没有登录的情况下访问了受保护的资源，中间件会将请求直接重定向到登录页，后面的中间件和视图函数将不再执行。在响应用户请求的过程中，上面的中间件会按照从下到上的顺序依次执行，这样的话我们还可以对响应做进一步的处理。</p><p>中间件执行的顺序是非常重要的，对于有依赖关系的中间件必须保证被依赖的中间件要置于依赖它的中间件的前面，就好比我们刚才自定义的中间件要放到<code>SessionMiddleware</code>的后面，因为我们要依赖这个中间件为请求绑定的<code>session</code>对象才能判定用户是否登录。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>53.前后端分离开发入门</title>
      <link href="/2024/07/01/53.qian-hou-duan-fen-chi-kai-fa-ru-men/"/>
      <url>/2024/07/01/53.qian-hou-duan-fen-chi-kai-fa-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前后端分离开发入门"><a href="#前后端分离开发入门" class="headerlink" title="前后端分离开发入门"></a>前后端分离开发入门</h2><p>在传统的Web应用开发中，大多数的程序员会将浏览器作为前后端的分界线。将浏览器中为用户进行页面展示的部分称之为前端，而将运行在服务器为前端提供业务逻辑和数据准备的所有代码统称为后端。所谓前后端分离的开发，就是前后端工程师约定好数据交互接口，并行的进行开发和测试，后端只提供数据，不负责将数据渲染到页面上，前端通过HTTP请求获取数据并负责将数据渲染到页面上，这个工作是交给浏览器中的JavaScript代码来完成。</p><p>使用前后端分离开发有诸多的好处，下面我们简要的说下这些好处：</p><ol><li><strong>提升开发效率</strong>。前后端分离以后，可以实现前后端代码的解耦，只要前后端沟通约定好应用所需接口以及接口参数，便可以开始并行开发，无需等待对方的开发工作结束。在这种情况下，前后端工程师都可以只专注于自己的开发工作，有助于打造出更好的团队。除此之外，在前后端分离的开发模式下，即使需求发生变更，只要接口与数据格式不变，后端开发人员就不需要修改代码，只要前端进行变动即可。</li><li><strong>增强代码的可维护性</strong>。前后端分离后，应用的代码不再是前后端混合，只有在运行期才会有调用依赖关系，这样的话维护代码的工作将变得轻松愉快很多，再不会牵一发而动全身。当你的代码变得简明且整洁时，代码的可读性和可维护性都会有质的提升。</li><li><strong>支持多终端和服务化架构</strong>。前后端分离后，同一套数据接口可以为不同的终端提供服务，更有助于打造多终端应用；此外，由于后端提供的接口之间可以通过HTTP(S)进行调用，有助于打造服务化架构（包括微服务）。</li></ol><p>接下来我们就用前后端分离的方式来改写之前的投票应用。</p><h3 id="返回JSON格式的数据"><a href="#返回JSON格式的数据" class="headerlink" title="返回JSON格式的数据"></a>返回JSON格式的数据</h3><p>刚才说过，在前后端分离的开发模式下，后端需要为前端提供数据接口，这些接口通常返回JSON格式的数据。在Django项目中，我们可以先将对象处理成字典，然后就可以利用Django封装的<code>JsonResponse</code>向浏览器返回JSON格式的数据，具体的做法如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def show_subjects(request):    queryset &#x3D; Subject.objects.all()    subjects &#x3D; []    for subject in queryset:        subjects.append(&#123;            &#39;no&#39;: subject.no,            &#39;name&#39;: subject.name,            &#39;intro&#39;: subject.intro,            &#39;isHot&#39;: subject.is_hot        &#125;)    return JsonResponse(subjects, safe&#x3D;False)</code></pre><p>上面的代码中，我们通过循环遍历查询学科得到的<code>QuerySet</code>对象，将每个学科的数据处理成一个字典，在将字典保存在名为<code>subjects</code>的列表容器中，最后利用<code>JsonResponse</code>完成对列表的序列化，向浏览器返回JSON格式的数据。由于<code>JsonResponse</code>序列化的是一个列表而不是字典，所以需要指定<code>safe</code>参数的值为<code>False</code>才能完成对<code>subjects</code>的序列化，否则会产生<code>TypeError</code>异常。</p><p>可能大家已经发现了，自己写代码将一个对象转成字典是比较麻烦的，如果对象的属性很多而且某些属性又关联到一个比较复杂的对象时，情况会变得更加糟糕。为此我们可以使用一个名为<code>bpmappers</code>的三方库来简化将对象转成字典的操作，这个三方库本身也提供了对Django框架的支持。</p><p>安装三方库<code>bpmappers</code>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install bpmappers</code></pre><p>编写映射器（实现对象到字典转换）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from bpmappers.djangomodel import ModelMapperfrom poll2.models import Subjectclass SubjectMapper(ModelMapper):       class Meta:        model &#x3D; Subject</code></pre><p>修改视图函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def show_subjects(request):    queryset &#x3D; Subject.objects.all()    subjects &#x3D; []    for subject in queryset:        subjects.append(SubjectMapper(subject).as_dict())    return JsonResponse(subjects, safe&#x3D;False)</code></pre><p>配置URL映射。</p><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [        path(&#39;api&#x2F;subjects&#x2F;&#39;, show_subjects),    ]</code></pre><p>然后访问该接口，可以得到如下所示的JSON格式数据。</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">[    &#123;        &quot;no&quot;: 1,        &quot;name&quot;: &quot;Python全栈+人工智能&quot;,        &quot;intro&quot;: &quot;Python是一种计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。&quot;,        &quot;is_hot&quot;: true    &#125;,    &#x2F;&#x2F; 此处省略下面的内容]</code></pre><p>如果不希望在JSON数据中显示学科的成立时间，我们可以在映射器中排除<code>create_date</code>属性；如果希望将是否为热门学科对应的键取名为<code>isHot</code>（默认的名字是<code>is_hot</code>），也可以通过修改映射器来做到。具体的做法如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from bpmappers import RawFieldfrom bpmappers.djangomodel import ModelMapperfrom poll2.models import Subjectclass SubjectMapper(ModelMapper):    isHot &#x3D; RawField(&#39;is_hot&#39;)    class Meta:        model &#x3D; Subject        exclude &#x3D; (&#39;is_hot&#39;, )</code></pre><p>再次查看学科接口返回的JSON数据。</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">[    &#123;        &quot;no&quot;: 101,        &quot;name&quot;: &quot;Python全栈+人工智能&quot;,        &quot;intro&quot;: &quot;Python是一种计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。&quot;,        &quot;isHot&quot;: true    &#125;,    &#x2F;&#x2F; 此处省略下面的内容]</code></pre><p>关于<code>bpmappers</code>详细的使用指南，请参考它的<a href="https://bpmappers.readthedocs.io/en/stable/">官方文档</a>，这个官方文档是用日语书写的，可以使用浏览器的翻译功能将它翻译成你熟悉的语言即可。</p><h3 id="使用Vue-js渲染页面"><a href="#使用Vue-js渲染页面" class="headerlink" title="使用Vue.js渲染页面"></a>使用Vue.js渲染页面</h3><p>接下来我们通过前端框架Vue.js来实现页面的渲染。如果希望全面的了解和学习Vue.js，建议阅读它的<a href="https://cn.vuejs.org/v2/guide/">官方教程</a>或者在<a href="https://www.youtube.com/">YouTube</a>上搜索Vue.js的新手教程（Vue.js Crash Course）进行学习。</p><p>重新改写subjects.html页面，使用Vue.js来渲染页面。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;学科信息&lt;&#x2F;title&gt;    &lt;style&gt;&#x2F;* 此处省略层叠样式表 *&#x2F;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;container&quot;&gt;        &lt;h1&gt;扣丁学堂所有学科&lt;&#x2F;h1&gt;        &lt;hr&gt;        &lt;div id&#x3D;&quot;main&quot;&gt;            &lt;dl v-for&#x3D;&quot;subject in subjects&quot;&gt;                &lt;dt&gt;                    &lt;a :href&#x3D;&quot;&#39;&#x2F;static&#x2F;html&#x2F;teachers.html?sno&#x3D;&#39; + subject.no&quot;&gt;                        &#123;&#123; subject.name &#125;&#125;                    &lt;&#x2F;a&gt;                    &lt;img v-if&#x3D;&quot;subject.is_hot&quot; src&#x3D;&quot;&#x2F;static&#x2F;images&#x2F;hot-icon-small.png&quot;&gt;                &lt;&#x2F;dt&gt;                &lt;dd&gt;&#123;&#123; subject.intro &#125;&#125;&lt;&#x2F;dd&gt;            &lt;&#x2F;dl&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.11&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        let app &#x3D; new Vue(&#123;            el: &#39;#main&#39;,            data: &#123;                subjects: []            &#125;,            created() &#123;                fetch(&#39;&#x2F;api&#x2F;subjects&#x2F;&#39;)                    .then(resp &#x3D;&gt; resp.json())                    .then(json &#x3D;&gt; &#123;                        this.subjects &#x3D; json                    &#125;)            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>前后端分离的开发需要将前端页面作为静态资源进行部署，项目实际上线的时候，我们会对整个Web应用进行动静分离，静态资源通过Nginx或Apache服务器进行部署，生成动态内容的Python程序部署在uWSGI或者Gunicorn服务器上，对动态内容的请求由Nginx或Apache路由到uWSGI或Gunicorn服务器上。</p><p>在开发阶段，我们通常会使用Django自带的测试服务器，如果要尝试前后端分离，可以先将静态页面放在之前创建的放静态资源的目录下，具体的做法可以参考<a href="https://gitee.com/jackfrued/django19062">项目完整代码</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54.RESTful架构和DRF入门</title>
      <link href="/2024/07/01/54.restful-jia-gou-he-drf-ru-men/"/>
      <url>/2024/07/01/54.restful-jia-gou-he-drf-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="RESTful架构和DRF入门"><a href="#RESTful架构和DRF入门" class="headerlink" title="RESTful架构和DRF入门"></a>RESTful架构和DRF入门</h2><p>把软件（Software）、平台（Platform）、基础设施（Infrastructure）做成服务（Service）是很多IT企业都一直在做的事情，这就是大家经常听到的SasS（软件即服务）、PasS（平台即服务）和IasS（基础设置即服务）。实现面向服务的架构（SOA）有诸多的方式，包括RPC（远程过程调用）、Web Service、REST等，在技术层面上，SOA是一种<strong>抽象的、松散耦合的粗粒度软件架构</strong>；在业务层面上，SOA的核心概念是“<strong>重用</strong>”和“<strong>互操作</strong>”，它将系统资源整合成可操作的、标准的服务，使得这些资源能够被重新组合和应用。在实现SOA的诸多方案中，REST被认为是最适合互联网应用的架构，符合REST规范的架构也经常被称作RESTful架构。</p><h3 id="REST概述"><a href="#REST概述" class="headerlink" title="REST概述"></a>REST概述</h3><p>REST这个词，是<strong>Roy Thomas Fielding</strong>在他2000年的博士论文中提出的，Roy是HTTP协议（1.0和1.1版）的主要设计者、Apache服务器软件主要作者、Apache基金会第一任主席。在他的博士论文中，Roy把他对互联网软件的架构原则定名为REST，即<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer的缩写，中文通常翻译为“<strong>表现层状态转移</strong>”或“<strong>表述状态转移</strong>”。</p><p>这里的“表现层”其实指的是“资源”的“表现层”。所谓资源，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲或一种服务。我们可以用一个URI（统一资源定位符）指向资源，要获取到这个资源，访问它的URI即可，URI就是资源在互联网上的唯一标识。资源可以有多种外在表现形式。我们把资源具体呈现出来的形式，叫做它的“表现层”。比如，文本可以用<code>text/plain</code>格式表现，也可以用<code>text/html</code>格式、<code>text/xml</code>格式、<code>application/json</code>格式表现，甚至可以采用二进制格式；图片可以用<code>image/jpeg</code>格式表现，也可以用<code>image/png</code>格式表现。URI只代表资源的实体，不代表它的表现形式。严格地说，有些网址最后的<code>.html</code>后缀名是不必要的，因为这个后缀名表示格式，属于“表现层”范畴，而URI应该只代表“资源”的位置，它的具体表现形式，应该在HTTP请求的头信息中用<code>Accept</code>和<code>Content-Type</code>字段指定，这两个字段才是对“表现层”的描述。</p><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。Web应用通常使用HTTP作为其通信协议，客户端想要操作服务器，必须通过HTTP请求，让服务器端发生“状态转移”，而这种转移是建立在表现层之上的，所以就是“表现层状态转移”。客户端通过HTTP的动词GET、POST、PUT（或PATCH）、DELETE，分别对应对资源的四种基本操作，其中GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT（或PATCH）用来更新资源，DELETE用来删除资源。</p><p>简单的说RESTful架构就是：“每一个URI代表一种资源，客户端通过四个HTTP动词，对服务器端资源进行操作，实现资源的表现层状态转移”。</p><p>我们在设计Web应用时，如果需要向客户端提供资源，就可以使用REST风格的URI，这是实现RESTful架构的第一步。当然，真正的RESTful架构并不只是URI符合REST风格，更为重要的是“无状态”和“幂等性”两个词，我们在后面的课程中会为大家阐述这两点。下面的例子给出了一些符合REST风格的URI，供大家在设计URI时参考。</p><table><thead><tr><th>请求方法（HTTP动词）</th><th>URI</th><th>解释</th></tr></thead><tbody><tr><td><strong>GET</strong></td><td><code>/students/</code></td><td>获取所有学生</td></tr><tr><td><strong>POST</strong></td><td><code>/students/</code></td><td>新建一个学生</td></tr><tr><td><strong>GET</strong></td><td><code>/students/ID/</code></td><td>获取指定ID的学生信息</td></tr><tr><td><strong>PUT</strong></td><td><code>/students/ID/</code></td><td>更新指定ID的学生信息（提供该学生的全部信息）</td></tr><tr><td><strong>PATCH</strong></td><td><code>/students/ID/</code></td><td>更新指定ID的学生信息（提供该学生的部分信息）</td></tr><tr><td><strong>DELETE</strong></td><td><code>/students/ID/</code></td><td>删除指定ID的学生信息</td></tr><tr><td><strong>GET</strong></td><td><code>/students/ID/friends/</code></td><td>列出指定ID的学生的所有朋友</td></tr><tr><td><strong>DELETE</strong></td><td><code>/students/ID/friends/ID/</code></td><td>删除指定ID的学生的指定ID的朋友</td></tr></tbody></table><h3 id="DRF使用入门"><a href="#DRF使用入门" class="headerlink" title="DRF使用入门"></a>DRF使用入门</h3><p>在Django项目中，如果要实现REST架构，即将网站的资源发布成REST风格的API接口，可以使用著名的三方库<code>djangorestframework</code> ，我们通常将其简称为DRF。</p><h4 id="安装和配置DRF"><a href="#安装和配置DRF" class="headerlink" title="安装和配置DRF"></a>安装和配置DRF</h4><p>安装DRF。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install djangorestframework</code></pre><p>配置DRF。</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    &#39;rest_framework&#39;,    ]# 下面的配置根据项目需要进行设置REST_FRAMEWORK &#x3D; &#123;    # 配置默认页面大小    # &#39;PAGE_SIZE&#39;: 10,    # 配置默认的分页类    # &#39;DEFAULT_PAGINATION_CLASS&#39;: &#39;...&#39;,    # 配置异常处理器    # &#39;EXCEPTION_HANDLER&#39;: &#39;...&#39;,    # 配置默认解析器    # &#39;DEFAULT_PARSER_CLASSES&#39;: (    #     &#39;rest_framework.parsers.JSONParser&#39;,    #     &#39;rest_framework.parsers.FormParser&#39;,    #     &#39;rest_framework.parsers.MultiPartParser&#39;,    # ),    # 配置默认限流类    # &#39;DEFAULT_THROTTLE_CLASSES&#39;: (    #     &#39;...&#39;    # ),    # 配置默认授权类    # &#39;DEFAULT_PERMISSION_CLASSES&#39;: (    #     &#39;...&#39;,    # ),    # 配置默认认证类    # &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (    #     &#39;...&#39;,    # ),&#125;</code></pre><h4 id="编写序列化器"><a href="#编写序列化器" class="headerlink" title="编写序列化器"></a>编写序列化器</h4><p>前后端分离的开发需要后端为前端、移动端提供API数据接口，而API接口通常情况下都是返回JSON格式的数据，这就需要对模型对象进行序列化处理。DRF中封装了<code>Serializer</code>类和<code>ModelSerializer</code>类用于实现序列化操作，通过继承<code>Serializer</code>类或<code>ModelSerializer</code>类，我们可以自定义序列化器，用于将对象处理成字典，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework import serializers class SubjectSerializer(serializers.ModelSerializer):    class Meta:        model &#x3D; Subject        fields &#x3D; &#39;__all__&#39;</code></pre><p>上面的代码直接继承了<code>ModelSerializer</code>，通过<code>Meta</code>类的<code>model</code>属性指定要序列化的模型以及<code>fields</code>属性指定需要序列化的模型字段，稍后我们就可以在视图函数中使用该类来实现对<code>Subject</code>模型的序列化。</p><h4 id="编写视图函数"><a href="#编写视图函数" class="headerlink" title="编写视图函数"></a>编写视图函数</h4><p>DRF框架支持两种实现数据接口的方式，一种是FBV（基于函数的视图），另一种是CBV（基于类的视图）。我们先看看FBV的方式如何实现数据接口，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.decorators import api_viewfrom rest_framework.response import Response@api_view((&#39;GET&#39;, ))def show_subjects(request: HttpRequest) -&gt; HttpResponse:    subjects &#x3D; Subject.objects.all().order_by(&#39;no&#39;)    # 创建序列化器对象并指定要序列化的模型    serializer &#x3D; SubjectSerializer(subjects, many&#x3D;True)    # 通过序列化器的data属性获得模型对应的字典并通过创建Response对象返回JSON格式的数据    return Response(serializer.data)</code></pre><p>对比上一个章节的使用<code>bpmapper</code>实现模型序列化的代码，使用DRF的代码更加简单明了，而且DRF本身自带了一套页面，可以方便我们查看我们使用DRF定制的数据接口，如下图所示。</p><p><img src="/res/drf-app.png"></p><p>直接使用上一节写好的页面，就可以通过Vue.js把上面接口提供的学科数据渲染并展示出来，此处不再进行赘述。</p><h4 id="实现老师信息数据接口"><a href="#实现老师信息数据接口" class="headerlink" title="实现老师信息数据接口"></a>实现老师信息数据接口</h4><p>编写序列化器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class SubjectSimpleSerializer(serializers.ModelSerializer):    class Meta:        model &#x3D; Subject        fields &#x3D; (&#39;no&#39;, &#39;name&#39;)class TeacherSerializer(serializers.ModelSerializer):    class Meta:        model &#x3D; Teacher        exclude &#x3D; (&#39;subject&#39;, )</code></pre><p>编写视图函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">@api_view((&#39;GET&#39;, ))def show_teachers(request: HttpRequest) -&gt; HttpResponse:    try:        sno &#x3D; int(request.GET.get(&#39;sno&#39;))        subject &#x3D; Subject.objects.only(&#39;name&#39;).get(no&#x3D;sno)        teachers &#x3D; Teacher.objects.filter(subject&#x3D;subject).defer(&#39;subject&#39;).order_by(&#39;no&#39;)        subject_seri &#x3D; SubjectSimpleSerializer(subject)        teacher_seri &#x3D; TeacherSerializer(teachers, many&#x3D;True)        return Response(&#123;&#39;subject&#39;: subject_seri.data, &#39;teachers&#39;: teacher_seri.data&#125;)    except (TypeError, ValueError, Subject.DoesNotExist):        return Response(status&#x3D;404)</code></pre><p>配置URL映射。</p><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [        path(&#39;api&#x2F;teachers&#x2F;&#39;, show_teachers),    ]</code></pre><p>通过Vue.js渲染页面。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;老师信息&lt;&#x2F;title&gt;    &lt;style&gt;        &#x2F;* 此处省略掉层叠样式表 *&#x2F;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;container&quot;&gt;        &lt;h1&gt;&#123;&#123; subject.name &#125;&#125;学科的老师信息&lt;&#x2F;h1&gt;        &lt;hr&gt;        &lt;h2 v-if&#x3D;&quot;loaded &amp;&amp; teachers.length &#x3D;&#x3D; 0&quot;&gt;暂无该学科老师信息&lt;&#x2F;h2&gt;        &lt;div class&#x3D;&quot;teacher&quot; v-for&#x3D;&quot;teacher in teachers&quot;&gt;            &lt;div class&#x3D;&quot;photo&quot;&gt;                &lt;img :src&#x3D;&quot;&#39;&#x2F;static&#x2F;images&#x2F;&#39; + teacher.photo&quot; height&#x3D;&quot;140&quot; alt&#x3D;&quot;&quot;&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;                &lt;div&gt;                    &lt;span&gt;&lt;strong&gt;姓名：&#123;&#123; teacher.name &#125;&#125;&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;                    &lt;span&gt;性别：&#123;&#123; teacher.sex | maleOrFemale &#125;&#125;&lt;&#x2F;span&gt;                    &lt;span&gt;出生日期：&#123;&#123; teacher.birth &#125;&#125;&lt;&#x2F;span&gt;                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;intro&quot;&gt;&#123;&#123; teacher.intro &#125;&#125;&lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;comment&quot;&gt;                    &lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;vote(teacher, true)&quot;&gt;好评&lt;&#x2F;a&gt;&nbsp;&nbsp;                    (&lt;strong&gt;&#123;&#123; teacher.good_count &#125;&#125;&lt;&#x2F;strong&gt;)                    &nbsp;&nbsp;&nbsp;&nbsp;                    &lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;vote(teacher, false)&quot;&gt;差评&lt;&#x2F;a&gt;&nbsp;&nbsp;                    (&lt;strong&gt;&#123;&#123; teacher.bad_count &#125;&#125;&lt;&#x2F;strong&gt;)                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;a href&#x3D;&quot;&#x2F;static&#x2F;html&#x2F;subjects.html&quot;&gt;返回首页&lt;&#x2F;a&gt;    &lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.11&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        let app &#x3D; new Vue(&#123;            el: &#39;#container&#39;,            data: &#123;                subject: &#123;&#125;,                teachers: [],                loaded: false            &#125;,            created() &#123;                fetch(&#39;&#x2F;api&#x2F;teachers&#x2F;&#39; + location.search)                    .then(resp &#x3D;&gt; resp.json())                    .then(json &#x3D;&gt; &#123;                        this.subject &#x3D; json.subject                        this.teachers &#x3D; json.teachers                    &#125;)            &#125;,            filters: &#123;                maleOrFemale(sex) &#123;                    return sex? &#39;男&#39;: &#39;女&#39;                &#125;            &#125;,            methods: &#123;               vote(teacher, flag) &#123;                    let url &#x3D; flag? &#39;&#x2F;praise&#x2F;&#39; : &#39;&#x2F;criticize&#x2F;&#39;                    url +&#x3D; &#39;?tno&#x3D;&#39; + teacher.no                    fetch(url).then(resp &#x3D;&gt; resp.json()).then(json &#x3D;&gt; &#123;                        if (json.code &#x3D;&#x3D;&#x3D; 10000) &#123;                            if (flag) &#123;                                teacher.good_count &#x3D; json.count                            &#125; else &#123;                                teacher.bad_count &#x3D; json.count                            &#125;                        &#125;                    &#125;)                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h3 id="前后端分离下的用户登录"><a href="#前后端分离下的用户登录" class="headerlink" title="前后端分离下的用户登录"></a>前后端分离下的用户登录</h3><p>之前我们提到过， HTTP是无状态的，一次请求结束连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。但是对于一个Web应用而言，它是需要有状态管理的，这样才能让服务器知道HTTP请求来自哪个用户，从而判断是否允许该用户请求以及为用户提供更好的服务，这个过程就是常说的<strong>会话管理</strong>。</p><p>之前我们做会话管理（用户跟踪）的方法是：用户登录成功后，在服务器端通过一个session对象保存用户相关数据，然后把session对象的ID写入浏览器的cookie中；下一次请求时，HTTP请求头中携带cookie的数据，服务器从HTTP请求头读取cookie中的sessionid，根据这个标识符找到对应的session对象，这样就能够获取到之前保存在session中的用户数据。我们刚才说过，REST架构是最适合互联网应用的架构，它强调了HTTP的无状态性，这样才能保证应用的水平扩展能力（当并发访问量增加时，可以通过增加新的服务器节点来为系统扩容）。显然，基于session实现用户跟踪的方式需要服务器保存session对象，在做水平扩展增加新的服务器节点时，需要复制和同步session对象，这显然是非常麻烦的。解决这个问题有两种方案，一种是架设缓存服务器（如Redis），让多个服务器节点共享缓存服务并将session对象直接置于缓存服务器中；另一种方式放弃基于session的用户跟踪，使用<strong>基于token的用户跟踪</strong>。</p><p>基于token的用户跟踪是在用户登录成功后，为用户生成身份标识并保存在浏览器本地存储（localStorage、sessionStorage、cookie等）中，这样的话服务器不需要保存用户状态，从而可以很容易的做到水平扩展。基于token的用户跟踪具体流程如下：</p><ol><li>用户登录时，如果登录成功就按照某种方式为用户生成一个令牌（token），该令牌中通常包含了用户标识、过期时间等信息而且需要加密并生成指纹（避免伪造或篡改令牌），服务器将令牌返回给前端；</li><li>前端获取到服务器返回的token，保存在浏览器本地存储中（可以保存在<code>localStorage</code>或<code>sessionStorage</code>中，对于使用Vue.js的前端项目来说，还可以通过Vuex进行状态管理）；</li><li>对于使用了前端路由的项目来说，前端每次路由跳转，可以先判断<code>localStroage</code>中有无token，如果没有则跳转到登录页；</li><li>每次请求后端数据接口，在HTTP请求头里携带token；后端接口判断请求头有无token，如果没有token以及token是无效的或过期的，服务器统一返回401；</li><li>如果前端收到HTTP响应状态码401，则重定向到登录页面。</li></ol><p>通过上面的描述，相信大家已经发现了，基于token的用户跟踪最为关键是在用户登录成功时，要为用户生成一个token作为用户的身份标识。生成token的方法很多，其中一种比较成熟的解决方案是使用JSON Web Token。</p><h4 id="JWT概述"><a href="#JWT概述" class="headerlink" title="JWT概述"></a>JWT概述</h4><p>JSON Web Token通常简称为JWT，它是一种开放标准（RFC 7519）。随着RESTful架构的流行，越来越多的项目使用JWT作为用户身份认证的方式。JWT相当于是三个JSON对象经过编码后，用<code>.</code>分隔并组合到一起，这三个JSON对象分别是头部（header）、载荷（payload）和签名（signature），如下图所示。</p><p><img src="/res/json-web-token.png"></p><ol><li><p>头部</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;  &quot;alg&quot;: &quot;HS256&quot;,  &quot;typ&quot;: &quot;JWT&quot;&#125;</code></pre><p> 其中，<code>alg</code>属性表示签名的算法，默认是HMAC SHA256（简写成<code>HS256</code>）；<code>typ</code>属性表示这个令牌的类型，JWT中都统一书写为<code>JWT</code>。</p></li><li><p>载荷</p><p> 载荷部分用来存放实际需要传递的数据。JWT官方文档中规定了7个可选的字段：</p><ul><li>iss ：签发人</li><li>exp：过期时间</li><li>sub：主题</li><li>aud：受众</li><li>nbf：生效时间</li><li>iat：签发时间</li><li>jti：编号</li></ul><p> 除了官方定义的字典，我们可以根据应用的需要添加自定义的字段，如下所示。</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;  &quot;sub&quot;: &quot;1234567890&quot;,  &quot;nickname&quot;: &quot;jackfrued&quot;,  &quot;role&quot;: &quot;admin&quot;&#125;</code></pre></li><li><p>签名</p><p> 签名部分是对前面两部分生成一个指纹，防止数据伪造和篡改。实现签名首先需要指定一个密钥。这个密钥只有服务器才知道，不能泄露给用户。然后，使用头部指定的签名算法（默认是<code>HS256</code>），按照下面的公式产生签名。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">HS256(base64Encode(header) + &#39;.&#39; + base64Encode(payload), secret)</code></pre><p> 算出签名以后，把头部、载荷、签名三个部分拼接成一个字符串，每个部分用<code>.</code>进行分隔，这样一个JWT就生成好了。</p></li></ol><h4 id="JWT的优缺点"><a href="#JWT的优缺点" class="headerlink" title="JWT的优缺点"></a>JWT的优缺点</h4><p>使用JWT的优点非常明显，包括：</p><ol><li>更容易实现水平扩展，因为令牌保存在浏览器中，服务器不需要做状态管理。</li><li>更容易防范CSRF攻击，因为在请求头中添加<code>localStorage</code>或<code>sessionStorage</code>中的token必须靠JavaScript代码完成，而不是自动添加到请求头中的。</li><li>可以防伪造和篡改，因为JWT有签名，伪造和篡改的令牌无法通过签名验证，会被认定是无效的令牌。</li></ol><p>当然，任何技术不可能只有优点没有缺点，JWT也有诸多缺点，大家需要在使用的时候引起注意，具体包括：</p><ol><li>可能会遭受到XSS攻击（跨站脚本攻击），通过注入恶意脚本执行JavaScript代码获取到用户令牌。</li><li>在令牌过期之前，无法作废已经颁发的令牌，要解决这个问题，还需要额外的中间层和代码来辅助。</li><li>JWT是用户的身份令牌，一旦泄露，任何人都可以获得该用户的所有权限。为了降低令牌被盗用后产生的风险，JWT的有效期应该设置得比较短。对于一些比较重要的权限，使用时应通过其他方式再次对用户进行认证，例如短信验证码等。</li></ol><h4 id="使用PyJWT"><a href="#使用PyJWT" class="headerlink" title="使用PyJWT"></a>使用PyJWT</h4><p>在Python代码中，可以使用三方库<code>PyJWT</code>生成和验证JWT，下面是安装<code>PyJWT</code>的命令。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install pyjwt</code></pre><p>生成令牌。</p><pre class="language-Python" data-language="Python"><code class="language-Python">payload &#x3D; &#123;    &#39;exp&#39;: datetime.datetime.utcnow() + datetime.timedelta(days&#x3D;1),    &#39;userid&#39;: 10001&#125;token &#x3D; jwt.encode(payload, settings.SECRET_KEY).decode()</code></pre><p>验证令牌。</p><pre class="language-Python" data-language="Python"><code class="language-Python">try:    token &#x3D; &#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTQ4NzIzOTEsInVzZXJpZCI6MTAwMDF9.FM-bNxemWLqQQBIsRVvc4gq71y42I9m2zt5nlFxNHUo&#39;    payload &#x3D; jwt.decode(token, settings.SECRET_KEY)except InvalidTokenError:    raise AuthenticationFailed(&#39;无效的令牌或令牌已经过期&#39;)</code></pre><p>如果不清楚JWT具体的使用方式，可以先看看第55天的内容，里面提供了完整的投票项目代码的地址。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>55.RESTful架构和DRF进阶</title>
      <link href="/2024/07/01/55.restful-jia-gou-he-drf-jin-jie/"/>
      <url>/2024/07/01/55.restful-jia-gou-he-drf-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="RESTful架构和DRF进阶"><a href="#RESTful架构和DRF进阶" class="headerlink" title="RESTful架构和DRF进阶"></a>RESTful架构和DRF进阶</h2><p>除了上一节讲到的方法，使用DRF创建REST风格的数据接口也可以通过CBV（基于类的视图）的方式。使用CBV创建数据接口的特点是代码简单，开发效率高，但是没有FBV（基于函数的视图）灵活，因为使用FBV的方式，数据接口对应的视图函数执行什么样的代码以及返回什么的数据是高度可定制的。下面我们以定制学科的数据接口为例，讲解通过CBV方式定制数据接口的具体做法。</p><h3 id="使用CBV"><a href="#使用CBV" class="headerlink" title="使用CBV"></a>使用CBV</h3><h4 id="继承APIView的子类"><a href="#继承APIView的子类" class="headerlink" title="继承APIView的子类"></a>继承APIView的子类</h4><p>修改之前项目中的<code>polls/views.py</code>，去掉<code>show_subjects</code>视图函数，添加一个名为<code>SubjectView</code>的类，该类继承自<code>ListAPIView</code>，<code>ListAPIView</code>能接收GET请求，它封装了获取数据列表并返回JSON数据的<code>get</code>方法。<code>ListAPIView</code>是<code>APIView</code> 的子类，<code>APIView</code>还有很多的子类，例如<code>CreateAPIView</code>可以支持POST请求，<code>UpdateAPIView</code>可以支持PUT和PATCH请求，<code>DestoryAPIView</code>可以支持DELETE请求。<code>SubjectView</code> 的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.generics import ListAPIViewclass SubjectView(ListAPIView):    # 通过queryset指定如何获取学科数据    queryset &#x3D; Subject.objects.all()    # 通过serializer_class指定如何序列化学科数据    serializer_class &#x3D; SubjectSerializer</code></pre><p>刚才说过，由于<code>SubjectView</code>的父类<code>ListAPIView</code>已经实现了<code>get</code>方法来处理获取学科列表的GET请求，所以我们只需要声明如何获取学科数据以及如何序列化学科数据，前者用<code>queryset</code>属性指定，后者用<code>serializer_class</code>属性指定。要使用上面的<code>SubjectView</code>，需要修改<code>urls.py</code>文件，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [    path(&#39;api&#x2F;subjects&#x2F;&#39;, SubjectView.as_view()),   ]</code></pre><p>很显然，上面的做法较之之前讲到的FBV要简单很多。</p><h4 id="继承ModelViewSet"><a href="#继承ModelViewSet" class="headerlink" title="继承ModelViewSet"></a>继承ModelViewSet</h4><p>如果学科对应的数据接口需要支持GET、POST、PUT、PATCH、DELETE请求来支持对学科资源的获取、新增、更新、删除操作，更为简单的做法是继承<code>ModelViewSet</code>来编写学科视图类。再次修改<code>polls/views.py</code>文件，去掉<code>SubjectView</code>类，添加一个名为<code>SubjectViewSet</code>的类，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.viewsets import ModelViewSetclass SubjectViewSet(ModelViewSet):    queryset &#x3D; Subject.objects.all()    serializer_class &#x3D; SubjectSerializer</code></pre><p>通过查看<code>ModelViewSet</code>类的源代码可以发现，该类共有6个父类，其中前5个父类分别实现对POST（新增学科）、GET（获取指定学科）、PUT&#x2F;PATCH（更新学科）、DELETE（删除学科）和GET（获取学科列表）操作的支持，对应的方法分别是<code>create</code>、<code>retrieve</code>、<code>update</code>、<code>destroy</code>和<code>list</code>。由于<code>ModelViewSet</code>的父类中已经实现了这些方法，所以我们几乎没有编写任何代码就完成了学科数据全套接口的开发，我们要做的仅仅是指出如何获取到数据（通过<code>queryset</code>属性指定）以及如何序列化数据（通过<code>serializer_class</code>属性指定），这一点跟上面继承<code>APIView</code>的子类做法是一致的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class ModelViewSet(mixins.CreateModelMixin,                   mixins.RetrieveModelMixin,                   mixins.UpdateModelMixin,                   mixins.DestroyModelMixin,                   mixins.ListModelMixin,                   GenericViewSet):    &quot;&quot;&quot;    A viewset that provides default &#96;create()&#96;, &#96;retrieve()&#96;, &#96;update()&#96;,    &#96;partial_update()&#96;, &#96;destroy()&#96; and &#96;list()&#96; actions.    &quot;&quot;&quot;    pass</code></pre><p>要使用上面的<code>SubjectViewSet</code>，需要在<code>urls.py</code>文件中进行URL映射。由于<code>ModelViewSet</code>相当于是多个视图函数的汇总，所以不同于之前映射URL的方式，我们需要先创建一个路由器并通过它注册<code>SubjectViewSet</code>，然后将注册成功后生成的URL一并添加到<code>urlspattern</code>列表中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.routers import DefaultRouterrouter &#x3D; DefaultRouter()router.register(&#39;api&#x2F;subjects&#39;, SubjectViewSet)urlpatterns +&#x3D; router.urls</code></pre><p>除了<code>ModelViewSet</code>类外，DRF还提供了一个名为<code>ReadOnlyModelViewSet</code> 的类，从名字上就可以看出，该类是只读视图的集合，也就意味着，继承该类定制的数据接口只能支持GET请求，也就是获取单个资源和资源列表的请求。</p><h3 id="数据分页"><a href="#数据分页" class="headerlink" title="数据分页"></a>数据分页</h3><p>在使用GET请求获取资源列表时，我们通常不会一次性的加载所有的数据，除非数据量真的很小。大多数获取资源列表的操作都支持数据分页展示，也就说我们可以通过指定页码（或类似于页码的标识）和页面大小（一次加载多少条数据）来获取不同的数据。我们可以通过对<code>QuerySet</code>对象的切片操作来实现分页，也可以利用Django框架封装的<code>Paginator</code>和<code>Page</code>对象来实现分页。使用DRF时，可以在Django配置文件中修改<code>REST_FRAMEWORK</code>并配置默认的分页类和页面大小来实现分页，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">REST_FRAMEWORK &#x3D; &#123;    &#39;PAGE_SIZE&#39;: 10,    &#39;DEFAULT_PAGINATION_CLASS&#39;: &#39;rest_framework.pagination.PageNumberPagination&#39;&#125;</code></pre><p>除了上面配置的<code>PageNumberPagination</code>分页器之外，DRF还提供了<code>LimitOffsetPagination</code>和<code>CursorPagination</code>分页器，值得一提的是<code>CursorPagination</code>，它可以避免使用页码分页时暴露网站的数据体量，有兴趣的读者可以自行了解。如果不希望使用配置文件中默认的分页设定，可以在视图类中添加一个<code>pagination_class</code>属性来重新指定分页器，通常可以将该属性指定为自定义的分页器，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.pagination import PageNumberPaginationclass CustomizedPagination(PageNumberPagination):    # 默认页面大小    page_size &#x3D; 5    # 页面大小对应的查询参数    page_size_query_param &#x3D; &#39;size&#39;    # 页面大小的最大值    max_page_size &#x3D; 50</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">class SubjectView(ListAPIView):    # 指定如何获取数据    queryset &#x3D; Subject.objects.all()    # 指定如何序列化数据    serializer_class &#x3D; SubjectSerializer    # 指定如何分页    pagination_class &#x3D; CustomizedPagination</code></pre><p>如果不希望数据分页，可以将<code>pagination_class</code>属性设置为<code>None</code>来取消默认的分页器。</p><h3 id="数据筛选"><a href="#数据筛选" class="headerlink" title="数据筛选"></a>数据筛选</h3><p>如果希望使用CBV定制获取老师信息的数据接口，也可以通过继承<code>ListAPIView</code>来实现。但是因为要通过指定的学科来获取对应的老师信息，因此需要对老师数据进行筛选而不是直接获取所有老师的数据。如果想从请求中获取学科编号并通过学科编号对老师进行筛选，可以通过重写<code>get_queryset</code>方法来做到，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class TeacherView(ListAPIView):    serializer_class &#x3D; TeacherSerializer    def get_queryset(self):        queryset &#x3D; Teacher.objects.defer(&#39;subject&#39;)        try:            sno &#x3D; self.request.GET.get(&#39;sno&#39;, &#39;&#39;)            queryset &#x3D; queryset.filter(subject__no&#x3D;sno)            return queryset        except ValueError:            raise Http404(&#39;No teachers found.&#39;)</code></pre><p>除了上述方式之外，还可以使用三方库<code>django-filter</code>来配合DRF实现对数据的筛选，使用<code>django-filter</code>后，可以通过为视图类配置<code>filter-backends</code>属性并指定使用<code>DjangoFilterBackend</code>来支持数据筛选。在完成上述配置后，可以使用<code>filter_fields</code> 属性或<code>filterset_class</code>属性来指定如何筛选数据，有兴趣的读者可以自行研究。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56.使用缓存</title>
      <link href="/2024/07/01/56.shi-yong-huan-cun/"/>
      <url>/2024/07/01/56.shi-yong-huan-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><p>通常情况下，Web应用的性能瓶颈都会出现在关系型数据库上，当并发访问量较大时，如果所有的请求都需要通过关系型数据库完成数据持久化操作，那么数据库一定会不堪重负。优化Web应用性能最为重要的一点就是使用缓存，把那些数据体量不大但访问频率非常高的数据提前加载到缓存服务器中，这又是典型的空间换时间的方法。通常缓存服务器都是直接将数据置于内存中而且使用了非常高效的数据存取策略（哈希存储、键值对方式等），在读写性能上远远优于关系型数据库的，因此我们可以让Web应用接入缓存服务器来优化其性能，其中一个非常好的选择就是使用Redis。</p><p>Web应用的缓存架构大致如下图所示。</p><p><img src="/res/redis-cache-service.png"></p><h3 id="Django项目接入Redis"><a href="#Django项目接入Redis" class="headerlink" title="Django项目接入Redis"></a>Django项目接入Redis</h3><p>在此前的课程中，我们介绍过Redis的安装和使用，此处不再进行赘述。如果需要在Django项目中接入Redis，可以使用三方库<code>django-redis</code>，这个三方库又依赖了一个名为<code>redis</code> 的三方库，它封装了对Redis的各种操作。</p><p>安装<code>django-redis</code>。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install django-redis</code></pre><p>修改Django配置文件中关于缓存的配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python">CACHES &#x3D; &#123;    &#39;default&#39;: &#123;        # 指定通过django-redis接入Redis服务        &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,        # Redis服务器的URL        &#39;LOCATION&#39;: [&#39;redis:&#x2F;&#x2F;1.2.3.4:6379&#x2F;0&#39;, ],        # Redis中键的前缀（解决命名冲突）        &#39;KEY_PREFIX&#39;: &#39;vote&#39;,        # 其他的配置选项        &#39;OPTIONS&#39;: &#123;            &#39;CLIENT_CLASS&#39;: &#39;django_redis.client.DefaultClient&#39;,            # 连接池（预置若干备用的Redis连接）参数            &#39;CONNECTION_POOL_KWARGS&#39;: &#123;                # 最大连接数                &#39;max_connections&#39;: 512,            &#125;,            # 连接Redis的用户口令            &#39;PASSWORD&#39;: &#39;foobared&#39;,        &#125;    &#125;,&#125;</code></pre><p>至此，我们的Django项目已经可以接入Redis，接下来我们修改项目代码，用Redis为之写的获取学科数据的接口提供缓存服务。</p><h3 id="为视图提供缓存服务"><a href="#为视图提供缓存服务" class="headerlink" title="为视图提供缓存服务"></a>为视图提供缓存服务</h3><h4 id="声明式缓存"><a href="#声明式缓存" class="headerlink" title="声明式缓存"></a>声明式缓存</h4><p>所谓声明式缓存是指不修改原来的代码，通过Python中的装饰器（代理）为原有的代码增加缓存功能。对于FBV，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.views.decorators.cache import cache_page@api_view((&#39;GET&#39;, ))@cache_page(timeout&#x3D;86400, cache&#x3D;&#39;default&#39;)def show_subjects(request):    &quot;&quot;&quot;获取学科数据&quot;&quot;&quot;    queryset &#x3D; Subject.objects.all()    data &#x3D; SubjectSerializer(queryset, many&#x3D;True).data    return Response(&#123;&#39;code&#39;: 20000, &#39;subjects&#39;: data&#125;)</code></pre><p>上面的代码通过Django封装的<code>cache_page</code>装饰器缓存了视图函数的返回值（响应对象），<code>cache_page</code>的本意是缓存视图函数渲染的页面，对于返回JSON数据的视图函数，相当于是缓存了JSON数据。在使用<code>cache_page</code>装饰器时，可以传入<code>timeout</code>参数来指定缓存过期时间，还可以使用<code>cache</code>参数来指定需要使用哪一组缓存服务来缓存数据。Django项目允许在配置文件中配置多组缓存服务，上面的<code>cache=&#39;default&#39;</code>指定了使用默认的缓存服务（因为之前的配置文件中我们也只配置了名为<code>default</code>的缓存服务）。视图函数的返回值会被序列化成字节串放到Redis中（Redis中的str类型可以接收字节串），缓存数据的序列化和反序列化也不需要我们自己处理，因为<code>cache_page</code>装饰器会调用<code>django-redis</code>库中的<code>RedisCache</code>来对接Redis，该类使用了<code>DefaultClient</code>来连接Redis并使用了<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p21_serializing_python_objects.html">pickle序列化</a>，<code>django_redis.serializers.pickle.PickleSerializer</code>是默认的序列化类。</p><p>如果缓存中没有学科的数据，那么通过接口访问学科数据时，我们的视图函数会通过执行<code>Subject.objects.all()</code>向数据库发出SQL语句来获得数据，视图函数的返回值会被缓存，因此下次请求该视图函数如果缓存没有过期，可以直接从缓存中获取视图函数的返回值，无需再次查询数据库。如果想了解缓存的使用情况，可以配置数据库日志或者使用Django-Debug-Toolbar来查看，第一次访问学科数据接口时会看到查询学科数据的SQL语句，再次获取学科数据时，不会再向数据库发出SQL语句，因为可以直接从缓存中获取数据。</p><p>对于CBV，可以利用Django中名为<code>method_decorator</code>的装饰器将<code>cache_page</code>这个装饰函数的装饰器放到类中的方法上，效果跟上面的代码是一样的。需要提醒大家注意的是，<code>cache_page</code>装饰器不能直接放在类上，因为它是装饰函数的装饰器，所以Django框架才提供了<code>method_decorator</code>来解决这个问题，很显然，<code>method_decorator</code>是一个装饰类的装饰器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.utils.decorators import method_decoratorfrom django.views.decorators.cache import cache_page@method_decorator(decorator&#x3D;cache_page(timeout&#x3D;86400, cache&#x3D;&#39;default&#39;), name&#x3D;&#39;get&#39;)class SubjectView(ListAPIView):    &quot;&quot;&quot;获取学科数据的视图类&quot;&quot;&quot;    queryset &#x3D; Subject.objects.all()    serializer_class &#x3D; SubjectSerializer</code></pre><h4 id="编程式缓存"><a href="#编程式缓存" class="headerlink" title="编程式缓存"></a>编程式缓存</h4><p>所谓编程式缓存是指通过自己编写的代码来使用缓存服务，这种方式虽然代码量会稍微大一些，但是相较于声明式缓存，它对缓存的操作和使用更加灵活，在实际开发中使用得更多。下面的代码去掉了之前使用的<code>cache_page</code>装饰器，通过<code>django-redis</code>提供的<code>get_redis_connection</code>函数直接获取Redis连接来操作Redis。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def show_subjects(request):    &quot;&quot;&quot;获取学科数据&quot;&quot;&quot;    redis_cli &#x3D; get_redis_connection()    # 先尝试从缓存中获取学科数据    data &#x3D; redis_cli.get(&#39;vote:polls:subjects&#39;)    if data:        # 如果获取到学科数据就进行反序列化操作        data &#x3D; json.loads(data)    else:        # 如果缓存中没有获取到学科数据就查询数据库        queryset &#x3D; Subject.objects.all()        data &#x3D; SubjectSerializer(queryset, many&#x3D;True).data        # 将查到的学科数据序列化后放到缓存中        redis_cli.set(&#39;vote:polls:subjects&#39;, json.dumps(data), ex&#x3D;86400)    return Response(&#123;&#39;code&#39;: 20000, &#39;subjects&#39;: data&#125;)</code></pre><p>需要说明的是，Django框架提供了<code>cache</code>和<code>caches</code>两个现成的变量来支持缓存操作，前者访问的是默认的缓存（名为<code>default</code>的缓存），后者可以通过索引运算获取指定的缓存服务（例如：<code>caches[&#39;default&#39;]</code>）。向<code>cache</code>对象发送<code>get</code>和<code>set</code>消息就可以实现对缓存的读和写操作，但是这种方式能做的操作有限，不如上面代码中使用的方式灵活。还有一个值得注意的地方，由于可以通过<code>get_redis_connection</code>函数获得的Redis连接对象向Redis发起各种操作，包括<code>FLUSHDB</code>、<code>SHUTDOWN</code>等危险的操作，所以在实际商业项目开发中，一般都会对<code>django-redis</code>再做一次封装，例如封装一个工具类，其中只提供了项目需要用到的缓存操作的方法，从而避免了直接使用<code>get_redis_connection</code>的潜在风险。当然，自己封装对缓存的操作还可以使用“Read Through”和“Write Through”的方式实现对缓存的更新，这个在下面会介绍到。</p><h3 id="缓存相关问题"><a href="#缓存相关问题" class="headerlink" title="缓存相关问题"></a>缓存相关问题</h3><h4 id="缓存数据的更新"><a href="#缓存数据的更新" class="headerlink" title="缓存数据的更新"></a>缓存数据的更新</h4><p>在使用缓存时，一个必须搞清楚的问题就是，当数据改变时，如何更新缓存中的数据。通常更新缓存有如下几种套路，分别是：</p><ol><li>Cache Aside Pattern</li><li>Read&#x2F;Write Through Pattern</li><li>Write Behind Caching Pattern</li></ol><p>第1种方式的具体做法就是，当数据更新时，先更新数据库，再删除缓存。注意，不能够使用先更新数据库再更新缓存的方式，也不能够使用先删除缓存再更新数据库的方式，大家可以自己想一想为什么（考虑一下有并发的读操作和写操作的场景）。当然，先更新数据库再删除缓存的做法在理论上也存在风险，但是发生问题的概率是极低的，所以不少的项目都使用了这种方式。</p><p>第1种方式相当于编写业务代码的开发者要自己负责对两套存储系统（缓存和关系型数据库）的操作，代码写起来非常的繁琐。第2种方式的主旨是将后端的存储系统变成一套代码，对缓存的维护封装在这套代码中。其中，Read Through指在查询操作中更新缓存，也就是说，当缓存失效的时候，由缓存服务自己负责对数据的加载，从而对应用方是透明的；而Write Through是指在更新数据时，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后再由缓存服务自己更新数据库（同步更新）。刚才我们说过，如果自己对项目中的Redis操作再做一次封装，就可以实现“Read Through”和“Write Through”模式，这样做虽然会增加工作量，但无疑是一件“一劳永逸”且“功在千秋”的事情。</p><p>第3种方式是在更新数据的时候，只更新缓存，不更新数据库，而缓存服务这边会<strong>异步的批量更新</strong>数据库。这种做法会大幅度提升性能，但代价是牺牲数据的<strong>强一致性</strong>。第3种方式的实现逻辑比较复杂，因为他需要追踪有哪数据是被更新了的，然后再批量的刷新到持久层上。</p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存是为了缓解数据库压力而添加的一个中间层，如果恶意的访问者频繁的访问缓存中没有的数据，那么缓存就失去了存在的意义，瞬间所有请求的压力都落在了数据库上，这样会导致数据库承载着巨大的压力甚至连接异常，类似于分布式拒绝服务攻击（DDoS）的做法。解决缓存穿透的一个办法是约定如果查询返回为空值，把这个空值也缓存起来，但是需要为这个空值的缓存设置一个较短的超时时间，毕竟缓存这样的值就是对缓存空间的浪费。另一个解决缓存穿透的办法是使用布隆过滤器，具体的做法大家可以自行了解。</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>在实际的项目中，可能存在某个缓存的key某个时间点过期，但恰好在这个时间点对有对该key的大量的并发请求过来，这些请求没有从缓存中找到key对应的数据，就会直接从数据库中获取数据并写回到缓存，这个时候大并发的请求可能会瞬间把数据库压垮，这种现象称为缓存击穿。比较常见的解决缓存击穿的办法是使用互斥锁，简单的说就是在缓存失效的时候，不是立即去数据库加载数据，而是先设置互斥锁（例如：Redis中的setnx），只有设置互斥锁的操作成功的请求，才能执行查询从数据库中加载数据并写入缓存，其他设置互斥锁失败的请求，可以先执行一个短暂的休眠，然后尝试重新从缓存中获取数据，如果缓存还没有数据，则重复刚才的设置互斥锁的操作，大致的参考代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; redis_cli.get(key)while not data:    if redis_cli.setnx(&#39;mutex&#39;, &#39;x&#39;):        redis.expire(&#39;mutex&#39;, timeout)        data &#x3D; db.query(...)        redis.set(key, data)        redis.delete(&#39;mutex&#39;)    else:        time.sleep(0.1)        data &#x3D; redis_cli.get(key)</code></pre><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存雪崩是指在将数据放入缓存时采用了相同的过期时间，这样就导致缓存在某一时刻同时失效，请求全部转发到数据库，导致数据库瞬时压力过大而崩溃。解决缓存雪崩问题的方法也比较简单，可以在既定的缓存过期时间上加一个随机时间，这样可以从一定程度上避免不同的key在同一时间集体失效。还有一种办法就是使用多级缓存，每一级缓存的过期时间都不一样，这样的话即便某个级别的缓存集体失效，但是其他级别的缓存还能够提供数据，避免所有的请求都落到数据库上。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>57.接入三方平台</title>
      <link href="/2024/07/01/57.jie-ru-san-fang-ping-tai/"/>
      <url>/2024/07/01/57.jie-ru-san-fang-ping-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="接入三方平台"><a href="#接入三方平台" class="headerlink" title="接入三方平台"></a>接入三方平台</h2><p>在Web应用的开发过程中，有一些任务并不是我们自己能够完成的。例如，我们的Web项目中需要做个人或企业的实名认证，很显然我们并没有能力判断用户提供的认证信息的真实性，这个时候我们就要借助三方平台提供的服务来完成该项操作。再比如说，我们的项目中需要提供在线支付功能，这类业务通常也是借助支付网关来完成而不是自己去实现，我们只需要接入像微信、支付宝、银联这样的三方平台即可。</p><p>在项目中接入三方平台基本上就两种方式：API接入和SDK接入。</p><ol><li>API接入指的是通过访问三方提供的URL来完成操作或获取数据。国内有很多这样的平台提供了大量常用的服务，例如<a href="https://www.juhe.cn/">聚合数据</a>上提供了生活服务类、金融科技类、交通地理类、充值缴费类等各种类型的API。我们可以通过Python程序发起网络请求，通过访问URL获取数据，这些API接口跟我们项目中提供的数据接口是一样的，只不过我们项目中的API是供自己使用的，而这类三方平台提供的API是开放的。当然开放并不代表免费，大多数能够提供有商业价值的数据的API都是需要付费才能使用的。</li><li>SDK接入指的是通过安装三方库并使用三方库封装的类、函数来使用三方平台提供的服务的方式。例如我们刚才说到的接入支付宝，就需要先安装支付宝的SDK，然后通过支付宝封装的类和方法完成对支付服务的调用。</li></ol><p>下面我们通过具体的例子来讲解如何接入三方平台。</p><h3 id="接入短信网关"><a href="#接入短信网关" class="headerlink" title="接入短信网关"></a>接入短信网关</h3><p>一个Web项目有很多地方都可以用到短信服务，例如：手机验证码登录、重要消息提醒、产品营销短信等。要实现发送短信的功能，可以通过接入短信网关来实现，国内比较有名的短信网关包括：云片短信、网易云信、螺丝帽、SendCloud等，这些短信网关一般都提供了免费试用功能。下面我们以<a href="https://luosimao.com/">螺丝帽</a>平台为例，讲解如何在项目中接入短信网关，其他平台操作基本类似。</p><ol><li><p>注册账号，新用户可以免费试用。</p></li><li><p>登录到管理后台，进入短信版块。</p></li><li><p>点击“触发发送”可以找到自己专属的API Key（身份标识）。</p><p> <img src="/res/luosimao-sms-apikey.png"></p></li><li><p>点击“签名管理”可以添加短信签名，短信都必须携带签名，免费试用的短信要在短信中添加“【铁壳测试】”这个签名，否则短信无法发送。</p><p> <img src="/res/luosimao-sms-signature.png"></p></li><li><p>点击“IP白名单”将运行Django项目的服务器地址（公网IP地址，本地运行可以打开<a href="">xxx</a>网站查看自己本机的公网IP地址）填写到白名单中，否则短信无法发送。</p><p> <img src="/res/luosimao-sms-whitelist.png"></p></li><li><p>如果没有剩余的短信条数，可以到“充值”页面选择“短信服务”进行充值。</p><p> <img src="/res/luosimao-pay-onlinebuy.png"></p></li></ol><p>接下来，我们可以通过调用螺丝帽短信网关实现发送短信验证码的功能，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def send_mobile_code(tel, code):    &quot;&quot;&quot;发送短信验证码&quot;&quot;&quot;    resp &#x3D; requests.post(        url&#x3D;&#39;http:&#x2F;&#x2F;sms-api.luosimao.com&#x2F;v1&#x2F;send.json&#39;,        auth&#x3D;(&#39;api&#39;, &#39;key-自己的APIKey&#39;),        data&#x3D;&#123;            &#39;mobile&#39;: tel,            &#39;message&#39;: f&#39;您的短信验证码是&#123;code&#125;，打死也不能告诉别人哟。【Python小课】&#39;        &#125;,        verify&#x3D;False    )    return resp.json()</code></pre><p>运行上面的代码需要先安装<code>requests</code>三方库，这个三方库封装了HTTP网络请求的相关功能，使用起来非常的简单，我们在之前的内容中也讲到过这个三方库。<code>send_mobile_code</code>函数有两个参数，第一个参数是手机号，第二个参数是短信验证码的内容，第5行代码需要提供自己的API Key，就是上面第2步中查看到的自己的API Key。请求螺丝帽的短信网关会返回JSON格式的数据，对于上面的代码如果返回<code>&#123;&#39;err&#39;: 0, &#39;msg&#39;: &#39;ok&#39;&#125;</code>，则表示短信发送成功，如果<code>err</code>字段的值不为<code>0</code>而是其他值，则表示短信发送失败，可以在螺丝帽官方的<a href="https://luosimao.com/docs/api/">开发文档</a>页面上查看到不同的数值代表的含义，例如：<code>-20</code>表示余额不足，<code>-32</code>表示缺少短信签名。</p><p>可以在视图函数中调用上面的函数来完成发送短信验证码的功能，稍后我们可以把这个功能跟用户注册结合起来。</p><p>生成随机验证码和验证手机号的函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport reTEL_PATTERN &#x3D; re.compile(r&#39;1[3-9]\d&#123;9&#125;&#39;)def check_tel(tel):    &quot;&quot;&quot;检查手机号&quot;&quot;&quot;    return TEL_PATTERN.fullmatch(tel) is not Nonedef random_code(length&#x3D;6):    &quot;&quot;&quot;生成随机短信验证码&quot;&quot;&quot;    return &#39;&#39;.join(random.choices(&#39;0123456789&#39;, k&#x3D;length))</code></pre><p>发送短信验证码的视图函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">@api_view((&#39;GET&#39;, ))def get_mobilecode(request, tel):    &quot;&quot;&quot;获取短信验证码&quot;&quot;&quot;    if check_tel(tel):        redis_cli &#x3D; get_redis_connection()        if redis_cli.exists(f&#39;vote:block-mobile:&#123;tel&#125;&#39;):            data &#x3D; &#123;&#39;code&#39;: 30001, &#39;message&#39;: &#39;请不要在60秒内重复发送短信验证码&#39;&#125;        else:            code &#x3D; random_code()            send_mobile_code(tel, code)            # 通过Redis阻止60秒内容重复发送短信验证码            redis_cli.set(f&#39;vote:block-mobile:&#123;tel&#125;&#39;, &#39;x&#39;, ex&#x3D;60)            # 将验证码在Redis中保留10分钟（有效期10分钟）            redis_cli.set(f&#39;vote2:valid-mobile:&#123;tel&#125;&#39;, code, ex&#x3D;600)            data &#x3D; &#123;&#39;code&#39;: 30000, &#39;message&#39;: &#39;短信验证码已发送，请注意查收&#39;&#125;    else:        data &#x3D; &#123;&#39;code&#39;: 30002, &#39;message&#39;: &#39;请输入有效的手机号&#39;&#125;    return Response(data)</code></pre><blockquote><p><strong>说明</strong>：上面的代码利用Redis实现了两个额外的功能，一个是阻止用户60秒内重复发送短信验证码，一个是将用户的短信验证码保留10分钟，也就是说这个短信验证码的有效期只有10分钟，我们可以要求用户在注册时提供该验证码来验证用户手机号的真实性。</p></blockquote><h3 id="接入云存储服务"><a href="#接入云存储服务" class="headerlink" title="接入云存储服务"></a>接入云存储服务</h3><p>当我们提到<strong>云存储</strong>这个词的时候，通常是指把数据存放在由第三方提供的虚拟服务器环境下，简单的说就是将某些数据或资源通过第三平台托管。一般情况下，提供云存储服务的公司都运营着大型的数据中心，需要云存储服务的个人或组织通过向其购买或租赁存储空间来满足数据存储的需求。在开发Web应用时，可以将静态资源，尤其是用户上传的静态资源直接置于云存储服务中，云存储通常会提供对应的URL使得用户可以访问该静态资源。国内外比较有名的云存储服务（如：亚马逊的S3、阿里的OSS2等）一般都物美价廉，相比自己架设静态资源服务器，云存储的代价更小，而且一般的云存储平台都提供了CDN服务，用于加速对静态资源的访问，所以不管从哪个角度出发，使用云存储的方式管理Web应用的数据和静态资源都是非常好的选择，除非这些资源涉及到个人或商业隐私，否则就可以托管到云存储中。</p><p>下面我们以接入<a href="https://www.qiniu.com/">七牛云</a>为例，讲解如何实现将用户上传的文件保存到七牛云存储。七牛云是国内知名的云计算及数据服务提供商，七牛云在海量文件存储、CDN、视频点播、互动直播以及大规模异构数据的智能分析与处理等领域都有自己的产品，而且非付费用户也可以免费接入，使用其提供的服务。下面是接入七牛云的流程：</p><ol><li><p>注册账号，登录管理控制台。</p><p> <img src="/res/qiniu-manage-console.png"></p></li><li><p>选择左侧菜单中的对象存储。</p><p> <img src="/res/qiniu-storage-service.png"></p></li><li><p>在空间管理中选择新建空间（例如：myvote），如果提示空间名称已被占用，更换一个再尝试即可。注意，创建空间后会提示绑定自定义域名，如果暂时还没有自己的域名，可以使用七牛云提供的临时域名，但是临时域名会在30天后被回收，所以最好准备自己的域名（域名需要备案，不清楚如何操作的请自行查阅相关资料）。</p><p> <img src="/res/qiniu-storage-create.png"></p></li><li><p>在网页的右上角点击个人头像中的“密钥管理”，查看自己的密钥，稍后在代码中需要使用AK（AccessKey）和SK（SecretKey）两个密钥来认证用户身份。</p><p> <img src="/res/qiniu-secretkey-management.png"></p></li><li><p>点击网页上方菜单中的“文档”，进入到<a href="https://developer.qiniu.com/">七牛开发者中心</a>，选择导航菜单中的“SDK&amp;工具”并点击“官方SDK”子菜单，找到Python（服务端）并点击“文档”查看官方文档。</p><p> <img src="/res/qiniu-document-python.png"></p></li></ol><p>接下来，只要安装官方文档提供的示例，就可以接入七牛云，使用七牛云提供的云存储以及其他服务。首先可以通过下面的命令安装七牛云的三方库。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install qiniu</code></pre><p>接下来可以通过<code>qiniu</code>模块中的<code>put_file</code>和<code>put_stream</code>两个函数实现文件上传，前者可以上传指定路径的文件，后者可以将内存中的二进制数据上传至七牛云，具体的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import qiniuAUTH &#x3D; qiniu.Auth(&#39;密钥管理中的AccessKey&#39;, &#39;密钥管理中的SecretKey&#39;)BUCKET_NAME &#x3D; &#39;myvote&#39;def upload_file_to_qiniu(key, file_path):    &quot;&quot;&quot;上传指定路径的文件到七牛云&quot;&quot;&quot;    token &#x3D; AUTH.upload_token(BUCKET_NAME, key)    return qiniu.put_file(token, key, file_path)def upload_stream_to_qiniu(key, stream, size):    &quot;&quot;&quot;上传二进制数据流到七牛云&quot;&quot;&quot;    token &#x3D; AUTH.upload_token(BUCKET_NAME, key)    return qiniu.put_stream(token, key, stream, None, size)</code></pre><p>下面是一个文件上传的简单前端页。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;上传文件&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form action&#x3D;&quot;&#x2F;upload&#x2F;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;        &lt;div&gt;            &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;photo&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><blockquote><p><strong>说明</strong>：前端如果使用表单实现文件上传，表单的method属性必须设置为post，enctype属性需要设置为multipart&#x2F;form-data，表单中type属性为file的input标签，就是上传文件的文件选择器。</p></blockquote><p>实现上传功能的视图函数如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.views.decorators.csrf import csrf_exempt@csrf_exemptdef upload(request):    # 如果上传的文件小于2.5M，则photo对象的类型为InMemoryUploadedFile，文件在内存中    # 如果上传的文件超过2.5M，则photo对象的类型为TemporaryUploadedFile，文件在临时路径下    photo &#x3D; request.FILES.get(&#39;photo&#39;)    _, ext &#x3D; os.path.splitext(photo.name)    # 通过UUID和原来文件的扩展名生成独一无二的新的文件名    filename &#x3D; f&#39;&#123;uuid.uuid1().hex&#125;&#123;ext&#125;&#39;    # 对于内存中的文件，可以使用上面封装好的函数upload_stream_to_qiniu上传文件到七牛云    # 如果文件保存在临时路径下，可以使用upload_file_to_qiniu实现文件上传    upload_stream_to_qiniu(filename, photo.file, photo.size)    return redirect(&#39;&#x2F;static&#x2F;html&#x2F;upload.html&#39;)</code></pre><blockquote><p><strong>注意</strong>：上面的视图函数使用了<code>csrf_exempt</code>装饰器，该装饰器能够让表单免除必须提供CSRF令牌的要求。此外，代码第11行使用了<code>uuid</code>模块的<code>uuid1</code>函数来生成全局唯一标识符。</p></blockquote><p>运行项目尝试文件上传的功能，文件上传成功后，可以在七牛云“空间管理”中点击自己空间并进入“文件管理”界面，在这里可以看到我们刚才上传成功的文件，而且可以通过七牛云提供的域名获取该文件。</p><p><img src="/res/qiniu-file-management.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58.异步任务和定时任务</title>
      <link href="/2024/07/01/58.yi-bu-ren-wu-he-ding-shi-ren-wu/"/>
      <url>/2024/07/01/58.yi-bu-ren-wu-he-ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="异步任务和定时任务"><a href="#异步任务和定时任务" class="headerlink" title="异步任务和定时任务"></a>异步任务和定时任务</h2><p>在Web应用中，如果一个请求执行了耗时间的操作或者该请求的执行时间无法确定，而且对于用户来说只需要知道服务器接收了他的请求，并不需要马上得到请求的执行结果，这样的操作我们就应该对其进行异步化处理。如果说<strong>使用缓存是优化网站性能的第一要义</strong>，那么将耗时间或执行时间不确定的任务<strong>异步化则是网站性能优化的第二要义</strong>，简单的说就是<strong>能推迟做的事情都不要马上做</strong>。</p><p>上一章节中讲到的发短信和上传文件到云存储为例，这两个操作前者属于时间不确定的操作（因为作为调用者，我们不能确定三方平台响应的时间），后者属于耗时间的操作（如果文件较大或者三方平台不稳定，都可能导致上传的时间较长），很显然，这两个操作都可以做异步化处理。</p><p>在 Python 项目中，我们可以使用三方库Celery来完成异步任务和定时任务，关于Celery的内容，请移步到<a href="../Day91-100/95.%E4%BD%BF%E7%94%A8Django%E5%BC%80%E5%8F%91%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE.md">《使用Django开发商业项目》</a>一文。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59.单元测试</title>
      <link href="/2024/07/01/59.dan-yuan-ce-shi/"/>
      <url>/2024/07/01/59.dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>请各位读者移步到<a href="../Day91-100/95.%E4%BD%BF%E7%94%A8Django%E5%BC%80%E5%8F%91%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE.md">《使用Django开发商业项目》</a>一文。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60.项目上线</title>
      <link href="/2024/07/01/60.xiang-mu-shang-xian/"/>
      <url>/2024/07/01/60.xiang-mu-shang-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h2><p>请各位读者移步到<a href="../Day91-100/98.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md">《项目部署上线和性能调优》</a>一文。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61.网络数据采集概述</title>
      <link href="/2024/07/01/61.wang-luo-shu-ju-cai-ji-gai-shu/"/>
      <url>/2024/07/01/61.wang-luo-shu-ju-cai-ji-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络数据采集概述"><a href="#网络数据采集概述" class="headerlink" title="网络数据采集概述"></a>网络数据采集概述</h2><p>爬虫（crawler）也经常被称为网络蜘蛛（spider），是按照一定的规则自动浏览网站并获取所需信息的机器人程序（自动化脚本代码），被广泛的应用于互联网搜索引擎和数据采集。使用过互联网和浏览器的人都知道，网页中除了供用户阅读的文字信息之外，还包含一些超链接，网络爬虫正是通过网页中的超链接信息，不断获得网络上其它页面的地址，然后持续的进行数据采集。正因如此，网络数据采集的过程就像一个爬虫或者蜘蛛在网络上漫游，所以才被形象的称为爬虫或者网络蜘蛛。</p><h3 id="爬虫的应用领域"><a href="#爬虫的应用领域" class="headerlink" title="爬虫的应用领域"></a>爬虫的应用领域</h3><p>在理想的状态下，所有 ICP（Internet Content Provider）都应该为自己的网站提供 API 接口来共享它们允许其他程序获取的数据，在这种情况下就根本不需要爬虫程序。国内比较有名的电商平台（如淘宝、京东等）、社交平台（如微博、微信等）等都提供了自己的 API 接口，但是这类 API 接口通常会对可以抓取的数据以及抓取数据的频率进行限制。对于大多数的公司而言，及时的获取行业数据和竞对数据是企业生存的重要环节之一，然而对大部分企业来说，数据都是其与生俱来的短板。在这种情况下，合理的利用爬虫来获取数据并从中提取出有商业价值的信息对这些企业来说就显得至关重要的。</p><p>爬虫的应用领域其实非常广泛，下面我们列举了其中的一部分，有兴趣的读者可以自行探索相关内容。</p><ol><li>搜索引擎</li><li>新闻聚合</li><li>社交应用</li><li>舆情监控</li><li>行业数据</li></ol><h3 id="爬虫合法性探讨"><a href="#爬虫合法性探讨" class="headerlink" title="爬虫合法性探讨"></a>爬虫合法性探讨</h3><p>经常听人说起“爬虫写得好，牢饭吃到饱”，那么编程爬虫程序是否违法呢？关于这个问题，我们可以从以下几个角度进行解读。</p><ol><li>网络爬虫这个领域目前还属于拓荒阶段，虽然互联网世界已经通过自己的游戏规则建立起了一定的道德规范，即 Robots 协议（全称是“网络爬虫排除标准”），但法律部分还在建立和完善中，也就是说，现在这个领域暂时还是灰色地带。</li><li>“法不禁止即为许可”，如果爬虫就像浏览器一样获取的是前端显示的数据（网页上的公开信息）而不是网站后台的私密敏感信息，就不太担心法律法规的约束，因为目前大数据产业链的发展速度远远超过了法律的完善程度。</li><li>在爬取网站的时候，需要限制自己的爬虫遵守 Robots 协议，同时控制网络爬虫程序的抓取数据的速度；在使用数据的时候，必须要尊重网站的知识产权（从Web 2.0时代开始，虽然Web上的数据很多都是由用户提供的，但是网站平台是投入了运营成本的，当用户在注册和发布内容时，平台通常就已经获得了对数据的所有权、使用权和分发权）。如果违反了这些规定，在打官司的时候败诉几率相当高。</li><li>适当的隐匿自己的身份在编写爬虫程序时必要的，而且最好不要被对方举证你的爬虫有破坏别人动产（例如服务器）的行为。</li><li>不要在公网（如代码托管平台）上去开源或者展示你的爬虫代码，这些行为通常会给自己带来不必要的麻烦。</li></ol><h4 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h4><p>大多数网站都会定义<code>robots.txt</code>文件，这是一个君子协议，并不是所有爬虫都必须遵守的游戏规则。下面以淘宝的<a href="http://www.taobao.com/robots.txt"><code>robots.txt</code></a>文件为例，看看淘宝网对爬虫有哪些限制。</p><pre class="language-none"><code class="language-none">User-agent: BaiduspiderDisallow: &#x2F;User-agent: baiduspiderDisallow: &#x2F;</code></pre><p>通过上面的文件可以看出，淘宝禁止百度爬虫爬取它任何资源，因此当你在百度搜索“淘宝”的时候，搜索结果下方会出现：“由于该网站的<code>robots.txt</code>文件存在限制指令（限制搜索引擎抓取），系统无法提供该页面的内容描述”。百度作为一个搜索引擎，至少在表面上遵守了淘宝网的<code>robots.txt</code>协议，所以用户不能从百度上搜索到淘宝内部的产品信息。</p><p>图1. 百度搜索淘宝的结果</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004320.png"></p><p>下面是豆瓣网的<a href="https://www.douban.com/robots.txt"><code>robots.txt</code></a>文件，大家可以自行解读，看看它做出了什么样的限制。</p><pre class="language-none"><code class="language-none">User-agent: *Disallow: &#x2F;subject_searchDisallow: &#x2F;amazon_searchDisallow: &#x2F;searchDisallow: &#x2F;group&#x2F;searchDisallow: &#x2F;event&#x2F;searchDisallow: &#x2F;celebrities&#x2F;searchDisallow: &#x2F;location&#x2F;drama&#x2F;searchDisallow: &#x2F;forum&#x2F;Disallow: &#x2F;new_subjectDisallow: &#x2F;service&#x2F;iframeDisallow: &#x2F;j&#x2F;Disallow: &#x2F;link2&#x2F;Disallow: &#x2F;recommend&#x2F;Disallow: &#x2F;doubanapp&#x2F;cardDisallow: &#x2F;update&#x2F;topic&#x2F;Disallow: &#x2F;share&#x2F;Allow: &#x2F;ads.txtSitemap: https:&#x2F;&#x2F;www.douban.com&#x2F;sitemap_index.xmlSitemap: https:&#x2F;&#x2F;www.douban.com&#x2F;sitemap_updated_index.xml# Crawl-delay: 5User-agent: Wandoujia SpiderDisallow: &#x2F;User-agent: Mediapartners-GoogleDisallow: &#x2F;subject_searchDisallow: &#x2F;amazon_searchDisallow: &#x2F;searchDisallow: &#x2F;group&#x2F;searchDisallow: &#x2F;event&#x2F;searchDisallow: &#x2F;celebrities&#x2F;searchDisallow: &#x2F;location&#x2F;drama&#x2F;searchDisallow: &#x2F;j&#x2F;</code></pre><h3 id="超文本传输协议（HTTP）"><a href="#超文本传输协议（HTTP）" class="headerlink" title="超文本传输协议（HTTP）"></a>超文本传输协议（HTTP）</h3><p>在开始讲解爬虫之前，我们稍微对超文本传输协议（HTTP）做一些回顾，因为我们在网页上看到的内容通常是浏览器执行 HTML （超文本标记语言）得到的结果，而 HTTP 就是传输 HTML 数据的协议。HTTP 和其他很多应用级协议一样是构建在 TCP（传输控制协议）之上的，它利用了 TCP 提供的可靠的传输服务实现了 Web 应用中的数据交换。按照维基百科上的介绍，设计 HTTP 最初的目的是为了提供一种发布和接收 <a href="https://zh.wikipedia.org/wiki/HTML">HTML</a> 页面的方法，也就是说，这个协议是浏览器和 Web 服务器之间传输的数据的载体。关于 HTTP 的详细信息以及目前的发展状况，大家可以阅读<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>、<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">《互联网协议入门》</a>、<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">《图解 HTTPS 协议》</a>等文章进行了解。</p><p>下图是我在四川省网络通信技术重点实验室工作期间用开源协议分析工具 Ethereal（WireShark 的前身）截取的访问百度首页时的 HTTP 请求和响应的报文（协议数据），由于 Ethereal 截取的是经过网络适配器的数据，因此可以清晰的看到从物理链路层到应用层的协议数据。</p><p>图2. HTTP请求</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824003915.png" alt="http-request"></p><p>HTTP 请求通常是由请求行、请求头、空行、消息体四个部分构成，如果没有数据发给服务器，消息体就不是必须的部分。请求行中包含了请求方法（GET、POST 等，如下表所示）、资源路径和协议版本；请求头由若干键值对构成，包含了浏览器、编码方式、首选语言、缓存策略等信息；请求头的后面是空行和消息体。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210825002720.PNG" width="65%"><p>图3. HTTP响应</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824234158.png" alt="http-response"></p><p>HTTP 响应通常是由响应行、响应头、空行、消息体四个部分构成，其中消息体是服务响应的数据，可能是 HTML 页面，也有可能是JSON或二进制数据等。响应行中包含了协议版本和响应状态码，响应状态码有很多种，常见的如下表所示。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210825002802.PNG" width="65%"><h4 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h4><p>下面我们先介绍一些开发爬虫程序的辅助工具，这些工具相信能帮助你事半功倍。</p><ol><li><p>Chrome Developer Tools：谷歌浏览器内置的开发者工具。该工具最常用的几个功能模块是：</p><ul><li>元素（ELements）：用于查看或修改 HTML 元素的属性、CSS 属性、监听事件等。CSS 可以即时修改，即时显示，大大方便了开发者调试页面。</li><li>控制台（Console）：用于执行一次性代码，查看 JavaScript 对象，查看调试日志信息或异常信息。控制台其实就是一个执行 JavaScript 代码的交互式环境。</li><li>源代码（Sources）：用于查看页面的 HTML 文件源代码、JavaScript 源代码、CSS 源代码，此外最重要的是可以调试 JavaScript 源代码，可以给代码添加断点和单步执行。</li><li>网络（Network）：用于 HTTP 请求、HTTP 响应以及与网络连接相关的信息。</li><li>应用（Application）：用于查看浏览器本地存储、后台任务等内容，本地存储主要包括Cookie、Local Storage、Session Storage等。</li></ul><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004034.png" alt="chrome-developer-tools"></p></li><li><p>Postman：功能强大的网页调试与 RESTful 请求工具。Postman可以帮助我们模拟请求，非常方便的定制我们的请求以及查看服务器的响应。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004048.png" alt="postman"></p></li><li><p>HTTPie：命令行HTTP客户端。</p><p>安装。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install httpie</code></pre><p>使用。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">http --header http --header https:&#x2F;&#x2F;movie.douban.com&#x2F;HTTP&#x2F;1.1 200 OKConnection: keep-aliveContent-Encoding: gzipContent-Type: text&#x2F;html; charset&#x3D;utf-8Date: Tue, 24 Aug 2021 16:48:00 GMTKeep-Alive: timeout&#x3D;30Server: daeSet-Cookie: bid&#x3D;58h4BdKC9lM; Expires&#x3D;Wed, 24-Aug-22 16:48:00 GMT; Domain&#x3D;.douban.com; Path&#x3D;&#x2F;Strict-Transport-Security: max-age&#x3D;15552000Transfer-Encoding: chunkedX-Content-Type-Options: nosniffX-DOUBAN-NEWBID: 58h4BdKC9lM</code></pre></li><li><p><code>builtwith</code>库：识别网站所用技术的工具。</p><p>安装。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install builtwith</code></pre><p>使用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import sslimport builtwithssl._create_default_https_context &#x3D; ssl._create_unverified_contextprint(builtwith.parse(&#39;http:&#x2F;&#x2F;www.bootcss.com&#x2F;&#39;))</code></pre></li><li><p><code>python-whois</code>库：查询网站所有者的工具。</p><p>安装。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip3 install python-whois</code></pre><p>使用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import whoisprint(whois.whois(&#39;https:&#x2F;&#x2F;www.bootcss.com&#39;))</code></pre></li></ol><h3 id="爬虫的基本工作流程"><a href="#爬虫的基本工作流程" class="headerlink" title="爬虫的基本工作流程"></a>爬虫的基本工作流程</h3><p>一个基本的爬虫通常分为数据采集（网页下载）、数据处理（网页解析）和数据存储（将有用的信息持久化）三个部分的内容，当然更为高级的爬虫在数据采集和处理时会使用并发编程或分布式技术，这就需要有调度器（安排线程或进程执行对应的任务）、后台管理程序（监控爬虫的工作状态以及检查数据抓取的结果）等的参与。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004107.png" alt="crawler-workflow"></p><p>一般来说，爬虫的工作流程包括以下几个步骤：</p><ol><li>设定抓取目标（种子页面&#x2F;起始页面）并获取网页。</li><li>当服务器无法访问时，按照指定的重试次数尝试重新下载页面。</li><li>在需要的时候设置用户代理或隐藏真实IP，否则可能无法访问页面。</li><li>对获取的页面进行必要的解码操作然后抓取出需要的信息。</li><li>在获取的页面中通过某种方式（如正则表达式）抽取出页面中的链接信息。</li><li>对链接进行进一步的处理（获取页面并重复上面的动作）。</li><li>将有用的信息进行持久化以备后续的处理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62.用Python获取网络资源-1</title>
      <link href="/2024/07/01/62.yong-python-huo-qu-wang-luo-zi-yuan-1/"/>
      <url>/2024/07/01/62.yong-python-huo-qu-wang-luo-zi-yuan-1/</url>
      
        <content type="html"><![CDATA[<h2 id="用Python获取网络数据"><a href="#用Python获取网络数据" class="headerlink" title="用Python获取网络数据"></a>用Python获取网络数据</h2><p>网络数据采集是 Python 语言非常擅长的领域，上节课我们讲到，实现网络数据采集的程序通常称之为网络爬虫或蜘蛛程序。即便是在大数据时代，数据对于中小企业来说仍然是硬伤和短板，有些数据需要通过开放或付费的数据接口来获得，其他的行业数据和竞对数据则必须要通过网络数据采集的方式来获得。不管使用哪种方式获取网络数据资源，Python 语言都是非常好的选择，因为 Python 的标准库和三方库都对网络数据采集提供了良好的支持。</p><h3 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h3><p>要使用 Python 获取网络数据，我们推荐大家使用名为<code>requests</code> 的三方库，这个库我们在之前的课程中其实已经使用过了。按照官方网站的解释，<code>requests</code>是基于 Python 标准库进行了封装，简化了通过 HTTP 或 HTTPS 访问网络资源的操作。上课我们提到过，HTTP 是一个请求响应式的协议，当我们在浏览器中输入正确的 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_URL">URL</a>（通常也称为网址）并按下 Enter 键时，我们就向网络上的 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_web_server">Web 服务器</a>发送了一个 HTTP 请求，服务器在收到请求后会给我们一个 HTTP 响应。在 Chrome 浏览器中的菜单中打开“开发者工具”切换到“Network”选项卡就能够查看 HTTP 请求和响应到底是什么样子的，如下图所示。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210822093434.png"></p><p>通过<code>requests</code>库，我们可以让 Python 程序向浏览器一样向 Web 服务器发起请求，并接收服务器返回的响应，从响应中我们就可以提取出想要的数据。浏览器呈现给我们的网页是用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a> 编写的，浏览器相当于是 HTML 的解释器环境，我们看到的网页中的内容都包含在 HTML 的标签中。在获取到 HTML 代码后，就可以从标签的属性或标签体中提取内容。下面例子演示了如何获取网页 HTML 代码，我们通过<code>requests</code>库的<code>get</code>函数，获取了搜狐首页的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import requestsresp &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.sohu.com&#x2F;&#39;)if resp.status_code &#x3D;&#x3D; 200:    print(resp.text)</code></pre><blockquote><p><strong>说明</strong>：上面代码中的变量<code>resp</code>是一个<code>Response</code>对象（<code>requests</code>库封装的类型），通过该对象的<code>status_code</code>属性可以获取响应状态码，而该对象的<code>text</code>属性可以帮我们获取到页面的 HTML 代码。</p></blockquote><p>由于<code>Response</code>对象的<code>text</code>是一个字符串，所以我们可以利用之前讲过的正则表达式的知识，从页面的 HTML 代码中提取新闻的标题和链接，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import reimport requestspattern &#x3D; re.compile(r&#39;&lt;a.*?href&#x3D;&quot;(.*?)&quot;.*?title&#x3D;&quot;(.*?)&quot;.*?&gt;&#39;)resp &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.sohu.com&#x2F;&#39;)if resp.status_code &#x3D;&#x3D; 200:    all_matches &#x3D; pattern.findall(resp.text)    for href, title in all_matches:        print(href)        print(title)</code></pre><p>除了文本内容，我们也可以使用<code>requests</code>库通过 URL 获取二进制资源。下面的例子演示了如何获取百度 Logo 并保存到名为<code>baidu.png</code>的本地文件中。可以在百度的首页上右键点击百度Logo，并通过“复制图片地址”菜单项获取图片的 URL。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import requestsresp &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&#39;)with open(&#39;baidu.png&#39;, &#39;wb&#39;) as file:    file.write(resp.content)</code></pre><blockquote><p><strong>说明</strong>：<code>Response</code>对象的<code>content</code>属性可以获得服务器响应的二进制数据。</p></blockquote><p><code>requests</code>库非常好用而且功能上也比较强大和完整，具体的内容我们在使用的过程中为大家一点点剖析。想解锁关于<code>requests</code>库更多的知识，可以阅读它的<a href="https://docs.python-requests.org/zh_CN/latest/">官方文档</a>。</p><h3 id="编写爬虫代码"><a href="#编写爬虫代码" class="headerlink" title="编写爬虫代码"></a>编写爬虫代码</h3><p>接下来，我们以“豆瓣电影”为例，为大家讲解如何编写爬虫代码。按照上面提供的方法，我们先使用<code>requests</code>获取到网页的HTML代码，然后将整个代码看成一个长字符串，这样我们就可以使用正则表达式的捕获组从字符串提取我们需要的内容。下面的代码演示了如何从<a href="https://movie.douban.com/">豆瓣电影</a>获取排前250名的电影的名称。<a href="https://movie.douban.com/top250">豆瓣电影Top250</a>的页面结构和对应代码如下图所示，可以看出，每页共展示了25部电影，如果要获取到 Top250 数据，我们共需要访问10个页面，对应的地址是<a href="https://movie.douban.com/top250?start=xxx">https://movie.douban.com/top250?start=xxx</a>，这里的<code>xxx</code>如果为<code>0</code>就是第一页，如果<code>xxx</code>的值是<code>100</code>，那么我们可以访问到第五页。为了代码简单易读，我们只获取电影的标题和评分。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210822093447.png"></p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport reimport timeimport requestsfor page in range(1, 11):    resp &#x3D; requests.get(        url&#x3D;f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&#123;(page - 1) * 25&#125;&#39;,        # 如果不设置HTTP请求头中的User-Agent，豆瓣会检测出不是浏览器而阻止我们的请求。        # 通过get函数的headers参数设置User-Agent的值，具体的值可以在浏览器的开发者工具查看到。        # 用爬虫访问大部分网站时，将爬虫伪装成来自浏览器的请求都是非常重要的一步。        headers&#x3D;&#123;&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;92.0.4515.159 Safari&#x2F;537.36&#39;&#125;    )    # 通过正则表达式获取class属性为title且标签体不以&amp;开头的span标签并用捕获组提取标签内容    pattern1 &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;([^&amp;]*?)&lt;&#x2F;span&gt;&#39;)    titles &#x3D; pattern1.findall(resp.text)    # 通过正则表达式获取class属性为rating_num的span标签并用捕获组提取标签内容    pattern2 &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;rating_num&quot;.*?&gt;(.*?)&lt;&#x2F;span&gt;&#39;)    ranks &#x3D; pattern2.findall(resp.text)    # 使用zip压缩两个列表，循环遍历所有的电影标题和评分    for title, rank in zip(titles, ranks):        print(title, rank)    # 随机休眠1-5秒，避免爬取页面过于频繁    time.sleep(random.random() * 4 + 1)</code></pre><blockquote><p><strong>说明</strong>：通过分析豆瓣网的robots协议，我们发现豆瓣网并不拒绝百度爬虫获取它的数据，因此我们也可以将爬虫伪装成百度的爬虫，将<code>get</code>函数的<code>headers</code>参数修改为：<code>headers=&#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&#125;</code>。</p></blockquote><h3 id="使用-IP-代理"><a href="#使用-IP-代理" class="headerlink" title="使用 IP 代理"></a>使用 IP 代理</h3><p>让爬虫程序隐匿自己的身份对编写爬虫程序来说是比较重要的，很多网站对爬虫都比较反感的，因为爬虫会耗费掉它们很多的网络带宽并制造很多无效的流量。要隐匿身份通常需要使用<strong>商业 IP 代理</strong>（如蘑菇代理、芝麻代理、快代理等），让被爬取的网站无法获取爬虫程序来源的真实 IP 地址，也就无法简单的通过 IP 地址对爬虫程序进行封禁。</p><p>下面以<a href="http://www.moguproxy.com/">蘑菇代理</a>为例，为大家讲解商业 IP 代理的使用方法。首先需要在该网站注册一个账号，注册账号后就可以<a href="http://www.moguproxy.com/buy">购买</a>相应的套餐来获得商业 IP 代理。作为商业用途，建议大家购买不限量套餐，这样可以根据实际需要获取足够多的代理 IP 地址；作为学习用途，可以购买包时套餐或根据自己的需求来决定。蘑菇代理提供了两种接入代理的方式，分别是 API 私密代理和 HTTP 隧道代理，前者是通过请求蘑菇代理的 API 接口获取代理服务器地址，后者是直接使用统一的入口（蘑菇代理提供的域名）进行接入。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210829080647.png" width="75%"><p>下面，我们以HTTP隧道代理为例，为大家讲解接入 IP 代理的方式，大家也可以直接参考蘑菇代理官网提供的代码来为爬虫设置代理。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import requestsAPP_KEY &#x3D; &#39;Wnp******************************XFx&#39;PROXY_HOST &#x3D; &#39;secondtransfer.moguproxy.com:9001&#39;for page in range(1, 11):    resp &#x3D; requests.get(        url&#x3D;f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&#123;(page - 1) * 25&#125;&#39;,        # 需要在HTTP请求头设置代理的身份认证方式        headers&#x3D;&#123;            &#39;Proxy-Authorization&#39;: f&#39;Basic &#123;APP_KEY&#125;&#39;,            &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;92.0.4515.159 Safari&#x2F;537.36&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.4&#39;        &#125;,        # 设置代理服务器        proxies&#x3D;&#123;            &#39;http&#39;: f&#39;http:&#x2F;&#x2F;&#123;PROXY_HOST&#125;&#39;,            &#39;https&#39;: f&#39;https:&#x2F;&#x2F;&#123;PROXY_HOST&#125;&#39;        &#125;,        verify&#x3D;False    )    pattern1 &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;([^&amp;]*?)&lt;&#x2F;span&gt;&#39;)    titles &#x3D; pattern1.findall(resp.text)    pattern2 &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;rating_num&quot;.*?&gt;(.*?)&lt;&#x2F;span&gt;&#39;)    ranks &#x3D; pattern2.findall(resp.text)    for title, rank in zip(titles, ranks):        print(title, rank)</code></pre><blockquote><p><strong>说明</strong>：上面的代码需要修改<code>APP_KEY</code>为自己创建的订单对应的<code>Appkey</code>值，这个值可以在用户中心用户订单中查看到。蘑菇代理提供了免费的 API 代理和 HTTP 隧道代理试用，但是试用的代理接通率不能保证，建议大家还是直接购买一个在自己支付能力范围内的代理服务来体验。</p></blockquote><h3 id="简单的总结"><a href="#简单的总结" class="headerlink" title="简单的总结"></a>简单的总结</h3><p>Python 语言能做的事情真的很多，就网络数据采集这一项而言，Python 几乎是一枝独秀的，大量的企业和个人都在使用 Python 从网络上获取自己需要的数据，这可能也是你将来日常工作的一部分。另外，用编写正则表达式的方式从网页中提取内容虽然可行，但是写出一个能够满足需求的正则表达式本身也不是件容易的事情，这一点对于新手来说尤为明显。在下一节课中，我们将会为大家介绍另外两种从页面中提取数据的方法，虽然从性能上来讲，它们可能不如正则表达式，但是却降低了编码的复杂性，相信大家会喜欢上它们的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62.用Python解析HTML页面-2</title>
      <link href="/2024/07/01/62.yong-python-jie-xi-html-ye-mian-2/"/>
      <url>/2024/07/01/62.yong-python-jie-xi-html-ye-mian-2/</url>
      
        <content type="html"><![CDATA[<h2 id="用Python解析HTML页面"><a href="#用Python解析HTML页面" class="headerlink" title="用Python解析HTML页面"></a>用Python解析HTML页面</h2><p>在前面的课程中，我们讲到了使用<code>request</code>三方库获取网络资源，还介绍了一些前端的基础知识。接下来，我们继续探索如何解析 HTML 代码，从页面中提取出有用的信息。之前，我们尝试过用正则表达式的捕获组操作提取页面内容，但是写出一个正确的正则表达式也是一件让人头疼的事情。为了解决这个问题，我们得先深入的了解一下 HTML 页面的结构，并在此基础上研究另外的解析页面的方法。</p><h3 id="HTML-页面的结构"><a href="#HTML-页面的结构" class="headerlink" title="HTML 页面的结构"></a>HTML 页面的结构</h3><p>我们在浏览器中打开任意一个网站，然后通过鼠标右键菜单，选择“显示网页源代码”菜单项，就可以看到网页对应的 HTML 代码。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210822094218.png" alt="image-20210822094218269"></p><p>代码的第<code>1</code>行是文档类型声明，第<code>2</code>行的<code>&lt;html&gt;</code>标签是整个页面根标签的开始标签，最后一行是根标签的结束标签<code>&lt;/html&gt;</code>。<code>&lt;html&gt;</code>标签下面有两个子标签<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>，放在<code>&lt;body&gt;</code>标签下的内容会显示在浏览器窗口中，这部分内容是网页的主体；放在<code>&lt;head&gt;</code>标签下的内容不会显示在浏览器窗口中，但是却包含了页面重要的元信息，通常称之为网页的头部。HTML 页面大致的代码结构如下所示。</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!doctype html&gt;&lt;html&gt;    &lt;head&gt;        &lt;!-- 页面的元信息，如字符编码、标题、关键字、媒体查询等 --&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;!-- 页面的主体，显示在浏览器窗口中的内容 --&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>标签、层叠样式表（CSS）、JavaScript 是构成 HTML 页面的三要素，其中标签用来承载页面要显示的内容，CSS 负责对页面的渲染，而 JavaScript 用来控制页面的交互式行为。要实现 HTML 页面的解析，可以使用 XPath 的语法，它原本是 XML 的一种查询语法，可以根据 HTML 标签的层次结构提取标签中的内容或标签属性；此外，也可以使用 CSS 选择器来定位页面元素，就跟用 CSS 渲染页面元素是同样的道理。</p><h3 id="XPath-解析"><a href="#XPath-解析" class="headerlink" title="XPath 解析"></a>XPath 解析</h3><p>XPath 是在 XML（eXtensible Markup Language）文档中查找信息的一种语法，XML 跟 HTML 类似也是一种用标签承载数据的标签语言，不同之处在于 XML 的标签是可扩展的，可以自定义的，而且 XML 对语法有更严格的要求。XPath 使用路径表达式来选取 XML 文档中的节点或者节点集，这里所说的节点包括元素、属性、文本、命名空间、处理指令、注释、根节点等。下面我们通过一个例子来说明如何使用 XPath 对页面进行解析。</p><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;bookstore&gt;    &lt;book&gt;      &lt;title lang&#x3D;&quot;eng&quot;&gt;Harry Potter&lt;&#x2F;title&gt;      &lt;price&gt;29.99&lt;&#x2F;price&gt;    &lt;&#x2F;book&gt;    &lt;book&gt;      &lt;title lang&#x3D;&quot;zh&quot;&gt;Learning XML&lt;&#x2F;title&gt;      &lt;price&gt;39.95&lt;&#x2F;price&gt;    &lt;&#x2F;book&gt;&lt;&#x2F;bookstore&gt;</code></pre><p>对于上面的 XML 文件，我们可以用如下所示的 XPath 语法获取文档中的节点。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>/bookstore</code></td><td>选取根元素 bookstore。<strong>注意</strong>：假如路径起始于正斜杠( &#x2F; )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td><code>//book</code></td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td><code>//@lang</code></td><td>选取名为 lang 的所有属性。</td></tr><tr><td><code>/bookstore/book[1]</code></td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td><code>/bookstore/book[last()]</code></td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td><code>/bookstore/book[last()-1]</code></td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td><code>/bookstore/book[position()&lt;3]</code></td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td><code>//title[@lang]</code></td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td><code>//title[@lang=&#39;eng&#39;]</code></td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td><code>/bookstore/book[price&gt;35.00]</code></td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td><code>/bookstore/book[price&gt;35.00]/title</code></td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><p>XPath还支持通配符用法，如下所示。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>/bookstore/*</code></td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td><code>//*</code></td><td>选取文档中的所有元素。</td></tr><tr><td><code>//title[@*]</code></td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table><p>如果要选取多个节点，可以使用如下所示的方法。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>//book/title | //book/price</code></td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td><code>//title | //price</code></td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td><code>/bookstore/book/title | //price</code></td><td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table><blockquote><p><strong>说明</strong>：上面的例子来自于“菜鸟教程”网站上的 <a href="https://www.runoob.com/xpath/xpath-tutorial.html">XPath 教程</a>，有兴趣的读者可以自行阅读原文。</p></blockquote><p>当然，如果不理解或不熟悉 XPath 语法，可以在浏览器的开发者工具中按照如下所示的方法查看元素的 XPath 语法，下图是在 Chrome 浏览器的开发者工具中查看豆瓣网电影详情信息中影片标题的 XPath 语法。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210822093707.png"></p><p>实现 XPath 解析需要三方库<code>lxml</code> 的支持，可以使用下面的命令安装<code>lxml</code>。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install lxml</code></pre><p>下面我们用 XPath 解析方式改写之前获取豆瓣电影 Top250的代码，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from lxml import etreeimport requestsfor page in range(1, 11):    resp &#x3D; requests.get(        url&#x3D;f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&#123;(page - 1) * 25&#125;&#39;,        headers&#x3D;&#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&#125;    )    tree &#x3D; etree.HTML(resp.text)    # 通过XPath语法从页面中提取电影标题    title_spans &#x3D; tree.xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;content&quot;]&#x2F;div&#x2F;div[1]&#x2F;ol&#x2F;li&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;a&#x2F;span[1]&#39;)    # 通过XPath语法从页面中提取电影评分    rank_spans &#x3D; tree.xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;content&quot;]&#x2F;div&#x2F;div[1]&#x2F;ol&#x2F;li[1]&#x2F;div&#x2F;div[2]&#x2F;div[2]&#x2F;div&#x2F;span[2]&#39;)    for title_span, rank_span in zip(title_spans, rank_spans):        print(title_span.text, rank_span.text)</code></pre><h3 id="CSS-选择器解析"><a href="#CSS-选择器解析" class="headerlink" title="CSS 选择器解析"></a>CSS 选择器解析</h3><p>对于熟悉 CSS 选择器和 JavaScript 的开发者来说，通过 CSS 选择器获取页面元素可能是更为简单的选择，因为浏览器中运行的 JavaScript 本身就可以<code>document</code>对象的<code>querySelector()</code>和<code>querySelectorAll()</code>方法基于 CSS 选择器获取页面元素。在 Python 中，我们可以利用三方库<code>beautifulsoup4</code>或<code>pyquery</code>来做同样的事情。Beautiful Soup 可以用来解析 HTML 和 XML 文档，修复含有未闭合标签等错误的文档，通过为待解析的页面在内存中创建一棵树结构，实现对从页面中提取数据操作的封装。可以用下面的命令来安装 Beautiful Soup。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pip install beautifulsoup4</code></pre><p>下面是使用<code>bs4</code>改写的获取豆瓣电影Top250电影名称的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import bs4import requestsfor page in range(1, 11):    resp &#x3D; requests.get(        url&#x3D;f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&#123;(page - 1) * 25&#125;&#39;,        headers&#x3D;&#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&#125;    )    # 创建BeautifulSoup对象    soup &#x3D; bs4.BeautifulSoup(resp.text, &#39;lxml&#39;)    # 通过CSS选择器从页面中提取包含电影标题的span标签    title_spans &#x3D; soup.select(&#39;div.info &gt; div.hd &gt; a &gt; span:nth-child(1)&#39;)    # 通过CSS选择器从页面中提取包含电影评分的span标签    rank_spans &#x3D; soup.select(&#39;div.info &gt; div.bd &gt; div &gt; span.rating_num&#39;)    for title_span, rank_span in zip(title_spans, rank_spans):        print(title_span.text, rank_span.text)</code></pre><p>关于 BeautifulSoup 更多的知识，可以参考它的<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">官方文档</a>。</p><h3 id="简单的总结"><a href="#简单的总结" class="headerlink" title="简单的总结"></a>简单的总结</h3><p>下面我们对三种解析方式做一个简单比较。</p><table><thead><tr><th>解析方式</th><th>对应的模块</th><th>速度</th><th>使用难度</th></tr></thead><tbody><tr><td>正则表达式解析</td><td><code>re</code></td><td>快</td><td>困难</td></tr><tr><td>XPath 解析</td><td><code>lxml</code></td><td>快</td><td>一般</td></tr><tr><td>CSS 选择器解析</td><td><code>bs4</code>或<code>pyquery</code></td><td>不确定</td><td>简单</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63.Python中的并发编程-1</title>
      <link href="/2024/07/01/63.python-zhong-de-bing-fa-bian-cheng-1/"/>
      <url>/2024/07/01/63.python-zhong-de-bing-fa-bian-cheng-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Python中的并发编程-1"><a href="#Python中的并发编程-1" class="headerlink" title="Python中的并发编程-1"></a>Python中的并发编程-1</h2><p>现如今，我们使用的计算机早已是多 CPU 或多核的计算机，而我们使用的操作系统基本都支持“多任务”，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务“并行”或“并发”的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此当下，不管用什么编程语言进行开发，实现“并行”或“并发”编程已经成为了程序员的标配技能。为了讲述如何在 Python 程序中实现“并行”或“并发”，我们需要先了解两个重要的概念：进程和线程。</p><h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><p>我们通过操作系统运行一个程序会创建出一个或多个进程，进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。简单的说，进程是操作系统分配存储空间的基本单位，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据；操作系统管理所有进程的执行，为它们合理的分配资源。一个进程可以通过 fork 或 spawn 的方式创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此两个进程如果要共享数据，必须通过进程间通信机制来实现，具体的方式包括管道、信号、套接字等。</p><p>一个进程还可以拥有多个执行线索，简单的说就是拥有多个可以获得 CPU 调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核 CPU 系统中，多个线程不可能同时执行，因为在某个时刻只有一个线程能够获得 CPU，多个线程通过共享 CPU 执行时间的方式来达到并发的效果。</p><p>在程序中使用多线程技术通常都会带来不言而喻的好处，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如 macOS 中的“活动监视器”、Windows 中的“任务管理器”）来证实，如下图所示。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210822094243.png" width="80%"><p>这里，我们还需要跟大家再次强调两个概念：<strong>并发</strong>（concurrency）和<strong>并行</strong>（parallel）。<strong>并发</strong>通常是指同一时刻只能有一条指令执行，但是多个线程对应的指令被快速轮换地执行。比如一个处理器，它先执行线程 A 的指令一段时间，再执行线程 B 的指令一段时间，再切回到线程 A 执行一段时间。由于处理器执行指令的速度和切换的速度极快，人们完全感知不到计算机在这个过程中有多个线程切换上下文执行的操作，这就使得宏观上看起来多个线程在同时运行，但微观上其实只有一个线程在执行。<strong>并行</strong>是指同一时刻，有多条指令在多个处理器上同时执行，并行必须要依赖于多个处理器，不论是从宏观上还是微观上，多个线程可以在同一时刻一起执行的。很多时候，我们并不用严格区分并发和并行两个词，所以我们有时候也把 Python 中的多线程、多进程以及异步 I&#x2F;O 都视为实现并发编程的手段，但实际上前面两者也可以实现并行编程，当然这里还有一个全局解释器锁（GIL）的问题，我们稍后讨论。</p><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>Python 标准库中<code>threading</code>模块的<code>Thread</code>类可以帮助我们非常轻松的实现多线程编程。我们用一个联网下载文件的例子来对比使用多线程和不使用多线程到底有什么区别，代码如下所示。</p><p>不使用多线程的下载。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport timedef download(*, filename):    start &#x3D; time.time()    print(f&#39;开始下载 &#123;filename&#125;.&#39;)    time.sleep(random.randint(3, 6))    print(f&#39;&#123;filename&#125; 下载完成.&#39;)    end &#x3D; time.time()    print(f&#39;下载耗时: &#123;end - start:.3f&#125;秒.&#39;)def main():    start &#x3D; time.time()    download(filename&#x3D;&#39;Python从入门到住院.pdf&#39;)    download(filename&#x3D;&#39;MySQL从删库到跑路.avi&#39;)    download(filename&#x3D;&#39;Linux从精通到放弃.mp4&#39;)    end &#x3D; time.time()    print(f&#39;总耗时: &#123;end - start:.3f&#125;秒.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明</strong>：上面的代码并没有真正实现联网下载的功能，而是通过<code>time.sleep()</code>休眠一段时间来模拟下载文件需要一些时间上的开销，跟实际下载的状况比较类似。</p></blockquote><p>运行上面的代码，可以得到如下所示的运行结果。可以看出，当我们的程序只有一个工作线程时，每个下载任务都需要等待上一个下载任务执行结束才能开始，所以程序执行的总耗时是三个下载任务各自执行时间的总和。</p><pre class="language-none"><code class="language-none">开始下载Python从入门到住院.pdf.Python从入门到住院.pdf下载完成.下载耗时: 3.005秒.开始下载MySQL从删库到跑路.avi.MySQL从删库到跑路.avi下载完成.下载耗时: 5.006秒.开始下载Linux从精通到放弃.mp4.Linux从精通到放弃.mp3下载完成.下载耗时: 6.007秒.总耗时: 14.018秒.</code></pre><p>事实上，上面的三个下载任务之间并没有逻辑上的因果关系，三者是可以“并发”的，下一个下载任务没有必要等待上一个下载任务结束，为此，我们可以使用多线程编程来改写上面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport timefrom threading import Threaddef download(*, filename):    start &#x3D; time.time()    print(f&#39;开始下载 &#123;filename&#125;.&#39;)    time.sleep(random.randint(3, 6))    print(f&#39;&#123;filename&#125; 下载完成.&#39;)    end &#x3D; time.time()    print(f&#39;下载耗时: &#123;end - start:.3f&#125;秒.&#39;)def main():    threads &#x3D; [        Thread(target&#x3D;download, kwargs&#x3D;&#123;&#39;filename&#39;: &#39;Python从入门到住院.pdf&#39;&#125;),        Thread(target&#x3D;download, kwargs&#x3D;&#123;&#39;filename&#39;: &#39;MySQL从删库到跑路.avi&#39;&#125;),        Thread(target&#x3D;download, kwargs&#x3D;&#123;&#39;filename&#39;: &#39;Linux从精通到放弃.mp4&#39;&#125;)    ]    start &#x3D; time.time()    # 启动三个线程    for thread in threads:        thread.start()    # 等待线程结束    for thread in threads:        thread.join()    end &#x3D; time.time()    print(f&#39;总耗时: &#123;end - start:.3f&#125;秒.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>某次的运行结果如下所示。</p><pre class="language-none"><code class="language-none">开始下载 Python从入门到住院.pdf.开始下载 MySQL从删库到跑路.avi.开始下载 Linux从精通到放弃.mp4.MySQL从删库到跑路.avi 下载完成.下载耗时: 3.005秒.Python从入门到住院.pdf 下载完成.下载耗时: 5.006秒.Linux从精通到放弃.mp4 下载完成.下载耗时: 6.003秒.总耗时: 6.004秒.</code></pre><p>通过上面的运行结果可以发现，整个程序的执行时间几乎等于耗时最长的一个下载任务的执行时间，这也就意味着，三个下载任务是并发执行的，不存在一个等待另一个的情况，这样做很显然提高了程序的执行效率。简单的说，如果程序中有非常耗时的执行单元，而这些耗时的执行单元之间又没有逻辑上的因果关系，即 B 单元的执行不依赖于 A 单元的执行结果，那么 A 和 B 两个单元就可以放到两个不同的线程中，让他们并发的执行。这样做的好处除了减少程序执行的等待时间，还可以带来更好的用户体验，因为一个单元的阻塞不会造成程序的“假死”，因为程序中还有其他的单元是可以运转的。</p><h4 id="使用-Thread-类创建线程对象"><a href="#使用-Thread-类创建线程对象" class="headerlink" title="使用 Thread 类创建线程对象"></a>使用 Thread 类创建线程对象</h4><p>通过上面的代码可以看出，直接使用<code>Thread</code>类的构造器就可以创建线程对象，而线程对象的<code>start()</code>方法可以启动一个线程。线程启动后会执行<code>target</code>参数指定的函数，当然前提是获得 CPU 的调度；如果<code>target</code>指定的线程要执行的目标函数有参数，需要通过<code>args</code>参数为其进行指定，对于关键字参数，可以通过<code>kwargs</code>参数进行传入。<code>Thread</code>类的构造器还有很多其他的参数，我们遇到的时候再为大家进行讲解，目前需要大家掌握的，就是<code>target</code>、<code>args</code>和<code>kwargs</code>。</p><h4 id="继承-Thread-类自定义线程"><a href="#继承-Thread-类自定义线程" class="headerlink" title="继承 Thread 类自定义线程"></a>继承 Thread 类自定义线程</h4><p>除了上面的代码展示的创建线程的方式外，还可以通过继承<code>Thread</code>类并重写<code>run()</code>方法的方式来自定义线程，具体的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport timefrom threading import Threadclass DownloadThread(Thread):    def __init__(self, filename):        self.filename &#x3D; filename        super().__init__()    def run(self):        start &#x3D; time.time()        print(f&#39;开始下载 &#123;self.filename&#125;.&#39;)        time.sleep(random.randint(3, 6))        print(f&#39;&#123;self.filename&#125; 下载完成.&#39;)        end &#x3D; time.time()        print(f&#39;下载耗时: &#123;end - start:.3f&#125;秒.&#39;)def main():    threads &#x3D; [        DownloadThread(&#39;Python从入门到住院.pdf&#39;),        DownloadThread(&#39;MySQL从删库到跑路.avi&#39;),        DownloadThread(&#39;Linux从精通到放弃.mp4&#39;)    ]    start &#x3D; time.time()    # 启动三个线程    for thread in threads:        thread.start()    # 等待线程结束    for thread in threads:        thread.join()    end &#x3D; time.time()    print(f&#39;总耗时: &#123;end - start:.3f&#125;秒.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><p>我们还可以通过线程池的方式将任务放到多个线程中去执行，通过线程池来使用线程应该是多线程编程最理想的选择。事实上，线程的创建和释放都会带来较大的开销，频繁的创建和释放线程通常都不是很好的选择。利用线程池，可以提前准备好若干个线程，在使用的过程中不需要再通过自定义的代码创建和释放线程，而是直接复用线程池中的线程。Python 内置的<code>concurrent.futures</code>模块提供了对线程池的支持，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport timefrom concurrent.futures import ThreadPoolExecutorfrom threading import Threaddef download(*, filename):    start &#x3D; time.time()    print(f&#39;开始下载 &#123;filename&#125;.&#39;)    time.sleep(random.randint(3, 6))    print(f&#39;&#123;filename&#125; 下载完成.&#39;)    end &#x3D; time.time()    print(f&#39;下载耗时: &#123;end - start:.3f&#125;秒.&#39;)def main():    with ThreadPoolExecutor(max_workers&#x3D;4) as pool:        filenames &#x3D; [&#39;Python从入门到住院.pdf&#39;, &#39;MySQL从删库到跑路.avi&#39;, &#39;Linux从精通到放弃.mp4&#39;]        start &#x3D; time.time()        for filename in filenames:            pool.submit(download, filename&#x3D;filename)    end &#x3D; time.time()    print(f&#39;总耗时: &#123;end - start:.3f&#125;秒.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>所谓“守护线程”就是在主线程结束的时候，不值得再保留的执行线程。这里的不值得保留指的是守护线程会在其他非守护线程全部运行结束之后被销毁，它守护的是当前进程内所有的非守护线程。简单的说，守护线程会跟随主线程一起挂掉，而主线程的生命周期就是一个进程的生命周期。如果不理解，我们可以看一段简单的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timefrom threading import Threaddef display(content):    while True:        print(content, end&#x3D;&#39;&#39;, flush&#x3D;True)        time.sleep(0.1)def main():    Thread(target&#x3D;display, args&#x3D;(&#39;Ping&#39;, )).start()    Thread(target&#x3D;display, args&#x3D;(&#39;Pong&#39;, )).start()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明</strong>：上面的代码中，我们将<code>print</code>函数的参数<code>flush</code>设置为<code>True</code>，这是因为<code>flush</code>参数的值如果为<code>False</code>，而<code>print</code>又没有做换行处理，就会导致每次<code>print</code>输出的内容被放到操作系统的输出缓冲区，直到缓冲区被输出的内容塞满，才会清空缓冲区产生一次输出。上述现象是操作系统为了减少 I&#x2F;O 中断，提升 CPU 利用率做出的设定，为了让代码产生直观交互，我们才将<code>flush</code>参数设置为<code>True</code>，强制每次输出都清空输出缓冲区。</p></blockquote><p>上面的代码运行起来之后是不会停止的，因为两个子线程中都有死循环，除非你手动中断代码的执行。但是，如果在创建线程对象时，将名为<code>daemon</code>的参数设置为<code>True</code>，这两个线程就会变成守护线程，那么在其他线程结束时，即便有死循环，两个守护线程也会挂掉，不会再继续执行下去，代码如下所示。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">import timefrom threading import Threaddef display(content):    while True:        print(content, end&#x3D;&#39;&#39;, flush&#x3D;True)        time.sleep(0.1)def main():    Thread(target&#x3D;display, args&#x3D;(&#39;Ping&#39;, ), daemon&#x3D;True).start()    Thread(target&#x3D;display, args&#x3D;(&#39;Pong&#39;, ), daemon&#x3D;True).start()    time.sleep(5)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面的代码，我们在主线程中添加了一行<code>time.sleep(5)</code>让主线程休眠5秒，在这个过程中，输出<code>Ping</code>和<code>Pong</code>的守护线程会持续运转，直到主线程在5秒后结束，这两个守护线程也被销毁，不再继续运行。</p><blockquote><p><strong>思考</strong>：如果将上面代码第12行的<code>daemon=True</code>去掉，代码会怎样执行？有兴趣的读者可以尝试一下，并看看实际执行的结果跟你想象的是否一致。</p></blockquote><h3 id="资源竞争"><a href="#资源竞争" class="headerlink" title="资源竞争"></a>资源竞争</h3><p>在编写多线程代码时，不可避免的会遇到多个线程竞争同一个资源（对象）的情况。在这种情况下，如果没有合理的机制来保护被竞争的资源，那么就有可能出现非预期的状况。下面的代码创建了<code>100</code>个线程向同一个银行账户（初始余额为<code>0</code>元）转账，每个线程转账金额为<code>1</code>元。在正常的情况下，我们的银行账户最终的余额应该是<code>100</code>元，但是运行下面的代码我们并不能得到<code>100</code>元这个结果。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timefrom concurrent.futures import ThreadPoolExecutorclass Account(object):    &quot;&quot;&quot;银行账户&quot;&quot;&quot;    def __init__(self):        self.balance &#x3D; 0.0    def deposit(self, money):        &quot;&quot;&quot;存钱&quot;&quot;&quot;        new_balance &#x3D; self.balance + money        time.sleep(0.01)        self.balance &#x3D; new_balancedef main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    account &#x3D; Account()    with ThreadPoolExecutor(max_workers&#x3D;16) as pool:        for _ in range(100):            pool.submit(account.deposit, 1)    print(account.balance)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面代码中的<code>Account</code>类代表了银行账户，它的<code>deposit</code>方法代表存款行为，参数<code>money</code>代表存入的金额，该方法通过<code>time.sleep</code>函数模拟受理存款需要一段时间。我们通过线程池的方式启动了<code>100</code>个线程向一个账户转账，但是上面的代码并不能运行出<code>100</code>这个我们期望的结果，这就是在多个线程竞争一个资源的时候，可能会遇到的数据不一致的问题。注意上面代码的第<code>14</code>行，当多个线程都执行到这行代码时，它们会在相同的余额上执行加上存入金额的操作，这就会造成“丢失更新”现象，即之前修改数据的成果被后续的修改给覆盖掉了，所以才得不到正确的结果。</p><p>要解决上面的问题，可以使用锁机制，通过锁对操作数据的关键代码加以保护。Python 标准库的<code>threading</code>模块提供了<code>Lock</code>和<code>RLock</code>类来支持锁机制，这里我们不去深究二者的区别，建议大家直接使用<code>RLock</code>。接下来，我们给银行账户添加一个锁对象，通过锁对象来解决刚才存款时发生“丢失更新”的问题，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timefrom concurrent.futures import ThreadPoolExecutorfrom threading import RLockclass Account(object):    &quot;&quot;&quot;银行账户&quot;&quot;&quot;    def __init__(self):        self.balance &#x3D; 0.0        self.lock &#x3D; RLock()    def deposit(self, money):        # 获得锁        self.lock.acquire()        try:            new_balance &#x3D; self.balance + money            time.sleep(0.01)            self.balance &#x3D; new_balance        finally:            # 释放锁            self.lock.release()def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    account &#x3D; Account()    with ThreadPoolExecutor(max_workers&#x3D;16) as pool:        for _ in range(100):            pool.submit(account.deposit, 1)    print(account.balance)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面代码中，获得锁和释放锁的操作也可以通过上下文语法来实现，使用上下文语法会让代码更加简单优雅，这也是我们推荐大家使用的方式。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timefrom concurrent.futures import ThreadPoolExecutorfrom threading import RLockclass Account(object):    &quot;&quot;&quot;银行账户&quot;&quot;&quot;    def __init__(self):        self.balance &#x3D; 0.0        self.lock &#x3D; RLock()    def deposit(self, money):        # 通过上下文语法获得锁和释放锁        with self.lock:            new_balance &#x3D; self.balance + money            time.sleep(0.01)            self.balance &#x3D; new_balancedef main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    account &#x3D; Account()    with ThreadPoolExecutor(max_workers&#x3D;16) as pool:        for _ in range(100):            pool.submit(account.deposit, 1)    print(account.balance)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>思考</strong>：将上面的代码修改为5个线程向银行账户存钱，5个线程从银行账户取钱，取钱的线程在银行账户余额不足时，需要停下来等待存钱的线程将钱存入后再尝试取钱。这里需要用到线程调度的知识，大家可以自行研究下<code>threading</code>模块中的<code>Condition</code>类，看看是否能够完成这个任务。</p></blockquote><h3 id="GIL问题"><a href="#GIL问题" class="headerlink" title="GIL问题"></a>GIL问题</h3><p>如果使用官方的 Python 解释器（通常称之为 CPython）运行 Python 程序，我们并不能通过使用多线程的方式将 CPU 的利用率提升到逼近400%（对于4核 CPU）或逼近800%（对于8核 CPU）这样的水平，因为 CPython 在执行代码时，会受到 GIL（全局解释器锁）的限制。具体的说，CPython 在执行任何代码时，都需要对应的线程先获得 GIL，然后每执行100条（字节码）指令，CPython 就会让获得 GIL 的线程主动释放 GIL，这样别的线程才有机会执行。因为 GIL 的存在，无论你的 CPU 有多少个核，我们编写的 Python 代码也没有机会真正并行的执行。</p><p>GIL 是官方 Python 解释器在设计上的历史遗留问题，要解决这个问题，让多线程能够发挥 CPU 的多核优势，需要重新实现一个不带 GIL 的 Python 解释器。这个问题按照官方的说法，在 Python 发布4.0版本时会得到解决，就让我们拭目以待吧。当下，对于 CPython 而言，如果希望充分发挥 CPU 的多核优势，可以考虑使用多进程，因为每个进程都对应一个 Python 解释器，因此每个进程都有自己独立的 GIL，这样就可以突破 GIL 的限制。在下一个章节中，我们会为大家介绍关于多进程的相关知识，并对多线程和多进程的代码及其执行效果进行比较。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63.Python中的并发编程-2</title>
      <link href="/2024/07/01/63.python-zhong-de-bing-fa-bian-cheng-2/"/>
      <url>/2024/07/01/63.python-zhong-de-bing-fa-bian-cheng-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Python中的并发编程-2"><a href="#Python中的并发编程-2" class="headerlink" title="Python中的并发编程-2"></a>Python中的并发编程-2</h2><p>在上一课中我们说过，由于 GIL 的存在，CPython 中的多线程并不能发挥 CPU 的多核优势，如果希望突破 GIL 的限制，可以考虑使用多进程。对于多进程的程序，每个进程都有一个属于自己的 GIL，所以多进程不会受到 GIL 的影响。那么，我们应该如何在 Python 程序中创建和使用多进程呢？</p><p>###创建进程</p><p>在 Python 中可以基于<code>Process</code>类来创建进程，虽然进程和线程有着本质的差别，但是<code>Process</code>类和<code>Thread</code>类的用法却非常类似。在使用<code>Process</code>类的构造器创建对象时，也是通过<code>target</code>参数传入一个函数来指定进程要执行的代码，而<code>args</code>和<code>kwargs</code>参数可以指定该函数使用的参数值。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from multiprocessing import Process, current_processfrom time import sleepdef sub_task(content, nums):    # 通过current_process函数获取当前进程对象    # 通过进程对象的pid和name属性获取进程的ID号和名字    print(f&#39;PID: &#123;current_process().pid&#125;&#39;)    print(f&#39;Name: &#123;current_process().name&#125;&#39;)    # 通过下面的输出不难发现，每个进程都有自己的nums列表，进程之间本就不共享内存    # 在创建子进程时复制了父进程的数据结构，三个进程从列表中pop(0)得到的值都是20    counter, total &#x3D; 0, nums.pop(0)    print(f&#39;Loop count: &#123;total&#125;&#39;)    sleep(0.5)    while counter &lt; total:        counter +&#x3D; 1        print(f&#39;&#123;counter&#125;: &#123;content&#125;&#39;)        sleep(0.01)def main():    nums &#x3D; [20, 30, 40]    # 创建并启动进程来执行指定的函数    Process(target&#x3D;sub_task, args&#x3D;(&#39;Ping&#39;, nums)).start()    Process(target&#x3D;sub_task, args&#x3D;(&#39;Pong&#39;, nums)).start()    # 在主进程中执行sub_task函数    sub_task(&#39;Good&#39;, nums)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>说明</strong>：上面的代码通过<code>current_process</code>函数获取当前进程对象，再通过进程对象的<code>pid</code>属性获取进程ID。在 Python 中，使用<code>os</code>模块的<code>getpid</code>函数也可以达到同样的效果。</p></blockquote><p>如果愿意，也可以使用<code>os</code>模块的<code>fork</code>函数来创建进程，调用该函数时，操作系统自动把当前进程（父进程）复制一份（子进程），父进程的<code>fork</code>函数会返回子进程的ID，而子进程中的<code>fork</code>函数会返回<code>0</code>，也就是说这个函数调用一次会在父进程和子进程中得到两个不同的返回值。需要注意的是，Windows 系统并不支持<code>fork</code>函数，如果你使用的是 Linux 或 macOS 系统，可以试试下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import osprint(f&#39;PID: &#123;os.getpid()&#125;&#39;)pid &#x3D; os.fork()if pid &#x3D;&#x3D; 0:    print(f&#39;子进程 - PID: &#123;os.getpid()&#125;&#39;)    print(&#39;Todo: 在子进程中执行的代码&#39;)else:    print(f&#39;父进程 - PID: &#123;os.getpid()&#125;&#39;)    print(&#39;Todo: 在父进程中执行的代码&#39;)</code></pre><p>简而言之，我们还是推荐大家通过直接使用<code>Process</code>类、继承<code>Process</code>类和使用进程池（<code>ProcessPoolExecutor</code>）这三种方式来创建和使用多进程，这三种方式不同于上面的<code>fork</code>函数，能够保证代码的兼容性和可移植性。具体的做法跟之前讲过的创建和使用多线程的方式比较接近，此处不再进行赘述。</p><h3 id="多进程和多线程的比较"><a href="#多进程和多线程的比较" class="headerlink" title="多进程和多线程的比较"></a>多进程和多线程的比较</h3><p>对于爬虫这类 I&#x2F;O 密集型任务来说，使用多进程并没有什么优势；但是对于计算密集型任务来说，多进程相比多线程，在效率上会有显著的提升，我们可以通过下面的代码来加以证明。下面的代码会通过多线程和多进程两种方式来判断一组大整数是不是质数，很显然这是一个计算密集型任务，我们将任务分别放到多个线程和多个进程中来加速代码的执行，让我们看看多线程和多进程的代码具体表现有何不同。</p><p>我们先实现一个多线程的版本，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import concurrent.futuresPRIMES &#x3D; [    1116281,    1297337,    104395303,    472882027,    533000389,    817504243,    982451653,    112272535095293,    112582705942171,    112272535095293,    115280095190773,    115797848077099,    1099726899285419] * 5def is_prime(n):    &quot;&quot;&quot;判断素数&quot;&quot;&quot;    for i in range(2, int(n ** 0.5) + 1):        if n % i &#x3D;&#x3D; 0:            return False    return n !&#x3D; 1def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    with concurrent.futures.ThreadPoolExecutor(max_workers&#x3D;16) as executor:        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):            print(&#39;%d is prime: %s&#39; % (number, prime))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>假设上面的代码保存在名为<code>example.py</code>的文件中，在 Linux 或 macOS 系统上，可以使用<code>time python example.py</code>命令执行程序并获得操作系统关于执行时间的统计，在我的 macOS 上，某次的运行结果的最后一行输出如下所示。</p><pre class="language-none"><code class="language-none">python example09.py  38.69s user 1.01s system 101% cpu 39.213 total</code></pre><p>从运行结果可以看出，多线程的代码只能让 CPU 利用率达到100%，这其实已经证明了多线程的代码无法利用 CPU 多核特性来加速代码的执行，我们再看看多进程的版本，我们将上面代码中的线程池（<code>ThreadPoolExecutor</code>）更换为进程池（<code>ProcessPoolExecutor</code>）。</p><p>多进程的版本。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import concurrent.futuresPRIMES &#x3D; [    1116281,    1297337,    104395303,    472882027,    533000389,    817504243,    982451653,    112272535095293,    112582705942171,    112272535095293,    115280095190773,    115797848077099,    1099726899285419] * 5def is_prime(n):    &quot;&quot;&quot;判断素数&quot;&quot;&quot;    for i in range(2, int(n ** 0.5) + 1):        if n % i &#x3D;&#x3D; 0:            return False    return n !&#x3D; 1def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    with concurrent.futures.ProcessPoolExecutor(max_workers&#x3D;16) as executor:        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):            print(&#39;%d is prime: %s&#39; % (number, prime))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>提示</strong>：运行上面的代码时，可以通过操作系统的任务管理器（资源监视器）来查看是否启动了多个 Python  解释器进程。</p></blockquote><p>我们仍然通过<code>time python example.py</code>的方式来执行上述代码，运行结果的最后一行如下所示。</p><pre class="language-none"><code class="language-none">python example09.py 106.63s user 0.57s system 389% cpu 27.497 total</code></pre><p>可以看出，多进程的版本在我使用的这台电脑上，让 CPU 的利用率达到了将近400%，而运行代码时用户态耗费的 CPU 的时间（106.63秒）几乎是代码运行总时间（27.497秒）的4倍，从这两点都可以看出，我的电脑使用了一款4核的 CPU。当然，要知道自己的电脑有几个 CPU 或几个核，可以直接使用下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import osprint(os.cpu_count())</code></pre><p>综上所述，多进程可以突破 GIL 的限制，充分利用 CPU 多核特性，对于计算密集型任务，这一点是相当重要的。常见的计算密集型任务包括科学计算、图像处理、音视频编解码等，如果这些计算密集型任务本身是可以并行的，那么使用多进程应该是更好的选择。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>在讲解进程间通信之前，先给大家一个任务：启动两个进程，一个输出“Ping”，一个输出“Pong”，两个进程输出的“Ping”和“Pong”加起来一共有50个时，就结束程序。听起来是不是非常简单，但是实际编写代码时，由于多个进程之间不能够像多个线程之间直接通过共享内存的方式交换数据，所以下面的代码是达不到我们想要的结果的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from multiprocessing import Processfrom time import sleepcounter &#x3D; 0def sub_task(string):    global counter    while counter &lt; 50:        print(string, end&#x3D;&#39;&#39;, flush&#x3D;True)        counter +&#x3D; 1        sleep(0.01)        def main():    Process(target&#x3D;sub_task, args&#x3D;(&#39;Ping&#39;, )).start()    Process(target&#x3D;sub_task, args&#x3D;(&#39;Pong&#39;, )).start()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面的代码看起来没毛病，但是最后的结果是“Ping”和“Pong”各输出了50个。再次提醒大家，当我们在程序中创建进程的时候，子进程会复制父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，它们都会从<code>0</code>加到<code>50</code>，所以结果就可想而知了。要解决这个问题比较简单的办法是使用<code>multiprocessing</code>模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过操作系统底层的管道和信号量（semaphore）机制来实现的，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timefrom multiprocessing import Process, Queuedef sub_task(content, queue):    counter &#x3D; queue.get()    while counter &lt; 50:        print(content, end&#x3D;&#39;&#39;, flush&#x3D;True)        counter +&#x3D; 1        queue.put(counter)        time.sleep(0.01)        counter &#x3D; queue.get()def main():    queue &#x3D; Queue()    queue.put(0)    p1 &#x3D; Process(target&#x3D;sub_task, args&#x3D;(&#39;Ping&#39;, queue))    p1.start()    p2 &#x3D; Process(target&#x3D;sub_task, args&#x3D;(&#39;Pong&#39;, queue))    p2.start()    while p1.is_alive() and p2.is_alive():        pass    queue.put(50)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><blockquote><p><strong>提示</strong>：<code>multiprocessing.Queue</code>对象的<code>get</code>方法默认在队列为空时是会阻塞的，直到获取到数据才会返回。如果不希望该方法阻塞以及需要指定阻塞的超时时间，可以通过指定<code>block</code>和<code>timeout</code>参数进行设定。</p></blockquote><p>上面的代码通过<code>Queue</code>类的<code>get</code>和<code>put</code>方法让三个进程（<code>p1</code>、<code>p2</code>和主进程）实现了数据的共享，这就是所谓的进程间的通信，通过这种方式，当<code>Queue</code>中取出的值已经大于等于<code>50</code>时，<code>p1</code>和<code>p2</code>就会跳出<code>while</code>循环，从而终止进程的执行。代码第22行的循环是为了等待<code>p1</code>和<code>p2</code>两个进程中的一个结束，这时候主进程还需要向<code>Queue</code>中放置一个大于等于<code>50</code>的值，这样另一个尚未结束的进程也会因为读到这个大于等于<code>50</code>的值而终止。</p><p>进程间通信的方式还有很多，比如使用套接字也可以实现两个进程的通信，甚至于这两个进程并不在同一台主机上，有兴趣的读者可以自行了解。</p><h3 id="简单的总结"><a href="#简单的总结" class="headerlink" title="简单的总结"></a>简单的总结</h3><p>在 Python 中，我们还可以通过<code>subprocess</code>模块的<code>call</code>函数执行其他的命令来创建子进程，相当于就是在我们的程序中调用其他程序，这里我们暂不探讨这些知识，有兴趣的读者可以自行研究。</p><p>对于Python开发者来说，以下情况需要考虑使用多线程：</p><ol><li>程序需要维护许多共享的状态（尤其是可变状态），Python 中的列表、字典、集合都是线程安全的（多个线程同时操作同一个列表、字典或集合，不会引发错误和数据问题），所以使用线程而不是进程维护共享状态的代价相对较小。</li><li>程序会花费大量时间在 I&#x2F;O 操作上，没有太多并行计算的需求且不需占用太多的内存。</li></ol><p>那么在遇到下列情况时，应该考虑使用多进程：</p><ol><li>程序执行计算密集型任务（如：音视频编解码、数据压缩、科学计算等）。</li><li>程序的输入可以并行的分成块，并且可以将运算结果合并。</li><li>程序在内存使用方面没有任何限制且不强依赖于 I&#x2F;O 操作（如读写文件、套接字等）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63.Python中的并发编程-3</title>
      <link href="/2024/07/01/63.python-zhong-de-bing-fa-bian-cheng-3/"/>
      <url>/2024/07/01/63.python-zhong-de-bing-fa-bian-cheng-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Python中的并发编程-3"><a href="#Python中的并发编程-3" class="headerlink" title="Python中的并发编程-3"></a>Python中的并发编程-3</h2><p>爬虫是典型的 I&#x2F;O 密集型任务，I&#x2F;O 密集型任务的特点就是程序会经常性的因为 I&#x2F;O 操作而进入阻塞状态，比如我们之前使用<code>requests</code>获取页面代码或二进制内容，发出一个请求之后，程序必须要等待网站返回响应之后才能继续运行，如果目标网站不是很给力或者网络状况不是很理想，那么等待响应的时间可能会很久，而在这个过程中整个程序是一直阻塞在那里，没有做任何的事情。通过前面的课程，我们已经知道了可以通过多线程的方式为爬虫提速，使用多线程的本质就是，当一个线程阻塞的时候，程序还有其他的线程可以继续运转，因此整个程序就不会在阻塞和等待中浪费了大量的时间。</p><p>事实上，还有一种非常适合 I&#x2F;O 密集型任务的并发编程方式，我们称之为异步编程，你也可以将它称为异步 I&#x2F;O。这种方式并不需要启动多个线程或多个进程来实现并发，它是通过多个子程序相互协作的方式来提升 CPU 的利用率，解决了 I&#x2F;O 密集型任务 CPU  利用率很低的问题，我一般将这种方式称为“协作式并发”。这里，我不打算探讨操作系统的各种 I&#x2F;O 模式，因为这对很多读者来说都太过抽象；但是我们得先抛出两组概念给大家，一组叫做“阻塞”和“非阻塞”，一组叫做“同步”和“异步”。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p>阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。阻塞随时都可能发生，最典型的就是 I&#x2F;O 中断（包括网络 I&#x2F;O 、磁盘 I&#x2F;O 、用户输入等）、休眠操作、等待某个线程执行结束，甚至包括在 CPU 切换上下文时，程序都无法真正的执行，这就是所谓的阻塞。</p><h4 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h4><p>程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的。非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。显然，某个操作的阻塞可能会导程序耗时以及效率低下，所以我们会希望把它变成非阻塞的。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。例如前面讲过的给银行账户存钱的操作，我们在代码中使用了“锁”作为通信信号，让多个存钱操作强制排队顺序执行，这就是所谓的同步。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>不同程序单元在执行过程中无需通信协调，也能够完成一个任务，这种方式我们就称之为异步。例如，使用爬虫下载页面时，调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是不相关的，也无需相互通知协调。很显然，异步操作的完成时刻和先后顺序并不能确定。</p><p>很多人都不太能准确的把握这几个概念，这里我们简单的总结一下，同步与异步的关注点是<strong>消息通信机制</strong>，最终表现出来的是“有序”和“无序”的区别；阻塞和非阻塞的关注点是<strong>程序在等待消息时状态</strong>，最终表现出来的是程序在等待时能不能做点别的。如果想深入理解这些内容，推荐大家阅读经典著作<a href="https://item.jd.com/11880047.html">《UNIX网络编程》</a>，这本书非常的赞。</p><h3 id="生成器和协程"><a href="#生成器和协程" class="headerlink" title="生成器和协程"></a>生成器和协程</h3><p>前面我们说过，异步编程是一种“协作式并发”，即通过多个子程序相互协作的方式提升 CPU 的利用率，从而减少程序在阻塞和等待中浪费的时间，最终达到并发的效果。我们可以将多个相互协作的子程序称为“协程”，它是实现异步编程的关键。在介绍协程之前，我们先通过下面的代码，看看什么是生成器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(max_count):    a, b &#x3D; 0, 1    for _ in range(max_count):        a, b &#x3D; b, a + b        yield a</code></pre><p>上面我们编写了一个生成斐波那契数列的生成器，调用上面的<code>fib</code>函数并不是执行该函数获得返回值，因为<code>fib</code>函数中有一个特殊的关键字<code>yield</code>。这个关键字使得<code>fib</code>函数跟普通的函数有些区别，调用该函数会得到一个生成器对象，我们可以通过下面的代码来验证这一点。</p><pre class="language-Python" data-language="Python"><code class="language-Python">gen_obj &#x3D; fib(20)print(gen_obj)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">&lt;generator object fib at 0x106daee40&gt;</code></pre><p>我们可以使用内置函数<code>next</code>从生成器对象中获取斐波那契数列的值，也可以通过<code>for-in</code>循环对生成器能够提供的值进行遍历，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">for value in gen_obj:    print(value)</code></pre><p>生成器经过预激活，就是一个协程，它可以跟其他子程序协作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def calc_average():    total, counter &#x3D; 0, 0    avg_value &#x3D; None    while True:        curr_value &#x3D; yield avg_value        total +&#x3D; curr_value        counter +&#x3D; 1        avg_value &#x3D; total &#x2F; counterdef main():    obj &#x3D; calc_average()    # 生成器预激活    obj.send(None)    for _ in range(5):        print(obj.send(float(input())))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面的<code>main</code>函数首先通过生成器对象的<code>send</code>方法发送一个<code>None</code>值来将其激活为协程，也可以通过<code>next(obj)</code>达到同样的效果。接下来，协程对象会接收<code>main</code>函数发送的数据并产出（<code>yield</code>）数据的平均值。通过上面的例子，不知道大家是否看出两段子程序是怎么“协作”的。</p><h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>Python 3.5版本中，引入了两个非常有意思的元素，一个叫<code>async</code>，一个叫<code>await</code>，它们在Python 3.7版本中成为了正式的关键字。通过这两个关键字，可以简化协程代码的编写，可以用更为简单的方式让多个子程序很好的协作起来。我们通过一个例子来加以说明，请大家先看看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timedef display(num):    time.sleep(1)    print(num)def main():    start &#x3D; time.time()    for i in range(1, 10):        display(i)    end &#x3D; time.time()    print(f&#39;&#123;end - start:.3f&#125;秒&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>上面的代码每次执行都会依次输出<code>1</code>到<code>9</code>的数字，每个间隔<code>1</code>秒钟，整个代码需要执行大概需要<code>9</code>秒多的时间，这一点我相信大家都能看懂。不知道大家是否意识到，这段代码就是以同步和阻塞的方式执行的，同步可以从代码的输出看出来，而阻塞是指在调用<code>display</code>函数发生休眠时，整个代码的其他部分都不能继续执行，必须等待休眠结束。</p><p>接下来，我们尝试用异步的方式改写上面的代码，让<code>display</code>函数以异步的方式运转。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import asyncioimport timeasync def display(num):    await asyncio.sleep(1)    print(num)def main():    start &#x3D; time.time()    objs &#x3D; [display(i) for i in range(1, 10)]    loop &#x3D; asyncio.get_event_loop()    loop.run_until_complete(asyncio.wait(objs))    loop.close()    end &#x3D; time.time()    print(f&#39;&#123;end - start:.3f&#125;秒&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>Python 中的<code>asyncio</code>模块提供了对异步 I&#x2F;O 的支持。上面的代码中，我们首先在<code>display</code>函数前面加上了<code>async</code>关键字使其变成一个异步函数，调用异步函数不会执行函数体而是获得一个协程对象。我们将<code>display</code>函数中的<code>time.sleep(1)</code>修改为<code>await asyncio.sleep(1)</code>，二者的区别在于，后者不会让整个代码陷入阻塞，因为<code>await</code>操作会让其他协作的子程序有获得 CPU 资源而得以运转的机会。为了让这些子程序可以协作起来，我们需要将他们放到一个事件循环（实现消息分派传递的系统）上，因为<strong>当协程遭遇 I&#x2F;O 操作阻塞时，就会到事件循环中监听 I&#x2F;O 操作是否完成，并注册自身的上下文以及自身的唤醒函数（以便恢复执行），之后该协程就变为阻塞状态</strong>。上面的第12行代码创建了<code>9</code>个协程对象并放到一个列表中，第13行代码通过<code>asyncio</code>模块的<code>get_event_loop</code>函数获得了系统的事件循环，第14行通过<code>asyncio</code>模块的<code>run_until_complete</code>函数将协程对象挂载到事件循环上。执行上面的代码会发现，<code>9</code>个分别会阻塞<code>1</code>秒钟的协程总共只阻塞了约<code>1</code>秒种的时间，因为<strong>阻塞的协程对象会放弃对 CPU 的占有而不是让 CPU 处于闲置状态，这种方式大大的提升了 CPU 的利用率</strong>。而且我们还会注意到，数字并不是按照从<code>1</code>到<code>9</code>的顺序打印输出的，这正是我们想要的结果，说明它们是<strong>异步执行</strong>的。对于爬虫这样的 I&#x2F;O 密集型任务来说，这种协作式并发在很多场景下是比使用多线程更好的选择，因为这种做法减少了管理和维护多个线程以及多个线程切换所带来的开销。</p><h3 id="aiohttp库"><a href="#aiohttp库" class="headerlink" title="aiohttp库"></a>aiohttp库</h3><p>我们之前使用的<code>requests</code>三方库并不支持异步 I&#x2F;O，如果希望使用异步 I&#x2F;O 的方式来加速爬虫代码的执行，我们可以安装和使用名为<code>aiohttp</code>的三方库。</p><p>安装<code>aiohttp</code>。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install aiohttp</code></pre><p>下面的代码使用<code>aiohttp</code>抓取了<code>10</code>个网站的首页并解析出它们的标题。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import asyncioimport reimport aiohttpfrom aiohttp import ClientSessionTITLE_PATTERN &#x3D; re.compile(r&#39;&lt;title.*?&gt;(.*?)&lt;&#x2F;title&gt;&#39;, re.DOTALL)async def fetch_page_title(url):    async with aiohttp.ClientSession(headers&#x3D;&#123;        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;95.0.4638.69 Safari&#x2F;537.36&#39;,    &#125;) as session:  # type: ClientSession        async with session.get(url, ssl&#x3D;False) as resp:            if resp.status &#x3D;&#x3D; 200:                html_code &#x3D; await resp.text()                matcher &#x3D; TITLE_PATTERN.search(html_code)                title &#x3D; matcher.group(1).strip()                print(title)def main():    urls &#x3D; [        &#39;https:&#x2F;&#x2F;www.python.org&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.jd.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.taobao.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;git-scm.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.sohu.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;gitee.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.amazon.com&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.usa.gov&#x2F;&#39;,        &#39;https:&#x2F;&#x2F;www.nasa.gov&#x2F;&#39;    ]    objs &#x3D; [fetch_page_title(url) for url in urls]    loop &#x3D; asyncio.get_event_loop()    loop.run_until_complete(asyncio.wait(objs))    loop.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！搜狐淘宝网 - 淘！我喜欢百度一下，你就知道Gitee - 基于 Git 的代码托管和研发协作平台GitNASAOfficial Guide to Government Information and Services   &#124; USAGovAmazon.com. Spend less. Smile more.Welcome to Python.org</code></pre><p>从上面的输出可以看出，网站首页标题的输出顺序跟它们的 URL 在列表中的顺序没有关系。代码的第11行到第13行创建了<code>ClientSession</code>对象，通过它的<code>get</code>方法可以向指定的 URL 发起请求，如第14行所示，跟<code>requests</code>中的<code>Session</code>对象并没有本质区别，唯一的区别是这里使用了异步上下文。代码第16行的<code>await</code>会让因为 I&#x2F;O 操作阻塞的子程序放弃对 CPU 的占用，这使得其他的子程序可以运转起来去抓取页面。代码的第17行和第18行使用了正则表达式捕获组操作解析网页标题。<code>fetch_page_title</code>是一个被<code>async</code>关键字修饰的异步函数，调用该函数会获得协程对象，如代码第35行所示。后面的代码跟之前的例子没有什么区别，相信大家能够理解。</p><p>大家可以尝试将<code>aiohttp</code>换回到<code>requests</code>，看看不使用异步 I&#x2F;O 也不使用多线程，到底和上面的代码有什么区别，相信通过这样的对比，大家能够更深刻的理解我们之前强调的几个概念：同步和异步，阻塞和非阻塞。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63.并发编程在爬虫中的应用</title>
      <link href="/2024/07/01/63.bing-fa-bian-cheng-zai-pa-chong-zhong-de-ying-yong/"/>
      <url>/2024/07/01/63.bing-fa-bian-cheng-zai-pa-chong-zhong-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="并发编程在爬虫中的应用"><a href="#并发编程在爬虫中的应用" class="headerlink" title="并发编程在爬虫中的应用"></a>并发编程在爬虫中的应用</h2><p>之前的课程，我们已经为大家介绍了 Python 中的多线程、多进程和异步编程，通过这三种手段，我们可以实现并发或并行编程，这一方面可以加速代码的执行，另一方面也可以带来更好的用户体验。爬虫程序是典型的 I&#x2F;O 密集型任务，对于 I&#x2F;O 密集型任务来说，多线程和异步 I&#x2F;O 都是很好的选择，因为当程序的某个部分因 I&#x2F;O 操作阻塞时，程序的其他部分仍然可以运转，这样我们不用在等待和阻塞中浪费大量的时间。下面我们以爬取“<a href="https://image.so.com/">360图片</a>”网站的图片并保存到本地为例，为大家分别展示使用单线程、多线程和异步 I&#x2F;O 编程的爬虫程序有什么区别，同时也对它们的执行效率进行简单的对比。</p><p>“360图片”网站的页面使用了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX">Ajax</a> 技术，这是很多网站都会使用的一种异步加载数据和局部刷新页面的技术。简单的说，页面上的图片都是通过 JavaScript 代码异步获取 JSON 数据并动态渲染生成的，而且整个页面还使用了瀑布式加载（一边向下滚动，一边加载更多的图片）。我们在浏览器的“开发者工具”中可以找到提供动态内容的数据接口，如下图所示，我们需要的图片信息就在服务器返回的 JSON 数据中。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20211205221352.png" style="zoom:50%;"><p>例如，要获取“美女”频道的图片，我们可以请求如下所示的URL，其中参数<code>ch</code>表示请求的频道，<code>=</code>后面的参数值<code>beauty</code>就代表了“美女”频道，参数<code>sn</code>相当于是页码，<code>0</code>表示第一页（共<code>30</code>张图片），<code>30</code>表示第二页，<code>60</code>表示第三页，以此类推。</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;image.so.com&#x2F;zjl?ch&#x3D;beauty&amp;sn&#x3D;0</code></pre><h3 id="单线程版本"><a href="#单线程版本" class="headerlink" title="单线程版本"></a>单线程版本</h3><p>通过上面的 URL 下载“美女”频道共<code>90</code>张图片。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;example04.py - 单线程版本爬虫&quot;&quot;&quot;import osimport requestsdef download_picture(url):    filename &#x3D; url[url.rfind(&#39;&#x2F;&#39;) + 1:]    resp &#x3D; requests.get(url)    if resp.status_code &#x3D;&#x3D; 200:        with open(f&#39;images&#x2F;beauty&#x2F;&#123;filename&#125;&#39;, &#39;wb&#39;) as file:            file.write(resp.content)def main():    if not os.path.exists(&#39;images&#x2F;beauty&#39;):        os.makedirs(&#39;images&#x2F;beauty&#39;)    for page in range(3):        resp &#x3D; requests.get(f&#39;https:&#x2F;&#x2F;image.so.com&#x2F;zjl?ch&#x3D;beauty&amp;sn&#x3D;&#123;page * 30&#125;&#39;)        if resp.status_code &#x3D;&#x3D; 200:            pic_dict_list &#x3D; resp.json()[&#39;list&#39;]            for pic_dict in pic_dict_list:                download_picture(pic_dict[&#39;qhimg_url&#39;])if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>在 macOS 或 Linux 系统上，我们可以使用<code>time</code>命令来了解上面代码的执行时间以及 CPU 的利用率，如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">time python3 example04.py </code></pre><p>下面是单线程爬虫代码在我的电脑上执行的结果。</p><pre class="language-none"><code class="language-none">python3 example04.py  2.36s user 0.39s system 12% cpu 21.578 total</code></pre><p>这里我们只需要关注代码的总耗时为<code>21.578</code>秒，CPU 利用率为<code>12%</code>。</p><h3 id="多线程版本"><a href="#多线程版本" class="headerlink" title="多线程版本"></a>多线程版本</h3><p>我们使用之前讲到过的线程池技术，将上面的代码修改为多线程版本。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;example05.py - 多线程版本爬虫&quot;&quot;&quot;import osfrom concurrent.futures import ThreadPoolExecutorimport requestsdef download_picture(url):    filename &#x3D; url[url.rfind(&#39;&#x2F;&#39;) + 1:]    resp &#x3D; requests.get(url)    if resp.status_code &#x3D;&#x3D; 200:        with open(f&#39;images&#x2F;beauty&#x2F;&#123;filename&#125;&#39;, &#39;wb&#39;) as file:            file.write(resp.content)def main():    if not os.path.exists(&#39;images&#x2F;beauty&#39;):        os.makedirs(&#39;images&#x2F;beauty&#39;)    with ThreadPoolExecutor(max_workers&#x3D;16) as pool:        for page in range(3):            resp &#x3D; requests.get(f&#39;https:&#x2F;&#x2F;image.so.com&#x2F;zjl?ch&#x3D;beauty&amp;sn&#x3D;&#123;page * 30&#125;&#39;)            if resp.status_code &#x3D;&#x3D; 200:                pic_dict_list &#x3D; resp.json()[&#39;list&#39;]                for pic_dict in pic_dict_list:                    pool.submit(download_picture, pic_dict[&#39;qhimg_url&#39;])if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>执行如下所示的命令。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">time python3 example05.py</code></pre><p>代码的执行结果如下所示：</p><pre class="language-none"><code class="language-none">python3 example05.py  2.65s user 0.40s system 95% cpu 3.193 total</code></pre><h3 id="异步I-O版本"><a href="#异步I-O版本" class="headerlink" title="异步I&#x2F;O版本"></a>异步I&#x2F;O版本</h3><p>我们使用<code>aiohttp</code>将上面的代码修改为异步 I&#x2F;O 的版本。为了以异步 I&#x2F;O 的方式实现网络资源的获取和写文件操作，我们首先得安装三方库<code>aiohttp</code>和<code>aiofile</code>，命令如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install aiohttp aiofile</code></pre><p><code>aiohttp</code> 的用法在之前的课程中已经做过简要介绍，<code>aiofile</code>模块中的<code>async_open</code>函数跟 Python 内置函数<code>open</code>的用法大致相同，只不过它支持异步操作。下面是异步 I&#x2F;O 版本的爬虫代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;example06.py - 异步I&#x2F;O版本爬虫&quot;&quot;&quot;import asyncioimport jsonimport osimport aiofileimport aiohttpasync def download_picture(session, url):    filename &#x3D; url[url.rfind(&#39;&#x2F;&#39;) + 1:]    async with session.get(url, ssl&#x3D;False) as resp:        if resp.status &#x3D;&#x3D; 200:            data &#x3D; await resp.read()            async with aiofile.async_open(f&#39;images&#x2F;beauty&#x2F;&#123;filename&#125;&#39;, &#39;wb&#39;) as file:                await file.write(data)async def fetch_json():    async with aiohttp.ClientSession() as session:        for page in range(3):            async with session.get(                url&#x3D;f&#39;https:&#x2F;&#x2F;image.so.com&#x2F;zjl?ch&#x3D;beauty&amp;sn&#x3D;&#123;page * 30&#125;&#39;,                ssl&#x3D;False            ) as resp:                if resp.status &#x3D;&#x3D; 200:                    json_str &#x3D; await resp.text()                    result &#x3D; json.loads(json_str)                    for pic_dict in result[&#39;list&#39;]:                        await download_picture(session, pic_dict[&#39;qhimg_url&#39;])def main():    if not os.path.exists(&#39;images&#x2F;beauty&#39;):        os.makedirs(&#39;images&#x2F;beauty&#39;)    loop &#x3D; asyncio.get_event_loop()    loop.run_until_complete(fetch_json())    loop.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>执行如下所示的命令。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">time python3 example06.py</code></pre><p>代码的执行结果如下所示：</p><pre class="language-none"><code class="language-none">python3 example06.py  0.82s user 0.21s system 27% cpu 3.782 total</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面三段代码执行结果的比较，我们可以得出一个结论，使用多线程和异步 I&#x2F;O 都可以改善爬虫程序的性能，因为我们不用将时间浪费在因 I&#x2F;O 操作造成的等待和阻塞上，而<code>time</code>命令的执行结果也告诉我们，单线程的代码 CPU 利用率仅仅只有<code>12%</code>，而多线程版本的 CPU 利用率则高达<code>95%</code>；单线程版本的爬虫执行时间约<code>21</code>秒，而多线程和异步 I&#x2F;O 的版本仅执行了<code>3</code>秒钟。另外，在运行时间差别不大的情况下，多线程的代码比异步 I&#x2F;O 的代码耗费了更多的 CPU 资源，这是因为多线程的调度和切换也需要花费 CPU 时间。至此，三种方式在 I&#x2F;O 密集型任务上的优劣已经一目了然，当然这只是在我的电脑上跑出来的结果。如果网络状况不是很理想或者目标网站响应很慢，那么使用多线程和异步 I&#x2F;O 的优势将更为明显，有兴趣的读者可以自行试验。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64.使用Selenium抓取网页动态内容</title>
      <link href="/2024/07/01/64.shi-yong-selenium-zhua-qu-wang-ye-dong-tai-nei-rong/"/>
      <url>/2024/07/01/64.shi-yong-selenium-zhua-qu-wang-ye-dong-tai-nei-rong/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Selenium抓取网页动态内容"><a href="#使用Selenium抓取网页动态内容" class="headerlink" title="使用Selenium抓取网页动态内容"></a>使用Selenium抓取网页动态内容</h2><p>根据权威机构发布的全球互联网可访问性审计报告，全球约有四分之三的网站其内容或部分内容是通过JavaScript动态生成的，这就意味着在浏览器窗口中“查看网页源代码”时无法在HTML代码中找到这些内容，也就是说我们之前用的抓取数据的方式无法正常运转了。解决这样的问题基本上有两种方案，一是获取提供动态内容的数据接口，这种方式也适用于抓取手机 App 的数据；另一种是通过自动化测试工具 Selenium 运行浏览器获取渲染后的动态内容。对于第一种方案，我们可以使用浏览器的“开发者工具”或者更为专业的抓包工具（如：Charles、Fiddler、Wireshark等）来获取到数据接口，后续的操作跟上一个章节中讲解的获取“360图片”网站的数据是一样的，这里我们不再进行赘述。这一章我们重点讲解如何使用自动化测试工具 Selenium 来获取网站的动态内容。</p><h3 id="Selenium-介绍"><a href="#Selenium-介绍" class="headerlink" title="Selenium 介绍"></a>Selenium 介绍</h3><p>Selenium 是一个自动化测试工具，利用它可以驱动浏览器执行特定的行为，最终帮助爬虫开发者获取到网页的动态内容。简单的说，只要我们在浏览器窗口中能够看到的内容，都可以使用 Selenium 获取到，对于那些使用了 JavaScript 动态渲染技术的网站，Selenium 会是一个重要的选择。下面，我们还是以 Chrome 浏览器为例，来讲解 Selenium 的用法，大家需要先安装 Chrome 浏览器并下载它的驱动。Chrome 浏览器的驱动程序可以在<a href="https://chromedriver.chromium.org/downloads">ChromeDriver官网</a>进行下载，驱动的版本要跟浏览器的版本对应，如果没有完全对应的版本，就选择版本代号最为接近的版本。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20220310134558.png" style="zoom: 35%"><h3 id="使用Selenium"><a href="#使用Selenium" class="headerlink" title="使用Selenium"></a>使用Selenium</h3><p>我们可以先通过<code>pip</code>来安装 Selenium，命令如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install selenium</code></pre><h4 id="加载页面"><a href="#加载页面" class="headerlink" title="加载页面"></a>加载页面</h4><p>接下来，我们通过下面的代码驱动 Chrome 浏览器打开百度。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from selenium import webdriver# 创建Chrome浏览器对象browser &#x3D; webdriver.Chrome()# 加载指定的页面browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)</code></pre><p>如果不愿意使用 Chrome 浏览器，也可以修改上面的代码操控其他浏览器，只需创建对应的浏览器对象（如 Firefox、Safari 等）即可。运行上面的程序，如果看到如下所示的错误提示，那是说明我们还没有将 Chrome 浏览器的驱动添加到 PATH 环境变量中，也没有在程序中指定 Chrome 浏览器驱动所在的位置。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">selenium.common.exceptions.WebDriverException: Message: &#39;chromedriver&#39; executable needs to be in PATH. Please see https:&#x2F;&#x2F;sites.google.com&#x2F;a&#x2F;chromium.org&#x2F;chromedriver&#x2F;home</code></pre><p>解决这个问题的办法有三种：</p><ol><li><p>将下载的 ChromeDriver 放到已有的 PATH 环境变量下，建议直接跟 Python 解释器放在同一个目录，因为之前安装 Python 的时候我们已经将 Python 解释器的路径放到 PATH 环境变量中了。</p></li><li><p>将 ChromeDriver 放到项目虚拟环境下的 <code>bin</code> 文件夹中（Windows 系统对应的目录是 <code>Scripts</code>），这样 ChromeDriver 就跟虚拟环境下的 Python 解释器在同一个位置，肯定是能够找到的。</p></li><li><p>修改上面的代码，在创建 Chrome 对象时，通过<code>service</code>参数配置<code>Service</code>对象，并通过创建<code>Service</code>对象的<code>executable_path</code>参数指定 ChromeDriver 所在的位置，如下所示：</p> <pre class="language-Python" data-language="Python"><code class="language-Python">from selenium import webdriverfrom selenium.webdriver.chrome.service import Servicebrowser &#x3D; webdriver.Chrome(service&#x3D;Service(executable_path&#x3D;&#39;venv&#x2F;bin&#x2F;chromedriver&#39;))browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)</code></pre></li></ol><h4 id="查找元素和模拟用户行为"><a href="#查找元素和模拟用户行为" class="headerlink" title="查找元素和模拟用户行为"></a>查找元素和模拟用户行为</h4><p>接下来，我们可以尝试模拟用户在百度首页的文本框输入搜索关键字并点击“百度一下”按钮。在完成页面加载后，可以通过<code>Chrome</code>对象的<code>find_element</code>和<code>find_elements</code>方法来获取页面元素，Selenium 支持多种获取元素的方式，包括：CSS 选择器、XPath、元素名字（标签名）、元素 ID、类名等，前者可以获取单个页面元素（<code>WebElement</code>对象），后者可以获取多个页面元素构成的列表。获取到<code>WebElement</code>对象以后，可以通过<code>send_keys</code>来模拟用户输入行为，可以通过<code>click</code>来模拟用户点击操作，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from selenium import webdriverfrom selenium.webdriver.common.by import Bybrowser &#x3D; webdriver.Chrome()browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)# 通过元素ID获取元素kw_input &#x3D; browser.find_element(By.ID, &#39;kw&#39;)# 模拟用户输入行为kw_input.send_keys(&#39;Python&#39;)# 通过CSS选择器获取元素su_button &#x3D; browser.find_element(By.CSS_SELECTOR, &#39;#su&#39;)# 模拟用户点击行为su_button.click()</code></pre><p>如果要执行一个系列动作，例如模拟拖拽操作，可以创建<code>ActionChains</code>对象，有兴趣的读者可以自行研究。</p><h4 id="隐式等待和显式等待"><a href="#隐式等待和显式等待" class="headerlink" title="隐式等待和显式等待"></a>隐式等待和显式等待</h4><p>这里还有一个细节需要大家知道，网页上的元素可能是动态生成的，在我们使用<code>find_element</code>或<code>find_elements</code>方法获取的时候，可能还没有完成渲染，这时会引发<code>NoSuchElementException</code>错误。为了解决这个问题，我们可以使用隐式等待的方式，通过设置等待时间让浏览器完成对页面元素的渲染。除此之外，我们还可以使用显示等待，通过创建<code>WebDriverWait</code>对象，并设置等待时间和条件，当条件没有满足时，我们可以先等待再尝试进行后续的操作，具体的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditionsfrom selenium.webdriver.support.wait import WebDriverWaitbrowser &#x3D; webdriver.Chrome()# 设置浏览器窗口大小browser.set_window_size(1200, 800)browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)# 设置隐式等待时间为10秒browser.implicitly_wait(10)kw_input &#x3D; browser.find_element(By.ID, &#39;kw&#39;)kw_input.send_keys(&#39;Python&#39;)su_button &#x3D; browser.find_element(By.CSS_SELECTOR, &#39;#su&#39;)su_button.click()# 创建显示等待对象wait_obj &#x3D; WebDriverWait(browser, 10)# 设置等待条件（等搜索结果的div出现）wait_obj.until(    expected_conditions.presence_of_element_located(        (By.CSS_SELECTOR, &#39;#content_left&#39;)    ))# 截屏browser.get_screenshot_as_file(&#39;python_result.png&#39;)</code></pre><p>上面设置的等待条件<code>presence_of_element_located</code>表示等待指定元素出现，下面的表格列出了常用的等待条件及其含义。</p><table><thead><tr><th>等待条件</th><th>具体含义</th></tr></thead><tbody><tr><td><code>title_is / title_contains</code></td><td>标题是指定的内容 &#x2F; 标题包含指定的内容</td></tr><tr><td><code>visibility_of</code></td><td>元素可见</td></tr><tr><td><code>presence_of_element_located</code></td><td>定位的元素加载完成</td></tr><tr><td><code>visibility_of_element_located</code></td><td>定位的元素变得可见</td></tr><tr><td><code>invisibility_of_element_located</code></td><td>定位的元素变得不可见</td></tr><tr><td><code>presence_of_all_elements_located</code></td><td>定位的所有元素加载完成</td></tr><tr><td><code>text_to_be_present_in_element</code></td><td>元素包含指定的内容</td></tr><tr><td><code>text_to_be_present_in_element_value</code></td><td>元素的<code>value</code>属性包含指定的内容</td></tr><tr><td><code>frame_to_be_available_and_switch_to_it</code></td><td>载入并切换到指定的内部窗口</td></tr><tr><td><code>element_to_be_clickable</code></td><td>元素可点击</td></tr><tr><td><code>element_to_be_selected</code></td><td>元素被选中</td></tr><tr><td><code>element_located_to_be_selected</code></td><td>定位的元素被选中</td></tr><tr><td><code>alert_is_present</code></td><td>出现 Alert 弹窗</td></tr></tbody></table><h4 id="执行JavaScript代码"><a href="#执行JavaScript代码" class="headerlink" title="执行JavaScript代码"></a>执行JavaScript代码</h4><p>对于使用瀑布式加载的页面，如果希望在浏览器窗口中加载更多的内容，可以通过浏览器对象的<code>execute_scripts</code>方法执行 JavaScript 代码来实现。对于一些高级的爬取操作，也很有可能会用到类似的操作，如果你的爬虫代码需要 JavaScript 的支持，建议先对 JavaScript 进行适当的了解，尤其是 JavaScript 中的 BOM 和 DOM 操作。我们在上面的代码中截屏之前加入下面的代码，这样就可以利用 JavaScript 将网页滚到最下方。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 执行JavaScript代码browser.execute_script(&#39;document.documentElement.scrollTop &#x3D; document.documentElement.scrollHeight&#39;)</code></pre><h4 id="Selenium反爬的破解"><a href="#Selenium反爬的破解" class="headerlink" title="Selenium反爬的破解"></a>Selenium反爬的破解</h4><p>有一些网站专门针对 Selenium 设置了反爬措施，因为使用 Selenium 驱动的浏览器，在控制台中可以看到如下所示的<code>webdriver</code>属性值为<code>true</code>，如果要绕过这项检查，可以在加载页面之前，先通过执行 JavaScript 代码将其修改为<code>undefined</code>。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20220310154246.png" style="zoom:50%"><p>另一方面，我们还可以将浏览器窗口上的“Chrome正受到自动测试软件的控制”隐藏掉，完整的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 创建Chrome参数对象options &#x3D; webdriver.ChromeOptions()# 添加试验性参数options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])options.add_experimental_option(&#39;useAutomationExtension&#39;, False)# 创建Chrome浏览器对象并传入参数browser &#x3D; webdriver.Chrome(options&#x3D;options)# 执行Chrome开发者协议命令（在加载页面时执行指定的JavaScript代码）browser.execute_cdp_cmd(    &#39;Page.addScriptToEvaluateOnNewDocument&#39;,    &#123;&#39;source&#39;: &#39;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () &#x3D;&gt; undefined&#125;)&#39;&#125;)browser.set_window_size(1200, 800)browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)</code></pre><h4 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h4><p>很多时候，我们在爬取数据时并不需要看到浏览器窗口，只要有 Chrome 浏览器以及对应的驱动程序，我们的爬虫就能够运转起来。如果不想看到浏览器窗口，我们可以通过下面的方式设置使用无头浏览器。</p><pre class="language-Python" data-language="Python"><code class="language-Python">options &#x3D; webdriver.ChromeOptions()options.add_argument(&#39;--headless&#39;)browser &#x3D; webdriver.Chrome(options&#x3D;options)</code></pre><h3 id="API参考"><a href="#API参考" class="headerlink" title="API参考"></a>API参考</h3><p>Selenium 相关的知识还有很多，我们在此就不一一赘述了，下面为大家罗列一些浏览器对象和<code>WebElement</code>对象常用的属性和方法。具体的内容大家还可以参考 Selenium <a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html">官方文档的中文翻译</a>。</p><h4 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h4><p>表1. 常用属性</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><code>current_url</code></td><td>当前页面的URL</td></tr><tr><td><code>current_window_handle</code></td><td>当前窗口的句柄（引用）</td></tr><tr><td><code>name</code></td><td>浏览器的名称</td></tr><tr><td><code>orientation</code></td><td>当前设备的方向（横屏、竖屏）</td></tr><tr><td><code>page_source</code></td><td>当前页面的源代码（包括动态内容）</td></tr><tr><td><code>title</code></td><td>当前页面的标题</td></tr><tr><td><code>window_handles</code></td><td>浏览器打开的所有窗口的句柄</td></tr></tbody></table><p>表2. 常用方法</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>back</code> &#x2F; <code>forward</code></td><td>在浏览历史记录中后退&#x2F;前进</td></tr><tr><td><code>close</code> &#x2F; <code>quit</code></td><td>关闭当前浏览器窗口 &#x2F; 退出浏览器实例</td></tr><tr><td><code>get</code></td><td>加载指定 URL 的页面到浏览器中</td></tr><tr><td><code>maximize_window</code></td><td>将浏览器窗口最大化</td></tr><tr><td><code>refresh</code></td><td>刷新当前页面</td></tr><tr><td><code>set_page_load_timeout</code></td><td>设置页面加载超时时间</td></tr><tr><td><code>set_script_timeout</code></td><td>设置 JavaScript 执行超时时间</td></tr><tr><td><code>implicit_wait</code></td><td>设置等待元素被找到或目标指令完成</td></tr><tr><td><code>get_cookie</code> &#x2F; <code>get_cookies</code></td><td>获取指定的Cookie &#x2F; 获取所有Cookie</td></tr><tr><td><code>add_cookie</code></td><td>添加 Cookie 信息</td></tr><tr><td><code>delete_cookie</code> &#x2F; <code>delete_all_cookies</code></td><td>删除指定的 Cookie &#x2F; 删除所有 Cookie</td></tr><tr><td><code>find_element</code> &#x2F; <code>find_elements</code></td><td>查找单个元素 &#x2F; 查找一系列元素</td></tr></tbody></table><h4 id="WebElement对象"><a href="#WebElement对象" class="headerlink" title="WebElement对象"></a>WebElement对象</h4><p>表1. WebElement常用属性</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><code>location</code></td><td>元素的位置</td></tr><tr><td><code>size</code></td><td>元素的尺寸</td></tr><tr><td><code>text</code></td><td>元素的文本内容</td></tr><tr><td><code>id</code></td><td>元素的 ID</td></tr><tr><td><code>tag_name</code></td><td>元素的标签名</td></tr></tbody></table><p>表2. 常用方法</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>clear</code></td><td>清空文本框或文本域中的内容</td></tr><tr><td><code>click</code></td><td>点击元素</td></tr><tr><td><code>get_attribute</code></td><td>获取元素的属性值</td></tr><tr><td><code>is_displayed</code></td><td>判断元素对于用户是否可见</td></tr><tr><td><code>is_enabled</code></td><td>判断元素是否处于可用状态</td></tr><tr><td><code>is_selected</code></td><td>判断元素（单选框和复选框）是否被选中</td></tr><tr><td><code>send_keys</code></td><td>模拟输入文本</td></tr><tr><td><code>submit</code></td><td>提交表单</td></tr><tr><td><code>value_of_css_property</code></td><td>获取指定的CSS属性值</td></tr><tr><td><code>find_element</code> &#x2F; <code>find_elements</code></td><td>获取单个子元素 &#x2F; 获取一系列子元素</td></tr><tr><td><code>screenshot</code></td><td>为元素生成快照</td></tr></tbody></table><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>下面的例子演示了如何使用 Selenium 从“360图片”网站搜索和下载图片。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import osimport timefrom concurrent.futures import ThreadPoolExecutorimport requestsfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.keys import KeysDOWNLOAD_PATH &#x3D; &#39;images&#x2F;&#39;def download_picture(picture_url: str):    &quot;&quot;&quot;    下载保存图片    :param picture_url: 图片的URL    &quot;&quot;&quot;    filename &#x3D; picture_url[picture_url.rfind(&#39;&#x2F;&#39;) + 1:]    resp &#x3D; requests.get(picture_url)    with open(os.path.join(DOWNLOAD_PATH, filename), &#39;wb&#39;) as file:        file.write(resp.content)if not os.path.exists(DOWNLOAD_PATH):    os.makedirs(DOWNLOAD_PATH)browser &#x3D; webdriver.Chrome()browser.get(&#39;https:&#x2F;&#x2F;image.so.com&#x2F;z?ch&#x3D;beauty&#39;)browser.implicitly_wait(10)kw_input &#x3D; browser.find_element(By.CSS_SELECTOR, &#39;input[name&#x3D;q]&#39;)kw_input.send_keys(&#39;苍老师&#39;)kw_input.send_keys(Keys.ENTER)for _ in range(10):    browser.execute_script(        &#39;document.documentElement.scrollTop &#x3D; document.documentElement.scrollHeight&#39;    )    time.sleep(1)imgs &#x3D; browser.find_elements(By.CSS_SELECTOR, &#39;div.waterfall img&#39;)with ThreadPoolExecutor(max_workers&#x3D;32) as pool:    for img in imgs:        pic_url &#x3D; img.get_attribute(&#39;src&#39;)        pool.submit(download_picture, pic_url)</code></pre><p>运行上面的代码，检查指定的目录下是否下载了根据关键词搜索到的图片。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>65.爬虫框架Scrapy简介</title>
      <link href="/2024/07/01/65.pa-chong-kuang-jia-scrapy-jian-jie/"/>
      <url>/2024/07/01/65.pa-chong-kuang-jia-scrapy-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="爬虫框架Scrapy简介"><a href="#爬虫框架Scrapy简介" class="headerlink" title="爬虫框架Scrapy简介"></a>爬虫框架Scrapy简介</h2><p>当你写了很多个爬虫程序之后，你会发现每次写爬虫程序时，都需要将页面获取、页面解析、爬虫调度、异常处理、反爬应对这些代码从头至尾实现一遍，这里面有很多工作其实都是简单乏味的重复劳动。那么，有没有什么办法可以提升我们编写爬虫代码的效率呢？答案是肯定的，那就是利用爬虫框架，而在所有的爬虫框架中，Scrapy 应该是最流行、最强大的框架。</p><h3 id="Scrapy-概述"><a href="#Scrapy-概述" class="headerlink" title="Scrapy 概述"></a>Scrapy 概述</h3><p>Scrapy 是基于 Python 的一个非常流行的网络爬虫框架，可以用来抓取 Web 站点并从页面中提取结构化的数据。下图展示了 Scrapy 的基本架构，其中包含了主要组件和系统的数据处理流程（图中带数字的红色箭头）。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824003638.png"></p><h4 id="Scrapy的组件"><a href="#Scrapy的组件" class="headerlink" title="Scrapy的组件"></a>Scrapy的组件</h4><p>我们先来说说 Scrapy 中的组件。</p><ol><li>Scrapy 引擎（Engine）：用来控制整个系统的数据处理流程。</li><li>调度器（Scheduler）：调度器从引擎接受请求并排序列入队列，并在引擎发出请求后返还给它们。</li><li>下载器（Downloader）：下载器的主要职责是抓取网页并将网页内容返还给蜘蛛（Spiders）。</li><li>蜘蛛程序（Spiders）：蜘蛛是用户自定义的用来解析网页并抓取特定URL的类，每个蜘蛛都能处理一个域名或一组域名，简单的说就是用来定义特定网站的抓取和解析规则的模块。</li><li>数据管道（Item Pipeline）：管道的主要责任是负责处理有蜘蛛从网页中抽取的数据条目，它的主要任务是清理、验证和存储数据。当页面被蜘蛛解析后，将被发送到数据管道，并经过几个特定的次序处理数据。每个数据管道组件都是一个 Python 类，它们获取了数据条目并执行对数据条目进行处理的方法，同时还需要确定是否需要在数据管道中继续执行下一步或是直接丢弃掉不处理。数据管道通常执行的任务有：清理 HTML 数据、验证解析到的数据（检查条目是否包含必要的字段）、检查是不是重复数据（如果重复就丢弃）、将解析到的数据存储到数据库（关系型数据库或 NoSQL 数据库）中。</li><li>中间件（Middlewares）：中间件是介于引擎和其他组件之间的一个钩子框架，主要是为了提供自定义的代码来拓展 Scrapy 的功能，包括下载器中间件和蜘蛛中间件。</li></ol><h4 id="数据处理流程"><a href="#数据处理流程" class="headerlink" title="数据处理流程"></a>数据处理流程</h4><p>Scrapy 的整个数据处理流程由引擎进行控制，通常的运转流程包括以下的步骤：</p><ol><li><p>引擎询问蜘蛛需要处理哪个网站，并让蜘蛛将第一个需要处理的 URL 交给它。</p></li><li><p>引擎让调度器将需要处理的 URL 放在队列中。</p></li><li><p>引擎从调度那获取接下来进行爬取的页面。</p></li><li><p>调度将下一个爬取的 URL 返回给引擎，引擎将它通过下载中间件发送到下载器。</p></li><li><p>当网页被下载器下载完成以后，响应内容通过下载中间件被发送到引擎；如果下载失败了，引擎会通知调度器记录这个 URL，待会再重新下载。</p></li><li><p>引擎收到下载器的响应并将它通过蜘蛛中间件发送到蜘蛛进行处理。</p></li><li><p>蜘蛛处理响应并返回爬取到的数据条目，此外还要将需要跟进的新的 URL 发送给引擎。</p></li><li><p>引擎将抓取到的数据条目送入数据管道，把新的 URL 发送给调度器放入队列中。</p></li></ol><p>上述操作中的第2步到第8步会一直重复直到调度器中没有需要请求的 URL，爬虫就停止工作。</p><h3 id="安装和使用Scrapy"><a href="#安装和使用Scrapy" class="headerlink" title="安装和使用Scrapy"></a>安装和使用Scrapy</h3><p>可以使用 Python 的包管理工具<code>pip</code>来安装 Scrapy。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install scrapy</code></pre><p>在命令行中使用<code>scrapy</code>命令创建名为<code>demo</code>的项目。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">scrapy startproject demo</code></pre><p>项目的目录结构如下图所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">demo|____ demo|________ spiders|____________ __init__.py|________ __init__.py|________ items.py|________ middlewares.py|________ pipelines.py|________ settings.py|____ scrapy.cfg</code></pre><p>切换到<code>demo</code> 目录，用下面的命令创建名为<code>douban</code>的蜘蛛程序。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">scrapy genspider douban movie.douban.com</code></pre><h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><p>接下来，我们实现一个爬取豆瓣电影 Top250 电影标题、评分和金句的爬虫。</p><ol><li><p>在<code>items.py</code>的<code>Item</code>类中定义字段，这些字段用来保存数据，方便后续的操作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import scrapyclass DoubanItem(scrapy.Item):    title &#x3D; scrapy.Field()    score &#x3D; scrapy.Field()    motto &#x3D; scrapy.Field()</code></pre></li><li><p>修改<code>spiders</code>文件夹中名为<code>douban.py</code> 的文件，它是蜘蛛程序的核心，需要我们添加解析页面的代码。在这里，我们可以通过对<code>Response</code>对象的解析，获取电影的信息，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import scrapyfrom scrapy import Selector, Requestfrom scrapy.http import HtmlResponsefrom demo.items import MovieItemclass DoubanSpider(scrapy.Spider):    name &#x3D; &#39;douban&#39;    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;0&amp;filter&#x3D;&#39;]    def parse(self, response: HtmlResponse):        sel &#x3D; Selector(response)        movie_items &#x3D; sel.css(&#39;#content &gt; div &gt; div.article &gt; ol &gt; li&#39;)        for movie_sel in movie_items:            item &#x3D; MovieItem()            item[&#39;title&#39;] &#x3D; movie_sel.css(&#39;.title::text&#39;).extract_first()            item[&#39;score&#39;] &#x3D; movie_sel.css(&#39;.rating_num::text&#39;).extract_first()            item[&#39;motto&#39;] &#x3D; movie_sel.css(&#39;.inq::text&#39;).extract_first()            yield item</code></pre><p>通过上面的代码不难看出，我们可以使用 CSS 选择器进行页面解析。当然，如果你愿意也可以使用 XPath 或正则表达式进行页面解析，对应的方法分别是<code>xpath</code>和<code>re</code>。</p><p>如果还要生成后续爬取的请求，我们可以用<code>yield</code>产出<code>Request</code>对象。<code>Request</code>对象有两个非常重要的属性，一个是<code>url</code>，它代表了要请求的地址；一个是<code>callback</code>，它代表了获得响应之后要执行的回调函数。我们可以将上面的代码稍作修改。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import scrapyfrom scrapy import Selector, Requestfrom scrapy.http import HtmlResponsefrom demo.items import MovieItemclass DoubanSpider(scrapy.Spider):    name &#x3D; &#39;douban&#39;    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;0&amp;filter&#x3D;&#39;]    def parse(self, response: HtmlResponse):        sel &#x3D; Selector(response)        movie_items &#x3D; sel.css(&#39;#content &gt; div &gt; div.article &gt; ol &gt; li&#39;)        for movie_sel in movie_items:            item &#x3D; MovieItem()            item[&#39;title&#39;] &#x3D; movie_sel.css(&#39;.title::text&#39;).extract_first()            item[&#39;score&#39;] &#x3D; movie_sel.css(&#39;.rating_num::text&#39;).extract_first()            item[&#39;motto&#39;] &#x3D; movie_sel.css(&#39;.inq::text&#39;).extract_first()            yield item        hrefs &#x3D; sel.css(&#39;#content &gt; div &gt; div.article &gt; div.paginator &gt; a::attr(&quot;href&quot;)&#39;)        for href in hrefs:            full_url &#x3D; response.urljoin(href.extract())            yield Request(url&#x3D;full_url)</code></pre><p>到这里，我们已经可以通过下面的命令让爬虫运转起来。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">scrapy crawl movie</code></pre><p>可以在控制台看到爬取到的数据，如果想将这些数据保存到文件中，可以通过<code>-o</code>参数来指定文件名，Scrapy 支持我们将爬取到的数据导出成 JSON、CSV、XML 等格式。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">scrapy crawl moive -o result.json</code></pre><p>不知大家是否注意到，通过运行爬虫获得的 JSON 文件中有<code>275</code>条数据，那是因为首页被重复爬取了。要解决这个问题，可以对上面的代码稍作调整，不在<code>parse</code>方法中解析获取新页面的 URL，而是通过<code>start_requests</code>方法提前准备好待爬取页面的 URL，调整后的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import scrapyfrom scrapy import Selector, Requestfrom scrapy.http import HtmlResponsefrom demo.items import MovieItemclass DoubanSpider(scrapy.Spider):    name &#x3D; &#39;douban&#39;    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]    def start_requests(self):        for page in range(10):            yield Request(url&#x3D;f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&#123;page * 25&#125;&#39;)    def parse(self, response: HtmlResponse):        sel &#x3D; Selector(response)        movie_items &#x3D; sel.css(&#39;#content &gt; div &gt; div.article &gt; ol &gt; li&#39;)        for movie_sel in movie_items:            item &#x3D; MovieItem()            item[&#39;title&#39;] &#x3D; movie_sel.css(&#39;.title::text&#39;).extract_first()            item[&#39;score&#39;] &#x3D; movie_sel.css(&#39;.rating_num::text&#39;).extract_first()            item[&#39;motto&#39;] &#x3D; movie_sel.css(&#39;.inq::text&#39;).extract_first()            yield item</code></pre></li><li><p>如果希望完成爬虫数据的持久化，可以在数据管道中处理蜘蛛程序产生的<code>Item</code>对象。例如，我们可以通过前面讲到的<code>openpyxl</code>操作 Excel 文件，将数据写入 Excel 文件中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import openpyxlfrom demo.items import MovieItemclass MovieItemPipeline:    def __init__(self):        self.wb &#x3D; openpyxl.Workbook()        self.sheet &#x3D; self.wb.active        self.sheet.title &#x3D; &#39;Top250&#39;        self.sheet.append((&#39;名称&#39;, &#39;评分&#39;, &#39;名言&#39;))    def process_item(self, item: MovieItem, spider):        self.sheet.append((item[&#39;title&#39;], item[&#39;score&#39;], item[&#39;motto&#39;]))        return item    def close_spider(self, spider):        self.wb.save(&#39;豆瓣电影数据.xlsx&#39;)</code></pre><p>上面的<code>process_item</code>和<code>close_spider</code>都是回调方法（钩子函数）， 简单的说就是 Scrapy 框架会自动去调用的方法。当蜘蛛程序产生一个<code>Item</code>对象交给引擎时，引擎会将该<code>Item</code>对象交给数据管道，这时我们配置好的数据管道的<code>parse_item</code>方法就会被执行，所以我们可以在该方法中获取数据并完成数据的持久化操作。另一个方法<code>close_spider</code>是在爬虫结束运行前会自动执行的方法，在上面的代码中，我们在这个地方进行了保存 Excel 文件的操作，相信这段代码大家是很容易读懂的。</p><p>总而言之，数据管道可以帮助我们完成以下操作：</p><ul><li>清理 HTML 数据，验证爬取的数据。</li><li>丢弃重复的不必要的内容。</li><li>将爬取的结果进行持久化操作。</li></ul></li><li><p>修改<code>settings.py</code>文件对项目进行配置，主要需要修改以下几个配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 用户浏览器USER_AGENT &#x3D; &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;92.0.4515.159 Safari&#x2F;537.36&#39;# 并发请求数量 CONCURRENT_REQUESTS &#x3D; 4# 下载延迟DOWNLOAD_DELAY &#x3D; 3# 随机化下载延迟RANDOMIZE_DOWNLOAD_DELAY &#x3D; True# 是否遵守爬虫协议ROBOTSTXT_OBEY &#x3D; True# 配置数据管道ITEM_PIPELINES &#x3D; &#123;   &#39;demo.pipelines.MovieItemPipeline&#39;: 300,&#125;</code></pre><blockquote><p><strong>说明</strong>：上面配置文件中的<code>ITEM_PIPELINES</code>选项是一个字典，可以配置多个处理数据的管道，后面的数字代表了执行的优先级，数字小的先执行。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66.数据分析概述</title>
      <link href="/2024/07/01/66.shu-ju-fen-xi-gai-shu/"/>
      <url>/2024/07/01/66.shu-ju-fen-xi-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析概述"><a href="#数据分析概述" class="headerlink" title="数据分析概述"></a>数据分析概述</h2><p>当今世界对信息技术的依赖程度在不断加深，每天都会有大量的数据产生，我们经常会感到数据越来越多，但是要从中发现有价值的信息却越来越难。这里所说的信息，可以理解为对数据集处理之后的结果，是从数据集中提炼出的可用于其他场合的结论性的东西，而<strong>从原始数据中抽取出有价值的信息</strong>的这个过程我们就称之为<strong>数据分析</strong>，它是数据科学工作的一部分。</p><img src="res/data_science.png" style="zoom:50%;"><blockquote><p>定义：<strong>数据分析是有针对性的收集、加工、整理数据并采用统计、挖掘等技术对数据进行探索、分析、呈现和解释的科学</strong>。</p></blockquote><h3 id="数据分析师的职责和技能栈"><a href="#数据分析师的职责和技能栈" class="headerlink" title="数据分析师的职责和技能栈"></a>数据分析师的职责和技能栈</h3><p>HR在发布招聘需求时，通常将数据工程、数据分析、数据挖掘等岗位都统称为数据分析岗位，但是根据工作性质的不同，又可以分为偏工程的<strong>数据治理方向</strong>、偏业务的<strong>数据分析方向</strong>、偏算法的<strong>数据挖掘方向</strong>、偏开发的<strong>数据开发方向</strong>、偏产品的<strong>数据产品经理</strong>。我们通常所说的数据分析师主要是指<strong>业务数据分析师</strong>，很多数据分析师的职业生涯都是从这个岗位开始的，而且这个岗位也是招聘数量最多的岗位。业务数据分析师在公司通常不属于研发部门而属于运营部门，所以这个岗位也称为<strong>数据运营</strong>或<strong>商业分析</strong>，这类人员通常也被称为“BI工程师”。通常招聘信息对这个岗位的描述（JD）是：</p><ol><li>负责相关报表的输出。</li><li>建立和优化指标体系。</li><li>监控数据波动和异常，找出问题。</li><li>优化和驱动业务，推动数字化运营。</li><li>找出潜在的市场和产品的上升空间。</li></ol><p>根据上面的描述，作为业务数据分析师，我们的工作不是给领导一个简单浅显的结论，而是结合公司的业务，完成<strong>监控数据</strong>、<strong>揪出异常</strong>、<strong>找到原因</strong>、<strong>探索趋势</strong>等工作。作为数据分析师，不管是用 Python 语言、Excel、SPSS或其他的商业智能工具，工具只是达成目标的手段，<strong>数据思维是核心技能</strong>，从实际业务问题出发到最终<strong>发现数据中的商业价值</strong>是终极目标。数据分析师在很多公司只是一个基础岗位，精于业务的数据分析师可以向<strong>数据分析经理</strong>或<strong>数据运营总监</strong>等管理岗位发展；对于熟悉机器学习算法的数据分析师来说，可以向<strong>数据挖掘工程师</strong>或<strong>算法专家</strong>方向发展，而这些岗位除了需要相应的数学和统计学知识，在编程能力方面也比数据分析师有更高的要求，可能还需要有大数据存储和处理的相关经验。数据治理岗位主要是帮助公司建设数据仓库或数据湖，实现数据从业务系统、埋点系统、日志系统到分析库的转移，为后续的数据分析和挖掘提供基础设施。数据治理岗位对 SQL 和 HiveSQL 有着较高的要求，需要熟练的使用 ETL 工具，此外还需要对 Hadoop 生态圈有一个较好的认知。作为数据产品经理，除了传统产品经理的技能栈之外，也需要较强的技术能力，例如要了解常用的推荐算法、机器学习模型，能够为算法的改进提供依据，能够制定相关埋点的规范和口径，虽然不需要精通各种算法，但是要站在产品的角度去考虑数据模型、指标、算法等的落地。</p><p>以下是我总结的数据分析师的技能栈，仅供参考。</p><ol><li>计算机科学（数据分析工具、编程语言、数据库）</li><li>数学和统计学（数据思维、统计思维）</li><li>人工智能（机器学习中的数据挖掘算法）</li><li>业务理解能力（沟通、表达、经验）</li><li>总结和表述能力（商业PPT、文字总结）</li></ol><h3 id="数据分析的流程"><a href="#数据分析的流程" class="headerlink" title="数据分析的流程"></a>数据分析的流程</h3><p>我们提到数分析这个词很多时候可能指的都是<strong>狭义的数据分析</strong>，这类数据分析主要目标就是生成可视化报表并通过这些报表来洞察业务中的问题，这类工作一般都是具有滞后性的。<strong>广义的数据分析</strong>还包含了数据挖掘的部分，不仅要通过数据实现对业务的监控和分析，还要利用机器学习算法，找出隐藏在数据背后的知识，并利用这些知识为将来的决策提供支撑，具备一定的前瞻性。</p><p>基本的数据分析工作一般包含以下几个方面的内容，当然因为行业和工作内容的不同会略有差异。</p><ol><li>确定目标（输入）：理解业务，确定指标口径</li><li>获取数据：数据仓库（SQL提数）、电子表格、三方接口、网络爬虫、开放数据集等</li><li>清洗数据：包括对缺失值、重复值、异常值的处理以及相关的预处理（格式化、离散化、二值化等）</li><li>数据透视：排序、统计、分组聚合、交叉表、透视表等</li><li>数据呈现（输出）：数据可视化，发布工作成果（数据分析报告）</li><li>分析洞察（后续）：解释数据的变化，提出对应的方案</li></ol><p>深入的数据挖掘工作通常包含以下几个方面的内容，当然因为行业和工作内容的不同会略有差异。</p><ol><li>确定目标（输入）：理解业务，明确挖掘目标</li><li>数据准备：数据采集、数据描述、数据探索、质量判定等</li><li>数据加工：提取数据、清洗数据、数据变换、特殊编码、降维、特征选择等</li><li>数据建模：模型比较、模型选择、算法应用</li><li>模型评估：交叉检验、参数调优、结果评价</li><li>模型部署（输出）：模型落地、业务改进、运营监控、报告撰写</li></ol><h3 id="数据分析相关库"><a href="#数据分析相关库" class="headerlink" title="数据分析相关库"></a>数据分析相关库</h3><p>使用 Python 从事数据科学相关的工作是一个非常棒的选择，因为 Python 整个生态圈中，有大量的成熟的用于数据科学的软件包（工具库）。而且不同于其他的用于数据科学的编程语言（如：Julia、R），Python 除了可以用于数据科学，还能做很多其他的事情，可以说 Python 语言几乎是无所不能的。</p><h4 id="三大神器"><a href="#三大神器" class="headerlink" title="三大神器"></a>三大神器</h4><ol><li><a href="https://numpy.org/">NumPy</a>：支持常见的数组和矩阵操作，通过<code>ndarray</code>类实现了对多维数组的封装，提供了操作这些数组的方法和函数集。由于 NumPy 内置了并行运算功能，当使用多核 CPU 时，Numpy会自动做并行计算。</li><li><a href="https://pandas.pydata.org/">Pandas</a>：pandas 的核心是其特有的数据结构<code>DataFrame</code>和<code>Series</code>，这使得 pandas 可以处理包含不同类型数据的表格和时间序列，这一点是NumPy的<code>ndarray</code>做不到的。使用 pandas，可以轻松顺利的加载各种形式的数据，然后对数据进行切片、切块、处理缺失值、聚合、重塑和可视化等操作。</li><li><a href="https://matplotlib.org/">Matplotlib</a>：matplotlib 是一个包含各种绘图模块的库，能够根据我们提供的数据创建高质量的图表。此外，matplotlib 还提供了 pylab 模块，这个模块包含了很多像 <a href="https://www.mathworks.com/products/matlab.html">MATLAB</a> 一样的绘图组件。</li></ol><h4 id="其他相关库"><a href="#其他相关库" class="headerlink" title="其他相关库"></a>其他相关库</h4><ol><li><a href="https://scipy.org/">SciPy</a>：完善了 NumPy 的功能，封装了大量科学计算的算法，包括线性代数、统计检验、稀疏矩阵、信号和图像处理、最优化问题、快速傅里叶变换等。</li><li><a href="https://seaborn.pydata.org/">Seaborn</a>：seaborn 是基于 matplotlib 的图形可视化工具，直接使用 matplotlib 虽然可以定制出漂亮的统计图表，但是总体来说还不够简单方便，seaborn 相当于是对 matplotlib 做了封装，让用户能够以更简洁有效的方式做出各种有吸引力的统计图表。</li><li><a href="https://scikit-learn.org/">Scikit-learn</a>：scikit-learn 最初是 SciPy 的一部分，提供了大量机器学习可能用到的工具，包括数据预处理、监督学习（分类、回归）、无监督学习（聚类）、模式选择、交叉检验等。</li><li><a href="https://www.statsmodels.org/stable/index.html">Statsmodels</a>：包含了经典统计学和经济计量学算法的库。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>67.环境准备</title>
      <link href="/2024/07/01/67.huan-jing-zhun-bei/"/>
      <url>/2024/07/01/67.huan-jing-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>如果希望快速开始使用 Python 处理数据科学相关的工作，建议大家直接安装 Anaconda，然后使用 Anaconda 中集成的 Notebook 或 JupyterLab 工具来编写代码。因为对于新手来说，先安装官方的 Python 解释器，再逐个安装工作中会使用到的三方库文件会比较麻烦，尤其是在 Windows 环境下，经常会因为构建工具或 DLL 文件的缺失导致安装失败，而一般新手也很难根据错误提示信息采取正确的解决措施，容易产生严重的挫败感。如果计算机上已经有 Python 解释器环境了，也可以直接使用 Python 的包管理工具 pip 安装 Jupyter，再根据实际工作的需要安装三方库，这种方式适合有一定经验的用户。</p><h3 id="安装和使用-Anaconda"><a href="#安装和使用-Anaconda" class="headerlink" title="安装和使用 Anaconda"></a>安装和使用 Anaconda</h3><p>对于个人用户来说，可以从 Anaconda 的<a href="https://www.anaconda.com/">官方网站</a>下载它的“个人版（Individual Edition）”安装程序，安装完成后，你的计算机上不仅拥有了 Python 环境和 Spyder（类似于 PyCharm 的集成开发工具），还拥有了与数据科学工作相关的近200个工具包，包括我们上面提到 Python 数据分析三大神器。除此之外，Anaconda 还提供了一个名为 conda 的包管理工具，通过这个工具不仅可以管理 Python 的工具包，还可以用于创建运行 Python 程序的虚拟环境。</p><img src="res/download-anaconda.png" style="zoom:50%;"><p>如上图所示，可以通过 Anaconda 官网提供的下载链接选择适合自己操作系统的安装程序，建议大家选择图形化的安装程序，下载完成后双击安装程序开始安装。安装过程基本使用默认设置即可，完成安装后，macOS 用户可以在“应用程序”或“启动台”中找到名为“Anaconda-Navigator”的应用程序，运行该程序可以看到如下所示的界面，我们可以在这里选择需要执行的操作。</p><img src="res/anaconda_navigator.png" style="zoom:50%;"><p>对于 Windows 用户，建议按照安装向导的提示和推荐的选项来安装 Anaconda（除了安装路径，基本也没有什么需要选择的），安装完成后可以在“开始菜单”中找到“Anaconda3”。</p><blockquote><p><strong>提示</strong>：可以选择 Miniconda 作为 Anaconda 的替代品，Miniconda 只会安装 Python 解释器环境和一些必要的工具，其他的三方库由用户自行选择安装。<strong>其实我个人并不喜欢 Anaconda，因为它是给小白用户使用的，我们有了 Python 环境以后完全可以按照自己的意愿来安装需要的三方库</strong>。</p></blockquote><h4 id="conda命令"><a href="#conda命令" class="headerlink" title="conda命令"></a>conda命令</h4><p>对于非新手用户，如果希望使用 conda 工具来管理依赖项或者创建项目的虚拟环境，可以在终端或命令行提示符中使用 conda 命令。Windows 用户可以在“开始菜单”中找到“Anaconda3”，然后点击“Anaconda Prompt”或“Anaconda PowerShell”来启动支持 conda 的命令行提示符。新手用户如果想创建新的虚拟环境或管理三方库（依赖项），建议直接使用“Anaconda-Navigator”中的“Environments”，通过可视化的方式对虚拟环境和依赖项进行管理。</p><ol><li><p>版本和帮助信息。</p><ul><li>查看版本：<code>conda -V</code>或<code>conda --version</code></li><li>获取帮助：<code>conda -h</code>或<code>conda --help</code></li><li>相关信息：<code>conda list</code></li></ul></li><li><p>虚拟环境相关。</p><ul><li>显示所有虚拟环境：<code>conda env list</code></li><li>创建虚拟环境：<code>conda create --name venv</code></li><li>指定 Python 版本创建虚拟环境：<code>conda create --name venv python=3.7</code></li><li>指定 Python 版本创建虚拟环境并安装指定依赖项：<code>conda create --name venv python=3.7 numpy pandas</code></li><li>通过克隆现有虚拟环境的方式创建虚拟环境：<code>conda create --name venv2 --clone venv</code></li><li>分享虚拟环境并重定向到指定的文件中：<code>conda env export &gt; environment.yml</code></li><li>通过分享的虚拟环境文件创建虚拟环境：<code>conda env create -f environment.yml</code></li><li>激活虚拟环境：<code>conda activate venv</code></li><li>退出虚拟环境：<code>conda deactivate</code></li><li>删除虚拟环境：<code>conda remove --name venv --all</code></li></ul><blockquote><p><strong>说明</strong>：上面的命令中，<code>venv</code>和<code>venv2</code>是虚拟环境文件夹的名字，可以将其替换为自己喜欢的名字，但是<strong>强烈建议</strong>使用英文且不要有特殊字符。</p></blockquote></li><li><p>包（三方库或工具）管理。</p><ul><li>查看已经安装的包：<code>conda list</code></li><li>搜索指定的包：<code>conda search matplotlib</code></li><li>安装指定的包：<code>conda install matplotlib</code></li><li>更新指定的包：<code>conda update matplotlib</code></li><li>移除指定的包：<code>conda remove matplotlib</code></li></ul><blockquote><p><strong>说明</strong>：在搜索、安装和更新软件包时，默认会连接到官方网站进行操作，如果觉得速度不给力，可以将默认的官方网站替换为国内的镜像网站，推荐使用清华大学的开源镜像网站。将默认源更换为国内镜像的命令是：<code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code>和<code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</code>。如果需要换回默认源，可以使用命令<code>conda config --remove-key channels</code>。</p></blockquote></li></ol><h3 id="安装和使用JupyterLab"><a href="#安装和使用JupyterLab" class="headerlink" title="安装和使用JupyterLab"></a>安装和使用JupyterLab</h3><h4 id="安装和启动"><a href="#安装和启动" class="headerlink" title="安装和启动"></a>安装和启动</h4><p>如果已经安装了 Anaconda，可以按照上面所说的方式在“Anaconda-Navigator”中直接启动 Notebook 或 JupyterLab。按照官方的说法，JupyterLab 是下一代的 Notebook，提供了更友好的界面和更强大的功能，我们也推荐大家使用 JupyterLab。Windows 用户也可以在开始菜单中打开“Anaconda Prompt”或“Anaconda PowerShell”，由于已经激活了 Anaconda 默认的虚拟环境，只需要输入<code>jupyter lab</code>命令来启动JupyterLab。macOS 系统在安装 Anaconda以后，每次打开终端时会自动激活 Anaconda 默认的虚拟环境，也是通过输入<code>jupyter lab</code>命令就可以启动JupyterLab。</p><p>对于安装了 Python 环境但是没有安装 Anaconda 的用户，可以用 Python 的包管理工具<code>pip</code>来安装 JupyterLab，安装成功后在终端或命令行提示符中执行<code>jupyter lab</code>命令来启动 JupyterLab，如下所示。</p><p>安装 JupyterLab：</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install jupyterlab</code></pre><p>安装 Python 数据分析三大神器：</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install numpy pandas matplotlib</code></pre><p>启动 JupyterLab：</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">jupyter lab</code></pre><p>JupyterLab 是基于网页的用于交互计算的应用程序，可以用于代码开发、文档撰写、代码运行和结果展示。简单的说，你可以在网页中直接<strong>编写代码</strong>和<strong>运行代码</strong>，代码的运行结果也会直接在代码块下方进行展示。如在编写代码的过程中需要编写说明文档，可在同一个页面中使用 Markdown 格式进行编写，而且可以直接看到渲染后的效果。此外，Notebook 的设计初衷是提供一个能够支持多种编程语言的工作环境，目前它能够支持超过40种编程语言，包括 Python、R、Julia、Scala 等。</p><p>首先，我们可以创建一个用于书写 Python 代码的 Notebook，如下图所示。</p><img src="res/JupyterLab_1.png" style="zoom:50%;"><p>接下来，我们就可以编写代码、撰写文档和运行程序啦，如下图所示。</p><img src="res/JupyterLab_2.png" style="zoom:50%;"><h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><p>如果使用 Python 做工程化的项目开发，PyCharm 肯定是最好的选择，它提供了一个集成开发环境应该具有的所有功能，尤其是智能提示、代码补全、自动纠错这类功能会让开发人员感到非常舒服。如果使用 Python 做数据科学相关的工作，JupyterLab 并不比 PyCharm 逊色，在数据和图表展示方面 JupyterLab 更加优秀。为此，JetBrains 公司还专门开发了一个对标 JupyterLab 的新工具 DataSpell，有兴趣的读者可以自行了解。下面我们为大家介绍一些 JupyterLab 的使用技巧，希望能够帮助大家提升工作效率。</p><ol><li><p>自动补全。在使用 JupyterLab 编写代码时，按<code>Tab</code>键会获得代码提示和补全功能。</p></li><li><p>获得帮助。如果希望了解一个对象（如变量、类、函数等）的相关信息或使用方式，可以在对象后面使用<code>?</code>并运行代码， 窗口下方会显示出对应的信息，帮助我们了解该对象，如下所示。</p> <img src="res/JupyterLab_3.png" style="zoom:100%;"></li><li><p>搜索命名。如果只记得一个类或一个函数名字的一部分，可以使用通配符<code>*</code>并配合<code>?</code>进行搜索，如下所示。</p> <img src="res/JupyterLab_4.png" style="zoom:100%;"></li><li><p>调用命令。可以在 JupyterLab 中使用<code>!</code>后面跟系统命令的方式来执行系统命令。</p></li><li><p>魔法指令。JupyterLab 中有很多非常有趣且有用的魔法指令，例如可以使用<code>%timeit</code>测试语句的执行时间，可以使用<code>%pwd</code>查看当前工作目录等。如果想查看所有的魔法指令，可以使用<code>%lsmagic</code>，如果了解魔法指令的用法，可以使用<code>%magic</code>来查看，如下图所示。</p> <img src="res/JupyterLab_5.png" style="zoom:100%;"><p> 常用的魔法指令有：</p><table><thead><tr><th>魔法指令</th><th>功能说明</th></tr></thead><tbody><tr><td><code>%pwd</code></td><td>查看当前工作目录</td></tr><tr><td><code>%ls</code></td><td>列出当前或指定文件夹下的内容</td></tr><tr><td><code>%cat</code></td><td>查看指定文件的内容</td></tr><tr><td><code>%hist</code></td><td>查看输入历史</td></tr><tr><td><code>%matplotlib inline</code></td><td>设置在页面中嵌入matplotlib输出的统计图表</td></tr><tr><td><code>%config Inlinebackend.figure_format=&#39;svg&#39;</code></td><td>设置统计图表使用SVG格式（矢量图）</td></tr><tr><td><code>%run</code></td><td>运行指定的程序</td></tr><tr><td><code>%load</code></td><td>加载指定的文件到单元格中</td></tr><tr><td><code>%quickref</code></td><td>显示IPython的快速参考</td></tr><tr><td><code>%timeit</code></td><td>多次运行代码并统计代码执行时间</td></tr><tr><td><code>%prun</code></td><td>用<code>cProfile.run</code>运行代码并显示分析器的输出</td></tr><tr><td><code>%who</code> &#x2F; <code>%whos</code></td><td>显示命名空间中的变量</td></tr><tr><td><code>%xdel</code></td><td>删除一个对象并清理所有对它的引用</td></tr></tbody></table></li><li><p>快捷键。JupyterLab 中的很多操作可以通过快捷键来实现，使用快捷键可以提升工作效率。JupyterLab 的快捷键可以分为命令模式下的快捷键和编辑模式下的快捷键，所谓编辑模式就是处于输入代码或撰写文档状态的模式，在编辑模式下按<code>Esc</code>可以回到命令模式，在命令模式下按<code>Enter</code>可以进入编辑模式。</p><p> 命令模式下的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td><code>Alt</code> + <code>Enter</code></td><td>运行当前单元格并在下面插入新的单元格</td></tr><tr><td><code>Shift</code> + <code>Enter</code></td><td>运行当前单元格并选中下方的单元格</td></tr><tr><td><code>Ctrl</code> + <code>Enter</code></td><td>运行当前单元格</td></tr><tr><td><code>j</code> &#x2F; <code>k</code>、<code>Shift</code> + <code>j</code> &#x2F; <code>Shift</code> + <code>k</code></td><td>选中下方&#x2F;上方单元格、连续选中下方&#x2F;上方单元格</td></tr><tr><td><code>a</code> &#x2F; <code>b</code></td><td>在下方&#x2F;上方插入新的单元格</td></tr><tr><td><code>c</code> &#x2F; <code>x</code></td><td>复制单元格 &#x2F; 剪切单元格</td></tr><tr><td><code>v</code> &#x2F; <code>Shift</code> + <code>v</code></td><td>在下方&#x2F;上方粘贴单元格</td></tr><tr><td><code>dd</code> &#x2F; <code>z</code></td><td>删除单元格 &#x2F; 恢复删除的单元格</td></tr><tr><td><code>Shift</code> + <code>l</code></td><td>显示或隐藏当前&#x2F;所有单元格行号</td></tr><tr><td><code>Space</code> &#x2F; <code>Shift</code> + <code>Space</code></td><td>向下&#x2F;向上滚动页面</td></tr></tbody></table><p> 编辑模式下的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td><code>Shift</code> + <code>Tab</code></td><td>获得提示信息</td></tr><tr><td><code>Ctrl</code> + <code>]</code>&#x2F; <code>Ctrl</code> + <code>[</code></td><td>增加&#x2F;减少缩进</td></tr><tr><td><code>Alt</code> + <code>Enter</code></td><td>运行当前单元格并在下面插入新的单元格</td></tr><tr><td><code>Shift</code> + <code>Enter</code></td><td>运行当前单元格并选中下方的单元格</td></tr><tr><td><code>Ctrl</code> + <code>Enter</code></td><td>运行当前单元格</td></tr><tr><td><code>Ctrl</code> + <code>Left</code> &#x2F; <code>Right</code></td><td>光标移到行首&#x2F;行尾</td></tr><tr><td><code>Ctrl</code> + <code>Up</code> &#x2F; <code>Down</code></td><td>光标移动代码开头&#x2F;结尾处</td></tr><tr><td><code>Up</code> &#x2F; <code>Down</code></td><td>光标上移&#x2F;下移一行或移到上&#x2F;下一个单元格</td></tr></tbody></table><blockquote><p><strong>说明</strong>：对于 macOS 系统可以将<code>Alt</code>键替换成<code>Option</code>键，将<code>Ctrl</code>键替换成<code>Command</code>键。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>68.NumPy的应用-1</title>
      <link href="/2024/07/01/68.numpy-de-ying-yong-1/"/>
      <url>/2024/07/01/68.numpy-de-ying-yong-1/</url>
      
        <content type="html"><![CDATA[<h2 id="NumPy的应用-1"><a href="#NumPy的应用-1" class="headerlink" title="NumPy的应用-1"></a>NumPy的应用-1</h2><p>Numpy 是一个开源的 Python 科学计算库，<strong>用于快速处理任意维度的数组</strong>。Numpy <strong>支持常见的数组和矩阵操作</strong>，对于同样的数值计算任务，使用 NumPy 不仅代码要简洁的多，而且 NumPy 在性能上也远远优于原生 Python，至少是一到两个数量级的差距，而且数据量越大，NumPy 的优势就越明显。</p><p>NumPy 最为核心的数据类型是<code>ndarray</code>，使用<code>ndarray</code>可以处理一维、二维和多维数组，该对象相当于是一个快速而灵活的大数据容器。NumPy 底层代码使用 C 语言编写，解决了 GIL 的限制，<code>ndarray</code>在存取数据的时候，数据与数据的地址都是连续的，这确保了可以进行高效率的批量操作，性能上远远优于 Python 中的<code>list</code>；另一方面<code>ndarray</code>对象提供了更多的方法来处理数据，尤其获取数据统计特征的方法，这些方法也是 Python 原生的<code>list</code>没有的。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>启动 JupyterLab</p> <pre class="language-Bash" data-language="Bash"><code class="language-Bash">jupyter lab</code></pre><blockquote><p><strong>提示</strong>：在启动 JupyterLab 之前，建议先安装好数据分析相关依赖项，包括之前提到的三大神器以及相关依赖项。如果使用 Anaconda，则无需单独安装，可以通过 Anaconda 的 Navigator 来启动。</p></blockquote></li><li><p>导入</p> <pre class="language-Python" data-language="Python"><code class="language-Python">import numpy as npimport pandas as pdimport matplotlib.pyplot as plt</code></pre><blockquote><p><strong>说明</strong>：如果已经启动了 JupyterLab 但尚未安装相关依赖库，例如尚未安装<code>numpy</code>，可以在单元格中输入<code>%pip install numpy</code>并运行该单元格来安装 NumPy。当然，我们也可以在单元格中输入<code>%pip install numpy pandas matplotlib</code>把 Python 数据分析三个核心的三方库都安装上。注意上面的代码，我们不仅导入了 NumPy，还将 pandas 和 matplotlib 库一并导入了。</p></blockquote></li></ol><h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><p>创建<code>ndarray</code>对象有很多种方法，下面我们介绍一些常用的方法。</p><p>方法一：使用<code>array</code>函数，通过<code>list</code>创建数组对象</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array1 &#x3D; np.array([1, 2, 3, 4, 5])array1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 2, 3, 4, 5])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2 &#x3D; np.array([[1, 2, 3], [4, 5, 6]])array2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 2, 3],       [4, 5, 6]])</code></pre><p>方法二：使用<code>arange</code>函数，指定取值范围和跨度创建数组对象</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array3 &#x3D; np.arange(0, 20, 2)array3</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])</code></pre><p>方法三：使用<code>linspace</code>函数，用指定范围和元素个数创建数组对象，生成等差数列</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array4 &#x3D; np.linspace(-1, 1, 11)array4</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([-1. , -0.8, -0.6, -0.4, -0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ])</code></pre><p>方法四：使用<code>logspace</code>函数，生成等比数列</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array5 <span class="token operator">=</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>array5</code></pre><blockquote><p><strong>注意</strong>：等比数列的起始值是$2^1$，等比数列的终止值是$2^{10}$，<code>num</code>是元素的个数，<code>base</code>就是底数。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">array([   2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.,  512., 1024.])</code></pre><p>方法五：通过<code>fromstring</code>函数从字符串提取数据创建数组对象</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array6 &#x3D; np.fromstring(&#39;1, 2, 3, 4, 5&#39;, sep&#x3D;&#39;,&#39;, dtype&#x3D;&#39;i8&#39;)array6 </code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 2, 3, 4, 5])</code></pre><p>方法六：通过<code>fromiter</code>函数从生成器（迭代器）中获取数据创建数组对象</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(how_many):    a, b &#x3D; 0, 1    for _ in range(how_many):        a, b &#x3D; b, a + b        yield agen &#x3D; fib(20)array7 &#x3D; np.fromiter(gen, dtype&#x3D;&#39;i8&#39;)array7</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([   1,    1,    2,    3,    5,    8,   13,   21,   34,   55,   89,        144,  233,  377,  610,  987, 1597, 2584, 4181, 6765])</code></pre><p>方法七：使用<code>numpy.random</code>模块的函数生成随机数创建数组对象</p><p>产生10个$[0, 1)$范围的随机小数，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array8 &#x3D; np.random.rand(10)array8</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([0.45556132, 0.67871326, 0.4552213 , 0.96671509, 0.44086463,       0.72650875, 0.79877188, 0.12153022, 0.24762739, 0.6669852 ])</code></pre><p>产生10个$[1, 100)$范围的随机整数，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array9 &#x3D; np.random.randint(1, 100, 10)array9</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([29, 97, 87, 47, 39, 19, 71, 32, 79, 34])</code></pre><p>产生20个$\small{\mu&#x3D;50}$，$\small{\sigma&#x3D;10}$的正态分布随机数，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array10 &#x3D; np.random.normal(50, 10, 20)array10</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([55.04155586, 46.43510797, 20.28371158, 62.67884053, 61.23185964,       38.22682148, 53.17126151, 43.54741592, 36.11268017, 40.94086676,       63.27911699, 46.92688903, 37.1593374 , 67.06525656, 67.47269463,       23.37925889, 31.45312239, 48.34532466, 55.09180924, 47.95702787])</code></pre><p>产生$[0, 1)$范围的随机小数构成的3行4列的二维数组，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array11 &#x3D; np.random.rand(3, 4)array11</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[0.54017809, 0.46797771, 0.78291445, 0.79501326],       [0.93973783, 0.21434806, 0.03592874, 0.88838892],       [0.84130479, 0.3566601 , 0.99935473, 0.26353598]])</code></pre><p>产生$[1, 100)$范围的随机整数构成的三维数组，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array12 &#x3D; np.random.randint(1, 100, (3, 4, 5))array12</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[[94, 26, 49, 24, 43],        [27, 27, 33, 98, 33],        [13, 73,  6,  1, 77],        [54, 32, 51, 86, 59]],       [[62, 75, 62, 29, 87],        [90, 26,  6, 79, 41],        [31, 15, 32, 56, 64],        [37, 84, 61, 71, 71]],       [[45, 24, 78, 77, 41],        [75, 37,  4, 74, 93],        [ 1, 36, 36, 60, 43],        [23, 84, 44, 89, 79]]])</code></pre><p>方法八：创建全0、全1或指定元素的数组</p><p>使用<code>zeros</code>函数，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array13 &#x3D; np.zeros((3, 4))array13</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[0., 0., 0., 0.],       [0., 0., 0., 0.],       [0., 0., 0., 0.]])</code></pre><p>使用<code>ones</code>函数，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array14 &#x3D; np.ones((3, 4))array14</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1., 1., 1., 1.],       [1., 1., 1., 1.],       [1., 1., 1., 1.]])</code></pre><p>使用<code>full</code>函数，代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array15 &#x3D; np.full((3, 4), 10)array15</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[10, 10, 10, 10],       [10, 10, 10, 10],       [10, 10, 10, 10]])</code></pre><p>方法九：使用<code>eye</code>函数创建单位矩阵</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">np.eye(4)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1., 0., 0., 0.],       [0., 1., 0., 0.],       [0., 0., 1., 0.],       [0., 0., 0., 1.]])</code></pre><p>方法十：读取图片获得对应的三维数组</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array16 &#x3D; plt.imread(&#39;res&#x2F;guido.jpg&#39;)array16</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[[ 36,  33,  28],        [ 36,  33,  28],        [ 36,  33,  28],        ...,        [ 32,  31,  29],        [ 32,  31,  27],        [ 31,  32,  26]],       [[ 37,  34,  29],        [ 38,  35,  30],        [ 38,  35,  30],        ...,        [ 31,  30,  28],        [ 31,  30,  26],        [ 30,  31,  25]],       [[ 38,  35,  30],        [ 38,  35,  30],        [ 38,  35,  30],        ...,        [ 30,  29,  27],        [ 30,  29,  25],        [ 29,  30,  25]],       ...,       [[239, 178, 123],        [237, 176, 121],        [235, 174, 119],        ...,        [ 78,  68,  56],        [ 75,  67,  54],        [ 73,  65,  52]],       [[238, 177, 120],        [236, 175, 118],        [234, 173, 116],        ...,        [ 82,  70,  58],        [ 78,  68,  56],        [ 75,  66,  51]],       [[238, 176, 119],        [236, 175, 118],        [234, 173, 116],        ...,        [ 84,  70,  61],        [ 81,  69,  57],        [ 79,  67,  53]]], dtype&#x3D;uint8)</code></pre><blockquote><p><strong>说明</strong>：上面的代码读取了当前路径下<code>res</code>目录中名为<code>guido.jpg</code> 的图片文件，计算机系统中的图片通常由若干行若干列的像素点构成，而每个像素点又是由红绿蓝三原色构成的，刚好可以用三维数组来表示。读取图片用到了<code>matplotlib</code>库的<code>imread</code>函数。</p></blockquote><h3 id="数组对象的属性"><a href="#数组对象的属性" class="headerlink" title="数组对象的属性"></a>数组对象的属性</h3><p><code>size</code>属性：获取数组元素个数。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array17 &#x3D; np.arange(1, 100, 2)array18 &#x3D; np.random.rand(3, 4)print(array16.size)print(array17.size)print(array18.size)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">11250005012</code></pre><p><code>shape</code>属性：获取数组的形状。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array16.shape)print(array17.shape)print(array18.shape)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">(750, 500, 3)(50,)(3, 4)</code></pre><p><code>dtype</code>属性：获取数组元素的数据类型。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array16.dtype)print(array17.dtype)print(array18.dtype)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">uint8int64float64</code></pre><p><code>ndarray</code>对象元素的数据类型可以参考如下所示的表格。</p><img src="res/dtype.jpg" style="zoom:50%;"><p><code>ndim</code>属性：获取数组的维度。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array16.ndim)print(array17.ndim)print(array18.ndim)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">312</code></pre><p><code>itemsize</code>属性：获取数组单个元素占用内存空间的字节数。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array16.itemsize)print(array17.itemsize)print(array18.itemsize)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">188</code></pre><p><code>nbytes</code>属性：获取数组所有元素占用内存空间的字节数。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array16.nbytes)print(array17.nbytes)print(array18.nbytes)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">112500040096</code></pre><h3 id="数组的索引运算"><a href="#数组的索引运算" class="headerlink" title="数组的索引运算"></a>数组的索引运算</h3><p>和 Python 中的列表类似，NumPy 的<code>ndarray</code>对象可以进行索引和切片操作，通过索引可以获取或修改数组中的元素，通过切片操作可以取出数组的一部分，我们把切片操作也称为切片索引。</p><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><p>类似于 Python 中<code>list</code>类型的索引运算。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19 &#x3D; np.arange(1, 10)print(array19[0], array19[array19.size - 1])print(array19[-array20.size], array19[-1])</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">1 91 9</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20 &#x3D; np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])array20[2]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([7, 8, 9])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array20[0][0])print(array20[-1][-1])</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">19</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array20[1][1])print(array20[1, 1])</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">55</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[1][1] &#x3D; 10array20</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[ 1,  2,  3],       [ 4, 10,  6],       [ 7,  8,  9]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[1] &#x3D; [10, 11, 12]array20</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[ 1,  2,  3],       [10, 11, 12],       [ 7,  8,  9]])</code></pre><h4 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h4><p>切片索引是形如<code>[开始索引:结束索引:跨度]</code>的语法，通过指定<strong>开始索引</strong>（默认值无穷小）、<strong>结束索引</strong>（默认值无穷大）和<strong>跨度</strong>（默认值1），从数组中取出指定部分的元素并构成新的数组。因为开始索引、结束索引和步长都有默认值，所以它们都可以省略，如果不指定步长，第二个冒号也可以省略。一维数组的切片运算跟 Python 中的<code>list</code>类型的切片非常类似，此处不再赘述，二维数组的切片可以参考下面的代码，相信非常容易理解。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[:2, 1:]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[ 2,  3],       [11, 12]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[2, :]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([7, 8, 9])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[2:, :]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[7, 8, 9]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[:, :2]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[ 1,  2],       [10, 11],       [ 7,  8]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[::2, ::2]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 3],       [7, 9]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[::-2, ::-2]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[9, 7],       [3, 1]])</code></pre><p>关于数组的索引和切片运算，大家可以通过下面的两张图来增强印象，这两张图来自<a href="https://item.jd.com/12398725.html">《利用Python进行数据分析》</a>一书，它是 pandas 库的作者 Wes McKinney 撰写的 Python 数据分析领域的经典教科书，有兴趣的读者可以购买和阅读原书。</p><p>图1：二维数组的普通索引</p><img src="res/ndarray-index.png" style="zoom:60%;"><p>图2：二维数组的切片索引</p><img src="res/ndarray-slice.png" style="zoom:60%;"><h4 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h4><p>花式索引是用保存整数的数组充当一个数组的索引，这里所说的数组可以是 NumPy 的<code>ndarray</code>，也可以是 Python 中<code>list</code>、<code>tuple</code>等可迭代类型，可以使用正向或负向索引。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19[[0, 1, 1, -1, 4, -1]]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 2, 2, 9, 5, 9])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[[0, 2]]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 2, 3],       [7, 8, 9]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[[0, 2], [1, 2]]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([2, 9])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[[0, 2], 1]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([2, 8])</code></pre><h4 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h4><p>布尔索引就是通过保存布尔值的数组充当一个数组的索引，布尔值为<code>True</code>的元素保留，布尔值为<code>False</code>的元素不会被选中。布尔值的数组可以手动构造，也可以通过关系运算来产生。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19[[True, True, False, False, True, False, False, True, True]]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 2, 5, 8, 9])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19 &gt; 5</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([False, False, False, False, False,  True,  True,  True,  True])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">~(array19 &gt; 5)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([ True,  True,  True,  True,  True, False, False, False, False])</code></pre><blockquote><p><strong>说明</strong>：<code>~</code>运算符可以对布尔数组中的布尔值进行逻辑取反，也就是原来的<code>True</code>会变成<code>False</code>，原来的<code>False</code>会变成<code>True</code>。</p></blockquote><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19[array20 &gt; 5]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([6, 7, 8, 9])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19 % 2 &#x3D;&#x3D; 0</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([False,  True, False,  True, False,  True, False,  True, False])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19[array20 % 2 &#x3D;&#x3D; 0]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([2, 4, 6, 8])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">(array19 &gt; 5) &amp; (array19 % 2 &#x3D;&#x3D; 0)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([False, False, False, False, False,  True, False,  True, False])</code></pre><blockquote><p><strong>说明</strong>：<code>&amp;</code>运算符可以作用于两个布尔数组，如果两个数组对应元素都是<code>True</code>，那么运算的结果就是<code>True</code>，否则就是<code>False</code>，该运算符的运算规则类似于 Python 中的 <code>and</code> 运算符，只不过作用的对象是两个布尔数组。</p></blockquote><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19[(array19 &gt; 5) &amp; (array19 % 2 &#x3D;&#x3D; 0)]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([6, 8])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array19[(array19 &gt; 5) | (array19 % 2 &#x3D;&#x3D; 0)]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([2, 4, 6, 7, 8, 9])</code></pre><blockquote><p><strong>说明</strong>：<code>|</code>运算符可以作用于两个布尔数组，如果两个数组对应元素都是<code>False</code>，那么运算的结果就是<code>False</code>，否则就是<code>True</code>，该运算符的运算规则类似于 Python 中的 <code>or</code> 运算符，只不过作用的对象是两个布尔数组。</p></blockquote><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array20[array21 % 2 !&#x3D; 0]</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 3, 5, 7, 9])</code></pre><p>关于索引运算需要说明的是，切片索引虽然创建了新的数组对象，但是新数组和原数组共享了数组中的数据，简单的说，无论你通过新数组对象或原数组对象修改数组中的数据，修改的其实是内存中的同一块数据。花式索引和布尔索引也会创建新的数组对象，而且新数组复制了原数组的元素，新数组和原数组并不是共享数据的关系，这一点可以查看数组对象的<code>base</code>属性，有兴趣的读者可以自行探索。</p><h3 id="案例：通过数组切片处理图像"><a href="#案例：通过数组切片处理图像" class="headerlink" title="案例：通过数组切片处理图像"></a>案例：通过数组切片处理图像</h3><p>学习基础知识总是比较枯燥且没有成就感的，所以我们还是来个案例为大家演示下上面学习的数组索引和切片操作到底有什么用。前面我们说到过，可以用三维数组来表示图像，那么通过图像对应的三维数组进行操作，就可以实现对图像的处理，如下所示。</p><p>读入图片创建三维数组对象。</p><pre class="language-Python" data-language="Python"><code class="language-Python">guido_image &#x3D; plt.imread(&#39;guido.jpg&#39;)plt.imshow(guido_image)</code></pre><img src="res/guido_slice_1.png" style="zoom:65%;"><p>对数组的0轴进行反向切片，实现图像的垂直翻转。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.imshow(guido_image[::-1])</code></pre><img src="res/guido_slice_2.png" style="zoom:65%;"><p>对数组的1轴进行反向切片，实现图像的水平翻转。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.imshow(guido_image[:,::-1])</code></pre><img src="res/guido_slice_3.png" style="zoom:65%;"><p>通过切片操作实现抠图，将吉多大叔的头抠出来。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.imshow(guido_image[30:350, 90:300])</code></pre><img src="res/guido_slice_4.png" style="zoom:65%;"><p>通过切片操作实现降采样。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.imshow(guido_image[::10, ::10])</code></pre><img src="res/guido_slice_5.png" style="zoom:65%;">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69.NumPy的应用-2</title>
      <link href="/2024/07/01/69.numpy-de-ying-yong-2/"/>
      <url>/2024/07/01/69.numpy-de-ying-yong-2/</url>
      
        <content type="html"><![CDATA[<h2 id="NumPy的应用-2"><a href="#NumPy的应用-2" class="headerlink" title="NumPy的应用-2"></a>NumPy的应用-2</h2><h3 id="数组对象的方法"><a href="#数组对象的方法" class="headerlink" title="数组对象的方法"></a>数组对象的方法</h3><h4 id="获取描述统计信息"><a href="#获取描述统计信息" class="headerlink" title="获取描述统计信息"></a>获取描述统计信息</h4><p>描述统计信息主要包括数据的集中趋势、离散程度和频数分析等，其中集中趋势主要看均值和中位数，离散程度可以看极值、方差、标准差等，详细的内容大家可以阅读<a href="https://zhuanlan.zhihu.com/p/595273755">《统计思维系列课程01：解读数据》</a>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">array1 &#x3D; np.random.randint(1, 100, 10)array1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([46, 51, 15, 42, 53, 71, 20, 62,  6, 94])</code></pre><p><strong>计算总和、均值和中位数。</strong></p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array1.sum())print(np.sum(array1))print(array1.mean())print(np.mean(array1))print(np.median(array1))print(np.quantile(array1, 0.5))</code></pre><blockquote><p><strong>说明</strong>：上面代码中的<code>mean</code>、<code>median</code>和<code>quantile</code>分别是 NumPy 中计算算术平均值、中位数和分位数的函数，其中<code>quantitle</code>函数的第二个参数设置为0.5表示计算50%分位数，也就是中位数。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">46046046.046.048.548.5</code></pre><p><strong>极值、全距和四分位距离。</strong></p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array1.max())print(np.amax(array1))print(array1.min())print(np.amin(array1))print(array1.ptp())print(np.ptp(array1))q1, q3 &#x3D; np.quantile(array1, [0.25, 0.75])print(q3 - q1)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">949466888834.25</code></pre><p><strong>方差、标准差和变异系数。</strong></p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array1.var())print(np.var(array1))print(array1.std())print(np.std(array1))print(array1.std() &#x2F; array1.mean())</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">651.2651.225.5186206523785325.518620652378530.5547526228777941</code></pre><p><strong>绘制箱线图。</strong></p><p>箱线图又称为盒须图，是显示一组数据分散情况的统计图，因形状如箱子而得名。 它主要用于反映原始数据分布的特征，还可以进行多组数据分布特征的比较。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.boxplot(array1, showmeans&#x3D;True)plt.ylim([-20, 120])plt.show()</code></pre><p>输出：</p><img src="res/box_plot_1.png" style="zoom:40%;"><p>值得注意的是，对于二维或更高维的数组，在获取描述统计信息时，可以通过名为<code>axis</code>的参数指定均值、方差等运算是沿着哪一个轴来执行，<code>axis</code>参数不同，执行的结果可能是大相径庭的，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2 &#x3D; np.random.randint(60, 101, (5, 3))array2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[72, 64, 73],       [61, 73, 61],       [76, 85, 77],       [97, 88, 90],       [63, 93, 82]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.mean()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">77.0</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.mean(axis&#x3D;0)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([73.8, 80.6, 76.6])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.mean(axis&#x3D;1)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([69.66666667, 65.        , 79.33333333, 91.66666667, 79.33333333])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.max(axis&#x3D;0)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([97, 93, 90])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.max(axis&#x3D;1)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([73, 73, 85, 97, 93])</code></pre><p>再看看绘制箱线图，对于二维数组每一列都会产生一个统计图形，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.boxplot(array2, showmeans&#x3D;True)plt.ylim([-20, 120])plt.show()</code></pre><p>输出：</p><img src="res/box_plot_2.png" style="zoom:75%;"><blockquote><p><strong>说明</strong>：箱线图中的小圆圈用来表示离群点，也就是大于$\small{Q_3 + 1.5 \times IQR}$或小于$\small{Q_1 - 1.5 \times IQR}$的值。公式中的常量<code>1.5</code>可以通过绘制箱线图的<code>boxplot</code>函数的<code>whis</code>参数进行修改，常用的值是<code>1.5</code>和<code>3</code>，修改为<code>3</code>通常是为了标识出极度离群点。</p></blockquote><p>需要说明的是，NumPy 的数组对象并没有提供计算几何平均值、调和平均值、去尾平均值等的方法，如果有这方面的需求，可以使用名为 scipy 的三方库，它的<code>stats</code>模块中提供了这些函数。此外，该模块还提供了计算众数、变异系数、偏态、峰度的函数，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 算术平均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>gmean<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 几何平均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>hmean<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 调和平均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>tmean<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 去尾平均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>variation<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 变异系数</span><span class="token keyword">print</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>skew<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># 偏态系数</span><span class="token keyword">print</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>kurtosis<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 峰度系数</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">46.036.2234954882559924.49721953082549745.00.55475262287779410.11644192634527782-0.7106251396024126</code></pre><h4 id="其他相关方法概述"><a href="#其他相关方法概述" class="headerlink" title="其他相关方法概述"></a>其他相关方法概述</h4><ol><li><p><code>all()</code> &#x2F; <code>any()</code>方法：判断数组是否所有元素都是<code>True</code> &#x2F; 判断数组是否有为<code>True</code>的元素。</p></li><li><p><code>astype()</code>方法：拷贝数组，并将数组中的元素转换为指定的类型。</p></li><li><p><code>reshape()</code>方法：调整数组对象的形状。</p></li><li><p><code>dump()</code>方法：保存数组到二进制文件中，可以通过 NumPy 中的<code>load()</code>函数从保存的文件中加载数据创建数组。</p><p> 代码：</p> <pre class="language-Python" data-language="Python"><code class="language-Python">array.dump(&#39;array1-data&#39;)array3 &#x3D; np.load(&#39;array1-data&#39;, allow_pickle&#x3D;True)array3</code></pre><p> 输出：</p> <pre class="language-none"><code class="language-none">array([46, 51, 15, 42, 53, 71, 20, 62,  6, 94])</code></pre></li><li><p><code>tofile()</code>方法：将数组对象写入文件中。</p><pre class="language-Python" data-language="Python"><code class="language-Python">array1.tofile(&#39;res&#x2F;array.txt&#39;, sep&#x3D;&#39;,&#39;)</code></pre></li><li><p><code>fill()</code>方法：向数组中填充指定的元素。</p></li><li><p><code>flatten()</code>方法：将多维数组扁平化为一维数组。</p><p> 代码：</p> <pre class="language-Python" data-language="Python"><code class="language-Python">array2.flatten()</code></pre><p> 输出：</p> <pre class="language-none"><code class="language-none">array([1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre></li><li><p><code>nonzero()</code>方法：返回非0元素的索引。</p></li><li><p><code>round()</code>方法：对数组中的元素做四舍五入操作。</p></li><li><p><code>sort()</code>方法：对数组进行就地排序。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array1.sort()array1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([ 6, 15, 20, 42, 46, 51, 53, 62, 71, 94])</code></pre></li><li><p><code>swapaxes()</code>和<code>transpose()</code>方法：交换数组指定的轴和转置。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.swapaxes(0, 1)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 4, 7],       [2, 5, 8],       [3, 6, 9]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">array2.transpose()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 4, 7],       [2, 5, 8],       [3, 6, 9]])</code></pre></li><li><p><code>tolist()</code>方法：将数组转成 Python 中的<code>list</code>。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(array2.tolist())print(type(array2.tolist()))</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;class &#39;list&#39;&gt;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70.NumPy的应用-3</title>
      <link href="/2024/07/01/70.numpy-de-ying-yong-3/"/>
      <url>/2024/07/01/70.numpy-de-ying-yong-3/</url>
      
        <content type="html"><![CDATA[<h2 id="NumPy的应用-3"><a href="#NumPy的应用-3" class="headerlink" title="NumPy的应用-3"></a>NumPy的应用-3</h2><h3 id="数组的运算"><a href="#数组的运算" class="headerlink" title="数组的运算"></a>数组的运算</h3><p>使用 NumPy 最为方便的是当需要对数组元素进行运算时，不用编写循环代码遍历每个元素，所有的运算都会自动的<strong>矢量化</strong>。简单的说就是，NumPy 中的数学运算和数学函数会自动作用于数组中的每个成员。</p><h4 id="数组跟标量的运算"><a href="#数组跟标量的运算" class="headerlink" title="数组跟标量的运算"></a>数组跟标量的运算</h4><p>NumPy 的数组可以跟一个数值进行加、减、乘、除、求模、求幂等运算，对应的运算会作用到数组的每一个元素上，如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[11 12 13 14 15 16 17 18 19][10 20 30 40 50 60 70 80 90]</code></pre><p>除了上述的运算，关系运算也是没有问题的，之前讲布尔索引的时候已经遇到过了。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[False False False False False  True  True  True  True][False  True False  True False  True False  True False]</code></pre><h4 id="数组跟数组的运算"><a href="#数组跟数组的运算" class="headerlink" title="数组跟数组的运算"></a>数组跟数组的运算</h4><p>NumPy 的数组跟数组也可以执行算术运算和关系运算，运算会作用于两个数组对应的元素上，这就要求两个数组的形状（<code>shape</code>属性）要相同，如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">+</span> array2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">*</span> array2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">**</span> array2<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[ 2  3  4  6  7  8 10 11 12][ 1  2  3  8 10 12 21 24 27][  1   2   3  16  25  36 343 512 729]</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">></span> array2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array1 <span class="token operator">%</span> array2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[False  True  True  True  True  True  True  True  True][ True  True  True  True False  True False False  True]</code></pre><h4 id="通用一元函数"><a href="#通用一元函数" class="headerlink" title="通用一元函数"></a>通用一元函数</h4><p>NumPy 中通用一元函数的参数是一个数组对象，函数会对数组进行元素级的处理，例如：<code>sqrt</code>函数会对数组中的每个元素计算平方根，而<code>log2</code>函数会对数组中的每个元素计算以2为底的对数，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[1.         1.41421356 1.73205081 2.         2.23606798 2.44948974 2.64575131 2.82842712 3.        ][0.         1.         1.5849625  2.         2.32192809 2.5849625 2.80735492 3.         3.169925  ]</code></pre><p><strong>表1：通用一元函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code> &#x2F; <code>fabs</code></td><td>求绝对值的函数</td></tr><tr><td><code>sqrt</code></td><td>求平方根的函数，相当于<code>array ** 0.5 </code></td></tr><tr><td><code>square</code></td><td>求平方的函数，相当于<code>array ** 2</code></td></tr><tr><td><code>exp</code></td><td>计算$e^x$的函数</td></tr><tr><td><code>log</code> &#x2F; <code>log10</code> &#x2F; <code>log2</code></td><td>对数函数（<code>e</code>为底 &#x2F; <code>10</code>为底 &#x2F; <code>2</code>为底）</td></tr><tr><td><code>sign</code></td><td>符号函数（<code>1</code> - 正数；<code>0</code> - 零；<code>-1</code> - 负数）</td></tr><tr><td><code>ceil</code> &#x2F; <code>floor</code></td><td>上取整 &#x2F;  下取整</td></tr><tr><td><code>isnan</code></td><td>返回布尔数组，NaN对应<code>True</code>，非NaN对应<code>False</code></td></tr><tr><td><code>isfinite</code> &#x2F; <code>isinf</code></td><td>判断数值是否为无穷大的函数</td></tr><tr><td><code>cos</code> &#x2F; <code>cosh</code> &#x2F; <code>sin</code></td><td>三角函数</td></tr><tr><td><code>sinh</code> &#x2F; <code>tan</code> &#x2F; <code>tanh</code></td><td>三角函数</td></tr><tr><td><code>arccos</code> &#x2F; <code>arccosh</code> &#x2F; <code>arcsin</code></td><td>反三角函数</td></tr><tr><td><code>arcsinh</code> &#x2F; <code>arctan</code> &#x2F; <code>arctanh</code></td><td>反三角函数</td></tr><tr><td><code>rint</code> &#x2F; <code>round</code></td><td>四舍五入函数</td></tr></tbody></table><h4 id="通用二元函数"><a href="#通用二元函数" class="headerlink" title="通用二元函数"></a>通用二元函数</h4><p>NumPy 中通用二元函数的参数是两个数组对象，函数会对两个数组中的对应元素进行运算，例如：<code>maximum</code>函数会对两个数组中对应的元素找最大值，而<code>power</code>函数会对两个数组中对应的元素进行求幂操作，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>array3<span class="token punctuation">,</span> array4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>array3<span class="token punctuation">,</span> array4<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[[4 5 6] [7 8 9]][[  4  25 216] [343  64   9]]</code></pre><p><strong>表2：通用二元函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>add(x, y)</code> &#x2F; <code>substract(x, y)</code></td><td>加法函数 &#x2F; 减法函数</td></tr><tr><td><code>multiply(x, y)</code> &#x2F; <code>divide(x, y)</code></td><td>乘法函数 &#x2F; 除法函数</td></tr><tr><td><code>floor_divide(x, y)</code> &#x2F; <code>mod(x, y)</code></td><td>整除函数 &#x2F; 求模函数</td></tr><tr><td><code>allclose(x, y)</code></td><td>检查数组<code>x</code>和<code>y</code>元素是否几乎相等</td></tr><tr><td><code>power(x, y)</code></td><td>数组$x$的元素$x_i$和数组$y$的元素$y_i$，计算$x_i^{y_i}$</td></tr><tr><td><code>maximum(x, y)</code> &#x2F; <code>fmax(x, y)</code></td><td>两两比较元素获取最大值 &#x2F; 获取最大值（忽略NaN）</td></tr><tr><td><code>minimum(x, y)</code> &#x2F; <code>fmin(x, y)</code></td><td>两两比较元素获取最小值 &#x2F; 获取最小值（忽略NaN）</td></tr><tr><td><code>dot(x, y)</code></td><td>点积运算（数量积，通常记为$\cdot$，用于欧几里得空间（Euclidean space））</td></tr><tr><td><code>inner(x, y)</code></td><td>内积运算（内积的含义要高于点积，点积相当于是内积在欧几里得空间$\mathbb{R}^n$的特例，而内积可以推广到赋范向量空间，只要它满足平行四边形法则即可）</td></tr><tr><td><code>cross(x, y) </code></td><td>叉积运算（向量积，通常记为$\times$，运算结果是一个向量）</td></tr><tr><td><code>outer(x, y)</code></td><td>外积运算（张量积，通常记为$\bigotimes$，运算结果通常是一个矩阵）</td></tr><tr><td><code>intersect1d(x, y)</code></td><td>计算<code>x</code>和<code>y</code>的交集，返回这些元素构成的有序数组</td></tr><tr><td><code>union1d(x, y)</code></td><td>计算<code>x</code>和<code>y</code>的并集，返回这些元素构成的有序数组</td></tr><tr><td><code>in1d(x, y)</code></td><td>返回由判断<code>x</code> 的元素是否在<code>y</code>中得到的布尔值构成的数组</td></tr><tr><td><code>setdiff1d(x, y)</code></td><td>计算<code>x</code>和<code>y</code>的差集，返回这些元素构成的数组</td></tr><tr><td><code>setxor1d(x, y)</code></td><td>计算<code>x</code>和<code>y</code>的对称差，返回这些元素构成的数组</td></tr></tbody></table><blockquote><p><strong>说明</strong>：关于向量和矩阵的运算，我们在下一个章节加以说明。</p></blockquote><h4 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h4><p>上面数组运算的例子中，两个数组的形状（<code>shape</code>属性）是完全相同的，我们再来研究一下，两个形状不同的数组是否可以直接做二元运算或使用通用二元函数进行运算，请看下面的例子。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array5 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array6 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array5 <span class="token operator">+</span> array6</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 2, 3],       [2, 3, 4],       [3, 4, 5],       [4, 5, 6]])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array7 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array5 <span class="token operator">+</span> array7</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 1, 1],       [3, 3, 3],       [5, 5, 5],       [7, 7, 7]])</code></pre><p>通过上面的例子，我们发现形状不同的数组仍然有机会进行二元运算，但这不代表任意形状的数组都可以进行二元运算。简单的说，只有两个数组后缘维度相同或者后缘维度不同但其中一个数组后缘维度为1时，广播机制才会被触发。通过广播机制，NumPy 将两个原本形状不相同的数组变成形状相同，才能进行二元运算。所谓后缘维度，指的是数组形状（<code>shape</code>属性）从后往前看对应的部分，我们举例说明。</p><img src="res/broadcast-1.png" style="zoom:100%;"><p>上图中，一个数组的形状是<code>(4, 3)</code>，另一个数组的形状是<code>(3, )</code>，从后往前看对应的部分都是<code>3</code>，属于后缘维度相同，可以应用广播机制，第二个数组会沿着缺失元素那个轴的方向去广播自己，最终让两个数组形状达成一致。</p><img src="res/broadcast-3.png" style="zoom:100%;"><p>上图中，一个数组的形状是<code>(3, 4, 2)</code>，另一个数组的形状是<code>(4, 2)</code>，从后往前看对应的部分都是<code>(4, 2)</code>，属于后缘维度相同，可以应用广播机制，第二个数组会沿着缺失元素那个轴的方向去广播自己，最终让两个数组形状达成一致。</p><img src="res/broadcast-2.png" style="zoom:100%;"><p>上图中，一个数组的形状是<code>(4, 3)</code>，另一个数组的形状是<code>(4, 1)</code>，这是后缘维度不相同的情况，但是第二个数组跟第一个数组不同的地方为<code>1</code>，第二个数组可以沿着为<code>1</code> 的那个轴广播自己，最终让两个数组形状达成一致。</p><blockquote><p><strong>思考</strong>：一个3行1列的二维数组和一个1行3列的二维数组能够执行加法运算吗？</p></blockquote><h3 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h3><p>除了上面讲到的函数外，NumPy 中还提供了很多用于处理数组的函数，<code>ndarray</code>对象的很多方法也可以通过调用函数来实现，下表给出了一些常用的函数。</p><p><strong>表3：NumPy其他常用函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>unique</code></td><td>去除数组重复元素，返回唯一元素构成的有序数组</td></tr><tr><td><code>copy</code></td><td>返回拷贝数组得到的数组</td></tr><tr><td><code>sort</code></td><td>返回数组元素排序后的拷贝</td></tr><tr><td><code>split</code> &#x2F; <code>hsplit</code> &#x2F; <code>vsplit</code></td><td>将数组拆成若干个子数组</td></tr><tr><td><code>stack</code> &#x2F; <code>hstack</code> &#x2F; <code>vstack</code></td><td>将多个数组堆叠成新数组</td></tr><tr><td><code>concatenate</code></td><td>沿着指定的轴连接多个数组构成新数组</td></tr><tr><td><code>append</code> &#x2F; <code>insert</code></td><td>向数组末尾追加元素 &#x2F; 在数组指定位置插入元素</td></tr><tr><td><code>argwhere</code></td><td>找出数组中非0元素的位置</td></tr><tr><td><code>extract</code> &#x2F; <code>select</code> &#x2F; <code>where</code></td><td>按照指定的条件从数组中抽取或处理数组元素</td></tr><tr><td><code>flip</code></td><td>沿指定的轴翻转数组中的元素</td></tr><tr><td><code>fromregex</code></td><td>通过读取文件和正则表达式解析获取数据创建数组对象</td></tr><tr><td><code>repeat</code> &#x2F; <code>tile</code></td><td>通过对元素的重复来创建新数组</td></tr><tr><td><code>roll</code></td><td>沿指定轴对数组元素进行移位</td></tr><tr><td><code>resize</code></td><td>重新调整数组的大小</td></tr><tr><td><code>place</code> &#x2F; <code>put</code></td><td>将数组中满足条件的元素&#x2F;指定的元素替换为指定的值</td></tr><tr><td><code>partition</code></td><td>用选定的元素对数组进行一次划分并返回划分后的数组</td></tr></tbody></table><p><strong>去重（重复元素只保留一项）</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>array5<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([0, 1, 2, 3])</code></pre><p><strong>堆叠和拼接</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">array8 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array9 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>array8<span class="token punctuation">,</span> array9<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 1, 1, 4, 4, 4],       [2, 2, 2, 5, 5, 5],       [3, 3, 3, 6, 6, 6]])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>array8<span class="token punctuation">,</span> array9<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 1, 1],       [2, 2, 2],       [3, 3, 3],       [4, 4, 4],       [5, 5, 5],       [6, 6, 6]])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>array8<span class="token punctuation">,</span> array9<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 1, 1],       [2, 2, 2],       [3, 3, 3],       [4, 4, 4],       [5, 5, 5],       [6, 6, 6]])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>array8<span class="token punctuation">,</span> array9<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 1, 1, 4, 4, 4],       [2, 2, 2, 5, 5, 5],       [3, 3, 3, 6, 6, 6]])</code></pre><p><strong>追加和插入元素</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10, 100])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([  1,  98,  99, 100,   2,   3,   4,   5,   6,   7,   8,   9])</code></pre><p><strong>抽取和处理元素</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>array1 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> array1<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 3, 5, 7, 9])</code></pre><blockquote><p><strong>说明</strong>：上面<code>extract</code>函数的操作相当于我们之前讲的布尔索引。</p></blockquote><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">[</span>array1 <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">,</span> array1 <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>array1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> array1 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([10, 20, 30,  0,  0,  0, 49, 64, 81])</code></pre><blockquote><p><strong>说明</strong>：上面<code>select</code>函数的第一个参数设置了两个条件，满足第一个条件的元素执行了乘以10的操作，满足第二个条件的元素执行了求平方的操作，两个条件都不能满足的数组元素会被处理为0。</p></blockquote><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>array1 <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">,</span> array1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> array1 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([10, 20, 30, 40, 50, 36, 49, 64, 81])</code></pre><blockquote><p><strong>说明</strong>：上面<code>where</code>函数的第一个参数给出了条件，满足条件的元素执行了乘以10的操作，不能满足条件的元素执行了求平方的操作。</p></blockquote><p><strong>重复数组元素创建新数组</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><p><strong>调整数组大小</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1, 2, 3],       [4, 5, 6],       [7, 8, 9],       [1, 2, 3],       [4, 5, 6]])</code></pre><blockquote><p><strong>提示</strong>：<code>array1</code>原本是一个有9个元素的一维数组，通过<code>resize</code>函数调整成为5行3列共15个元素的二维数组，缺少的元素通过复用原数组中的元素来补充。</p></blockquote><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>array5<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[0, 0, 0, 1],       [1, 1, 2, 2]])</code></pre><p><strong>替换数组元素</strong>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>put<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([100, 200,   3, 200,   5, 100,   7,   8, 100])</code></pre><blockquote><p><strong>说明</strong>：上面<code>put</code>函的第二个参数给出了要被替换的元素的索引，但是用来作为替换值的元素只有<code>100</code>和<code>200</code>，所以这两个值会被循环使用，因此索引为<code>0</code>、<code>1</code>、<code>-1</code>、<code>3</code>、<code>5</code>的元素被依次替换成了<code>100</code>、<code>200</code>、<code>100</code>、<code>200</code>、<code>100</code>。</p></blockquote><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>place<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> array1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([1, 2, 3, 3, 5, 1, 2, 3, 1])</code></pre><blockquote><p><strong>注意</strong>：<code>put</code>函数和<code>place</code>函数都没有返回新的数组对象，而是在原来的数组上直接进行替换。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>71.NumPy的应用-4</title>
      <link href="/2024/07/01/71.numpy-de-ying-yong-4/"/>
      <url>/2024/07/01/71.numpy-de-ying-yong-4/</url>
      
        <content type="html"><![CDATA[<h2 id="NumPy的应用-4"><a href="#NumPy的应用-4" class="headerlink" title="NumPy的应用-4"></a>NumPy的应用-4</h2><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p><strong>向量</strong>（<em>vector</em>）也叫<strong>矢量</strong>，是一个同时具有大小和方向，且满足平行四边形法则的几何对象。与向量相对的概念叫<strong>标量</strong>或<strong>数量</strong>，标量只有大小，绝大多数情况下没有方向。我们通常用带箭头的线段来表示向量，在平面直角坐标系中的向量如下图所示。需要注意的是，向量是表达大小和方向的量，并没有规定起点和终点，所以相同的向量可以画在任意位置，例如下图中$\boldsymbol{w}$和$\boldsymbol{v}$两个向量并没有什么区别。</p><img src="res/vector_1.png" style="zoom:40%;"><p>向量有很多种代数表示法，对于二维空间的向量，下面几种写法都是可以的。<br>$$<br>\boldsymbol{a} &#x3D; \langle a_1, a_2 \rangle &#x3D; (a_1, a_2) &#x3D; \begin{pmatrix} a_1 \ a_2 \end{pmatrix} &#x3D; \begin{bmatrix} a_1 \ a_2 \end{bmatrix}<br>$$<br>向量的大小称为向量的模，它是一个标量，对于二维空间的向量，模可以通过下面的公式计算。<br>$$<br>\lvert \boldsymbol{a} \rvert &#x3D; \sqrt{a_{1}^{2} + a_{2}^{2}}<br>$$<br>注意，这里的$\lvert \boldsymbol{a} \rvert$并不是绝对值，你可以将其称为向量$\boldsymbol{a}$的二范数，这是数学中的符号重用现象。上面的写法和概念也可以推广到$n$维空间，我们通常用$\boldsymbol{R^n}$表示$n$维空间，我们刚才说的二维空间可以记为$\boldsymbol{R^2}$，三维空间可以记为$\boldsymbol{R^3}$。虽然生活在三维空间的我们很难想象四维空间、五维空间是什么样子，但是这并不影响我们探讨高维空间，机器学习中，我们经常把有$n$个特征的训练样本称为一个$n$维向量。</p><h4 id="向量的加法"><a href="#向量的加法" class="headerlink" title="向量的加法"></a>向量的加法</h4><p>相同维度的向量可以相加得到一个新的向量，运算的方法是将向量的每个分量相加，如下所示。<br>$$<br>\boldsymbol{u} &#x3D; \begin{bmatrix} u_1 \ u_2 \ \vdots \ u_n \end{bmatrix}, \quad<br>\boldsymbol{v} &#x3D; \begin{bmatrix} v_1 \ v_2 \ \vdots \ v_n \end{bmatrix}, \quad<br>\boldsymbol{u} + \boldsymbol{v} &#x3D; \begin{bmatrix} u_1 + v_1 \ u_2 + v_2 \ \vdots \ u_n + v_n \end{bmatrix}<br>$$<br>向量的加法满足“平行四边形法则”，即两个向量$\boldsymbol{u}$和$\boldsymbol{v}$构成了平行四边形的两条邻边，相加的结果是平行四边形的对角线，如下图所示。</p><img src="res/vector_2.png" style="zoom:58%;"><h4 id="向量的数乘"><a href="#向量的数乘" class="headerlink" title="向量的数乘"></a>向量的数乘</h4><p>一个向量$\boldsymbol{v}$可以和一个标量$k$相乘，运算的方法是将向量中的每个分量与该标量相乘即可，如下所示。<br>$$<br>\boldsymbol{v} &#x3D; \begin{bmatrix} v_1 \ v_2 \ \vdots \ v_n \end{bmatrix}, \quad<br>k \cdot \boldsymbol{v} &#x3D; \begin{bmatrix} k \cdot v_1 \ k \cdot v_2 \ \vdots \ k \cdot v_n \end{bmatrix}<br>$$<br>我们可以用 NumPy 的数组来表示向量，向量的加法可以通过两个数组的加法来实现，向量的数乘可以通过数组和标量的乘法来实现，此处不再进行赘述。</p><h4 id="向量的点积"><a href="#向量的点积" class="headerlink" title="向量的点积"></a>向量的点积</h4><p>点积（<em>dot product</em>）是两个向量之间最为重要的运算之一，运算的方法是将两个向量对应分量的乘积求和，所以点积的结果是一个标量，其几何意义是两个向量的模乘以二者夹角的余弦如下所示。<br>$$<br>\boldsymbol{u} &#x3D; \begin{bmatrix} u_1 \ u_2 \ \vdots \ u_n \end{bmatrix}, \quad<br>\boldsymbol{v} &#x3D; \begin{bmatrix} v_1 \ v_2 \ \vdots \ v_n \end{bmatrix} \quad \<br>\boldsymbol{u} \cdot \boldsymbol{v} &#x3D; \sum_{i&#x3D;1}^{n}{u_iv_i} &#x3D; \lvert \boldsymbol{u} \rvert \lvert \boldsymbol{v} \rvert cos\theta<br>$$<br>假如我们用3维向量来表示用户对喜剧片、言情片和动作片这三类电影的偏好，我们用1到5的数字来表示喜欢的程度，其中5表示非常喜欢，4表示比较喜欢，3表示无感，2表示比较反感，1表示特别反感。那么，下面的向量表示用户非常喜欢喜剧片，特别反感言情片，对动作片不喜欢也不反感。<br>$$<br>\boldsymbol{u} &#x3D; \begin{pmatrix} 5 \ 1 \ 3 \end{pmatrix}<br>$$<br>现在有两部电影上映了，一部属于言情喜剧片，一部属于喜剧动作片，我们把两部电影也通过3维向量的方式进行表示，如下所示。<br>$$<br>\boldsymbol{m_1} &#x3D; \begin{pmatrix} 4 \ 5 \ 1 \end{pmatrix}, \quad \boldsymbol{m_2} &#x3D; \begin{pmatrix} 5 \ 1 \ 5 \end{pmatrix}<br>$$<br>如果现在我们需要向刚才的用户推荐一部电影，我们应该给他推荐哪一部呢？我们可以将代表用户的向量$\boldsymbol{u}$和代表电影的向量$\boldsymbol{m_1}$和$\boldsymbol{m_2}$分别进行点积运算，再除以向量的模长，得到向量夹角的余弦值，余弦值越接近1，说明向量的夹角越接近0度，也就是两个向量的相似度越高。很显然，我们应该向用户推荐跟他观影喜好相似度更高的电影。<br>$$<br>cos\theta_1 &#x3D; \frac{\boldsymbol{u} \cdot \boldsymbol{m1}}{|\boldsymbol{u}||\boldsymbol{m1}|} \approx \frac{4 \times 5 + 5 \times 1 + 3 \times 1}{5.92 \times 6.48} \approx 0.73 \<br>cos\theta_2 &#x3D; \frac{\boldsymbol{u} \cdot \boldsymbol{m2}}{|\boldsymbol{u}||\boldsymbol{m2}|} \approx \frac{5 \times 5 + 1 \times 1 + 3 \times 5}{5.92 \times 7.14} \approx 0.97<br>$$<br>大家可能会说，向量$\boldsymbol{m_2}$代表的电影肉眼可见跟用户是更加匹配的。的确，对于一个三维向量我们凭借直觉也能够给出正确的答案，但是对于一个$n$维向量，当$n$的值非常大时，你还有信心凭借肉眼的观察和本能的直觉给出准确的答案吗？向量的点积可以通过<code>dot</code>函数来计算，而向量的模长可以通过 NumPy 的<code>linalg</code>模块中的<code>norm</code>函数来计算，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">u <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">,</span> m1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0.7302967433402214</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0.9704311900788593</span></code></pre><h4 id="向量的叉积"><a href="#向量的叉积" class="headerlink" title="向量的叉积"></a>向量的叉积</h4><p>在二维空间，两个向量的叉积是这样定义的：<br>$$<br>\boldsymbol{A} &#x3D; \begin{pmatrix} a_{1} \ a_{2} \end{pmatrix}, \quad \boldsymbol{B} &#x3D; \begin{pmatrix} b_{1} \ b_{2} \end{pmatrix} \<br>\boldsymbol{A} \times \boldsymbol{B} &#x3D; \begin{vmatrix} a_{1} \quad a_{2} \ b_{1} \quad b_{2} \end{vmatrix} &#x3D; a_{1}b_{2} - a_{2}b_{1}<br>$$<br>对于三维空间，两个向量的叉积结果是一个向量，如下所示：<br>$$<br>\boldsymbol{A} &#x3D; \begin{pmatrix} a_{1} \ a_{2} \ a_{3} \end{pmatrix}, \quad \boldsymbol{B} &#x3D; \begin{pmatrix} b_{1} \ b_{2} \ b_{3} \end{pmatrix} \<br>\boldsymbol{A} \times \boldsymbol{B} &#x3D; \begin{vmatrix} \boldsymbol{\hat{i}} \quad \boldsymbol{\hat{j}} \quad \boldsymbol{\hat{k}} \ a_{1} \quad a_{2} \quad a_{3} \ b_{1} \quad b_{2} \quad b_{3} \end{vmatrix} &#x3D; \langle \boldsymbol{\hat{i}}\begin{vmatrix} a_{2} \quad a_{3} \ b_{2} \quad b_{3} \end{vmatrix}, -\boldsymbol{\hat{j}}\begin{vmatrix} a_{1} \quad a_{3} \ b_{1} \quad b_{3} \end{vmatrix}, \boldsymbol{\hat{k}}\begin{vmatrix} a_{1} \quad a_{2} \ b_{1} \quad b_{2} \end{vmatrix} \rangle<br>$$<br>因为叉积的结果是向量，所以$\boldsymbol{A} \times \boldsymbol{B}$和$\boldsymbol{B} \times \boldsymbol{A}$的结果并不相同，事实上：<br>$$<br>\boldsymbol{A} \times \boldsymbol{B} &#x3D; -(\boldsymbol{B} \times \boldsymbol{A})<br>$$<br>NumPy 中可以通过<code>cross</code>函数来计算向量的叉积，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cross<span class="token punctuation">(</span>u<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [-14   7  21]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cross<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [ 14  -7 -21]</span></code></pre><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><p><strong>行列式</strong>（<em>determinant</em>）通常记作$det(\boldsymbol{A})$或$|\boldsymbol{A}|$，其中$\boldsymbol{A}$是一个$n$阶方阵。行列式可以看做是有向面积或体积的概念在一般欧几里得空间的推广，或者说行列式描述的是一个线性变换对“体积”所造成的影响。行列式的概念最早出现在解线性方程组的过程中，十七世纪晚期，关孝和（日本江户时代的数学家）与莱布尼茨的著作中已经使用行列式来确定线性方程组解的个数以及形式；十八世纪开始，行列式开始作为独立的数学概念被研究；十九世纪以后，行列式理论进一步得到发展和完善。</p><img src="res/Parallelogramme.jpeg" style="zoom:125%;"><h4 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h4><p>行列式是由向量引出的，所以行列式解释的其实是向量的性质。</p><p><strong>性质1</strong>：如果$det(\boldsymbol{A})$中某行（或某列）的元素全部为0，那么$det(\boldsymbol{A}) &#x3D; 0$。</p><p><strong>性质2</strong>：如果$det(\boldsymbol{A})$中某行（或某列）有公共因子$k$，则可以提出$k$，得到行列式$det(\boldsymbol{A^{‘}})$，且$det(\boldsymbol{A}) &#x3D; k \cdot det(\boldsymbol{A^{‘}})$。<br>$$<br>det(\boldsymbol{A})&#x3D;{\begin{vmatrix}a_{11}&amp;a_{12}&amp;\dots &amp;a_{1n}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \{\color {blue}k}a_{i1}&amp;{\color {blue}k}a_{i2}&amp;\dots &amp;{\color {blue}k}a_{in}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{n1}&amp;a_{n2}&amp;\dots &amp;a_{nn}\end{vmatrix}}&#x3D;{\color {blue}k}{\begin{vmatrix}a_{11}&amp;a_{12}&amp;\dots &amp;a_{1n}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{i1}&amp;a_{i2}&amp;\dots &amp;a_{in}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{n1}&amp;a_{n2}&amp;\dots &amp;a_{nn}\end{vmatrix}}&#x3D;{\color {blue}k} \cdot det(\boldsymbol{A^{‘}})<br>$$</p><p><strong>性质3</strong>：如果$det(\boldsymbol{A})$中某行（或某列）的每个元素是两数之和，则此行列式可拆分为两个行列式相加，如下所示。<br>$$<br>{\begin{vmatrix}a_{11}&amp;a_{12}&amp;\dots &amp;a_{1n}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \{\color {blue}a_{i1}}+{\color {OliveGreen}b_{i1}}&amp;{\color {blue}a_{i2}}+{\color {OliveGreen}b_{i2}}&amp;\dots &amp;{\color {blue}a_{in}}+{\color {OliveGreen}b_{in}}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{n1}&amp;a_{n2}&amp;\dots &amp;a_{nn}\end{vmatrix}}&#x3D;{\begin{vmatrix}a_{11}&amp;a_{12}&amp;\dots &amp;a_{1n}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \{\color {blue}a_{i1}}&amp;{\color {blue}a_{i2}}&amp;\dots &amp;{\color {blue}a_{in}}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{n1}&amp;a_{n2}&amp;\dots &amp;a_{nn}\end{vmatrix}}+{\begin{vmatrix}a_{11}&amp;a_{12}&amp;\dots &amp;a_{1n}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \{\color {OliveGreen}b_{i1}}&amp;{\color {OliveGreen}b_{i2}}&amp;\dots &amp;{\color {OliveGreen}b_{in}}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{n1}&amp;a_{n2}&amp;\dots &amp;a_{nn}\end{vmatrix}}<br>$$<br><strong>性质4</strong>：如果$det(\boldsymbol{A})$中两行（或两列）元素对应成比例，那么$det(\boldsymbol{A}) &#x3D; 0$。</p><p><strong>性质5</strong>：如果$det(\boldsymbol{A})$中两行（或两列）互换得到$det(\boldsymbol{A^{‘}})$，那么$det(\boldsymbol{A}) &#x3D; -det(\boldsymbol{A^{‘}})$。</p><p><strong>性质6</strong>：将$det(\boldsymbol{A})$中某行（或某列）的$k$倍加进另一行（或另一列）里，行列式的值不变，如下所示。<br>$$<br>{\begin{vmatrix}\vdots &amp;\vdots &amp;\vdots &amp;\vdots \a_{i1}&amp;a_{i2}&amp;\dots &amp;a_{in}\a_{j1}&amp;a_{j2}&amp;\dots &amp;a_{jn}\\vdots &amp;\vdots &amp;\vdots &amp;\vdots \\end{vmatrix}}&#x3D;{\begin{vmatrix}\vdots &amp;\vdots &amp;\vdots &amp;\vdots \a_{i1}&amp;a_{i2}&amp;\dots &amp;a_{in}\a_{j1}{\color {blue}+ka_{i1}}&amp;a_{j2}{\color {blue}+ka_{i2}}&amp;\dots &amp;a_{jn}{\color {blue}+ka_{in}}\\vdots &amp;\vdots &amp;\vdots &amp;\vdots \\end{vmatrix}}<br>$$<br><strong>性质7</strong>：将行列式的行列互换，行列式的值不变，如下所示。<br>$$<br>{\begin{vmatrix}a_{11}&amp;a_{12}&amp;\dots &amp;a_{1n}\a_{21}&amp;a_{22}&amp;\dots &amp;a_{2n}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{n1}&amp;a_{n2}&amp;\dots &amp;a_{nn}\end{vmatrix}}&#x3D;{\begin{vmatrix}a_{11}&amp;a_{21}&amp;\dots &amp;a_{n1}\a_{12}&amp;a_{22}&amp;\dots &amp;a_{n2}\\vdots &amp;\vdots &amp;\ddots &amp;\vdots \a_{1n}&amp;a_{2n}&amp;\dots &amp;a_{nn}\end{vmatrix}}<br>$$<br><strong>性质8</strong>：方块矩阵$\boldsymbol{A}$和$\boldsymbol{B}$的乘积的行列式等于其行列式的乘积，即$det(\boldsymbol{A}\boldsymbol{B}) &#x3D; det(\boldsymbol{A})det(\boldsymbol{B})$。特别的，若将矩阵中的每一行都乘以常数$r$，那么行列式的值将是原来的$r^{n}$倍，即$det(r\boldsymbol{A}) &#x3D; det(r\boldsymbol{I_{n}} \cdot \boldsymbol{A}) &#x3D; r^{n}det(\boldsymbol{A})$，其中$\boldsymbol{I_{n}}$是$n$阶单位矩阵。</p><p><strong>性质9</strong>：若$\boldsymbol{A}$是可逆矩阵，那么$det(\boldsymbol{A}^{-1}) &#x3D; (det(\boldsymbol{A}))^{-1}$。</p><h4 id="行列式的计算"><a href="#行列式的计算" class="headerlink" title="行列式的计算"></a>行列式的计算</h4><p>$n$阶行列式的计算公式如下所示：<br>$$<br>det(\boldsymbol{A})&#x3D;\sum_{n!} \pm {a_{1\alpha}a_{2\beta} \cdots a_{n\omega}}<br>$$</p><p>对于二阶行列式，上面的公式相当于：<br>$$<br>\begin{vmatrix} a_{11} \quad a_{12} \ a_{21} \quad a_{22} \end{vmatrix} &#x3D; a_{11}a_{22} - a_{12}a_{21}<br>$$<br>对于三阶行列式，上面的计算公式相当于：<br>$$<br>\begin{vmatrix} a_{11} \quad a_{12} \quad a_{13} \ a_{21} \quad a_{22} \quad a_{23} \ a_{31} \quad a_{32} \quad a_{33} \end{vmatrix} &#x3D; a_{11}a_{22}a_{33} + a_{12}a_{23}a_{31} + a_{13}a_{21}a_{32} - a_{11}a_{23}a_{32} - a_{12}a_{21}a_{33} - a_{13}a_{22}a_{31}<br>$$<br>高阶行列式可以用<strong>代数余子式</strong>（<em>cofactor</em>）展开成多个低阶行列式，如下所示：<br>$$<br>det(\boldsymbol{A})&#x3D;a_{11}C_{11}+a_{12}C_{12}+ \cdots +a_{1n}C_{1n} &#x3D; \sum_{i&#x3D;1}^{n}{a_{1i}C_{1i}}<br>$$<br>其中，$C_{11}$是原行列式去掉$a_{11}$所在行和列之后剩余的部分构成的行列式，以此类推。</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p><strong>矩阵</strong>（<em>matrix</em>）是由一系列元素排成的矩形阵列，矩阵里的元素可以是数字、符号或数学公式。矩阵可以进行<strong>加法</strong>、<strong>减法</strong>、<strong>数乘</strong>、<strong>转置</strong>、<strong>矩阵乘法</strong>等运算，如下图所示。</p><img src="res/matrix_operation.png" style="zoom:62%;"><p>值得一提的是矩阵乘法运算，该运算仅当第一个矩阵$\boldsymbol{A}$的列数和另一个矩阵$\boldsymbol{B}$的行数相等时才能定义。如果$\boldsymbol{A}$是一个$m \times n$的矩阵，$\boldsymbol{B}$是一个$n \times k$矩阵，它们的乘积是一个$m \times k$的矩阵，其中元素的计算公式如下所示：<br>$$<br> [\mathbf{AB}]<em>{i,j} &#x3D; A</em>{i,1}B_{1,j} + A_{i,2}B_{2,j} + \cdots + A_{i,n}B_{n,j} &#x3D; \sum_{r&#x3D;1}^n A_{i,r}B_{r,j}<br>$$<br><img src="res/matrix_multiply.png" style="zoom:35%;"></p><h1 id="例如：-begin-bmatrix-1-0-2-1-3-1-end-bmatrix-times-begin-bmatrix-3-1-2-1-1-0-end-bmatrix"><a href="#例如：-begin-bmatrix-1-0-2-1-3-1-end-bmatrix-times-begin-bmatrix-3-1-2-1-1-0-end-bmatrix" class="headerlink" title="例如：$$\begin{bmatrix}    1 &amp; 0 &amp; 2 \    -1 &amp; 3 &amp; 1 \  \end{bmatrix}\times  \begin{bmatrix}    3 &amp; 1 \    2 &amp; 1 \    1 &amp; 0  \end{bmatrix}"></a>例如：<br>$$<br>\begin{bmatrix}<br>    1 &amp; 0 &amp; 2 \<br>    -1 &amp; 3 &amp; 1 \<br>  \end{bmatrix}<br>\times<br>  \begin{bmatrix}<br>    3 &amp; 1 \<br>    2 &amp; 1 \<br>    1 &amp; 0<br>  \end{bmatrix}</h1><h1 id="begin-bmatrix-1-times-3-0-times-2-2-times-1-1-times-1-0-times-1-2-times-0-1-times-3-3-times-2-1-times-1-1-times-1-3-times-1-1-times-0-end-bmatrix"><a href="#begin-bmatrix-1-times-3-0-times-2-2-times-1-1-times-1-0-times-1-2-times-0-1-times-3-3-times-2-1-times-1-1-times-1-3-times-1-1-times-0-end-bmatrix" class="headerlink" title="  \begin{bmatrix}     (1 \times 3  +  0 \times 2  +  2 \times 1) &amp; (1 \times 1   +   0 \times 1   +   2 \times 0) \    (-1 \times 3  +  3 \times 2  +  1 \times 1) &amp; (-1 \times 1   +   3 \times 1   +   1 \times 0) \  \end{bmatrix}"></a>  \begin{bmatrix}<br>     (1 \times 3  +  0 \times 2  +  2 \times 1) &amp; (1 \times 1   +   0 \times 1   +   2 \times 0) \<br>    (-1 \times 3  +  3 \times 2  +  1 \times 1) &amp; (-1 \times 1   +   3 \times 1   +   1 \times 0) \<br>  \end{bmatrix}</h1><p>  \begin{bmatrix}<br>    5 &amp; 1 \<br>    4 &amp; 2 \<br>  \end{bmatrix}<br>$$<br>矩阵的乘法满足结合律和对矩阵加法的分配律：</p><p>结合律： $(\boldsymbol{AB})\boldsymbol{C} &#x3D; \boldsymbol{A}(\boldsymbol{BC})$。</p><p>左分配律：$(\boldsymbol{A} + \boldsymbol{B})\boldsymbol{C} &#x3D; \boldsymbol{AC} + \boldsymbol{BC}$。</p><p>右分配律：$\boldsymbol{C}(\boldsymbol{A} + \boldsymbol{B}) &#x3D; \boldsymbol{CA} + \boldsymbol{CB}$。</p><p><strong>矩阵乘法不满足交换律</strong>。一般情况下，矩阵$\boldsymbol{A}$和$\boldsymbol{B}$的乘积$\boldsymbol{AB}$存在，但$\boldsymbol{BA}$不一定存在，即便$\boldsymbol{BA}$存在，大多数时候$\boldsymbol{AB} \neq \boldsymbol{BA}$。</p><p>矩阵乘法的一个基本应用是在线性方程组上。线性方程组是方程组的一种，它符合以下的形式：<br>$$<br>\begin{cases}<br>     a_{1,1}x_{1} + a_{1,2}x_{2} + \cdots + a_{1,n}x_{n}&#x3D;  b_{1} \<br>     a_{2,1}x_{1} + a_{2,2}x_{2} + \cdots + a_{2,n}x_{n}&#x3D;  b_{2} \<br>     \vdots \quad \quad \quad \vdots \<br>     a_{m,1}x_{1} + a_{m,2}x_{2} + \cdots + a_{m,n}x_{n}&#x3D;  b_{m}<br> \end{cases}<br>$$<br>运用矩阵的方式，可以将线性方程组写成一个向量方程：<br>$$<br>\boldsymbol{Ax} &#x3D; \boldsymbol{b}<br>$$<br>其中，$\boldsymbol{A}$是由方程组里未知数的系数排成的$m \times n$矩阵，$\boldsymbol{x}$是含有$n$个元素的行向量，$\boldsymbol{b}$是含有$m$个元素的行向量。</p><p>矩阵是线性变换（保持向量加法和标量乘法的函数）的便利表达法。矩阵乘法的本质在联系到线性变换的时候最能体现，因为矩阵乘法和线性变换的合成有以下的联系，即每个$m \times n$的矩阵$\boldsymbol{A}$都代表了一个从$\boldsymbol{R}^{n}$射到$\boldsymbol{R}^{m}$的线性变换。如果无法理解上面这些内容，推荐大家看看B站上名为<a href="https://www.bilibili.com/video/BV1ib411t7YR/">《线性代数的本质》</a>的视频，相信这套视频会让你对线性代数有一个更好的认知。</p><p>下图是一个来自于维基百科的例子，图中展示了一些典型的二维实平面上的线性变换对平面向量（图形）造成的效果以及它们对应的二维矩阵，其中每个线性变换将蓝色图形映射成绿色图形；平面的原点$(0, 0)$用黑点表示。</p><img src="res/linear_transformation.png" style="zoom:45%;"><h4 id="矩阵对象"><a href="#矩阵对象" class="headerlink" title="矩阵对象"></a>矩阵对象</h4><p>NumPy 中提供了专门用于线性代数（<em>linear algebra</em>）的模块和表示矩阵的类型<code>matrix</code>，当然我们通过二维数组也可以表示一个矩阵，官方并不推荐使用<code>matrix</code>类而是建议使用二维数组，而且有可能在将来的版本中会移除<code>matrix</code>类。无论如何，利用这些已经封装好的类和函数，我们可以轻松愉快的实现很多对矩阵的操作。</p><p>我们可以通过下面的代码来创建矩阵（<code>matrix</code>）对象。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">m1 &#x3D; np.matrix(&#39;1 2 3; 4 5 6&#39;)m1</code></pre><blockquote><p><strong>说明</strong>：<code>matrix</code>构造器可以传入类数组对象也可以传入字符串来构造矩阵对象。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">matrix([[1, 2, 3],        [4, 5, 6]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">m2 &#x3D; np.asmatrix(np.array([[1, 1], [2, 2], [3, 3]]))m2</code></pre><blockquote><p><strong>说明</strong>：<code>asmatrix</code>函数也可以用<code>mat</code>函数代替，这两个函数其实是同一个函数。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">matrix([[1, 1],        [2, 2],        [3, 3]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">m1 * m2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">matrix([[14, 14],        [32, 32]])</code></pre><blockquote><p><strong>说明</strong>：注意<code>matrix</code>对象和<code>ndarray</code>对象乘法运算的差别，<code>matrix</code>对象的<code>*</code>运算是矩阵乘法运算。如果两个二维数组要做矩阵乘法运算，应该使用<code>@</code>运算符或<code>matmul</code>函数，而不是<code>*</code>运算符。</p></blockquote><p>矩阵对象的属性如下表所示。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>A</code></td><td>获取矩阵对象对应的<code>ndarray</code>对象</td></tr><tr><td><code>A1</code></td><td>获取矩阵对象对应的扁平化后的<code>ndarray</code>对象</td></tr><tr><td><code>I</code></td><td>可逆矩阵的逆矩阵</td></tr><tr><td><code>T</code></td><td>矩阵的转置</td></tr><tr><td><code>H</code></td><td>矩阵的共轭转置</td></tr><tr><td><code>shape</code></td><td>矩阵的形状</td></tr><tr><td><code>size</code></td><td>矩阵元素的个数</td></tr></tbody></table><p>矩阵对象的方法跟之前讲过的<code>ndarray</code>数组对象的方法基本差不多，此处不再进行赘述。</p><h4 id="线性代数模块"><a href="#线性代数模块" class="headerlink" title="线性代数模块"></a>线性代数模块</h4><p>NumPy 的<code>linalg</code>模块中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的函数，它们跟 MATLAB 和 R 等语言所使用的是相同的行业标准线性代数库，下面的表格列出了<code>numpy</code>以及<code>linalg</code>模块中一些常用的线性代数相关函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>diag</code></td><td>以一维数组的形式返回方阵的对角线元素或将一维数组转换为方阵（非对角元素元素为0）</td></tr><tr><td><code>matmul</code></td><td>矩阵乘法运算</td></tr><tr><td><code>trace</code></td><td>计算对角线元素的和</td></tr><tr><td><code>norm</code></td><td>求矩阵或向量的范数</td></tr><tr><td><code>det</code></td><td>计算行列式的值</td></tr><tr><td><code>matrix_rank</code></td><td>计算矩阵的秩</td></tr><tr><td><code>eig</code></td><td>计算矩阵的特征值（<em>eigenvalue</em>）和特征向量（<em>eigenvector</em>）</td></tr><tr><td><code>inv</code></td><td>计算非奇异矩阵（$n$阶方阵）的逆矩阵</td></tr><tr><td><code>pinv</code></td><td>计算矩阵的摩尔-彭若斯（<em>Moore-Penrose</em>）广义逆</td></tr><tr><td><code>qr</code></td><td>QR分解（把矩阵分解成一个正交矩阵与一个上三角矩阵的积）</td></tr><tr><td><code>svd</code></td><td>计算奇异值分解（<em>singular value decomposition</em>）</td></tr><tr><td><code>solve</code></td><td>解线性方程组$\boldsymbol{Ax}&#x3D;\boldsymbol{b}$，其中$\boldsymbol{A}$是一个方阵</td></tr><tr><td><code>lstsq</code></td><td>计算$\boldsymbol{Ax}&#x3D;\boldsymbol{b}$的最小二乘解</td></tr></tbody></table><p>下面我们简单尝试一下上面的函数，先试一试求逆矩阵。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">m3 &#x3D; np.array([[1., 2.], [3., 4.]])m4 &#x3D; np.linalg.inv(m3)m4</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[-2. ,  1. ],       [ 1.5, -0.5]])</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">np.around(m3 @ m4)</code></pre><blockquote><p><strong>说明</strong>：<code>around</code>函数对数组元素进行四舍五入操作，默认小数点后面的位数为0。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">array([[1., 0.],       [0., 1.]])</code></pre><blockquote><p><strong>说明</strong>：矩阵和它的逆矩阵做矩阵乘法会得到单位矩阵。</p></blockquote><p>计算行列式的值。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">m5 &#x3D; np.array([[1, 3, 5], [2, 4, 6], [4, 7, 9]])np.linalg.det(m5)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">2</code></pre><p>计算矩阵的秩。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">np.linalg.matrix_rank(m5)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">3</code></pre><p>求解线性方程组。<br>$$<br>\begin{cases}<br>x_1 + 2x_2 + x_3 &#x3D; 8 \<br>3x_1 + 7x_2 + 2x_3 &#x3D; 23 \<br>2x_1 + 2x_2 + x_3 &#x3D; 9<br>\end{cases}<br>$$</p><p>对于上面的线性方程组，我们可以用矩阵的形式来表示它，如下所示。<br>$$<br>\boldsymbol{A} &#x3D; \begin{bmatrix}<br>1 &amp; 2 &amp; 1\<br>3 &amp; 7 &amp; 2\<br>2 &amp; 2 &amp; 1<br>\end{bmatrix}, \quad<br>\boldsymbol{x} &#x3D; \begin{bmatrix}<br>x_1 \<br>x_2\<br>x_3<br>\end{bmatrix}, \quad<br>\boldsymbol{b} &#x3D; \begin{bmatrix}<br>8 \<br>23\<br>9<br>\end{bmatrix}<br>$$</p><p>$$<br>\boldsymbol{Ax} &#x3D; \boldsymbol{b}<br>$$</p><p>线性方程组有唯一解的条件：系数矩阵$\boldsymbol{A}$的秩等于增广矩阵$\boldsymbol{Ab}$的秩，而且跟未知数的个数相同。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">A &#x3D; np.array([[1, 2, 1], [3, 7, 2], [2, 2, 1]])b &#x3D; np.array([8, 23, 9]).reshape(-1, 1)print(np.linalg.matrix_rank(A))print(np.linalg.matrix_rank(np.hstack((A, b))))</code></pre><blockquote><p><strong>说明</strong>：使用数组对象的<code>reshape</code>方法调形时，如果其中一个参数为-1，那么该维度有多少个元素是通过数组元素个数（<code>size</code>属性）和其他维度的元素个数自动计算出来的。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">33</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">np.linalg.solve(A, b)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1.],       [2.],       [3.]])</code></pre><blockquote><p><strong>说明</strong>：上面的结果表示，线性方程组的解为：$x_1 &#x3D; 1, x_2 &#x3D; 2, x_3 &#x3D; 3$。</p></blockquote><p>下面是另一种求解线性方程组的方法，大家可以停下来思考下为什么。<br>$$<br>\boldsymbol{x} &#x3D; \boldsymbol{A}^{-1} \cdot \boldsymbol{b}<br>$$<br>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">np.linalg.inv(A) @ b</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1.],       [2.],       [3.]])</code></pre><h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><p>除了数组，NumPy 中还封装了用于<strong>多项式</strong>（<em>polynomial</em>）运算的数据类型。多项式是变量的整数次幂与系数的乘积之和，形如：<br>$$<br>f(x)&#x3D;a_nx^n + a_{n-1}x^{n-1} + \cdots + a_1x^{1} + a_0x^{0}<br>$$<br>在 NumPy 1.4版本之前，我们可以用<code>poly1d</code>类型来表示多项式，目前它仍然可用，但是官方提供了新的模块<code>numpy.polynomial</code>，它除了支持基本的幂级数多项式外，还可以支持切比雪夫多项式、拉盖尔多项式等。</p><h4 id="创建多项式对象"><a href="#创建多项式对象" class="headerlink" title="创建多项式对象"></a>创建多项式对象</h4><p>创建<code>poly1d</code>对象，例如：$\small{f(x)&#x3D;3x^{2}+2x+1}$。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">p1 <span class="token operator">=</span> np<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> np<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">   23 x + 2 x + 1   21 x + 2 x + 3</code></pre><h4 id="多项式的操作"><a href="#多项式的操作" class="headerlink" title="多项式的操作"></a>多项式的操作</h4><p><strong>获取多项式的系数</strong></p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>coefficients<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>coeffs<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[3 2 1][1 2 3]</code></pre><p><strong>两个多项式的四则运算</strong></p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token operator">*</span> p2<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">   24 x + 4 x + 4   4     3      23 x + 8 x + 14 x + 8 x + 3</code></pre><p><strong>带入$\small{x}$求多项式的值</strong></p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">3418</code></pre><p><strong>多项式求导和不定积分</strong></p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>deriv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>integ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">6 x + 2   3     21 x + 1 x + 1 x</code></pre><p><strong>求多项式的根</strong></p><p>例如有多项式$\small{f(x)&#x3D;x^2+3x+2}$，多项式的根即一元二次方程$\small{x^2+3x+2&#x3D;0}$的解。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">p3 <span class="token operator">=</span> np<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>roots<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">[-2. -1.]</code></pre><p>如果使用<code>numpy.polynomial</code>模块的<code>Polynomial</code>类来表示多项式对象，那么对应的操作如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>polynomial <span class="token keyword">import</span> Polynomialp3 <span class="token operator">=</span> Polynomial<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span>           <span class="token comment"># 输出多项式</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 令x=3，计算多项式的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 计算多项式的根</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获得多项式的次数</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>deriv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 求导</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>integ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 求不定积分</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">2.0 + 3.0·x + 1.0·x²20.0[-2. -1.]23.0 + 2.0·x0.0 + 2.0·x + 1.5·x² + 0.33333333·x³</code></pre><h4 id="最小二乘解"><a href="#最小二乘解" class="headerlink" title="最小二乘解"></a>最小二乘解</h4><p><code>Polynomial</code>类还有一个名为<code>fit</code>的类方法，它可以给多项式求最小二乘解。所谓最小二乘解（least-squares solution），是用最小二乘法通过最小化误差的平方和来寻找数据的最佳匹配函数的系数。假设多项式为$\small{f(x)&#x3D;ax+b}$，最小二乘解就是让下面的残差平方和$\small{RSS}$达到最小的$\small{a}$和$\small{b}$。<br>$$<br>RSS &#x3D; \sum_{i&#x3D;0}^{k}(f(x_i) - y_i)^{2}<br>$$<br>例如，我们想利用收集到的月收入和网购支出的历史数据来建立一个预测模型，以达到通过某人的月收入预测他网购支出金额的目标，下面是我们收集到的收入和网购支出的数据，保存在两个数组中。</p><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">25000</span><span class="token punctuation">,</span> <span class="token number">15850</span><span class="token punctuation">,</span> <span class="token number">15500</span><span class="token punctuation">,</span> <span class="token number">20500</span><span class="token punctuation">,</span> <span class="token number">22000</span><span class="token punctuation">,</span> <span class="token number">20010</span><span class="token punctuation">,</span> <span class="token number">26050</span><span class="token punctuation">,</span> <span class="token number">12500</span><span class="token punctuation">,</span> <span class="token number">18500</span><span class="token punctuation">,</span> <span class="token number">27300</span><span class="token punctuation">,</span>    <span class="token number">15000</span><span class="token punctuation">,</span>  <span class="token number">8300</span><span class="token punctuation">,</span> <span class="token number">23320</span><span class="token punctuation">,</span>  <span class="token number">5250</span><span class="token punctuation">,</span>  <span class="token number">5800</span><span class="token punctuation">,</span>  <span class="token number">9100</span><span class="token punctuation">,</span>  <span class="token number">4800</span><span class="token punctuation">,</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token number">28500</span><span class="token punctuation">,</span> <span class="token number">32000</span><span class="token punctuation">,</span>    <span class="token number">31300</span><span class="token punctuation">,</span> <span class="token number">10800</span><span class="token punctuation">,</span>  <span class="token number">6750</span><span class="token punctuation">,</span>  <span class="token number">6020</span><span class="token punctuation">,</span> <span class="token number">13300</span><span class="token punctuation">,</span> <span class="token number">30020</span><span class="token punctuation">,</span>  <span class="token number">3200</span><span class="token punctuation">,</span> <span class="token number">17300</span><span class="token punctuation">,</span>  <span class="token number">8835</span><span class="token punctuation">,</span>  <span class="token number">3500</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">2599</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">1120</span><span class="token punctuation">,</span> <span class="token number">2560</span><span class="token punctuation">,</span> <span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">2320</span><span class="token punctuation">,</span>  <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">1650</span><span class="token punctuation">,</span> <span class="token number">2200</span><span class="token punctuation">,</span>     <span class="token number">980</span><span class="token punctuation">,</span>  <span class="token number">580</span><span class="token punctuation">,</span> <span class="token number">1885</span><span class="token punctuation">,</span>  <span class="token number">600</span><span class="token punctuation">,</span>  <span class="token number">400</span><span class="token punctuation">,</span>  <span class="token number">800</span><span class="token punctuation">,</span>  <span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">1380</span><span class="token punctuation">,</span> <span class="token number">1980</span><span class="token punctuation">,</span> <span class="token number">3999</span><span class="token punctuation">,</span>    <span class="token number">3800</span><span class="token punctuation">,</span>  <span class="token number">725</span><span class="token punctuation">,</span>  <span class="token number">520</span><span class="token punctuation">,</span>  <span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">4020</span><span class="token punctuation">,</span>  <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span>  <span class="token number">560</span><span class="token punctuation">,</span>  <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>我们可以先绘制散点图来了解两组数据是否具有正相关或负相关关系。正相关意味着数组<code>x</code>中较大的值对应到数组<code>y</code>中也是较大的值，而负相关则意味着数组<code>x</code>中较大的值对应到数组<code>y</code>中较小的值。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/in_out_scatter_plot.png" style="zoom:50%;"><p>如果需要定量的研究两组数据的相关性，我们可以计算协方差或相关系数，对应的 NumPy 函数分别是<code>cov</code>和<code>corrcoef</code>。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([[1.        , 0.92275889],       [0.92275889, 1.        ]])</code></pre><blockquote><p><strong>说明</strong>：相关系数是一个<code>-1</code>到<code>1</code>之间的值，越靠近<code>1</code> 说明正相关性越强，越靠近<code>-1</code>说明负相关性越强，靠近<code>0</code>则说明两组数据没有明显的相关性。上面月收入和网购支出之间的相关系数是<code>0.92275889</code>，说明二者是强正相关关系。</p></blockquote><p>通过上面的操作，我们确定了收入和网购支出之前存在强正相关关系，于是我们用这些数据来创建一个回归模型，找出一条能够很好的拟合这些数据点的直线。这里，我们就可以用到上面提到的<code>fit</code>方法，具体的代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>polynomial <span class="token keyword">import</span> PolynomialPolynomial<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> deg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>coef</code></pre><blockquote><p><strong>说明</strong>：<code>deg=1</code>说明回归模型最高次项就是1次项，回归模型形如$\small{y&#x3D;ax+b}$；如果要生一个类似于$\small{y&#x3D;ax^2+bx+c}$的模型，就需要设置<code>deg=2</code>，以此类推。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">array([-2.94883437e+02,  1.10333716e-01])</code></pre><p>根据上面输出的结果，我们的回归方程应该是$\small{y&#x3D;0.110333716x-294.883437}$。我们将这个回归方程绘制到刚才的散点图上，红色的点是我们的预测值，蓝色的点是历史数据，也就是真实值。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0.110333716</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">294.883437</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0.110333716</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">294.883437</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'darkcyan'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/in_out_regression_result.png" style="zoom:50%;"><p>如果不使用<code>Polynomial</code>类型的<code>fit</code>方法，我们也可以通过 NumPy 提供的<code>polyfit</code>函数来完成同样的操作，有兴趣的读者可以自行研究。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>73.深入浅出pandas-2</title>
      <link href="/2024/07/01/73.shen-ru-qian-chu-pandas-2/"/>
      <url>/2024/07/01/73.shen-ru-qian-chu-pandas-2/</url>
      
        <content type="html"><![CDATA[<h2 id="深入浅出pandas-2"><a href="#深入浅出pandas-2" class="headerlink" title="深入浅出pandas-2"></a>深入浅出pandas-2</h2><p>如果使用 pandas 做数据分析，那么<code>DataFrame</code>一定是被使用得最多的类型，它可以用来保存和处理异质的二维数据。这里所谓的“异质”是指<code>DataFrame</code>中每个列的数据类型不需要相同，这也是它区别于 NumPy 二维数组的地方。<code>DataFrame</code>提供了极为丰富的属性和方法，帮助我们实现对数据的重塑、清洗、预处理、透视、呈现等一系列操作。</p><h3 id="创建DataFrame对象"><a href="#创建DataFrame对象" class="headerlink" title="创建DataFrame对象"></a>创建DataFrame对象</h3><h4 id="通过二维数组创建DataFrame对象"><a href="#通过二维数组创建DataFrame对象" class="headerlink" title="通过二维数组创建DataFrame对象"></a>通过二维数组创建DataFrame对象</h4><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">scores <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>courses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">]</span>stu_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1006</span><span class="token punctuation">)</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>scores<span class="token punctuation">,</span> columns<span class="token operator">=</span>courses<span class="token punctuation">,</span> index<span class="token operator">=</span>stu_ids<span class="token punctuation">)</span>df1</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">语文数学英语1001    69    80791002    71  601001003    94    81931004    88  88671005    82  66    60</code></pre><h4 id="通过字典创建DataFrame对象"><a href="#通过字典创建DataFrame对象" class="headerlink" title="通过字典创建DataFrame对象"></a>通过字典创建DataFrame对象</h4><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'语文'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'数学'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'英语'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>stu_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1006</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>scores<span class="token punctuation">,</span> index<span class="token operator">=</span>stu_ids<span class="token punctuation">)</span>df2</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        语文  数学  英语1001    62    95    661002    72    65    751003    93    86    821004    88    66    691005    93    87    82</code></pre><h4 id="读取CSV文件创建DataFrame对象"><a href="#读取CSV文件创建DataFrame对象" class="headerlink" title="读取CSV文件创建DataFrame对象"></a>读取CSV文件创建DataFrame对象</h4><p>可以通过<code>pandas</code> 模块的<code>read_csv</code>函数来读取 CSV 文件，<code>read_csv</code>函数的参数非常多，下面介绍几个比较重要的参数。</p><ul><li><code>sep</code> &#x2F; <code>delimiter</code>：分隔符，默认是<code>,</code>。</li><li><code>header</code>：表头（列索引）的位置，默认值是<code>infer</code>，用第一行的内容作为表头（列索引）。</li><li><code>index_col</code>：用作行索引（标签）的列。</li><li><code>usecols</code>：需要加载的列，可以使用序号或者列名。</li><li><code>true_values</code> &#x2F; <code>false_values</code>：哪些值被视为布尔值<code>True</code> &#x2F; <code>False</code>。</li><li><code>skiprows</code>：通过行号、索引或函数指定需要跳过的行。</li><li><code>skipfooter</code>：要跳过的末尾行数。</li><li><code>nrows</code>：需要读取的行数。</li><li><code>na_values</code>：哪些值被视为空值。</li><li><code>iterator</code>：设置为<code>True</code>，函数返回迭代器对象。</li><li><code>chunksize</code>：配合上面的参数，设置每次迭代获取的数据体量。</li></ul><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data/2018年北京积分落户数据.csv'</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">)</span>df3</code></pre><blockquote><p><strong>提示</strong>：上面代码中的CSV文件是用相对路径进行获取的，也就是说当前工作路径下有名为<code>data</code>的文件夹，而“2018年北京积分落户数据.csv”就在这个文件夹下。如果使用Windows系统，在写路径分隔符时也建议使用<code>/</code>而不是<code>\</code>，如果想使用<code>\</code>，建议在字符串前面添加一个<code>r</code>，使用原始字符串来避开转义字符，例如<code>r&#39;c:\new\data\2018年北京积分落户数据.csv&#39;</code>。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">      name   birthday      company          scoreid                                             1     杨xx   1972-12       北京利德华福xxxx  122.592     纪xx   1974-12       北京航天数据xxxx  121.253     王x    1974-05       品牌联盟(北京)xx  118.964     杨x    1975-07       中科专利商标xxxx  118.215     张xx   1974-11       北京阿里巴巴xxxx  117.79...   ...      ...                  ...     ...6015  孙xx   1978-08       华为海洋网络xxxx   90.756016  刘xx   1976-11       福斯（上海）xxxx   90.756017  周x    1977-10       赢创德固赛xxxxxx   90.756018  赵x    1979-07       澳科利耳医疗xxxx   90.756019  贺x    1981-06       北京宝洁技术xxxx   90.75[6019 rows x 4 columns]</code></pre><blockquote><p><strong>说明</strong>： 上面输出的内容隐去了姓名（name）和公司名称（company）字段中的部分信息。如果需要上面例子中的 CSV 文件，可以通过百度云盘获取，链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p></blockquote><h4 id="读取Excel工作表创建DataFrame对象"><a href="#读取Excel工作表创建DataFrame对象" class="headerlink" title="读取Excel工作表创建DataFrame对象"></a>读取Excel工作表创建DataFrame对象</h4><p>可以通过<code>pandas</code> 模块的<code>read_excel</code>函数来读取 Excel 文件，该函数与上面的<code>read_csv</code>非常类似，多了一个<code>sheet_name</code>参数来指定数据表的名称，但是不同于 CSV 文件，没有<code>sep</code>或<code>delimiter</code>这样的参数。假设有名为“2022年股票数据.xlsx”的 Excel 文件，里面有用股票代码命名的五个表单，分别是阿里巴巴（BABA）、百度（BIDU）、京东（JD）、亚马逊（AMZN）、甲骨文（ORCL）这五个公司2022年的股票数据，如果想加载亚马逊的股票数据，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data/2022年股票数据.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'AMZN'</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'Date'</span><span class="token punctuation">)</span>df4</code></pre><blockquote><p><strong>说明</strong>：上面例子中的 CSV 文件可以通过百度云盘获取，链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">               Open     High       Low    Close    VolumeDate                                                     2022-12-30   83.120   84.050   82.4700   84.000  624011942022-12-29   82.870   84.550   82.5500   84.180  549958952022-12-28   82.800   83.480   81.6900   81.820  582285752022-12-27   84.970   85.350   83.0000   83.040  572840352022-12-23   83.250   85.780   82.9344   85.250  57433655...             ...      ...       ...      ...       ...2022-01-07  163.839  165.243  162.0310  162.554  466059002022-01-06  163.450  164.800  161.9370  163.254  519577802022-01-05  166.883  167.126  164.3570  164.357  643027202022-01-04  170.438  171.400  166.3490  167.522  707251602022-01-03  167.550  170.704  166.1600  170.404  63869140[251 rows x 5 columns]</code></pre><h4 id="读取关系数据库二维表创建DataFrame对象"><a href="#读取关系数据库二维表创建DataFrame对象" class="headerlink" title="读取关系数据库二维表创建DataFrame对象"></a>读取关系数据库二维表创建DataFrame对象</h4><p><code>pandas</code>模块的<code>read_sql</code>函数可以通过 SQL 语句从数据库中读取数据创建<code>DataFrame</code>对象，该函数的第二个参数代表了需要连接的数据库。对于 MySQL 数据库，我们可以通过<code>pymysql</code>或<code>mysqlclient</code>来创建数据库连接（需要提前安装好三方库），得到一个<code>Connection</code> 对象，而这个对象就是<code>read_sql</code>函数需要的第二个参数，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 创建一个MySQL数据库的连接对象</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>    host<span class="token operator">=</span><span class="token string">'101.42.16.8'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>    user<span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'Guest.618'</span><span class="token punctuation">,</span>    database<span class="token operator">=</span><span class="token string">'hrs'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">)</span><span class="token comment"># 通过SQL从数据库二维表读取数据创建DataFrame</span>df5 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select * from tb_emp'</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'eno'</span><span class="token punctuation">)</span>df5</code></pre><blockquote><p><strong>提示</strong>：执行上面的代码需要先安装<code>pymysql</code>库，如果尚未安装，可以先在单元格中先执行魔法指令<code>%pip install pymysql</code>，然后再运行上面的代码。上面的代码连接的是我部署在腾讯云上的 MySQL 数据库，公网 IP 地址：<code>101.42.16.8</code>，用户名：<code>guest</code>，密码：<code>Guest.618</code>，数据库：<code>hrs</code>，字符集：<code>utf8mb4</code>，大家可以使用这个数据库，但是不要进行恶意的访问。<code>hrs</code>数据库一共有三张表，分别是：<code>tb_dept</code>（部门表）、<code>tb_emp</code>（员工表）、<code>tb_emp2</code>（员工表2）。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">       ename   job     mgr     sal    comm    dnoeno                                        1359   胡一刀   销售员  3344.0  1800   200.0   302056    乔峰   分析师   7800.0  5000  1500.0   203088   李莫愁   设计师  2056.0  3500   800.0   203211   张无忌   程序员  2056.0  3200     NaN   203233   丘处机   程序员  2056.0  3400     NaN   203244   欧阳锋   程序员  3088.0  3200     NaN   203251   张翠山   程序员  2056.0  4000     NaN   203344    黄蓉  销售主管  7800.0  3000   800.0   303577    杨过    会计    5566.0  2200     NaN   103588   朱九真    会计   5566.0  2500     NaN   104466   苗人凤   销售员  3344.0  2500     NaN   305234    郭靖    出纳    5566.0  2000     NaN   105566   宋远桥   会计师  7800.0  4000  1000.0   107800   张三丰    总裁     NaN   9000  1200.0   20</code></pre><p>执行上面的代码会出现一个警告，因为 pandas 库希望我们使用<code>SQLAlchemy</code>三方库接入数据库，具体内容是：“UserWarning: pandas only supports SQLAlchemy connectable (engine&#x2F;connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.”。如果不想看到这个警告，我们可以试一试下面的解决方案。</p><p>首先，安装三方库<code>SQLAlchemy</code>，在 Jupyter 中可以使用<code>%pip</code>魔法指令。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>pip install sqlalchemy</code></pre><p>通过<code>SQLAlchemy</code>的<code>create_engine</code>函数创建<code>Engine</code>对象作为<code>read_sql</code>函数的第二个参数，此时<code>read_sql</code>函数的第一个参数可以是 SQL 语句，也可以是二维表的表名。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token comment"># 通过指定的URL（统一资源定位符）访问数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://guest:Guest.618@101.42.16.8:3306/hrs'</span><span class="token punctuation">)</span><span class="token comment"># 直接通过表名加载整张表的数据</span>df5 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'tb_emp'</span><span class="token punctuation">,</span> engine<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'eno'</span><span class="token punctuation">)</span>df5</code></pre><blockquote><p><strong>说明</strong>：如果通过表名加载二维表数据，也可以将上面的函数换成<code>read_sql_table</code>。</p></blockquote><p>我们再来加载部门表的数据创建<code>DataFrame</code>对象。</p><pre class="language-python" data-language="python"><code class="language-python">df6 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select dno, dname, dloc from tb_dept'</span><span class="token punctuation">,</span> engine<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'dno'</span><span class="token punctuation">)</span>df6</code></pre><blockquote><p><strong>说明</strong>：如果通过 SQL 查询获取数据，也可以将上面的函数换成<code>read_sql_query</code>。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">      dname   dlocdno           10    会计部   北京20    研发部   成都30    销售部   重庆40    运维部   深圳</code></pre><p>在完成数据加载后，如果希望释放数据库连接，可以使用下面的代码。</p><pre class="language-python" data-language="python"><code class="language-python">engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="基本属性和方法"><a href="#基本属性和方法" class="headerlink" title="基本属性和方法"></a>基本属性和方法</h3><p>在开始讲解<code>DataFrame</code>的属性和方法前，我们先从之前提到的<code>hrs</code>数据库中读取三张表的数据，创建出三个<code>DataFrame</code>对象，完整的代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engineengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://guest:Guest.618@101.42.16.8:3306/hrs'</span><span class="token punctuation">)</span>dept_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql_table<span class="token punctuation">(</span><span class="token string">'tb_dept'</span><span class="token punctuation">,</span> engine<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'dno'</span><span class="token punctuation">)</span>emp_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql_table<span class="token punctuation">(</span><span class="token string">'tb_emp'</span><span class="token punctuation">,</span> engine<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'eno'</span><span class="token punctuation">)</span>emp2_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql_table<span class="token punctuation">(</span><span class="token string">'tb_emp2'</span><span class="token punctuation">,</span> engine<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'eno'</span><span class="token punctuation">)</span></code></pre><p>得到的三个<code>DataFrame</code>对象如下所示。</p><p>部门表（<code>dept_df</code>），其中<code>dno</code>是部门的编号，<code>dname</code>和<code>dloc</code>分别是部门的名称和所在地。</p><pre class="language-none"><code class="language-none">    dname  dlocdno10会计部北京20研发部成都30销售部重庆40运维部深圳</code></pre><p>员工表（<code>emp_df</code>），其中<code>eno</code>是员工编号，<code>ename</code>、<code>job</code>、<code>mgr</code>、<code>sal</code>、<code>comm</code>和<code>dno</code>分别代表员工的姓名、职位、主管编号、月薪、补贴和部门编号。</p><pre class="language-none"><code class="language-none">        ename    job        mgr      sal     comm    dnoeno1359胡一刀    销售员   3344.01800200.0302056乔峰    分析师    7800.0 5000 1500.0 203088李莫愁   设计师   2056.03500800.0203211张无忌   程序员   2056.03200NaN     203233丘处机   程序员   2056.03400NaN    203244欧阳锋   程序员   3088.03200NaN     203251张翠山   程序员   2056.04000NaN    203344黄蓉    销售主管   7800.03000800.0303577杨过    会计     5566.0  2200  NaN  103588朱九真   会计    5566.0 2500 NaN 104466苗人凤   销售员   3344.02500NaN    305234郭靖    出纳     5566.0  2000  NaN  105566宋远桥   会计师   7800.040001000.0107800张三丰   总裁    NaN      9000 1200.0 20</code></pre><blockquote><p><strong>说明</strong>：在数据库中<code>mgr</code>和<code>comm</code>两个列的数据类型是<code>int</code>，但是因为有缺失值（空值），读取到<code>DataFrame</code>之后，列的数据类型变成了<code>float</code>，因为我们通常会用<code>float</code>类型的<code>NaN</code>来表示空值。</p></blockquote><p>员工表（<code>emp2_df</code>），跟上面的员工表结构相同，但是保存了不同的员工数据。</p><pre class="language-none"><code class="language-none">       ename    job      mgr      sal    comm    dnoeno                                      9500   张三丰   总裁      NaN      50000  8000    209600   王大锤   程序员    9800.0   8000   600     209700   张三丰   总裁      NaN      60000  6000    209800   骆昊     架构师    7800.0   30000  5000    209900   陈小刀   分析师    9800.0   10000  1200    20</code></pre><p><code>DataFrame</code>对象的属性如下表所示。</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td><code>at</code> &#x2F; <code>iat</code></td><td>通过标签获取<code>DataFrame</code>中的单个值。</td></tr><tr><td><code>columns</code></td><td><code>DataFrame</code>对象列的索引</td></tr><tr><td><code>dtypes</code></td><td><code>DataFrame</code>对象每一列的数据类型</td></tr><tr><td><code>empty</code></td><td><code>DataFrame</code>对象是否为空</td></tr><tr><td><code>loc</code> &#x2F; <code>iloc</code></td><td>通过标签获取<code>DataFrame</code>中的一组值。</td></tr><tr><td><code>ndim</code></td><td><code>DataFrame</code>对象的维度</td></tr><tr><td><code>shape</code></td><td><code>DataFrame</code>对象的形状（行数和列数）</td></tr><tr><td><code>size</code></td><td><code>DataFrame</code>对象中元素的个数</td></tr><tr><td><code>values</code></td><td><code>DataFrame</code>对象的数据对应的二维数组</td></tr></tbody></table><p>关于<code>DataFrame</code>的方法，首先需要了解的是<code>info()</code>方法，它可以帮助我们了解<code>DataFrame</code>的相关信息，如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 14 entries, 1359 to 7800Data columns (total 6 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   ename   14 non-null     object  1   job     14 non-null     object  2   mgr     13 non-null     float64 3   sal     14 non-null     int64   4   comm    6 non-null      float64 5   dno     14 non-null     int64  dtypes: float64(2), int64(2), object(2)memory usage: 1.3+ KB</code></pre><p>如果需要查看<code>DataFrame</code>的头部或尾部的数据，可以使用<code>head()</code>或<code>tail()</code>方法，这两个方法的默认参数是<code>5</code>，表示获取<code>DataFrame</code>最前面5行或最后面5行的数据，如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job    mgr    sal    comm  dnoeno1359胡一刀   销售员3344   1800  200   302056乔峰   分析师 7800   5000  1500203088李莫愁  设计师2056   3500  800   203211张无忌  程序员2056   3200  NaN   203233丘处机  程序员2056   3400 NaN   20</code></pre><h3 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h3><h4 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h4><p>如果要获取<code>DataFrame</code>的某一列，例如取出上面<code>emp_df</code>的<code>ename</code>列，可以使用下面的两种方式。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>ename</code></pre><p>或者</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">]</span></code></pre><p>执行上面的代码可以发现，我们获得的是一个<code>Series</code>对象。事实上，<code>DataFrame</code>对象就是将多个<code>Series</code>对象组合到一起的结果。</p><p>如果要获取<code>DataFrame</code>的某一行，可以使用整数索引或我们设置的索引，例如取出员工编号为<code>2056</code>的员工数据，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>或者</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">]</span></code></pre><p>通过执行上面的代码我们发现，单独取<code>DataFrame</code> 的某一行或某一列得到的都是<code>Series</code>对象。我们当然也可以通过花式索引来获取多个行或多个列的数据，花式索引的结果仍然是一个<code>DataFrame</code>对象。</p><p>获取多个列：</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>获取多个行：</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">3344</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>如果要获取或修改<code>DataFrame</code> 对象某个单元格的数据，需要同时指定行和列的索引，例如要获取员工编号为<code>2056</code>的员工的职位信息，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">]</span></code></pre><p>或者</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span></code></pre><p>或者</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">]</span></code></pre><p>我们推荐大家使用第三种做法，因为它只做了一次索引运算。如果要将该员工的职位修改为“架构师”，可以使用下面的代码。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'架构师'</span></code></pre><p>当然，我们也可以通过切片操作来获取多行多列，相信大家一定已经想到了这一点。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2056</span><span class="token punctuation">:</span><span class="token number">3344</span><span class="token punctuation">]</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job        mgr      sal     comm    dnoeno2056乔峰    分析师    7800.0 5000 1500.0 203088李莫愁   设计师   2056.03500800.0203211张无忌   程序员   2056.03200NaN     203233丘处机   程序员   2056.03400NaN    203244欧阳锋   程序员   3088.03200NaN     203251张翠山   程序员   2056.04000NaN    203344黄蓉    销售主管   7800.03000800.030</code></pre><h4 id="数据筛选"><a href="#数据筛选" class="headerlink" title="数据筛选"></a>数据筛选</h4><p>上面我们提到了花式索引，相信大家已经联想到了布尔索引。跟<code>ndarray</code>和<code>Series</code>一样，我们可以通过布尔索引对<code>DataFrame</code>对象进行数据筛选，例如我们要从<code>emp_df</code>中筛选出月薪超过<code>3500</code>的员工，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">[</span>emp_df<span class="token punctuation">.</span>sal <span class="token operator">></span> <span class="token number">3500</span><span class="token punctuation">]</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job        mgr      sal     comm    dnoeno2056乔峰    分析师    7800.0 5000 1500.0 203251张翠山   程序员   2056.04000NaN    205566宋远桥   会计师   7800.040001000.0107800张三丰   总裁    NaN      9000 1200.0 20</code></pre><p>当然，我们也可以组合多个条件来进行数据筛选，例如从<code>emp_df</code>中筛选出月薪超过<code>3500</code>且部门编号为<code>20</code>的员工，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">[</span><span class="token punctuation">(</span>emp_df<span class="token punctuation">.</span>sal <span class="token operator">></span> <span class="token number">3500</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>emp_df<span class="token punctuation">.</span>dno <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job        mgr      sal     comm    dnoeno2056乔峰    分析师    7800.0 5000 1500.0 203251张翠山   程序员   2056.04000NaN    207800张三丰   总裁    NaN      9000 1200.0 20</code></pre><p>除了使用布尔索引，<code>DataFrame</code>对象的<code>query</code>方法也可以实现数据筛选，<code>query</code>方法的参数是一个字符串，它代表了筛选数据使用的表达式，而且更符合 Python 程序员的使用习惯。下面我们使用<code>query</code>方法将上面的效果重新实现一遍，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">emp_df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'sal > 3500 and dno == 20'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>74.深入浅出pandas-3</title>
      <link href="/2024/07/01/74.shen-ru-qian-chu-pandas-3/"/>
      <url>/2024/07/01/74.shen-ru-qian-chu-pandas-3/</url>
      
        <content type="html"><![CDATA[<h2 id="深入浅出pandas-3"><a href="#深入浅出pandas-3" class="headerlink" title="深入浅出pandas-3"></a>深入浅出pandas-3</h2><p>在完成数据加载之后，我们可能需要对事实表和维度表进行连接，这是对数据进行多维度拆解的基础；我们可能从不同的数据源加载了结构相同的数据，我们需要将这些数据拼接起来；我们把这些操作统称为数据重塑。当然，由于企业的信息化水平以及数据中台建设水平的差异，我们拿到的数据未必是质量很好的，可能还需要对数据中的缺失值、重复值、异常值进行适当的处理。即便我们获取的数据在质量上是没有问题的，但也可能需要对数据进行一系列的预处理，才能满足我们做数据分析的需求。接下来，我们就为大家讲解和梳理这方面的知识。</p><h3 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h3><p>有的时候，我们做数据分析需要的原始数据可能并不是来自一个地方，就像上一章的例子中，我们从关系型数据库中读取了三张表，得到了三个<code>DataFrame</code>对象，但实际工作可能需要我们把他们的数据整合到一起。例如：<code>emp_df</code>和<code>emp2_df</code>其实都是员工的数据，而且数据结构完全一致，我们可以使用<code>pandas</code>提供的<code>concat</code>函数实现两个或多个<code>DataFrame</code>的数据拼接，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">all_emp_df &#x3D; pd.concat([emp_df, emp2_df])</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job        mgr      sal     comm    dnoeno1359    胡一刀    销售员   3344.01800200.0302056    乔峰    分析师    7800.0 5000 1500.0 203088    李莫愁   设计师   2056.03500800.0203211    张无忌   程序员   2056.03200NaN     203233    丘处机   程序员   2056.03400NaN    203244    欧阳锋   程序员   3088.03200NaN     203251    张翠山   程序员   2056.04000NaN    203344    黄蓉    销售主管   7800.03000800.0303577    杨过    会计     5566.0  2200  NaN  103588    朱九真   会计    5566.0 2500 NaN 104466    苗人凤   销售员   3344.02500NaN    305234    郭靖    出纳     5566.0  2000  NaN  105566    宋远桥   会计师   7800.040001000.0107800    张三丰   总裁    NaN      9000 1200.0 209500张三丰   总裁    NaN     50000 8000.0 209600王大锤    程序员   9800.08000600.0209700张三丰   总裁    NaN     60000 6000.0 209800骆昊    架构师    7800.0 30000 5000.0 209900陈小刀   分析师   9800.0100001200.020</code></pre><p>上面的代码将两个代表员工数据的<code>DataFrame</code>拼接到了一起，接下来我们使用<code>merge</code>函数将员工表和部门表的数据合并到一张表中，代码如下所示。</p><p>先使用<code>reset_index</code>方法重新设置<code>all_emp_df</code>的索引，这样<code>eno</code> 不再是索引而是一个普通列，<code>reset_index</code>方法的<code>inplace</code>参数设置为<code>True</code>表示，重置索引的操作直接在<code>all_emp_df</code>上执行，而不是返回修改后的新对象。</p><pre class="language-Python" data-language="Python"><code class="language-Python">all_emp_df.reset_index(inplace&#x3D;True)</code></pre><p>通过<code>merge</code>函数合并数据，当然，也可以调用<code>DataFrame</code>对象的<code>merge</code>方法来达到同样的效果。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.merge(all_emp_df, dept_df, how&#x3D;&#39;inner&#39;, on&#x3D;&#39;dno&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    eno    enamejob     mgr sal comm dnodname dloc01359胡一刀 销售员3344.01800200.030   销售部 重庆13344黄蓉  销售主管7800.03000800.030   销售部 重庆24466苗人凤 销售员3344.02500NaN    30   销售部 重庆32056乔峰  分析师 7800.0 5000 1500.0 20    研发部  成都43088李莫愁 设计师2056.03500800.020   研发部 成都53211张无忌  程序员2056.03200NaN    20   研发部 成都63233丘处机 程序员2056.03400NaN    20   研发部 成都73244欧阳锋 程序员3088.03200NaN    20   研发部 成都83251张翠山 程序员2056.04000NaN    20   研发部 成都97800张三丰 总裁     NaN 9000 1200.0 20    研发部  成都109500张三丰 总裁     NaN 50000 8000.0 20    研发部  成都119600王大锤 程序员9800.08000600.020   研发部 成都129700张三丰 总裁     NaN 60000 6000.0 20    研发部  成都139800骆昊  架构师 7800.0 30000 5000.0 20    研发部  成都149900陈小刀 分析师9800.0100001200.020   研发部 成都153577杨过  会计  5566.0  2200  NaN  10会计部  北京163588朱九真 会计     5566.0 2500 NaN 10   会计部 北京175234郭靖  出纳  5566.0  2000  NaN  10会计部  北京185566宋远桥 会计师7800.040001000.010  会计部北京</code></pre><p><code>merge</code>函数的一个参数代表合并的左表、第二个参数代表合并的右表，有SQL编程经验的同学对这两个词是不是感觉到非常亲切。正如大家猜想的那样，<code>DataFrame</code>对象的合并跟数据库中的表连接非常类似，所以上面代码中的<code>how</code>代表了合并两张表的方式，有<code>left</code>、<code>right</code>、<code>inner</code>、<code>outer</code>四个选项；而<code>on</code>则代表了基于哪个列实现表的合并，相当于 SQL 表连接中的连表条件，如果左右两表对应的列列名不同，可以用<code>left_on</code>和<code>right_on</code>参数取代<code>on</code>参数分别进行指定。</p><p>如果对上面的代码稍作修改，将<code>how</code>参数修改为<code>&#39;right&#39;</code>，大家可以思考一下代码执行的结果。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.merge(all_emp_df, dept_df, how&#x3D;&#39;right&#39;, on&#x3D;&#39;dno&#39;)</code></pre><p>运行结果比之前的输出多出了如下所示的一行，这是因为<code>how=&#39;right&#39;</code>代表右外连接，也就意味着右表<code>dept_df</code>中的数据会被完整的查出来，但是在<code>all_emp_df</code>中又没有编号为<code>40</code> 部门的员工，所以对应的位置都被填入了空值。</p><pre class="language-none"><code class="language-none">19NaN    NaN    NaN    NaN    NaN     NaN    40    运维部    深圳</code></pre><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>通常，我们从 Excel、CSV 或数据库中获取到的数据并不是非常完美的，里面可能因为系统或人为的原因混入了重复值或异常值，也可能在某些字段上存在缺失值；再者，<code>DataFrame</code>中的数据也可能存在格式不统一、量纲不统一等各种问题。因此，在开始数据分析之前，对数据进行清洗就显得特别重要。</p><h4 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h4><p>可以使用<code>DataFrame</code>对象的<code>isnull</code>或<code>isna</code>方法来找出数据表中的缺失值，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">emp_df.isnull()</code></pre><p>或者</p><pre class="language-Python" data-language="Python"><code class="language-Python">emp_df.isna()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename   job    mgr     sal     comm    dnoeno1359FalseFalseFalseFalseFalseFalse2056FalseFalseFalseFalseFalseFalse3088FalseFalseFalseFalseFalseFalse3211FalseFalseFalseFalseTrueFalse3233FalseFalseFalseFalseTrueFalse3244FalseFalseFalseFalseTrueFalse3251FalseFalseFalseFalseTrueFalse3344FalseFalseFalseFalseFalseFalse3577FalseFalseFalseFalseTrueFalse3588FalseFalseFalseFalseTrueFalse4466FalseFalseFalseFalseTrueFalse5234FalseFalseFalseFalseTrueFalse5566FalseFalseFalseFalseFalseFalse7800FalseFalseTrueFalseFalseFalse</code></pre><p>相对应的，<code>notnull</code>和<code>notna</code>方法可以将非空的值标记为<code>True</code>。如果想删除这些缺失值，可以使用<code>DataFrame</code>对象的<code>dropna</code>方法，该方法的<code>axis</code>参数可以指定沿着0轴还是1轴删除，也就是说当遇到空值时，是删除整行还是删除整列，默认是沿0轴进行删除的，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">emp_df.dropna()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename   job      mgr sal    comm     dnoeno1359胡一刀  销售员3344.01800   200.0302056乔峰    架构师 7800.0 50001500.0 203088李莫愁  设计师2056.03500   800.0203344黄蓉    销售主管7800.03000   800.0305566宋远桥  会计师7800.04000   1000.010</code></pre><p>如果要沿着1轴进行删除，可以使用下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">emp_df.dropna(axis&#x3D;1)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job      sal    dnoeno1359胡一刀   销售员    1800302056乔峰     架构师  5000 203088李莫愁   设计师    3500203211张无忌   程序员    3200203233丘处机   程序员    3400203244欧阳锋   程序员    3200203251张翠山   程序员    4000203344黄蓉     销售主管  3000303577杨过     会计   2200  103588朱九真   会计  2500 104466苗人凤   销售员 2500   305234郭靖     出纳      2000   105566宋远桥   会计师    4000   107800张三丰   总裁      9000   20</code></pre><blockquote><p><strong>注意</strong>：<code>DataFrame</code>对象的很多方法都有一个名为<code>inplace</code>的参数，该参数的默认值为<code>False</code>，表示我们的操作不会修改原来的<code>DataFrame</code>对象，而是将处理后的结果通过一个新的<code>DataFrame</code>对象返回。如果将该参数的值设置为<code>True</code>，那么我们的操作就会在原来的<code>DataFrame</code>上面直接修改，方法的返回值为<code>None</code>。简单的说，上面的操作并没有修改<code>emp_df</code>，而是返回了一个新的<code>DataFrame</code>对象。</p></blockquote><p>在某些特定的场景下，我们可以对空值进行填充，对应的方法是<code>fillna</code>，填充空值时可以使用指定的值（通过<code>value</code>参数进行指定），也可以用表格中前一个单元格（通过设置参数<code>method=ffill</code>）或后一个单元格（通过设置参数<code>method=bfill</code>）的值进行填充，当代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">emp_df.fillna(value&#x3D;0)</code></pre><blockquote><p><strong>注意</strong>：填充的值如何选择也是一个值得探讨的话题，实际工作中，可能会使用某种统计量（如：均值、众数等）进行填充，或者使用某种插值法（如：随机插值法、拉格朗日插值法等）进行填充，甚至有可能通过回归模型、贝叶斯模型等对缺失数据进行填充。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">        ename    job        mgr      sal     comm    dnoeno1359胡一刀    销售员   3344.01800200.0302056乔峰    分析师    7800.0 5000 1500.0 203088李莫愁   设计师   2056.03500800.0203211张无忌   程序员   2056.032000.0     203233丘处机   程序员   2056.034000.0    203244欧阳锋   程序员   3088.032000.0     203251张翠山   程序员   2056.040000.0    203344黄蓉    销售主管   7800.03000800.0303577杨过    会计     5566.0  2200  0.0  103588朱九真   会计    5566.0 2500 0.0 104466苗人凤   销售员   3344.025000.0    305234郭靖    出纳     5566.0  2000  0.0  105566宋远桥   会计师   7800.040001000.0107800张三丰   总裁    0.0      9000 1200.0 20</code></pre><h4 id="重复值"><a href="#重复值" class="headerlink" title="重复值"></a>重复值</h4><p>接下来，我们先给之前的部门表添加两行数据，让部门表中名为“研发部”和“销售部”的部门各有两个。</p><pre class="language-Python" data-language="Python"><code class="language-Python">dept_df.loc[50] &#x3D; &#123;&#39;dname&#39;: &#39;研发部&#39;, &#39;dloc&#39;: &#39;上海&#39;&#125;dept_df.loc[60] &#x3D; &#123;&#39;dname&#39;: &#39;销售部&#39;, &#39;dloc&#39;: &#39;长沙&#39;&#125;dept_df</code></pre><p>输出:</p><pre class="language-none"><code class="language-none">    dname  dlocdno10会计部北京20研发部成都30销售部重庆40运维部天津50研发部上海60销售部长沙</code></pre><p>现在，我们的数据表中有重复数据了，我们可以通过<code>DataFrame</code>对象的<code>duplicated</code>方法判断是否存在重复值，该方法在不指定参数时默认判断行索引是否重复，我们也可以指定根据部门名称<code>dname</code>判断部门是否重复，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">dept_df.duplicated(&#39;dname&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">dno10    False20    False30    False40    False50     True60     Truedtype: bool</code></pre><p>从上面的输出可以看到，<code>50</code>和<code>60</code>两个部门从部门名称上来看是重复的，如果要删除重复值，可以使用<code>drop_duplicates</code>方法，该方法的<code>keep</code>参数可以控制在遇到重复值时，保留第一项还是保留最后一项，或者多个重复项一个都不用保留，全部删除掉。</p><pre class="language-Python" data-language="Python"><code class="language-Python">dept_df.drop_duplicates(&#39;dname&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">dnamedlocdno10会计部北京20研发部成都30销售部重庆40运维部天津</code></pre><p>将<code>keep</code>参数的值修改为<code>last</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">dept_df.drop_duplicates(&#39;dname&#39;, keep&#x3D;&#39;last&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">dnamedlocdno10会计部北京40运维部天津50研发部上海60销售部长沙</code></pre><p>使用同样的方式，我们也可以清除<code>all_emp_df</code>中的重复数据，例如我们认定“ename”和“job”两个字段完全相同的就是重复数据，我们可以用下面的代码去除重复数据。</p><pre class="language-python" data-language="python"><code class="language-python">all_emp_df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>说明</strong>：上面的<code>drop_duplicates</code>方法添加了参数<code>inplace=True</code>，该方法不会返回新的<code>DataFrame</code>对象，而是在原来的<code>DataFrame</code>对象上直接删除，大家可以查看<code>all_emp_df</code>看看是不是已经移除了重复的员工数据。</p></blockquote><h4 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h4><p>异常值在统计学上的全称是疑似异常值，也称作离群点（outlier），异常值的分析也称作离群点分析。异常值是指样本中出现的“极端值”，数据值看起来异常大或异常小，其分布明显偏离其余的观测值。实际工作中，有些异常值可能是由系统或人为原因造成的，但有些异常值却不是，它们能够重复且稳定的出现，属于正常的极端值，例如很多游戏产品中头部玩家的数据往往都是离群的极端值。所以，我们既不能忽视异常值的存在，也不能简单地把异常值从数据分析中剔除。重视异常值的出现，分析其产生的原因，常常成为发现问题进而改进决策的契机。</p><p>异常值的检测有Z-score 方法、IQR 方法、DBScan 聚类、孤立森林等，这里我们对前两种方法做一个简单的介绍。</p><img src="http://localhost/mypic/20211004192858.png" style="zoom:50%;"><p>如果数据服从正态分布，依据3σ法则，异常值被定义与平均值的偏差超过三倍标准差的值。在正态分布下，距离平均值3σ之外的值出现的概率为$ P(|x-\mu|&gt;3\sigma)&lt;0.003 $，属于小概率事件。如果数据不服从正态分布，那么可以用远离均值的多少倍的标准差来描述，这里的倍数就是Z-score。Z-score以标准差为单位去度量某一原始分数偏离平均值的距离，公式如下所示。<br>$$<br>z &#x3D; \frac {X - \mu} {\sigma} \<br>|z| &gt; 3<br>$$<br>Z-score需要根据经验和实际情况来决定，通常把远离标准差<code>3</code>倍距离以上的数据点视为离群点，下面的代给出了如何通过Z-score方法检测异常值。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def detect_outliers_zscore(data, threshold&#x3D;3):    avg_value &#x3D; np.mean(data)    std_value &#x3D; np.std(data)    z_score &#x3D; np.abs((data - avg_value) &#x2F; std_value)    return data[z_score &gt; threshold]</code></pre><p>IQR 方法中的IQR（Inter-Quartile Range）代表四分位距离，即上四分位数（Q3）和下四分位数（Q1）的差值。通常情况下，可以认为小于 $ Q1 - 1.5 \times IQR $ 或大于 $ Q3 + 1.5 \times IQR $ 的就是异常值，而这种检测异常值的方法也是箱线图（后面会讲到）默认使用的方法。下面的代码给出了如何通过 IQR 方法检测异常值。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def detect_outliers_iqr(data, whis&#x3D;1.5):    q1, q3 &#x3D; np.quantile(data, [0.25, 0.75])    iqr &#x3D; q3 - q1    lower, upper &#x3D; q1 - whis * iqr, q3 + whis * iqr    return data[(data &lt; lower) | (data &gt; upper)]</code></pre><p>如果要删除异常值，可以使用<code>DataFrame</code>对象的<code>drop</code>方法，该方法可以根据行索引或列索引删除指定的行或列。例如我们认为月薪低于<code>2000</code>或高于<code>8000</code>的是员工表中的异常值，可以用下面的代码删除对应的记录。</p><pre class="language-Python" data-language="Python"><code class="language-Python">emp_df.drop(emp_df[(emp_df.sal &gt; 8000) | (emp_df.sal &lt; 2000)].index)</code></pre><p>如果要替换掉异常值，可以通过给单元格赋值的方式来实现，也可以使用<code>replace</code>方法将指定的值替换掉。例如我们要将月薪为<code>1800</code>和<code>9000</code>的替换为月薪的平均值，补贴为<code>800</code>的替换为<code>1000</code>，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">avg_sal &#x3D; np.mean(emp_df.sal).astype(int)emp_df.replace(&#123;&#39;sal&#39;: [1800, 9000], &#39;comm&#39;: 800&#125;, &#123;&#39;sal&#39;: avg_sal, &#39;comm&#39;: 1000&#125;)</code></pre><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>对数据进行预处理也是一个很大的话题，它包含了对数据的拆解、变换、归约、离散化等操作。我们先来看看数据的拆解。如果数据表中的数据是一个时间日期，我们通常都需要从年、季度、月、日、星期、小时、分钟等维度对其进行拆解，如果时间日期是用字符串表示的，可以先通过<code>pandas</code>的<code>to_datetime</code>函数将其处理成时间日期。</p><p>在下面的例子中，我们先读取 Excel 文件，获取到一组销售数据，其中第一列就是销售日期，我们将其拆解为“月份”、“季度”和“星期”，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sales_df &#x3D; pd.read_excel(    &#39;data&#x2F;2020年销售数据.xlsx&#39;,    usecols&#x3D;[&#39;销售日期&#39;, &#39;销售区域&#39;, &#39;销售渠道&#39;, &#39;品牌&#39;, &#39;销售额&#39;])sales_df.info()</code></pre><blockquote><p><strong>说明</strong>：上面代码中使用了相对路径来获取 Excel 文件，也就是说 Excel 文件在当前工作路径下名为<code>data</code>的文件夹中。如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取。链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 1945 entries, 0 to 1944Data columns (total 5 columns): #   Column  Non-Null Count  Dtype         ---  ------  --------------  -----          0   销售日期    1945 non-null   datetime64[ns] 1   销售区域    1945 non-null   object         2   销售渠道    1945 non-null   object         3   品牌        1945 non-null   object         4   销售额      1945 non-null   int64         dtypes: datetime64[ns](1), int64(1), object(3)memory usage: 76.1+ KB</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">sales_df[&#39;月份&#39;] &#x3D; sales_df[&#39;销售日期&#39;].dt.monthsales_df[&#39;季度&#39;] &#x3D; sales_df[&#39;销售日期&#39;].dt.quartersales_df[&#39;星期&#39;] &#x3D; sales_df[&#39;销售日期&#39;].dt.weekdaysales_df</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    销售日期 销售区域销售渠道品牌  销售额月份季度星期0    2020-01-01上海     拼多多 八匹马   8217    1 1   21    2020-01-01上海     抖音      八匹马6351 1  1    22    2020-01-01上海     天猫      八匹马14365 1  1    23    2020-01-01上海     天猫       八匹马2366 1  1     24    2020-01-01上海     天猫   皮皮虾15189 1  1     2...     ...         ...        ...       ...      ...     ...  ...   ...1940    2020-12-30北京     京东      花花姑娘 6994     12 4   21941    2020-12-30福建     实体      八匹马7663 12  4    21942    2020-12-31福建     实体      花花姑娘 14795    12 4   31943    2020-12-31福建     抖音      八匹马3481 12  4    31944    2020-12-31福建     天猫      八匹马2673 12  4    3</code></pre><p>在上面的代码中，通过日期时间类型的<code>Series</code>对象的<code>dt</code> 属性，获得一个访问日期时间的对象，通过该对象的<code>year</code>、<code>month</code>、<code>quarter</code>、<code>hour</code>等属性，就可以获取到年、月、季度、小时等时间信息，获取到的仍然是一个<code>Series</code>对象，它包含了一组时间信息，所以我们通常也将这个<code>dt</code>属性称为“日期时间向量”。</p><p>我们再来说一说字符串类型的数据的处理，我们先从指定的 Excel 文件中读取某招聘网站的招聘数据。</p><pre class="language-Python" data-language="Python"><code class="language-Python">jobs_df &#x3D; pd.read_csv(    &#39;data&#x2F;某招聘网站招聘数据.csv&#39;,    usecols&#x3D;[&#39;city&#39;, &#39;companyFullName&#39;, &#39;positionName&#39;, &#39;salary&#39;])jobs_df.info()</code></pre><blockquote><p><strong>说明</strong>：上面代码中使用了相对路径来获取 CSV 文件，也就是说 CSV 文件在当前工作路径下名为<code>data</code>的文件夹中。如果需要上面例子中的 CSV 文件，可以通过下面的百度云盘地址进行获取。链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 3140 entries, 0 to 3139Data columns (total 4 columns): #   Column           Non-Null Count  Dtype ---  ------           --------------  -----  0   city             3140 non-null   object 1   companyFullName  3140 non-null   object 2   positionName     3140 non-null   object 3   salary           3140 non-null   objectdtypes: object(4)memory usage: 98.2+ KB</code></pre><p>查看前<code>5</code>条数据。</p><pre class="language-Python" data-language="Python"><code class="language-Python">jobs_df.head()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    city    companyFullName              positionName    salary0   北京  达疆网络科技（上海）有限公司    数据分析岗       15k-30k1   北京  北京音娱时光科技有限公司        数据分析        10k-18k2   北京  北京千喜鹤餐饮管理有限公司     数据分析        20k-30k3   北京  吉林省海生电子商务有限公司     数据分析        33k-50k4   北京  韦博网讯科技（北京）有限公司数据分析        10k-15k</code></pre><p>上面的数据表一共有<code>3140</code>条数据，但并非所有的职位都是“数据分析”的岗位，如果要筛选出数据分析的岗位，可以通过检查<code>positionName</code>字段是否包含“数据分析”这个关键词，这里需要模糊匹配，应该如何实现呢？我们可以先获取<code>positionName</code>列，因为这个<code>Series</code>对象的<code>dtype</code>是字符串，所以可以通过<code>str</code>属性获取对应的字符串向量，然后就可以利用我们熟悉的字符串的方法来对其进行操作，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">jobs_df &#x3D; jobs_df[jobs_df.positionName.str.contains(&#39;数据分析&#39;)]jobs_df.shape</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">(1515, 4)</code></pre><p>可以看出，筛选后的数据还有<code>1515</code>条。接下来，我们还需要对<code>salary</code>字段进行处理，如果我们希望统计所有岗位的平均工资或每个城市的平均工资，首先需要将用范围表示的工资处理成其中间值，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">jobs_df.salary.str.extract(r&#39;(\d+)[kK]?-(\d+)[kK]?&#39;)</code></pre><blockquote><p><strong>说明</strong>：上面的代码通过正则表达式捕获组从字符串中抽取出两组数字，分别对应工资的下限和上限，对正则表达式不熟悉的读者，可以阅读我的知乎专栏“从零开始学Python”中的<a href="https://zhuanlan.zhihu.com/p/158929767">《正则表达式的应用》</a>一文。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">        0     10    15    301    10  182       20    303       33    504       10    15...     ...   ...3065    8     103069    6     103070    2     43071    6     123088    8     12</code></pre><p>需要提醒大家的是，抽取出来的两列数据都是字符串类型的值，我们需要将其转换成<code>int</code>类型，才能计算平均值，对应的方法是<code>DataFrame</code>对象的<code>applymap</code>方法，该方法的参数是一个函数，而该函数会作用于<code>DataFrame</code>中的每个元素。完成这一步之后，我们就可以使用<code>apply</code>方法将上面的<code>DataFrame</code>处理成中间值，<code>apply</code>方法的参数也是一个函数，可以通过指定<code>axis</code>参数使其作用于<code>DataFrame</code> 对象的行或列，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">temp_df &#x3D; jobs_df.salary.str.extract(r&#39;(\d+)[kK]?-(\d+)[kK]?&#39;).applymap(int)temp_df.apply(np.mean, axis&#x3D;1)</code></pre><p> 输出：</p><pre class="language-none"><code class="language-none">0       22.51       14.02       25.03       41.54       12.5        ... 3065    9.03069    8.03070    3.03071    9.03088    10.0Length: 1515, dtype: float64</code></pre><p>接下来，我们可以用上面的结果替换掉原来的<code>salary</code>列或者增加一个新的列来表示职位对应的工资，完整的代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">temp_df &#x3D; jobs_df.salary.str.extract(r&#39;(\d+)[kK]?-(\d+)[kK]?&#39;).applymap(int)jobs_df[&#39;salary&#39;] &#x3D; temp_df.apply(np.mean, axis&#x3D;1)jobs_df.head()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    city    companyFullName              positionName    salary0   北京  达疆网络科技（上海）有限公司    数据分析岗       22.51   北京  北京音娱时光科技有限公司        数据分析        14.02   北京  北京千喜鹤餐饮管理有限公司     数据分析        25.03   北京  吉林省海生电子商务有限公司     数据分析        41.54   北京  韦博网讯科技（北京）有限公司数据分析        12.5</code></pre><p><code>applymap</code>和<code>apply</code>两个方法在数据预处理的时候经常用到，<code>Series</code>对象也有<code>apply</code>方法，也是用于数据的预处理，但是<code>DataFrame</code>对象还有一个名为<code>transform</code> 的方法，也是通过传入的函数对数据进行变换，类似<code>Series</code>对象的<code>map</code>方法。需要强调的是，<code>apply</code>方法具有归约效果的，简单的说就是能将较多的数据处理成较少的数据或一条数据；而<code>transform</code>方法没有归约效果，只能对数据进行变换，原来有多少条数据，处理后还是有多少条数据。</p><p>如果要对数据进行深度的分析和挖掘，字符串、日期时间这样的非数值类型都需要处理成数值，因为非数值类型没有办法计算相关性，也没有办法进行$\chi^2$检验等操作。对于字符串类型，通常可以其分为以下三类，再进行对应的处理。</p><ol><li>有序变量（Ordinal Variable）：字符串表示的数据有顺序关系，那么可以对字符串进行序号化处理。</li><li>分类变量（Categorical Variable）&#x2F; 名义变量（Nominal Variable）：字符串表示的数据没有大小关系和等级之分，那么就可以使用独热编码的方式处理成哑变量（虚拟变量）矩阵。</li><li>定距变量（Scale Variable）：字符串本质上对应到一个有大小高低之分的数据，而且可以进行加减运算，那么只需要将字符串处理成对应的数值即可。</li></ol><p>对于第1类和第3类，我们可以用上面提到的<code>apply</code>或<code>transform</code>方法来处理，也可以利用<code>scikit-learn</code>中的<code>OrdinalEncoder</code>处理第1类字符串，这个我们在后续的课程中会讲到。对于第2类字符串，可以使用<code>pandas</code>的<code>get_dummies()</code>函数来生成哑变量（虚拟变量）矩阵，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">persons_df &#x3D; pd.DataFrame(    data&#x3D;&#123;        &#39;姓名&#39;: [&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;],        &#39;职业&#39;: [&#39;医生&#39;, &#39;医生&#39;, &#39;程序员&#39;, &#39;画家&#39;, &#39;教师&#39;],        &#39;学历&#39;: [&#39;研究生&#39;, &#39;大专&#39;, &#39;研究生&#39;, &#39;高中&#39;, &#39;本科&#39;]    &#125;)persons_df</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">姓名职业学历0关羽医生研究生1张飞医生大专2赵云程序员研究生3马超画家高中4黄忠教师本科</code></pre><p>将职业处理成哑变量矩阵。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.get_dummies(persons_df[&#39;职业&#39;])</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    医生 教师  画家  程序员01    0    0    011    0    0    020    0    0    130    0    1    040    1    0    0</code></pre><p>将学历处理成大小不同的值。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def handle_education(x):    edu_dict &#x3D; &#123;&#39;高中&#39;: 1, &#39;大专&#39;: 3, &#39;本科&#39;: 5, &#39;研究生&#39;: 10&#125;    return edu_dict.get(x, 0)persons_df[&#39;学历&#39;].apply(handle_education)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">0    101     32    103     14     5Name: 学历, dtype: int64</code></pre><p>我们再来说说数据离散化。离散化也叫分箱，如果变量的取值是连续值，那么它的取值有无数种可能，在进行数据分组的时候就会非常的不方便，这个时候将连续变量离散化就显得非常重要。之所以把离散化叫做分箱，是因为我们可以预先设置一些箱子，每个箱子代表了数据取值的范围，这样就可以将连续的值分配到不同的箱子中，从而实现离散化。下面的例子读取了2018年北京积分落户数据，我们可以根据落户积分对数据进行分组，具体的做法如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">luohu_df &#x3D; pd.read_csv(&#39;data&#x2F;2018年北京积分落户数据.csv&#39;, index_col&#x3D;&#39;id&#39;)luohu_df.score.describe()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">count    6019.000000mean       95.654552std         4.354445min        90.75000025%        92.33000050%        94.46000075%        97.750000max       122.590000Name: score, dtype: float64</code></pre><p>可以看出，落户积分的最大值是<code>122.59</code>，最小值是<code>90.75</code>，那么我们可以构造一个从<code>90</code>分到<code>125</code>分，每<code>5</code>分一组的<code>7</code>个箱子，<code>pandas</code>的<code>cut</code>函数可以帮助我们首先数据分箱，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">bins &#x3D; np.arange(90, 126, 5)pd.cut(luohu_df.score, bins, right&#x3D;False)</code></pre><blockquote><p><strong>说明</strong>：<code>cut</code>函数的<code>right</code>参数默认值为<code>True</code>，表示箱子左开右闭；修改为<code>False</code>可以让箱子的右边界为开区间，左边界为闭区间，大家看看下面的输出就明白了。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">id1       [120, 125)2       [120, 125)3       [115, 120)4       [115, 120)5       [115, 120)           ...    6015      [90, 95)6016      [90, 95)6017      [90, 95)6018      [90, 95)6019      [90, 95)Name: score, Length: 6019, dtype: categoryCategories (7, interval[int64, left]): [[90, 95) &lt; [95, 100) &lt; [100, 105) &lt; [105, 110) &lt; [110, 115) &lt; [115, 120) &lt; [120, 125)]</code></pre><p>我们可以根据分箱的结果对数据进行分组，然后使用聚合函数对每个组进行统计，这是数据分析中经常用到的操作，下一个章节会为大家介绍。除此之外，<code>pandas</code>还提供了一个名为<code>qcut</code>的函数，可以指定分位数对数据进行分箱，有兴趣的读者可以自行研究。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75.深入浅出pandas-4</title>
      <link href="/2024/07/01/75.shen-ru-qian-chu-pandas-4/"/>
      <url>/2024/07/01/75.shen-ru-qian-chu-pandas-4/</url>
      
        <content type="html"><![CDATA[<h2 id="深入浅出pandas-4"><a href="#深入浅出pandas-4" class="headerlink" title="深入浅出pandas-4"></a>深入浅出pandas-4</h2><h3 id="数据透视"><a href="#数据透视" class="headerlink" title="数据透视"></a>数据透视</h3><p>经过前面的学习，我们已经将数据准备就绪而且变成了我们想要的样子，接下来就是最为重要的数据透视阶段了。当我们拿到一大堆数据的时候，如何从数据中迅速的解读出有价值的信息，把繁杂的数据变成容易解读的统计图表并再此基础上产生业务洞察，这就是数据分析要解决的核心问题。</p><h4 id="获取描述性统计信息"><a href="#获取描述性统计信息" class="headerlink" title="获取描述性统计信息"></a>获取描述性统计信息</h4><p>首先，我们可以获取数据的描述性统计信息，通过描述性统计信息，我们可以了解数据的集中趋势和离散趋势。</p><p>例如，我们有如下所示的学生成绩表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">scores &#x3D; np.random.randint(50, 101, (5, 3))names &#x3D; (&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;)courses &#x3D; (&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;)df &#x3D; pd.DataFrame(data&#x3D;scores, columns&#x3D;courses, index&#x3D;names)df</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">     语文   数学   英语关羽  96    72    73张飞  72    7097赵云  74    5179马超  100   5454黄忠  89    10088</code></pre><p>我们可以通过<code>DataFrame</code>对象的方法<code>mean</code>、<code>max</code>、<code>min</code>、<code>std</code>、<code>var</code>等方法分别获取每个学生或每门课程的平均分、最高分、最低分、标准差、方差等信息，也可以直接通过<code>describe</code>方法直接获取描述性统计信息，代码如下所示。</p><p>计算每门课程成绩的平均分。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.mean()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">语文    86.2数学    69.4英语    78.2dtype: float64</code></pre><p>计算每个学生成绩的平均分。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.mean(axis&#x3D;1)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">关羽    80.333333张飞    79.666667赵云    68.000000马超    69.333333黄忠    92.333333dtype: float64</code></pre><p>计算每门课程成绩的方差。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.var()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">语文    161.2数学    379.8英语    265.7dtype: float64</code></pre><blockquote><p><strong>说明</strong>：通过方差可以看出，数学成绩波动最大，两极分化可能更严重。</p></blockquote><p>获取每门课程的描述性统计信息。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.describe()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        语文        数学         英语count   5.0000005.0000005.000000mean    86.20000069.40000078.200000std     12.69645619.48845816.300307min     72.00000051.00000054.00000025%     74.00000054.00000073.00000050%     89.00000070.00000079.00000075%     96.00000072.00000088.000000max     100.000000100.00000097.000000</code></pre><h4 id="排序和取头部值"><a href="#排序和取头部值" class="headerlink" title="排序和取头部值"></a>排序和取头部值</h4><p>如果需要对数据进行排序，可以使用<code>DataFrame</code>对象的<code>sort_values</code>方法，该方法的<code>by</code>参数可以指定根据哪个列或哪些列进行排序，而<code>ascending</code>参数可以指定升序或是降序。例如，下面的代码展示了如何将学生表按语文成绩排降序。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.sort_values(by&#x3D;&#39;语文&#39;, ascending&#x3D;False)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">      语文   数学   英语马超100    54  54关羽96     72     73黄忠89     100    88赵云74     51     79张飞72     70     97</code></pre><p>如果<code>DataFrame</code>数据量很大，排序将是一个非常耗费时间的操作。有的时候我们只需要获得排前N名或后N名的数据，这个时候其实没有必要对整个数据进行排序，而是直接利用堆结构找出Top-N的数据。<code>DataFrame</code>的<code>nlargest</code>和<code>nsmallest</code>方法就提供对Top-N操作的支持，代码如下所示。</p><p>找出语文成绩前3名的学生信息。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.nlargest(3, &#39;语文&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">      语文   数学   英语马超100    54  54关羽96     72     73黄忠89     100    88</code></pre><p>找出数学成绩最低的3名学生的信息。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.nsmallest(3, &#39;数学&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">      语文  数学  英语赵云  74    5179马超  100   5454张飞  72    7097</code></pre><h4 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h4><p>我们先从之前使用过的 Excel 文件中读取2020年销售数据，然后再为大家演示如何进行分组聚合操作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df &#x3D; pd.read_excel(&#39;data&#x2F;2020年销售数据.xlsx&#39;)df.head()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    销售日期 销售区域   销售渠道  销售订单     品牌    售价  销售数量0   2020-01-01  上海       拼多多    182894-455  八匹马  99    831   2020-01-01  上海       抖音      205635-402  八匹马  219   292   2020-01-01  上海       天猫      205654-021  八匹马  169   853   2020-01-01  上海       天猫      205654-519  八匹马  169   144   2020-01-01  上海       天猫      377781-010  皮皮虾  249   61</code></pre><p>如果我们要统计每个销售区域的销售总额，可以先通过“售价”和“销售数量”计算出销售额，为<code>DataFrame</code>添加一个列，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df[&#39;销售额&#39;] &#x3D; df[&#39;售价&#39;] * df[&#39;销售数量&#39;]df.head()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">    销售日期 销售区域   销售渠道  销售订单     品牌    售价  销售数量  销售额0   2020-01-01  上海       拼多多    182894-455  八匹马  99    83        82171   2020-01-01  上海       抖音      205635-402  八匹马  219   29        63512   2020-01-01  上海       天猫      205654-021  八匹马  169   85        143653   2020-01-01  上海       天猫      205654-519  八匹马  169   14        23664   2020-01-01  上海       天猫      377781-010  皮皮虾  249   61        15189</code></pre><p>然后再根据“销售区域”列对数据进行分组，这里我们使用的是<code>DataFrame</code>对象的<code>groupby</code>方法。分组之后，我们取“销售额”这个列在分组内进行求和处理，代码和结果如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby(&#39;销售区域&#39;).销售额.sum()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">销售区域上海    11610489北京    12477717安徽      895463广东     1617949江苏     2304380浙江      687862福建    10178227Name: 销售额, dtype: int64</code></pre><p>如果我们要统计每个月的销售总额，我们可以将“销售日期”作为groupby&#96;方法的参数，当然这里需要先将“销售日期”处理成月，代码和结果如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby(df[&#39;销售日期&#39;].dt.month).销售额.sum()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">销售日期1     54098552     46084553     41649724     39967705     32390056     28179367     35013048     29481899     263296010    237538511    238528312    1691973Name: 销售额, dtype: int64</code></pre><p>接下来我们将难度升级，统计每个销售区域每个月的销售总额，这又该如何处理呢？事实上，<code>groupby</code>方法的第一个参数可以是一个列表，列表中可以指定多个分组的依据，大家看看下面的代码和输出结果就明白了。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby([&#39;销售区域&#39;, df[&#39;销售日期&#39;].dt.month]).销售额.sum()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">销售区域  销售日期上海    1       1679125        2       1689527        3       1061193        4       1082187        5        841199        6        785404        7        863906        8        734937        9       1107693        10       412108       11       825169       12       528041北京    1       1878234        2       1807787        3       1360666        4       1205989        5        807300        6       1216432        7       1219083        8        645727        9        390077        10       671608        11       678668        12       596146安徽    4        341308        5        554155广东    3        388180        8        469390        9        365191        11       395188江苏    4        537079        7        841032        10       710962        12       215307浙江    3        248354        8        439508福建    1       1852496        2       1111141        3       1106579        4        830207        5       1036351        6        816100        7        577283        8        658627        9        769999        10       580707        11       486258        12       352479Name: 销售额, dtype: int64</code></pre><p>如果希望统计出每个区域的销售总额以及每个区域单笔金额的最高和最低，我们可以在<code>DataFrame</code>或<code>Series</code>对象上使用<code>agg</code>方法并指定多个聚合函数，代码和结果如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby(&#39;销售区域&#39;).销售额.agg([&#39;sum&#39;, &#39;max&#39;, &#39;min&#39;])</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">           sum     max   min销售区域                        上海    11610489  116303   948北京    12477717  133411   690安徽      895463   68502  1683广东     1617949  120807   990江苏     2304380  114312  1089浙江      687862   90909  3927福建    10178227   87527   897</code></pre><p>如果希望自定义聚合后的列的名字，可以使用如下所示的方法。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby(&#39;销售区域&#39;).销售额.agg(销售总额&#x3D;&#39;sum&#39;, 单笔最高&#x3D;&#39;max&#39;, 单笔最低&#x3D;&#39;min&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">          销售总额    单笔最高  单笔最低销售区域                        上海      11610489     116303     948北京      12477717     133411     690安徽        895463      68502    1683广东       1617949     120807     990江苏       2304380     114312    1089浙江        687862      90909    3927福建      10178227      87527     897</code></pre><p>如果需要对多个列使用不同的聚合函数，例如“统计每个销售区域销售额的总和以及销售数量的最低值和最高值”，我们可以按照下面的方式来操作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby(&#39;销售区域&#39;)[[&#39;销售额&#39;, &#39;销售数量&#39;]].agg(&#123;    &#39;销售额&#39;: &#39;sum&#39;, &#39;销售数量&#39;: [&#39;max&#39;, &#39;min&#39;]&#125;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">           销售额  销售数量               sum    max min销售区域                   上海    11610489  100  10北京    12477717  100  10安徽      895463   98  16广东     1617949   98  10江苏     2304380  100  11浙江      687862   95  20福建    10178227  100  10</code></pre><h4 id="透视表和交叉表"><a href="#透视表和交叉表" class="headerlink" title="透视表和交叉表"></a>透视表和交叉表</h4><p>上面的例子中，“统计每个销售区域每个月的销售总额”会产生一个看起来很长的结果，在实际工作中我们通常把那些行很多列很少的表成为“窄表”，如果我们不想得到这样的一个“窄表”，可以使用<code>DataFrame</code>的<code>pivot_table</code>方法或者是<code>pivot_table</code>函数来生成透视表。透视表的本质就是对数据进行分组聚合操作，<strong>根据 A 列对 B 列进行统计</strong>，如果大家有使用 Excel 的经验，相信对透视表这个概念一定不会陌生。例如，我们要“统计每个销售区域的销售总额”，那么“销售区域”就是我们的 A 列，而“销售额”就是我们的 B 列，在<code>pivot_table</code>函数中分别对应<code>index</code>和<code>values</code>参数，这两个参数都可以是单个列或者多个列。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.pivot_table(df, index&#x3D;&#39;销售区域&#39;, values&#x3D;&#39;销售额&#39;, aggfunc&#x3D;&#39;sum&#39;)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">           销售额销售区域          上海    11610489北京    12477717安徽      895463广东     1617949江苏     2304380浙江      687862福建    10178227</code></pre><blockquote><p><strong>注意</strong>：上面的结果操作跟之前用<code>groupby</code>的方式得到的结果有一些区别，<code>groupby</code>操作后，如果对单个列进行聚合，得到的结果是一个<code>Series</code>对象，而上面的结果是一个<code>DataFrame</code> 对象。</p></blockquote><p>如果要统计每个销售区域每个月的销售总额，也可以使用<code>pivot_table</code>函数，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">df[&#39;月份&#39;] &#x3D; df[&#39;销售日期&#39;].dt.monthpd.pivot_table(df, index&#x3D;[&#39;销售区域&#39;, &#39;月份&#39;], values&#x3D;&#39;销售额&#39;, aggfunc&#x3D;&#39;sum&#39;)</code></pre><p>上面的操作结果是一个<code>DataFrame</code>，但也是一个长长的“窄表”，如果希望做成一个行比较少列比较多的“宽表”，可以将<code>index</code>参数中的列放到<code>columns</code>参数中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.pivot_table(df, index&#x3D;&#39;销售区域&#39;, columns&#x3D;&#39;月份&#39;, values&#x3D;&#39;销售额&#39;, aggfunc&#x3D;&#39;sum&#39;, fill_value&#x3D;0)</code></pre><blockquote><p><strong>说明</strong>：<code>pivot_table</code>函数的<code>fill_value=0</code>会将空值处理为<code>0</code>。</p></blockquote><p>输出：</p><img src="res/pivot_table_1.png" style="zoom:50%;"><p>使用<code>pivot_table</code>函数时，还可以通过添加<code>margins</code>和<code>margins_name</code>参数对分组聚合的结果做一个汇总，具体的操作和效果如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.pivot_table(df, index&#x3D;&#39;销售区域&#39;, columns&#x3D;&#39;月份&#39;, values&#x3D;&#39;销售额&#39;, aggfunc&#x3D;&#39;sum&#39;, fill_value&#x3D;0, margins&#x3D;True, margins_name&#x3D;&#39;总计&#39;)</code></pre><p>输出：</p><img src="res/pivot_table_2.png" style="zoom:50%;"><p>交叉表就是一种特殊的透视表，它不需要先构造一个<code>DataFrame</code>对象，而是直接通过数组或<code>Series</code>对象指定两个或多个因素进行运算得到统计结果。例如，我们要统计每个销售区域的销售总额，也可以按照如下所示的方式来完成，我们先准备三组数据。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sales_area, sales_month, sales_amount &#x3D; df[&#39;销售区域&#39;], df[&#39;月份&#39;], df[&#39;销售额&#39;]</code></pre><p>使用<code>crosstab</code>函数生成交叉表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.crosstab(index&#x3D;sales_area, columns&#x3D;sales_month, values&#x3D;sales_amount, aggfunc&#x3D;&#39;sum&#39;).fillna(0).astype(&#39;i8&#39;)</code></pre><blockquote><p><strong>说明</strong>：上面的代码使用了<code>DataFrame</code>对象的<code>fillna</code>方法将空值处理为0，再使用<code>astype</code>方法将数据类型处理成整数。</p></blockquote><h3 id="数据呈现"><a href="#数据呈现" class="headerlink" title="数据呈现"></a>数据呈现</h3><p>一图胜千言，我们对数据进行透视的结果，最终要通过图表的方式呈现出来，因为图表具有极强的表现力，能够让我们迅速的解读数据中隐藏的价值。和<code>Series</code>一样，<code>DataFrame</code>对象提供了<code>plot</code>方法来支持绘图，底层仍然是通过<code>matplotlib</code>库实现图表的渲染。关于<code>matplotlib</code>的内容，我们在下一个章节进行详细的探讨，这里我们只简单的讲解<code>plot</code>方法的用法。 </p><p>例如，我们想通过一张柱状图来比较“每个销售区域的销售总额”，可以直接在透视表上使用<code>plot</code>方法生成柱状图。我们先导入<code>matplotlib.pyplot</code>模块，通过修改绘图的参数使其支持中文显示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import matplotlib.pyplot as pltplt.rcParams[&#39;font.sans-serif&#39;] &#x3D; &#39;FZJKai-Z03S&#39;</code></pre><blockquote><p><strong>说明</strong>：上面的<code>FZJKai-Z03S</code>是我电脑上已经安装的一种支持中文的字体的名称，字体的名称可以通过查看用户主目录下<code>.matplotlib</code>文件夹下名为<code>fontlist-v330.json</code>的文件来获得，而这个文件在执行上面的命令后就会生成。</p></blockquote><p>使用魔法指令配置生成矢量图。</p><pre class="language-Python" data-language="Python"><code class="language-Python">%config InlineBackend.figure_format &#x3D; &#39;svg&#39;</code></pre><p>绘制“每个销售区域销售总额”的柱状图。</p><pre class="language-Python" data-language="Python"><code class="language-Python">temp &#x3D; pd.pivot_table(df, index&#x3D;&#39;销售区域&#39;, values&#x3D;&#39;销售额&#39;, aggfunc&#x3D;&#39;sum&#39;)temp.plot(figsize&#x3D;(8, 4), kind&#x3D;&#39;bar&#39;)plt.xticks(rotation&#x3D;0)plt.show()</code></pre><blockquote><p><strong>说明</strong>：上面的第3行代码会将横轴刻度上的文字旋转到0度，第4行代码会显示图像。</p></blockquote><p>输出：</p><img src="res/sales_bar_graph.png" style="zoom:45%;"><p>如果要绘制饼图，可以修改<code>plot</code>方法的<code>kind</code>参数为<code>pie</code>，然后使用定制饼图的参数对图表加以定制，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">temp.sort_values(by&#x3D;&#39;销售额&#39;, ascending&#x3D;False).plot(    figsize&#x3D;(6, 6),    kind&#x3D;&#39;pie&#39;,    y&#x3D;&#39;销售额&#39;,    ylabel&#x3D;&#39;&#39;,    autopct&#x3D;&#39;%.2f%%&#39;,    pctdistance&#x3D;0.8,    wedgeprops&#x3D;dict(linewidth&#x3D;1, width&#x3D;0.35),    legend&#x3D;False)plt.show()</code></pre><p>输出：</p><img src="res/sales_pie_graph.png" style="zoom:35%;">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>76.深入浅出pandas-5</title>
      <link href="/2024/07/01/76.shen-ru-qian-chu-pandas-5/"/>
      <url>/2024/07/01/76.shen-ru-qian-chu-pandas-5/</url>
      
        <content type="html"><![CDATA[<h2 id="深入浅出pandas-5"><a href="#深入浅出pandas-5" class="headerlink" title="深入浅出pandas-5"></a>深入浅出pandas-5</h2><p>我们再来补充一些使用<code>DataFrame</code>做数据分析时会使用到的操作，这些操作不仅常见而且也非常重要。</p><h3 id="计算同比环比"><a href="#计算同比环比" class="headerlink" title="计算同比环比"></a>计算同比环比</h3><p>我们之前讲过一个统计月度销售额的例子，我们可以通过<code>groupby</code>方法做分组聚合，也可以通过<code>pivot_table</code>生成透视表，如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">sales_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data/2020年销售数据.xlsx'</span><span class="token punctuation">)</span>sales_df<span class="token punctuation">[</span><span class="token string">'月份'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sales_df<span class="token punctuation">.</span>销售日期<span class="token punctuation">.</span>dt<span class="token punctuation">.</span>monthsales_df<span class="token punctuation">[</span><span class="token string">'销售额'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sales_df<span class="token punctuation">.</span>售价 <span class="token operator">*</span> sales_df<span class="token punctuation">.</span>销售数量result_df <span class="token operator">=</span> sales_df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'月份'</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">'销售额'</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span>result_df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'销售额'</span><span class="token punctuation">:</span> <span class="token string">'本月销售额'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>result_df</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">      本月销售额月份         1       54098552       46084553       41649724       39967705       32390056       28179367       35013048       29481899       263296010      237538511      238528312      1691973</code></pre><p>在得到月度销售额之后，如果我们需要计算月环比，这里有两种方案。第一种方案是我们可以使用<code>shift</code>方法对数据进行移动，将上一个月的数据与本月数据对齐，然后通过<code>(本月销售额 - 上月销售额) / 上月销售额</code>来计算月环比，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">result_df<span class="token punctuation">[</span><span class="token string">'上月销售额'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result_df<span class="token punctuation">.</span>本月销售额<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>result_df</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">      本月销售额      上月销售额月份                    1       5409855            NaN2       4608455      5409855.03       4164972      4608455.04       3996770      4164972.05       3239005      3996770.06       2817936      3239005.07       3501304      2817936.08       2948189      3501304.09       2632960      2948189.010      2375385      2632960.011      2385283      2375385.012      1691973      2385283.0</code></pre><p>在上面的例子中，<code>shift</code>方法的参数为<code>1</code>表示将数据向下移动一个单元，当然我们可以使用参数<code>-1</code>将数据向上移动一个单元。相信大家能够想到，如果我们有更多年份的数据，我们可以将参数设置为<code>12</code>，这样就可以计算今年的每个月与去年的每个月之间的同比。</p><pre class="language-python" data-language="python"><code class="language-python">result_df<span class="token punctuation">[</span><span class="token string">'环比'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result_df<span class="token punctuation">.</span>本月销售额 <span class="token operator">-</span> result_df<span class="token punctuation">.</span>上月销售额<span class="token punctuation">)</span> <span class="token operator">/</span> result_df<span class="token punctuation">.</span>上月销售额result_df<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    formatter<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'上月销售额'</span><span class="token punctuation">:</span> <span class="token string">'&#123;:.0f&#125;'</span><span class="token punctuation">,</span> <span class="token string">'环比'</span><span class="token punctuation">:</span> <span class="token string">'&#123;:.2%&#125;'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    na_rep<span class="token operator">=</span><span class="token string">'--------'</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">      本月销售额      上月销售额         环比月份                    1       5409855       --------     -------- 2       4608455        5409855      -14.81%     3       4164972        4608455       -9.62%4       3996770        4164972       -4.04%5       3239005        3996770      -18.96%6       2817936        3239005      -13.00%7       3501304        2817936       24.25%8       2948189        3501304      -15.80%9       2632960        2948189      -10.69%10      2375385        2632960       -9.78%11      2385283        2375385        0.42%12      1691973        2385283      -29.07%</code></pre><blockquote><p><strong>说明</strong>：使用 JupyterLab 时，可以通过<code>DataFrame</code>对象的<code>style</code>属性在网页中对其进行渲染，上面的代码通过<code>Styler</code>对象的<code>format</code>方法将环比格式化为百分比进行显示，此外还指定了将空值替换为<code>--------</code>。</p></blockquote><p>更为简单的第二种方案是直接使用<code>pct_change</code>方法计算变化的百分比，我们先将之前的上月销售额和环比列删除掉。</p><pre class="language-python" data-language="python"><code class="language-python">result_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'上月销售额'</span><span class="token punctuation">,</span> <span class="token string">'环比'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>接下来，我们使用<code>DataFrame</code>对象的<code>pct_change</code>方法完成环比的计算。值得一提的是，<code>pct_change</code>方法有一个名为<code>periods</code>的参数，它的默认值是<code>1</code>，计算相邻两项数据变化的百分比，这不就是我们想要的环比吗？如果我们有很多年的数据，在计算时把这个参数的值修改为<code>12</code>，就可以得到相邻两年的月同比。</p><pre class="language-python" data-language="python"><code class="language-python">result_df<span class="token punctuation">[</span><span class="token string">'环比'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result_df<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span>result_df</code></pre><h3 id="窗口计算"><a href="#窗口计算" class="headerlink" title="窗口计算"></a>窗口计算</h3><p><code>DataFrame</code>对象的<code>rolling</code>方法允许我们将数据置于窗口中，然后用函数对窗口中的数据进行运算和处理。例如，我们获取了某只股票近期的数据，想制作5日均线和10日均线，那么就需要先设置窗口再进行运算。我们先用如下所示的代码读取2022年百度的股票数据，数据文件可以通过下面的链接来获取。</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df &#x3D; pd.read_excel(&#39;data&#x2F;2022年股票数据.xlsx&#39;, sheet_name&#x3D;&#39;BIDU&#39;)baidu_df.sort_index(inplace&#x3D;True)baidu_df</code></pre><p>输出：</p><img src="res/baidu_stock.png" style="zoom:50%;"><p>上面的<code>DataFrame</code>有<code>Open</code>、<code>High</code>、<code>Low</code>、<code>Close</code>、<code>Volume</code>五个列，分别代表股票的开盘价、最高价、最低价、收盘价和成交量，接下来我们对百度的股票数据进行窗口计算。</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df.rolling(5).mean()</code></pre><p>输出：</p><img src="res/baidu_stock_ma5.png" style="zoom:50%;"><p>我们也可以在<code>Series</code>上使用<code>rolling</code>设置窗口并在窗口内完成运算，例如我们可以对上面的百度股票收盘价（<code>Close</code>列）计算5日均线和10日均线，并使用<code>merge</code>函数将其组装到一个<code>DataFrame</code>对象中并绘制出双均线图，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">close_ma5 &#x3D; baidu_df.Close.rolling(5).mean()close_ma10 &#x3D; baidu_df.Close.rolling(10).mean()result_df &#x3D; pd.merge(close_ma5, close_ma10, left_index&#x3D;True, right_index&#x3D;True)result_df.rename(columns&#x3D;&#123;&#39;Close_x&#39;: &#39;MA5&#39;, &#39;Close_y&#39;: &#39;MA10&#39;&#125;, inplace&#x3D;True)result_df.plot(kind&#x3D;&#39;line&#39;, figsize&#x3D;(10, 6))plt.show()</code></pre><p>输出：</p><img src="res/baidu_double_MA.png" style="zoom:50%;"><h3 id="相关性判定"><a href="#相关性判定" class="headerlink" title="相关性判定"></a>相关性判定</h3><p>在统计学中，我们通常使用协方差（covariance）来衡量两个随机变量的联合变化程度。如果变量 $X$ 的较大值主要与另一个变量 $Y$ 的较大值相对应，而两者较小值也相对应，那么两个变量倾向于表现出相似的行为，协方差为正。如果一个变量的较大值主要对应于另一个变量的较小值，则两个变量倾向于表现出相反的行为，协方差为负。简单的说，协方差的正负号显示着两个变量的相关性。方差是协方差的一种特殊情况，即变量与自身的协方差。</p><p>$$<br>cov(X,Y) &#x3D; E((X - \mu)(Y - \upsilon)) &#x3D; E(X \cdot Y) - \mu\upsilon<br>$$</p><p>如果 $X$ 和 $Y$ 是统计独立的，那么二者的协方差为0，这是因为在 $X$ 和 $Y$ 独立的情况下：</p><p>$$<br>E(X \cdot Y) &#x3D; E(X) \cdot E(Y) &#x3D; \mu\upsilon<br>$$</p><p>协方差的数值大小取决于变量的大小，通常是不容易解释的，但是正态形式的协方差可以显示两变量线性关系的强弱。在统计学中，皮尔逊积矩相关系数就是正态形式的协方差，它用于度量两个变量 $X$ 和 $Y$ 之间的相关程度（线性相关），其值介于<code>-1</code>到<code>1</code>之间。</p><p>$$<br>\frac {cov(X, Y)} {\sigma_{X}\sigma_{Y}}<br>$$</p><p>估算样本的协方差和标准差，可以得到样本皮尔逊系数，通常用希腊字母 $\rho$ 表示。</p><p>$$<br>\rho &#x3D; \frac {\sum_{i&#x3D;1}^{n}(X_i - \bar{X})(Y_i - \bar{Y})} {\sqrt{\sum_{i&#x3D;1}^{n}(X_i - \bar{X})^2} \sqrt{\sum_{i&#x3D;1}^{n}(Y_i - \bar{Y})^2}}<br>$$</p><p>我们用 $\rho$ 值判断指标的相关性时遵循以下两个步骤。</p><ol><li>判断指标间是正相关、负相关，还是不相关。<ul><li>当 $ \rho \gt 0 $，认为变量之间是正相关，也就是两者的趋势一致。</li><li>当 $ \rho \lt 0 $，认为变量之间是负相关，也就是两者的趋势相反。</li><li>当 $ \rho \approx 0 $，认为变量之间是不相关的，但并不代表两个指标是统计独立的。</li></ul></li><li>判断指标间的相关程度。<ul><li>当 $ \rho $ 的绝对值在 $ [0.6,1] $ 之间，认为变量之间是强相关的。</li><li>当 $ \rho $ 的绝对值在 $ [0.1,0.6) $ 之间，认为变量之间是弱相关的。</li><li>当 $ \rho $ 的绝对值在 $ [0,0.1) $ 之间，认为变量之间没有相关性。</li></ul></li></ol><p>皮尔逊相关系数适用于：</p><ol><li>两个变量之间是线性关系，都是连续数据。</li><li>两个变量的总体是正态分布，或接近正态的单峰分布。</li><li>两个变量的观测值是成对的，每对观测值之间相互独立。</li></ol><p>这里，我们顺便说一下，如果两组变量并不是来自于正态总体的连续值，我们该如何判断相关性呢？对于定序尺度（等级），我们可以使用斯皮尔曼秩相关系数，其计算公式如下所示：<br>$$<br>r_{s}&#x3D;1-{\frac {6\sum d_{i}^{2}}{n(n^{2}-1)}}<br>$$<br>其中，$d_{i}&#x3D;\operatorname {R} (X_{i})-\operatorname {R} (Y_{i})$，即每组观测中两个变量的等级差值，$n$为观测样本数。</p><p>对于定类尺度（类别），我们可以使用卡方检验的方式来判定其是否相关。其实很多时候，连续值也可以通过分箱的方式处理成离散的等级或类别，然后使用斯皮尔曼秩相关系数或卡方检验的方式来判定相关性。</p><p><code>DataFrame</code>对象的<code>cov</code>方法和<code>corr</code>方法分别用于计算协方差和相关系数，<code>corr</code>方法有一个名为<code>method</code>的参数，其默认值是<code>pearson</code>，表示计算皮尔逊相关系数；除此之外，还可以指定<code>kendall</code>或<code>spearman</code>来计算肯德尔系数或斯皮尔曼秩相关系数。</p><p>我们从名为<code>boston_house_price.csv</code>的文件中获取著名的波士顿房价数据集来创建一个<code>DataFrame</code>。</p><pre class="language-python" data-language="python"><code class="language-python">boston_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data/boston_house_price.csv'</span><span class="token punctuation">)</span>boston_df</code></pre><p>输出：</p><img src="/Users/Hao/Desktop/Python-Data-Analysis/res/boston_house_price.png" style="zoom:50%;"><blockquote><p><strong>说明</strong>：上面代码中使用了相对路径来访问 CSV 文件，也就是说 CSV 文件在当前工作路径下名为<code>data</code>的文件夹中。如果需要上面例子中的 CSV 文件，可以通过下面的百度云盘地址进行获取。链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g?pwd=e7b4">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g?pwd=e7b4</a>，提取码：e7b4。</p></blockquote><p>可以看出，该数据集中包含了诸多影响房价的特征，包括犯罪率、一氧化氮浓度、平均房间数、低收入人群占比等，其中<code>PRICE</code>代表房价，具体情况如下所示。</p><img src="res/boston_house_price_features.png" style="zoom:50%;"><p>接下来，我们将其中可以视为来自于正态总体的连续值，通过<code>corr</code>方法计算皮尔逊相关系数，看看哪些跟房价是正相关或负相关的关系，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">boston_df[[&#39;NOX&#39;, &#39;RM&#39;, &#39;PTRATIO&#39;, &#39;LSTAT&#39;, &#39;PRICE&#39;]].corr()</code></pre><p>输出：</p><img src="res/boston_person_correlation.png" style="zoom:50%;"><p>可以看出，平均房间数（<code>RM</code>）跟房价有较强的正相关性，而低收入人群占比（<code>LSTAT</code>）跟房价之间存在明显的负相关性。</p><p>斯皮尔曼秩相关系数对数据条件的要求没有皮尔逊相关系数严格，只要两个变量的观测值是成对的等级数据，或者是由连续变量转化成等级的数据，不论两个变量的总体分布形态、样本容量的大小如何，都可以用斯皮尔曼等级相关系数来进行研究。我们可以通过下面的方式对部分特征进行预处理，然后计算斯皮尔曼秩相关系数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">boston_df[&#39;CRIM&#39;] &#x3D; boston_df.CRIM.apply(lambda x: x &#x2F;&#x2F; 5 if x &lt; 25 else 5).map(int)boston_df[&#39;ZN&#39;] &#x3D; pd.qcut(boston_df.ZN, q&#x3D;[0, 0.75, 0.8, 0.85, 0.9, 0.95, 1], labels&#x3D;np.arange(6))boston_df[&#39;AGE&#39;] &#x3D; (boston_df.AGE &#x2F;&#x2F; 20).map(int)boston_df[&#39;DIS&#39;] &#x3D; (boston_df.DIS &#x2F;&#x2F; 2.05).map(int)boston_df[&#39;B&#39;] &#x3D; (boston_df.B &#x2F;&#x2F; 66).map(int)boston_df[&#39;PRICE&#39;] &#x3D; pd.qcut(boston_df.PRICE, q&#x3D;[0, 0.15, 0.3, 0.5, 0.7, 0.85, 1], labels&#x3D;np.arange(6))boston_df[[&#39;CRIM&#39;, &#39;ZN&#39;, &#39;AGE&#39;, &#39;DIS&#39;, &#39;B&#39;, &#39;PRICE&#39;]].corr(method&#x3D;&#39;spearman&#39;)</code></pre><p>输出：</p><img src="res/boston_spearman_correlation.png" style="zoom:50%;"><p>可以看出，房价跟犯罪率（<code>CRIM</code>）和房龄（<code>AGE</code>）之间存在较为明显的负相关关系，跟住房用地尺寸（<code>ZN</code>）存在微弱的正相关关系。相关性可以帮助我们在实际工作中找到业务抓手，即找到那些能够影响或改变工作结果的相关因素。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>77.深入浅出pandas-6</title>
      <link href="/2024/07/01/77.shen-ru-qian-chu-pandas-6/"/>
      <url>/2024/07/01/77.shen-ru-qian-chu-pandas-6/</url>
      
        <content type="html"><![CDATA[<h2 id="深入浅出pandas-6"><a href="#深入浅出pandas-6" class="headerlink" title="深入浅出pandas-6"></a>深入浅出pandas-6</h2><p>我们再来看看<code>Index</code>类型，它为<code>Series</code>和<code>DataFrame</code>对象提供了索引服务，有了索引我们就可以排序数据（<code>sort_index</code>方法）、对齐数据（在运算和合并数据时非常重要）并实现对数据的快速检索（索引运算）。由于<code>DataFrame</code>类型表示的是二维数据，所以它的行和列都有索引，分别是<code>index</code>和<code>columns</code>。<code>Index</code>类型的创建的比较简单，通常给出<code>data</code>、<code>dtype</code>和<code>name</code>三个参数即可，分别表示作为索引的数据、索引的数据类型和索引的名称。由于<code>Index</code>本身也是一维的数据，索引它的方法和属性跟<code>Series</code>非常类似，你可以尝试创建一个<code>Index</code>对象，然后尝试一下之前学过的属性和方法在<code>Index</code>类型上是否生效。接下来，我们主要看看<code>Index</code>的几种子类型。</p><h3 id="范围索引"><a href="#范围索引" class="headerlink" title="范围索引"></a>范围索引</h3><p>范围索引是由具有单调性的整数构成的索引，我们可以通过<code>RangeIndex</code>构造器来创建范围索引，也可以通过<code>RangeIndex</code>类的类方法<code>from_range</code>来创建范围索引，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">sales_data &#x3D; np.random.randint(400, 1000, 12)index &#x3D; pd.RangeIndex(1, 13, name&#x3D;&#39;月份&#39;)ser &#x3D; pd.Series(data&#x3D;sales_data, index&#x3D;index)ser</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">月份1     7032     7053     5574     9435     9616     6157     7888     9859     92110    95111    87412    609dtype: int64</code></pre><h3 id="分类索引"><a href="#分类索引" class="headerlink" title="分类索引"></a>分类索引</h3><p>分类索引是由定类尺度构成的索引。如果我们需要通过索引将数据分组，然后再进行聚合操作，分类索引就可以派上用场。分类索引还有一个名为<code>reorder_categories</code>的方法，可以给索引指定一个顺序，分组聚合的结果会按照这个指定的顺序进行呈现，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">sales_data &#x3D; [6, 6, 7, 6, 8, 6]index &#x3D; pd.CategoricalIndex(    data&#x3D;[&#39;苹果&#39;, &#39;香蕉&#39;, &#39;苹果&#39;, &#39;苹果&#39;, &#39;桃子&#39;, &#39;香蕉&#39;],    categories&#x3D;[&#39;苹果&#39;, &#39;香蕉&#39;, &#39;桃子&#39;],    ordered&#x3D;True)ser &#x3D; pd.Series(data&#x3D;sales_data, index&#x3D;index)ser</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">苹果    6香蕉    6苹果    7苹果    6桃子    8香蕉    6dtype: int64</code></pre><p>基于索引分组数据，然后使用<code>sum</code>进行求和。</p><pre class="language-Python" data-language="Python"><code class="language-Python">ser.groupby(level&#x3D;0).sum()</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">苹果    19香蕉    12桃子     8dtype: int64</code></pre><p>指定索引的顺序。</p><pre class="language-python" data-language="python"><code class="language-python">ser<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">.</span>reorder_categories<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token string">'桃子'</span><span class="token punctuation">,</span> <span class="token string">'苹果'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ser<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">香蕉    12桃子     8苹果    19dtype: int64</code></pre><h3 id="多级索引"><a href="#多级索引" class="headerlink" title="多级索引"></a>多级索引</h3><p>Pandas 中的<code>MultiIndex</code>类型用来表示层次或多级索引。可以使用<code>MultiIndex</code>类的类方法<code>from_arrays</code>、<code>from_product</code>、<code>from_tuples</code>等来创建多级索引，我们给大家举几个例子。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">tuples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_tuples<span class="token punctuation">(</span>tuples<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'no'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>index</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">MultiIndex([(1,  &#39;red&#39;),            (1, &#39;blue&#39;),            (2,  &#39;red&#39;),            (2, &#39;blue&#39;)],           names&#x3D;[&#39;no&#39;, &#39;color&#39;])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">arrays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_arrays<span class="token punctuation">(</span>arrays<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'no'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>index</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">MultiIndex([(1,  &#39;red&#39;),            (1, &#39;blue&#39;),            (2,  &#39;red&#39;),            (2, &#39;blue&#39;)],           names&#x3D;[&#39;no&#39;, &#39;color&#39;])</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">sales_data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>ser <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token operator">=</span>sales_data<span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">)</span>ser</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">no  color1   red      43    blue     312   red      55    blue     75dtype: int64</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">ser<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">no1     742    130dtype: int64</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">ser<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">colorblue    106red      98dtype: int64</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">stu_ids &#x3D; np.arange(1001, 1006)semisters &#x3D; [&#39;期中&#39;, &#39;期末&#39;]index &#x3D; pd.MultiIndex.from_product((stu_ids, semisters), names&#x3D;[&#39;学号&#39;, &#39;学期&#39;])courses &#x3D; [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]scores &#x3D; np.random.randint(60, 101, (10, 3))df &#x3D; pd.DataFrame(data&#x3D;scores, columns&#x3D;courses, index&#x3D;index)df</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">             语文 数学 英语学号学期1001  期中937760      期末9398841002  期中647871      期末7071971003  期中728897      期末99100631004  期中807161      期末9162721005  期中829567      期末847886</code></pre><p>根据第一级索引分组数据，按照期中成绩占<code>25%</code>，期末成绩占<code>75%</code> 的方式计算每个学生每门课的成绩。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">df.groupby(level&#x3D;0).agg(lambda x: x.values[0] * 0.25 + x.values[1] * 0.75)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">        语文    数学    英语学号100193.0092.7578.00100268.5072.7590.50100392.2597.0071.50100488.2564.2569.25100583.5082.2581.25</code></pre><h3 id="间隔索引"><a href="#间隔索引" class="headerlink" title="间隔索引"></a>间隔索引</h3><p>间隔索引顾名思义是使用固定的间隔范围充当索引，我们通常会使用<code>interval_range</code>函数来创建间隔索引，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">index <span class="token operator">=</span> pd<span class="token punctuation">.</span>interval_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>index</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]], dtype&#x3D;&#39;interval[int64, right]&#39;)</code></pre><p><code>IntervalIndex</code>有一个名为<code>contains</code>的方法，可以检查范围内是否包含了某个元素，如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">index<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([False,  True, False, False, False])</code></pre><p><code>IntervalIndex</code>还有一个名为<code>overlaps</code>的方法，可以检查一个范围跟其他的范围是否有重叠，如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">index<span class="token punctuation">.</span>overlaps<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Interval<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">array([False,  True,  True,  True, False])</code></pre><p>如果希望间隔范围是左闭右开的状态，可以在创建间隔索引时通过<code>closed=&#39;left&#39;</code>来做到；如果希望两边都是关闭状态，可以将<code>close</code>参数的值赋值为<code>both</code>，代码如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">index <span class="token operator">=</span> pd<span class="token punctuation">.</span>interval_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>index</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">IntervalIndex([[0, 1), [1, 2), [2, 3), [3, 4), [4, 5)], dtype&#x3D;&#39;interval[int64, left]&#39;)</code></pre><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">index <span class="token operator">=</span> pd<span class="token punctuation">.</span>interval_range<span class="token punctuation">(</span>start<span class="token operator">=</span>pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2022-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span>pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2022-01-04'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">)</span>index</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">IntervalIndex([[2022-01-01, 2022-01-02], [2022-01-02, 2022-01-03], [2022-01-03, 2022-01-04]], dtype&#x3D;&#39;interval[datetime64[ns], both]&#39;)</code></pre><h3 id="日期时间索引"><a href="#日期时间索引" class="headerlink" title="日期时间索引"></a>日期时间索引</h3><p><code>DatetimeIndex</code>应该是众多索引中最复杂最重要的一种索引，我们通常会使用<code>date_range()</code>函数来创建日期时间索引，该函数有几个非常重要的参数<code>start</code>、<code>end</code>、<code>periods</code>、<code>freq</code>、<code>tz</code>，分别代表起始日期时间、结束日期时间、生成周期、采样频率和时区。我们先来看看如何创建<code>DatetimeIndex</code>对象，再来讨论它的相关运算和操作，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.date_range(&#39;2021-1-1&#39;, &#39;2021-6-30&#39;, periods&#x3D;10)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">DatetimeIndex([&#39;2021-01-01&#39;, &#39;2021-01-21&#39;, &#39;2021-02-10&#39;, &#39;2021-03-02&#39;,               &#39;2021-03-22&#39;, &#39;2021-04-11&#39;, &#39;2021-05-01&#39;, &#39;2021-05-21&#39;,               &#39;2021-06-10&#39;, &#39;2021-06-30&#39;],              dtype&#x3D;&#39;datetime64[ns]&#39;, freq&#x3D;None)</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">pd.date_range(&#39;2021-1-1&#39;, &#39;2021-6-30&#39;, freq&#x3D;&#39;W&#39;)</code></pre><blockquote><p><strong>说明</strong>：<code>freq=W</code>表示采样周期为一周，它会默认星期日是一周的开始；如果你希望星期一表示一周的开始，你可以将其修改为<code>freq=W-MON</code>；你也可以试着将该参数的值修改为<code>12H</code>，<code>M</code>，<code>Q</code>等，看看会发生什么，相信你不难猜到它们的含义。</p></blockquote><p>输出：</p><pre class="language-none"><code class="language-none">DatetimeIndex([&#39;2021-01-03&#39;, &#39;2021-01-10&#39;, &#39;2021-01-17&#39;, &#39;2021-01-24&#39;,               &#39;2021-01-31&#39;, &#39;2021-02-07&#39;, &#39;2021-02-14&#39;, &#39;2021-02-21&#39;,               &#39;2021-02-28&#39;, &#39;2021-03-07&#39;, &#39;2021-03-14&#39;, &#39;2021-03-21&#39;,               &#39;2021-03-28&#39;, &#39;2021-04-04&#39;, &#39;2021-04-11&#39;, &#39;2021-04-18&#39;,               &#39;2021-04-25&#39;, &#39;2021-05-02&#39;, &#39;2021-05-09&#39;, &#39;2021-05-16&#39;,               &#39;2021-05-23&#39;, &#39;2021-05-30&#39;, &#39;2021-06-06&#39;, &#39;2021-06-13&#39;,               &#39;2021-06-20&#39;, &#39;2021-06-27&#39;],              dtype&#x3D;&#39;datetime64[ns]&#39;, freq&#x3D;&#39;W-SUN&#39;)</code></pre><p><code>DatatimeIndex</code>可以跟<code>DateOffset</code>类型进行运算，这一点很好理解，以为我们可以设置一个时间差让时间向前或向后偏移，具体的操作如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">index &#x3D; pd.date_range(&#39;2021-1-1&#39;, &#39;2021-6-30&#39;, freq&#x3D;&#39;W&#39;)index - pd.DateOffset(days&#x3D;2)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">DatetimeIndex([&#39;2021-01-01&#39;, &#39;2021-01-08&#39;, &#39;2021-01-15&#39;, &#39;2021-01-22&#39;,               &#39;2021-01-29&#39;, &#39;2021-02-05&#39;, &#39;2021-02-12&#39;, &#39;2021-02-19&#39;,               &#39;2021-02-26&#39;, &#39;2021-03-05&#39;, &#39;2021-03-12&#39;, &#39;2021-03-19&#39;,               &#39;2021-03-26&#39;, &#39;2021-04-02&#39;, &#39;2021-04-09&#39;, &#39;2021-04-16&#39;,               &#39;2021-04-23&#39;, &#39;2021-04-30&#39;, &#39;2021-05-07&#39;, &#39;2021-05-14&#39;,               &#39;2021-05-21&#39;, &#39;2021-05-28&#39;, &#39;2021-06-04&#39;, &#39;2021-06-11&#39;,               &#39;2021-06-18&#39;, &#39;2021-06-25&#39;],              dtype&#x3D;&#39;datetime64[ns]&#39;, freq&#x3D;None)</code></pre><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">index + pd.DateOffset(hours&#x3D;2, minutes&#x3D;10)</code></pre><p>输出：</p><pre class="language-none"><code class="language-none">DatetimeIndex([&#39;2021-01-03 02:10:00&#39;, &#39;2021-01-10 02:10:00&#39;,               &#39;2021-01-17 02:10:00&#39;, &#39;2021-01-24 02:10:00&#39;,               &#39;2021-01-31 02:10:00&#39;, &#39;2021-02-07 02:10:00&#39;,               &#39;2021-02-14 02:10:00&#39;, &#39;2021-02-21 02:10:00&#39;,               &#39;2021-02-28 02:10:00&#39;, &#39;2021-03-07 02:10:00&#39;,               &#39;2021-03-14 02:10:00&#39;, &#39;2021-03-21 02:10:00&#39;,               &#39;2021-03-28 02:10:00&#39;, &#39;2021-04-04 02:10:00&#39;,               &#39;2021-04-11 02:10:00&#39;, &#39;2021-04-18 02:10:00&#39;,               &#39;2021-04-25 02:10:00&#39;, &#39;2021-05-02 02:10:00&#39;,               &#39;2021-05-09 02:10:00&#39;, &#39;2021-05-16 02:10:00&#39;,               &#39;2021-05-23 02:10:00&#39;, &#39;2021-05-30 02:10:00&#39;,               &#39;2021-06-06 02:10:00&#39;, &#39;2021-06-13 02:10:00&#39;,               &#39;2021-06-20 02:10:00&#39;, &#39;2021-06-27 02:10:00&#39;],              dtype&#x3D;&#39;datetime64[ns]&#39;, freq&#x3D;None)</code></pre><p>如果<code>Series</code>对象或<code>DataFrame</code>对象使用了<code>DatetimeIndex</code>类型的索引，此时我们可以通过<code>asfreq()</code>方法指定一个时间频率来实现对数据的抽样，我们仍然以之前讲过的百度股票数据为例，给大家做一个演示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df &#x3D; pd.read_excel(&#39;data&#x2F;2022年股票数据.xlsx&#39;, sheet_name&#x3D;&#39;BIDU&#39;, index_col&#x3D;&#39;Date&#39;)baidu_df.sort_index(inplace&#x3D;True)baidu_df.asfreq(&#39;5D&#39;)</code></pre><p>输出：</p><img src="res/baidu_stock_asfreq.png" style="zoom:50%;"><p>大家可能注意到了，每5天抽取1天有可能会抽中非交易日，那么对应的列都变成了空值，为了解决这个问题，在使用<code>asfreq</code>方法时可以通过<code>method</code>参数来指定一种填充空值的方法，可以将相邻的交易日的数据填入进来。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df.asfreq(&#39;5D&#39;, method&#x3D;&#39;ffill&#39;)</code></pre><p>输出：</p><img src="res/baidu_stock_asfreq_ffill.png" style="zoom:50%;"><p>当使用<code>DatetimeIndex</code>索引时，我们也可以通过<code>resample()</code>方法基于时间对数据进行重采样，相当于根据时间周期对数据进行了分组操作，分组之后还可以进行聚合统计，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df.resample(&#39;1M&#39;).mean()</code></pre><p>输出：</p><img src="res/baidu_stock_resample.png" style="zoom:50%;"><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">baidu_df<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'1M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'std'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/baidu_stock_resample_agg.png" style="zoom:100%;"><blockquote><p><strong>提示</strong>：不知大家是否注意到，上面输出的<code>DataFrame</code> 的列索引是一个<code>MultiIndex</code>对象。你可以访问上面的<code>DataFrame</code>对象的<code>columns</code>属性看看。</p></blockquote><p>如果要实现日期时间的时区转换，我们可以先用<code>tz_localize()</code>方法将日期时间本地化，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df &#x3D; baidu_df.tz_localize(&#39;Asia&#x2F;Chongqing&#39;)baidu_df</code></pre><p>输出：</p><img src="res/baidu_stock_tz_localize.png" style="zoom:50%;"><p>在对时间本地化以后，我们再使用<code>tz_convert()</code>方法就可以实现转换时区，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">baidu_df.tz_convert(&#39;America&#x2F;New_York&#39;)</code></pre><p>输出：</p><img src="res/baidu_stock_tz_convert.png" style="zoom:50%;"><p>如果你的数据使用了<code>DatetimeIndex</code>类型的索引，那么你就很有可能要对数据进行时间序列分析，关于时间序列分析的方法和模型并不是本章节要探讨的内容，我们在其他的专栏中为大家分享。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78.数据可视化-1</title>
      <link href="/2024/07/01/78.shu-ju-ke-shi-hua-1/"/>
      <url>/2024/07/01/78.shu-ju-ke-shi-hua-1/</url>
      
        <content type="html"><![CDATA[<h2 id="数据可视化-1"><a href="#数据可视化-1" class="headerlink" title="数据可视化-1"></a>数据可视化-1</h2><p>在完成了对数据的透视之后，我们可以将数据透视的结果通过可视化的方式呈现出来，简单的说，就是将数据变成漂亮的统计图表，因为人类对颜色和形状会更加敏感，然后再进一步解读数据背后隐藏的商业价值。在之前的课程中，我们已经为大家展示过用使用<code>Series</code>或<code>DataFrame</code>对象的<code>plot</code>方法生成可视化图表的操作，本章我们为大家讲解这个绘图方法的基石，它就是大名鼎鼎的 matplotlib 库。</p><p>在讲解 matplotlib 之前，请大家先看看下面这张图，它给出了常用的图表类型及其应用场景。我们在选择统计图表时，如果不知道做出怎样的选择最合适，相信这张图就能帮到你。简单的说，看趋势折线图，比数据柱状图，定关系散点图，查占比饼状图，看分布直方图，找离群箱线图。</p><img src="res/choose_your_chart.png" style="zoom:65%;"><h3 id="导入和配置"><a href="#导入和配置" class="headerlink" title="导入和配置"></a>导入和配置</h3><p>之前的课程中，我们为大家讲解过如何安装和导入 matplotlib 库，如果不确定是否已经安装了 matplotlib，可以使用下面的魔法指令尝试安装或升级你的 matplotlib。</p><pre class="language-none"><code class="language-none">%pip install -U matplotlib</code></pre><p>为了解决 matplotlib 图表中文显示的问题，我们需要修改<code>pyplot</code>模块的<code>rcParams</code>配置参数，具体的操作如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import matplotlib.pyplot as pltplt.rcParams[&#39;font.sans-serif&#39;].insert(0, &#39;SimHei&#39;)plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False</code></pre><blockquote><p><strong>说明</strong>：上面代码中的<code>SimHei</code>是字体名称，大家可以通过百度云盘下载并安装该字体，链接地址：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g?pwd=e7b4%E3%80%82%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%B0%9D%E8%AF%95%E5%AE%89%E8%A3%85%E5%85%B6%E4%BB%96%E7%9A%84%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%EF%BC%8C%E5%AE%89%E8%A3%85%E4%B9%8B%E5%90%8E%E5%A6%82%E6%9E%9C%E4%B8%8D%E7%9F%A5%E9%81%93%E5%AD%97%E4%BD%93%E5%8F%AB%E4%BB%80%E4%B9%88%E5%90%8D%E5%AD%97%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%88%B0%E7%94%A8%E6%88%B7%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%90%8D%E4%B8%BA%60.matplotlib%60%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%89%BE%E5%88%B0%60fontlist-v330.json%60%E6%96%87%E4%BB%B6%EF%BC%8C%E6%89%93%E5%BC%80%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E5%92%8C%E5%AD%97%E4%BD%93%E7%9A%84%E5%90%8D%E7%A7%B0%E7%AD%89%E4%BF%A1%E6%81%AF%E3%80%82%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E5%90%8E%E5%9D%90%E6%A0%87%E8%BD%B4%E4%B8%8A%E7%9A%84%E8%B4%9F%E5%8F%B7%E5%B0%86%E4%BC%9A%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%EF%BC%8C%E9%9C%80%E8%A6%81%E5%B0%86%60axes.unicode_minus%60%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E4%B8%BA%60False%60%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E8%AE%A9%E5%9D%90%E6%A0%87%E8%BD%B4%E4%B8%8A%E7%9A%84%E8%B4%9F%E5%8F%B7%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E3%80%82">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g?pwd=e7b4。你可以尝试安装其他的中文字体，安装之后如果不知道字体叫什么名字，可以到用户主目录下名为`.matplotlib`的文件夹中找到`fontlist-v330.json`文件，打开后可以看到字体文件的路径和字体的名称等信息。需要注意的是，使用中文字体后坐标轴上的负号将会无法显示，需要将`axes.unicode_minus`参数设置为`False`，这样才能让坐标轴上的负号正常显示。</a></p></blockquote><p>通过下面的魔法指令，我们可以在绘图时生成<a href="https://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%BD%A2">矢量图</a>（SVG - Scalable Vector Graphics），矢量图的特点是不会因为放大、缩小或旋转等操作而失真，看起来会舒服很多。</p><pre class="language-Python" data-language="Python"><code class="language-Python">%config InlineBackend.figure_format&#x3D;&#39;svg&#39;</code></pre><h3 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h3><p><code>pyplot</code>模块的<code>figure</code>函数可以用来创建画布，创建画布时，可以通过<code>figsize</code>参数指定画布的尺寸（默认值是<code>[6.4, 4.8]</code>）；可以通过<code>dpi</code>参数设置绘图的分辨率，因为<code>dpi</code>代表了每英寸的像素点数量。除此之外，还可以通过<code>facecolor</code>参数设置画布的背景色。<code>figure</code>函数的返回值是一个<code>Figure</code>对象，它代表了绘图使用的画布，我们可以基于画布来创建绘图使用的坐标系。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.figure(figsize&#x3D;(8, 4), dpi&#x3D;120, facecolor&#x3D;&#39;darkgray&#39;)</code></pre><h3 id="创建坐标系"><a href="#创建坐标系" class="headerlink" title="创建坐标系"></a>创建坐标系</h3><p>可以直接使用<code>pyplot</code>模块的<code>subplot</code>函数来创建坐标系，该函数会返回<code>Axes</code>对象。<code>subplot</code>的前三个参数分别用来指定整个画布分成几行几列以及当前坐标系的索引，这三个参数的默认值都是<code>1</code>。如果没有创建坐标系，我们绘图时会使用画布上默认的也是唯一的一个坐标系；如果需要在画布上创建多个坐标系，就可以使用该函数。当然，我们也可以通过上面创建的<code>Figure</code>对象的<code>add_subplot</code>方法或<code>add_axes</code>方法来创建坐标系，前者跟<code>subplot</code>函数的作用一致，后者会产生嵌套的坐标系。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.subplot(2, 2, 1)</code></pre><h3 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h3><h4 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h4><p>在绘图时，如果没有先调用<code>figure</code>函数和<code>subplot</code>函数，我们将使用默认的画布和坐标系，如果要绘制折线图，可以使用<code>pyplot</code>模块的<code>plot</code>函数，并指定横轴和纵轴的数据。折线图最适合用来观察数据的趋势，尤其是当横坐标代表时间的情况下。我们可以使用<code>plot</code>函数的<code>color</code>参数来定制折线的颜色，可以使用<code>marker</code>参数来定制数据点的标记（例如：<code>*</code>表示五角星，<code>^</code>表示三角形，<code>o</code>表示小圆圈等），可以使用<code>linestyle</code>参数来定制折线的样式（例如：<code>-</code>表示实线，<code>--</code>表示虚线，<code>:</code>表示点线等），可以使用<code>linewidth</code>参数来定制折线的粗细。 下面的代码绘制了一条正弦曲线，其中<code>marker=&#39;*&#39;</code>会将数据点的标记设置为五角星形状，而<code>color=&#39;red&#39;</code>会将折线绘制为红色。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.linspace(-2 * np.pi, 2 * np.pi, 120)y &#x3D; np.sin(x)# 创建画布plt.figure(figsize&#x3D;(8, 4), dpi&#x3D;120)# 绘制折线图plt.plot(x, y, linewidth&#x3D;2, marker&#x3D;&#39;*&#39;, color&#x3D;&#39;red&#39;)# 显示绘图plt.show()</code></pre><p>输出：</p><img src="res/20220501173344.png" style="zoom:50%;"><p>如果要在一个坐标系上同时绘制正弦和余弦曲线，可以对上面的代码稍作修改。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">x &#x3D; np.linspace(-2 * np.pi, 2 * np.pi, 120)y1, y2 &#x3D; np.sin(x), np.cos(x)plt.figure(figsize&#x3D;(8, 4), dpi&#x3D;120)plt.plot(x, y1, linewidth&#x3D;2, marker&#x3D;&#39;*&#39;, color&#x3D;&#39;red&#39;)plt.plot(x, y2, linewidth&#x3D;2, marker&#x3D;&#39;^&#39;, color&#x3D;&#39;blue&#39;)# 定制图表上的标注（annotate函数的参数如果不理解可以先不管它）plt.annotate(&#39;sin(x)&#39;, xytext&#x3D;(0.5, -0.75), xy&#x3D;(0, -0.25), fontsize&#x3D;12, arrowprops&#x3D;&#123;    &#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;darkgreen&#39;, &#39;connectionstyle&#39;: &#39;angle3, angleA&#x3D;90, angleB&#x3D;0&#39;&#125;)plt.annotate(&#39;cos(x)&#39;, xytext&#x3D;(-3, 0.75), xy&#x3D;(-1.25, 0.5), fontsize&#x3D;12, arrowprops&#x3D;&#123;    &#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;darkgreen&#39;, &#39;connectionstyle&#39;: &#39;arc3, rad&#x3D;0.35&#39;&#125;)plt.show()</code></pre><p>输出：</p><img src="res/20220502095949.png" style="zoom:50%;"><p>如果要使用两个坐标系分别绘制正弦和余弦，可以用上面提到的<code>subplot</code>函数来创建坐标系，然后再绘图。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.figure(figsize&#x3D;(8, 4), dpi&#x3D;120)# 创建坐标系（第1个图）plt.subplot(2, 1, 1)plt.plot(x, y1, linewidth&#x3D;2, marker&#x3D;&#39;*&#39;, color&#x3D;&#39;red&#39;)# 创建坐标系（第2个图）plt.subplot(2, 1, 2)plt.plot(x, y2, linewidth&#x3D;2, marker&#x3D;&#39;^&#39;, color&#x3D;&#39;blue&#39;)plt.show()</code></pre><p>输出：</p><img src="res/20220501173446.png" style="zoom:50%;"><p>当然也可以像下面这么做，大家可以运行代码看看跟上面的图有什么区别。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.figure(figsize&#x3D;(8, 4), dpi&#x3D;120)plt.subplot(1, 2, 1)plt.plot(x, y1, linewidth&#x3D;2, marker&#x3D;&#39;*&#39;, color&#x3D;&#39;red&#39;)plt.subplot(1, 2, 2)plt.plot(x, y2, linewidth&#x3D;2, marker&#x3D;&#39;^&#39;, color&#x3D;&#39;blue&#39;)plt.show()</code></pre><p>然后，再试一试下面这个代码，看看运行效果如何。</p><pre class="language-Python" data-language="Python"><code class="language-Python">fig &#x3D; plt.figure(figsize&#x3D;(10, 4), dpi&#x3D;120)plt.plot(x, y1, linewidth&#x3D;2, marker&#x3D;&#39;*&#39;, color&#x3D;&#39;red&#39;)# 用Figure对象的add_axes方法在现有坐标系中嵌套一个新的坐标系，该方法的参数是一个四元组，# 代表了新坐标系在原坐标系中的位置，前两个值是左下角的位置，后两个值是坐标系的宽度和高度ax &#x3D; fig.add_axes((0.595, 0.6, 0.3,0.25))ax.plot(x, y2, marker&#x3D;&#39;^&#39;, color&#x3D;&#39;blue&#39;)ax &#x3D; fig.add_axes((0.155, 0.2, 0.3,0.25))ax.plot(x, y2, marker&#x3D;&#39;^&#39;, color&#x3D;&#39;green&#39;)plt.show()</code></pre><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><p>散点图可以帮助我们了解两个变量的关系，如果需要了解三个变量的关系，可以将散点图升级为气泡图。下面的代码中，<code>x</code>和<code>y</code>两个数组分别表示每个月的收入和每个月网购的支出，如果我们想了解<code>x</code>和<code>y</code>是否存在相关关系，就可以绘制如下所示的散点图。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">x &#x3D; np.array([5550, 7500, 10500, 15000, 20000, 25000, 30000, 40000])y &#x3D; np.array([800, 1800, 1250, 2000, 1800, 2100, 2500, 3500])plt.figure(figsize&#x3D;(6, 4), dpi&#x3D;120)plt.scatter(x, y)plt.show()</code></pre><p>输出：</p><img src="res/20220501173034.png" style="zoom:50%;"><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><p>在对比数据的差异时，柱状图是非常棒的选择，我们可以使用<code>pyplot</code>模块的<code>bar</code>函数来生成柱状图，也可以使用<code>barh</code>函数来生成水平柱状图（也称为“条状图”）。我们先为柱状图准备一些数据，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">x &#x3D; np.arange(4)y1 &#x3D; np.random.randint(20, 50, 4)y2 &#x3D; np.random.randint(10, 60, 4)</code></pre><p>绘制柱状图的代码。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.figure(figsize&#x3D;(6, 4), dpi&#x3D;120)# 通过横坐标的偏移，让两组数据对应的柱子分开，width参数控制柱子的粗细，label参数为柱子添加标签plt.bar(x - 0.1, y1, width&#x3D;0.2, label&#x3D;&#39;销售A组&#39;)plt.bar(x + 0.1, y2, width&#x3D;0.2, label&#x3D;&#39;销售B组&#39;)# 定制横轴的刻度plt.xticks(x, labels&#x3D;[&#39;Q1&#39;, &#39;Q2&#39;, &#39;Q3&#39;, &#39;Q4&#39;])# 定制显示图例plt.legend()plt.show()</code></pre><p>输出：</p><img src="res/20220501173557.png" style="zoom:50%;"><p>如果想绘制堆叠柱状图，可以对上面的代码稍作修改，如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">labels &#x3D; [&#39;Q1&#39;, &#39;Q2&#39;, &#39;Q3&#39;, &#39;Q4&#39;]plt.figure(figsize&#x3D;(6, 4), dpi&#x3D;120)plt.bar(labels, y1, width&#x3D;0.4, label&#x3D;&#39;销售A组&#39;)# 注意：堆叠柱状图的关键是将之前的柱子作为新柱子的底部，可以通过bottom参数指定底部数据，新柱子绘制在底部数据之上plt.bar(labels, y2, width&#x3D;0.4, bottom&#x3D;y1, label&#x3D;&#39;销售B组&#39;)plt.legend(loc&#x3D;&#39;lower right&#39;)plt.show()</code></pre><p>输出：</p><img src="res/20220501173645.png" style="zoom:50%;"><h4 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h4><p>饼状图通常简称为饼图，是一个将数据划分为几个扇形区域的统计图表，它主要用于描述数量、频率等之间的相对关系。在饼图中，每个扇形区域的大小就是其所表示的数量的比例，这些扇形区域合在一起刚好是一个完整的饼。在需要展示数据构成的场景下，饼状图、树状图和瀑布图是不错的选择，我们可以使用<code>pyplot</code>模块的<code>pie</code>函数来绘制饼图，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; np.random.randint(100, 500, 7)labels &#x3D; [&#39;苹果&#39;, &#39;香蕉&#39;, &#39;桃子&#39;, &#39;荔枝&#39;, &#39;石榴&#39;, &#39;山竹&#39;, &#39;榴莲&#39;]plt.figure(figsize&#x3D;(5, 5), dpi&#x3D;120)plt.pie(    data,    # 自动显示百分比    autopct&#x3D;&#39;%.1f%%&#39;,    # 饼图的半径    radius&#x3D;1,    # 百分比到圆心的距离    pctdistance&#x3D;0.8,    # 颜色（随机生成）    colors&#x3D;np.random.rand(7, 3),    # 分离距离    # explode&#x3D;[0.05, 0, 0.1, 0, 0, 0, 0],    # 阴影效果    # shadow&#x3D;True,    # 字体属性    textprops&#x3D;dict(fontsize&#x3D;8, color&#x3D;&#39;black&#39;),    # 楔子属性（生成环状饼图的关键）    wedgeprops&#x3D;dict(linewidth&#x3D;1, width&#x3D;0.35),    # 标签    labels&#x3D;labels)# 定制图表的标题plt.title(&#39;水果销售额占比&#39;)plt.show()</code></pre><p>输出：</p><img src="res/20220502094128.png" style="zoom:50%;"><blockquote><p><strong>说明</strong>：大家可以试一试将上面代码中被注释的部分恢复，看看有什么样的效果。</p></blockquote><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><p>在统计学中，直方图是一种展示数据分布情况的图形，是一种二维统计图表，它的两个坐标分别是统计样本和该样本对应的某个属性的度量。下面的数据是某学校100名男学生的身高，如果我们想知道数据的分布，就可以使用直方图。</p><pre class="language-Python" data-language="Python"><code class="language-Python">heights &#x3D; np.array([    170, 163, 174, 164, 159, 168, 165, 171, 171, 167,     165, 161, 175, 170, 174, 170, 174, 170, 173, 173,     167, 169, 173, 153, 165, 169, 158, 166, 164, 173,     162, 171, 173, 171, 165, 152, 163, 170, 171, 163,     165, 166, 155, 155, 171, 161, 167, 172, 164, 155,     168, 171, 173, 169, 165, 162, 168, 177, 174, 178,     161, 180, 155, 155, 166, 175, 159, 169, 165, 174,     175, 160, 152, 168, 164, 175, 168, 183, 166, 166,     182, 174, 167, 168, 176, 170, 169, 173, 177, 168,     172, 159, 173, 185, 161, 170, 170, 184, 171, 172])</code></pre><p>可以使用<code>pyplot</code>模块的<code>hist</code>函数来绘制直方图，其中<code>bins</code>参数代表了我们使用的分箱方式（身高从150厘米到190厘米，每5厘米为一个分箱），代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.figure(figsize&#x3D;(6, 4), dpi&#x3D;120)# 绘制直方图plt.hist(heights, bins&#x3D;np.arange(145, 196, 5), color&#x3D;&#39;darkcyan&#39;)# 定制横轴标签plt.xlabel(&#39;身高&#39;)# 定制纵轴标签plt.ylabel(&#39;概率密度&#39;)plt.show()</code></pre><p>输出：</p><img src="res/hist_count.png" style="zoom:50%;"><p>绘制直方图时，如果将<code>hist</code>函数的<code>density</code>参数修改为<code>True</code>，同时将<code>cumulative</code>参数也修改为<code>True</code>，那么一方面纵轴会显示为概率密度，而图表会绘制概率的累计分布，如下所示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token comment"># 绘制直方图</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>heights<span class="token punctuation">,</span> bins<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'darkcyan'</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 定制横轴标签</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'身高'</span><span class="token punctuation">)</span><span class="token comment"># 定制纵轴标签</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'概率'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/hist_cumulative.png" style="zoom:50%;"><h4 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h4><p>箱线图又叫箱型图或盒须图，是一种用于展示一组数据分散情况的统计图表，如下所示。因图形如箱子，而且在上下四分位数之外有线条像胡须延伸出去而得名。在箱线图中，箱子的上边界是上四分位数（$Q_3$）的位置，箱子的下边界是下四分位数（$Q_1$）的位置，箱子中间的线条是中位数（$Q_2$）的位置，而箱子的长度就是四分位距离（IQR）。除此之外，箱子上方线条的边界是最大值，箱子下方线条的边界是最小值，这两条线之外的点就是离群值（outlier）。所谓离群值，是指数据小于$Q_1 - 1.5 \times IQR$或数据大于$Q_3 + 1.5 \times IQR$的值，公式中的<code>1.5</code>还可以替换为<code>3</code>来发现极端离群值（extreme outlier），而介于<code>1.5</code>到<code>3</code>之间的离群值通常称之为适度离群值（mild outlier）。</p><p>可以使用<code>pyplot</code>模块的<code>boxplot</code>函数来绘制箱线图，代码如下所示。</p><p>代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 数组中有47个[0, 100)范围的随机数data &#x3D; np.random.randint(0, 100, 47)# 向数组中添加三个可能是离群点的数据data &#x3D; np.append(data, 160)data &#x3D; np.append(data, 200)data &#x3D; np.append(data, -50)plt.figure(figsize&#x3D;(6, 4), dpi&#x3D;120)# whis参数的默认值是1.5，将其设置为3可以检测极端离群值，showmeans&#x3D;True表示在图中标记均值的位置plt.boxplot(data, whis&#x3D;1.5, showmeans&#x3D;True, notch&#x3D;True)# 定制纵轴的取值范围plt.ylim([-100, 250])# 定制横轴的刻度plt.xticks([1], labels&#x3D;[&#39;data&#39;])plt.show()</code></pre><p>输出：</p><img src="res/20220501172802.png" style="zoom:50%;" /><blockquote><p><strong>说明</strong>：由于数据是随机生成的，大家运行上面的代码生成的图表可能跟我这里并不相同，以实际运行结果为准。</p></blockquote><h3 id="显示和保存图表"><a href="#显示和保存图表" class="headerlink" title="显示和保存图表"></a>显示和保存图表</h3><p>可以使用<code>pyplot</code>模块的<code>show</code>函数来显示绘制的图表，我们在上面的代码中使用过这个函数。如果希望保存图表，可以使用<code>savefig</code>函数。需要注意的是，如果要同时显示和保存图表，应该先执行<code>savefig</code>函数，再执行<code>show</code>函数，因为在调用<code>show</code>函数时，图表已经被释放，位于<code>show</code>函数之后的<code>savefig</code>保存的只是一个空白的区域。</p><pre class="language-Python" data-language="Python"><code class="language-Python">plt.savefig(&#39;chart.png&#39;)plt.show()</code></pre><h3 id="其他图表"><a href="#其他图表" class="headerlink" title="其他图表"></a>其他图表</h3><p>使用 matplotlib，我们还可以绘制出其他的统计图表（如：雷达图、玫瑰图、热力图等），但实际工作中，使用频率最高的几类图表我们在上面已经为大家完整的展示出来了。此外，matplotlib 还有很多对统计图表进行定制的细节，例如定制坐标轴、定制图表上的文字和标签等。如果想了解如何用 matplotlib 绘制和定制更多的统计图表，可以直接查看 matplotlib 官方网站上的<a href="https://matplotlib.org/stable/tutorials/index.html">文档</a>和<a href="https://matplotlib.org/stable/gallery/index.html">示例</a>，在下一个章节我们会为大家做一个简要的介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>79.数据可视化-2</title>
      <link href="/2024/07/01/79.shu-ju-ke-shi-hua-2/"/>
      <url>/2024/07/01/79.shu-ju-ke-shi-hua-2/</url>
      
        <content type="html"><![CDATA[<h2 id="数据可视化-2"><a href="#数据可视化-2" class="headerlink" title="数据可视化-2"></a>数据可视化-2</h2><p>本章我们尝试用 matplotlib 来绘制一些高阶统计图表。正如前面所说的，大家可以通过 matplotlib 官方网站上提供的<a href="https://matplotlib.org/stable/tutorials/index.html">文档</a>和<a href="https://matplotlib.org/stable/gallery/index.html">示例</a>来学习如何使用 matplotlib 并绘制出更加高级的统计图表；尤其是在定制一些比较复杂的图表时，我们建议大家直接找到官网提供的示例，然后只需要做出相应的修改，就可以绘制出自己想要的图表。这种“拷贝+修改”的做法应该会大大提高你的工作效率，因为大多数时候，你的代码跟官网上的代码就仅仅是数据有差别而已，没有必要去做重复乏味的事情。</p><h3 id="气泡图"><a href="#气泡图" class="headerlink" title="气泡图"></a>气泡图</h3><p>气泡图可以用来了解三个变量之间的关系，通过比较气泡位置和大小来分析数据维度之间的相关性。例如在我们之前绘制的月收入和网购支出的散点图中，我们已经发现了二者的正相关关系，如果我们引入第三个变量网购次数，那么我们就需要使用气泡图来进行展示。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">income <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5550</span><span class="token punctuation">,</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token number">10500</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">25000</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>outcome <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">,</span> <span class="token number">1250</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">,</span> <span class="token number">3500</span><span class="token punctuation">]</span><span class="token punctuation">)</span>nums <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 通过scatter函数的s参数和c参数分别控制面积和颜色</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>income<span class="token punctuation">,</span> outcome<span class="token punctuation">,</span> s<span class="token operator">=</span>nums <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span> c<span class="token operator">=</span>nums<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'Reds'</span><span class="token punctuation">)</span><span class="token comment"># 显示颜色条</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 显示图表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/bubble_chart.png" style="zoom:50%;"><h3 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h3><p>面积图又叫堆叠折线图，是在折线图的基础上，对折线以下的区域进行颜色填充（展示面积），用于在连续间隔或时间跨度上展示数值，一般用来显示趋势和对比数值，不同颜色的填充可以让多个面积块之间的对比和趋势更好的突显。下面的例子中，我们用面积图来展示从周一到周日花在睡觉、吃饭、工作和玩耍上的时间。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>days <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>sleeping <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>eating <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>working <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>playing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment"># 绘制堆叠折线图</span>plt<span class="token punctuation">.</span>stackplot<span class="token punctuation">(</span>days<span class="token punctuation">,</span> sleeping<span class="token punctuation">,</span> eating<span class="token punctuation">,</span> working<span class="token punctuation">,</span> playing<span class="token punctuation">)</span><span class="token comment"># 定制横轴刻度</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>days<span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'星期</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'一二三四五六日'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 定制图例</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'睡觉'</span><span class="token punctuation">,</span> <span class="token string">'吃饭'</span><span class="token punctuation">,</span> <span class="token string">'工作'</span><span class="token punctuation">,</span> <span class="token string">'玩耍'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 显示图表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/stacked_line_chart.png" style="zoom:50%;"><h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><p>雷达图通常用来比较多个定量数据，用于查看哪些变量具有相似的值。 雷达图也可用于查看数据集中哪些变量的值比较低，哪些变量的值比较高，是显示性能或表现的理想选择。经常观看篮球、足球比赛的读者应该对雷达图非常熟悉，例如在 NBA 的转播中就经常使用雷达图来展示球员的各项数据。雷达图的本质折线图，只不过将折线图映射到了极坐标系。在绘制雷达图时，需要让折线闭合，简单的说就是首尾相连，下面是绘制雷达图的代码。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'速度'</span><span class="token punctuation">,</span> <span class="token string">'力量'</span><span class="token punctuation">,</span> <span class="token string">'经验'</span><span class="token punctuation">,</span> <span class="token string">'防守'</span><span class="token punctuation">,</span> <span class="token string">'发球'</span><span class="token punctuation">,</span> <span class="token string">'技术'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 马龙和水谷隼的数据</span>malong_values <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">)</span>shuigu_values <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>angles <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 多加一条数据让图形闭合</span>malong_values <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>malong_values<span class="token punctuation">,</span> malong_values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>shuigu_values <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shuigu_values<span class="token punctuation">,</span> shuigu_values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>angles <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>angles<span class="token punctuation">,</span> angles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token comment"># 创建坐标系</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'polar'</span><span class="token punctuation">)</span><span class="token comment"># 绘图和填充</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>angles<span class="token punctuation">,</span> malong_values<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'马龙'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>angles<span class="token punctuation">,</span> malong_values<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>angles<span class="token punctuation">,</span> shuigu_values<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'水谷隼'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>angles<span class="token punctuation">,</span> shuigu_values<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token comment"># 显示图例</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 显示图表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/radar_chart.png" style="zoom:50%;"><h3 id="玫瑰图"><a href="#玫瑰图" class="headerlink" title="玫瑰图"></a>玫瑰图</h3><p>玫瑰图是映射在极坐标下的柱状图，由弗罗伦斯·南丁格尔（Florence Nightingale）所发明，当年是南丁格尔用来呈现战地医院季节性死亡率的一种图表。由于半径和面积的关系是平方的关系，南丁格尔玫瑰图会将数据的比例大小夸大，尤其适合对比大小相近的数值，同时由于圆形有周期的特性，所以南丁格尔玫瑰图也适用于表示一个周期内的时间概念，比如星期、月份。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python">group1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>group2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'A组-Q</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'B组-Q</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>group1<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> group2<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 玫瑰花瓣的角度和宽度</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>width <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">/</span> x<span class="token punctuation">.</span>size<span class="token comment"># 生成8种随机颜色</span>colors <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 将柱状图投影到极坐标</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'polar'</span><span class="token punctuation">)</span><span class="token comment"># 绘制柱状图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>theta<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token operator">=</span>width<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 设置网格</span>ax<span class="token punctuation">.</span>set_thetagrids<span class="token punctuation">(</span>theta <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> x<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 显示图表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/rose_chart.png" style="zoom:50%;"><h3 id="3D图表"><a href="#3D图表" class="headerlink" title="3D图表"></a>3D图表</h3><p>matplotlib 还可以用于绘制3D图，具体的内容大家可以参考官方文档，下面我们用一段简单的代码为大家展示如何绘制3D图表。</p><p>代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3Dfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token comment"># 创建3D坐标系并添加到画布上</span>ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">,</span> auto_add_to_figure<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>add_axes<span class="token punctuation">(</span>ax<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> y <span class="token operator">**</span> <span class="token number">5</span> <span class="token operator">+</span> x <span class="token operator">**</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> y <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 绘制3D曲面</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token comment"># 显示图表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><img src="res/3d_surface_chart.png" style="zoom:60%;"><p>需要指出的是， JupyterLab 中渲染的3D图并不是真正的3D图，因为你没有办法调整观察者的视角，也没有办法旋转或者缩放。如果想要看到真正的3D效果，需要在将图表渲染到 Qt 窗口中，为此我们可以先安装名为 PyQt6 的三方库，如下所示。</p><pre class="language-none"><code class="language-none">%pip install PyQt6</code></pre><p>然后，我们使用魔法指令让 JupyterLab 将图表渲染到 Qt 窗口中。</p><pre class="language-none"><code class="language-none">%matplotlib qt</code></pre><p>在完成上面的操作后，我们可以重新运行刚才绘制3D图的代码，看到如下所示的窗口。在这个窗口中，我们可以通过鼠标对3D进行旋转、缩放，我们有可以选中图表的一部分数据进行观测，是不是非常的酷。</p><img src="res/3d_surface_chart_qt.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80.数据可视化-3</title>
      <link href="/2024/07/01/80.shu-ju-ke-shi-hua-3/"/>
      <url>/2024/07/01/80.shu-ju-ke-shi-hua-3/</url>
      
        <content type="html"><![CDATA[<h2 id="数据可视化-3"><a href="#数据可视化-3" class="headerlink" title="数据可视化-3"></a>数据可视化-3</h2><p>通过前面的学习，我们已经对数据可视化工具 matplotlib 有一个初步的认知。大家可能也会发现了，matplotlib 提供的函数虽然强大，但是参数太多，要想对图表进行深度的定制就需要修改一系列的参数，这一点对新手并不友好。另一方面，使用 matplotlib 定制的统计图是静态图表，可能在某些需要交互效果的场景下并不合适。为了解决这两个问题，我们为大家介绍两个新的可视化工具，一个是 seaborn，一个是 pyecharts。</p><h3 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h3><p>Seaborn 是建立在 matplotlib 之上的数据可视化工具，它相当于是对 matplotlib 进行了更高级的封装，而且 seaborn 也能跟 pandas 无缝整合，让我们可以用更少的代码构建出更好的统计图表，帮助我们探索和理解数据。Seaborn 包含但不局限于以下描述的功能：</p><ol><li>面向数据集的 API，可用于检查多个变量之间的关系。</li><li>支持使用分类变量来显示观察结果或汇总统计数据。</li><li>能够可视化单变量或双变量分布以及在数据子集之间进行比较的选项</li><li>各类因变量线性回归模型的自动估计与作图。</li><li>集成调色板和主题，轻松定制统计图表的视觉效果。</li></ol><p>可以使用 Python 的包管理工具 pip 来安装 seaborn。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install seaborn</code></pre><p>在 Jupyter 中，可以直接使用魔法指令进行安装，如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">%pip install seaborn</code></pre><p>下面，我们用 seaborn 自带的数据集为例，为大家简单的展示 seaborn 的用法和强大之处，想要深入研究 seaborn 的读者可以自行阅读官方<a href="https://seaborn.pydata.org/tutorial.html">文档</a>和并查看官方作品集中的<a href="https://seaborn.pydata.org/examples/index.html">示例。</a>根据官方示例来编写自己的代码是一个不错的选择，简单的说就是保留官方代码，将数据换成自己的数据即可。下图展示了 seaborn 绘制图表的函数，可以看出，seaborn 的这些函数主要支持我们通过绘制图表来探索数据的关系、分布和分类。</p><img src="res/20220502115005.png" style="zoom:75%;"><p>使用 seaborn，首先需要导入该库并设置主题，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import seaborn as snssns.set_theme()</code></pre><p>如果需要在图表上显示中文，还需要用之前讲过的方法修改 matplotlib 的配置参数，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import matplotlib.pyplot as pltplt.rcParams[&#39;font.sans-serif&#39;].insert(0, &#39;SimHei&#39;)plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False</code></pre><blockquote><p><strong>注意</strong>：上面的代码必须放在调用 set_theme 函数之后，否则调用 set_theme 函数时又会重新修改 matplotlib 配置参数中的字体设置。</p></blockquote><p>加载官方的 Tips 数据集（就餐小费数据）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">tips_df &#x3D; sns.load_dataset(&#39;tips&#39;)tips_df.info()</code></pre><p>运行结果如下所示，其中 total_bill 表示账单总金额，tip 表示小费的金额，sex 是顾客的性别，smoker 表示顾客是否抽样，day 代表星期几，time 代表是午餐还是晚餐，size 是就餐人数。</p><pre class="language-none"><code class="language-none">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 244 entries, 0 to 243Data columns (total 7 columns): #   Column      Non-Null Count  Dtype   ---  ------      --------------  -----    0   total_bill  244 non-null    float64  1   tip         244 non-null    float64  2   sex         244 non-null    category 3   smoker      244 non-null    category 4   day         244 non-null    category 5   time        244 non-null    category 6   size        244 non-null    int64   dtypes: category(4), float64(2), int64(1)memory usage: 7.4 KB</code></pre><p>由于数据集是联网加载的，上述代码可能因为 SSL 的原因无法获取到数据，可以尝试先运行下面的代码，然后再加载数据集。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import sslssl._create_default_https_context &#x3D; ssl._create_unverified_context</code></pre><p>如果我们希望了解账单金额的分布，可以使用下面的代码来绘制分布图。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sns.histplot(data&#x3D;tips_df, x&#x3D;&#39;total_bill&#39;, kde&#x3D;True)</code></pre><img src="res/20220502115531.png" style="zoom:50%;"><p>如果想了解变量之间的两两关系，我们可以绘制点对图，代码和效果如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sns.pairplot(data&#x3D;tips_df, hue&#x3D;&#39;sex&#39;)</code></pre><img src="res/20220502120236.png" style="zoom:42%;"><p>如果对上面图表的颜色不满意，还可以通过 palette 参数选择 seaborn 自带的“调色板”来修改颜色，这种方式相比于自行指定颜色或使用随机颜色方便和靠谱了很多，下图为大家展示了部分 seaborn 自带的“调色板”。</p><img src="http://localhost//mypic/20220502120749.png" style="zoom:45%;"><p>我们可以将上面的代码稍作修改，看看运行结果有什么差别。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sns.pairplot(data&#x3D;tips_df, hue&#x3D;&#39;sex&#39;, palette&#x3D;&#39;Dark2&#39;)</code></pre><p>接下来，我们为 total_bill 和 tip 两组数据绘制联合分布图，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sns.jointplot(data&#x3D;tips_df, x&#x3D;&#39;total_bill&#39;, y&#x3D;&#39;tip&#39;, hue&#x3D;&#39;sex&#39;)</code></pre><img src="res/20220502121226.png" style="zoom:50%;"><p>上面清晰的展示了，total_bill 和 tip 之间存在正相关关系，这一点我们也可以通过 DataFrame 对象的 corr 方法进行验证。接下来，我们可以建立回归模型来拟合这些数据点，而 seaborn 的线性回归模型图已经帮我们实现了这项功能，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sns.lmplot(data&#x3D;tips_df, x&#x3D;&#39;total_bill&#39;, y&#x3D;&#39;tip&#39;, hue&#x3D;&#39;sex&#39;)</code></pre><img src="res/20220502121656.png" style="zoom:50%;"><p>如果我们希望了解账单金额的集中和离散趋势，可以绘制箱线图或小提琴图，代码如下所示，我们将数据按星期四、星期五、星期六和星期天分别进行展示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">sns.boxplot(data&#x3D;tips_df, x&#x3D;&#39;day&#39;, y&#x3D;&#39;total_bill&#39;)</code></pre><img src="res/20220502122106.png" style="zoom:50%;"><pre class="language-Python" data-language="Python"><code class="language-Python">sns.violinplot(data&#x3D;tips_df, x&#x3D;&#39;day&#39;, y&#x3D;&#39;total_bill&#39;)</code></pre><img src="res/20220502122144.png" style="zoom:50%;"><blockquote><p><strong>说明</strong>：相较于箱线图，小提琴图没有标注异常点而是显示了数据的整个范围，另一方面，小提琴图很好的展示了数据的分布（密度轨迹）。</p></blockquote><h3 id="Pyecharts"><a href="#Pyecharts" class="headerlink" title="Pyecharts"></a>Pyecharts</h3><p>Echarts 原来是百度开发的一个前端图表库，2018年1月16日，ECharts 进入 Apache Incubator 进行孵化，目前已经是 Apache 软件基金会的顶级项目。凭借着良好的交互性和精巧的图表设计，ECharts 得到了众多开发者的认可，而 pyecharts 就是基于 Python 语言对 ECharts 进行了包装，让 Python 开发者也可以使用 ECharts 绘制外观精美且交互性强的统计图表。</p><p>可以使用 Python 的包管理工具 pip 来安装 pyecharts。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install pyecharts</code></pre><p>在 JupyterLab 中，可以直接使用魔法指令进行安装，如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">%pip install pyecharts</code></pre><p>如果想在 JupyterLab 中使用 pyecharts 绘图，我们还需要做一些准备工作，主要是修改 pyecharts 的配置，代码如下所示。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span><span class="token builtin">globals</span> <span class="token keyword">import</span> CurrentConfig<span class="token punctuation">,</span> NotebookTypeCurrentConfig<span class="token punctuation">.</span>NOTEBOOK_TYPE <span class="token operator">=</span> NotebookType<span class="token punctuation">.</span>JUPYTER_LAB</code></pre><p>接下来，我们通过来自于 pyecharts 官方网站新手教程中的一个例子，来认识 pyecharts。当然，我们对官网的例子进行一些调整，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from pyecharts.charts import Barfrom pyecharts import options as opts# 创建柱状图对象并设置初始参数（宽度、高度）bar_chart &#x3D; Bar(init_opts&#x3D;opts.InitOpts(width&#x3D;&#39;600px&#39;, height&#x3D;&#39;450px&#39;))# 设置横轴数据bar_chart.add_xaxis([&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;])# 设置纵轴数据（第一组）bar_chart.add_yaxis(&quot;商家A&quot;, [25, 20, 36, 10, 75, 90])# 设置纵轴数据（第二组）bar_chart.add_yaxis(&quot;商家B&quot;, [15, 12, 30, 20, 45, 60])# 设置纵轴数据（第三组）bar_chart.add_yaxis(&quot;商家C&quot;, [12, 32, 40, 52, 35, 26])# 添加全局配置参数bar_chart.set_global_opts(    # 横轴相关的参数    xaxis_opts&#x3D;opts.AxisOpts(        axislabel_opts&#x3D;opts.LabelOpts(color&#x3D;&#39;navy&#39;)    ),    # 纵轴相关的参数（标签、最小值、最大值、间隔）    yaxis_opts&#x3D;opts.AxisOpts(        axislabel_opts&#x3D;opts.LabelOpts(color&#x3D;&#39;navy&#39;),        min_&#x3D;0,        max_&#x3D;100,        interval&#x3D;10    ),    # 标题相关的参数（内容、链接、位置、文本样式）    title_opts&#x3D;opts.TitleOpts(        title&#x3D;&#39;2022年销售数据展示&#39;,        pos_left&#x3D;&#39;2%&#39;,        title_textstyle_opts&#x3D;opts.TextStyleOpts(            color&#x3D;&#39;navy&#39;,            font_size&#x3D;16,            font_family&#x3D;&#39;苹方-简&#39;,            font_weight&#x3D;&#39;bold&#39;        )    ),    # 工具箱相关的参数    toolbox_opts&#x3D;opts.ToolboxOpts(        orient&#x3D;&#39;vertical&#39;,        pos_left&#x3D;&#39;right&#39;    ))# 加载绘图需要的JavaScript文件bar_chart.load_javascript()</code></pre><p>在执行完上面的代码后，我们就可以通过调用<code>bar</code>对象的方法来完成对图表的渲染。如果直接使用<code>render</code>方法，那么绘制好的统计图表将保存到一个 HTML 文件中，打开该文件也能够看到绘制好的统计图表，而<code>render_notebook</code>方法则是将图表渲染到浏览器窗口中。</p><pre class="language-python" data-language="python"><code class="language-python">bar_chart<span class="token punctuation">.</span>render_notebook<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面代码的运行效果如下图所示。值得一提的是，下图中的标题、图例、右侧的工具箱都是可以点击的，大家可以点击它们看看会有什么样的效果，ECharts 的魅力就在于它的交互效果，大家一定要试一试。</p><img src="res/pyecharts_bar_chart.png" style="zoom:55%;"><p>接下来，我们也是通过一个官方示例，看看如何绘制饼图。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pyecharts.options as optsfrom pyecharts.charts import Pie# 准备饼图需要的数据x_data &#x3D; [&quot;直接访问&quot;, &quot;邮件营销&quot;, &quot;联盟广告&quot;, &quot;视频广告&quot;, &quot;搜索引擎&quot;]y_data &#x3D; [335, 310, 234, 135, 1548]data &#x3D; [(x, y) for x, y in zip(x_data, y_data)]# 创建饼图对象并设置初始化参数pie_chart &#x3D; Pie(init_opts&#x3D;opts.InitOpts(width&#x3D;&quot;800px&quot;, height&#x3D;&quot;400px&quot;))# 向饼图添加数据pie_chart.add(    &#39;&#39;,     data_pair&#x3D;data,    radius&#x3D;[&quot;50%&quot;, &quot;75%&quot;],    label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False),)# 设置全局配置项pie_chart.set_global_opts(    # 配置图例相关的参数    legend_opts&#x3D;opts.LegendOpts(        pos_left&#x3D;&quot;legft&quot;,        orient&#x3D;&quot;vertical&quot;    ))# 设置数据系列配置参数pie_chart.set_series_opts(    # 设置不显示工具提示    tooltip_opts&#x3D;opts.TooltipOpts(is_show&#x3D;False),    # 设置饼图标签的样式    label_opts&#x3D;opts.LabelOpts(formatter&#x3D;&quot;&#123;b&#125;(&#123;c&#125;): &#123;d&#125;%&quot;))pie_chart.load_javascript()</code></pre><pre class="language-python" data-language="python"><code class="language-python">pie_chart<span class="token punctuation">.</span>render_notebook<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行上面的代码，效果如下图所示。</p><img src="res/pyecharts_pie_chart.png" style="zoom:50%;"><p>需要提醒大家注意的是，pyecharts 并不能直接使用 NumPy 的 ndarray 和 Pandas 的 Series、DataFrame 为其提供数据，它需要的是 Python 原生的数据类型。可能大家也注意到了，上面的代码中，我们使用的都是列表、元组这样的数据类型。</p><p>最后，我们来看看如何绘制地图，绘制地图首先需要安装额外的依赖库来获取地图相关信息，命令如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install echarts-countries-pypkg echarts-china-provinces-pypkg echarts-china-cities-pypkg echarts-china-counties-pypkg</code></pre><p>在 Jupyter 中，可以直接使用魔法指令进行安装，如下所示。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">%pip install echarts-countries-pypkg%pip install echarts-china-provinces-pypkg%pip install echarts-china-cities-pypkg%pip install echarts-china-counties-pypkg</code></pre><blockquote><p><strong>说明</strong>：上面的四个库分别包含了世界各国、中国省级行政区域、中国市级行政区域、中国区&#x2F;县级行政区域的数据。</p></blockquote><p>然后，我们将全国各省的数据放在一个列表中，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; [    (&#39;广东&#39;, 594), (&#39;浙江&#39;, 438), (&#39;四川&#39;, 316), (&#39;北京&#39;, 269), (&#39;山东&#39;, 248),    (&#39;江苏&#39;, 234), (&#39;湖南&#39;, 196), (&#39;福建&#39;, 166), (&#39;河南&#39;, 153), (&#39;辽宁&#39;, 152),    (&#39;上海&#39;, 138), (&#39;河北&#39;, 86), (&#39;安徽&#39;, 79), (&#39;湖北&#39;, 75), (&#39;黑龙江&#39;, 70),     (&#39;陕西&#39;, 63), (&#39;吉林&#39;, 59), (&#39;江西&#39;, 56), (&#39;重庆&#39;, 46), (&#39;贵州&#39;, 39),    (&#39;山西&#39;, 37), (&#39;云南&#39;, 33), (&#39;广西&#39;, 24), (&#39;天津&#39;, 22), (&#39;新疆&#39;, 21),    (&#39;海南&#39;, 18), (&#39;内蒙古&#39;, 14), (&#39;台湾&#39;, 11), (&#39;甘肃&#39;, 7), (&#39;广西壮族自治区&#39;, 4),    (&#39;香港&#39;, 4), (&#39;青海&#39;, 3), (&#39;新疆维吾尔自治区&#39;, 3), (&#39;内蒙古自治区&#39;, 3), (&#39;宁夏&#39;, 1)]</code></pre><p>接下来，我们使用 pyecharts 在地图上标记各省抖音大V人数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pyecharts.options as optsfrom pyecharts.charts import Mapmap_chart &#x3D; Map(init_opts&#x3D;opts.InitOpts(width&#x3D;&#39;1000px&#39;, height&#x3D;&#39;1000px&#39;))map_chart.add(&#39;&#39;, data, &#39;china&#39;, is_roam&#x3D;False)map_chart.load_javascript()</code></pre><pre class="language-python" data-language="python"><code class="language-python">map_chart<span class="token punctuation">.</span>render_notebook<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>代码的运行效果如下图所示，将鼠标置于地图上时，会高亮对应的省并看到相关的信息。</p><img src="res/pyecharts_map_chart.png" style="zoom:55%;"><p>和 seaborn 一样，我们建议大家参考官方提供的示例来使用 pyecharts，我们可以在 pyecharts <a href="https://pyecharts.org/#/zh-cn/">官方网站</a>的左侧导航栏中找到“图表类型”选项，下面每种类型的图表都有对应的官方示例，很多代码是可以直接使用的，我们需要做的就是将数据换成自己的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>81.人工智能和机器学习概述</title>
      <link href="/2024/07/01/81.ren-gong-zhi-neng-he-ji-qi-xue-xi-gai-shu/"/>
      <url>/2024/07/01/81.ren-gong-zhi-neng-he-ji-qi-xue-xi-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能和机器学习概述"><a href="#人工智能和机器学习概述" class="headerlink" title="人工智能和机器学习概述"></a>人工智能和机器学习概述</h2><p>所谓“人工智能”通常是泛指让机器具有像人一样的智慧的技术，其目的是让机器像人一样能够感知、思考和解决问题；而“机器学习”通常是指让计算机通过学习现有的数据，实现认知的更新和进步。显然，机器学习是实现人工智能的一种途径，这也是我们的课程要讨论的内容。现如今，“机器学习”和“大数据”可以说是最时髦的两个词汇，而在弱人工智能阶段，无论是“机器学习”还是“大数据”最终要解决的问题本质上是一样的，就是让计算机将纷繁复杂的数据处理成有用的信息，这样就可以发掘出数据带来的意义以及隐藏在数据背后的规律，简单的说就是用现有的数据对将来的状况做出预测和判断。</p><p>在讨论机器学习相关内容之前，我们先按照问题的“输入”和“输出”对用计算机求解的问题进行一个分类，如下所示：</p><ol><li>输入的信息是精确的，要求输出最优解。</li><li>输入的信息是精确的，无法找到最优解，只能获得满意解。</li><li>输入的信息是模糊的，要求输出最优解。</li><li>输入的信息是模糊的，无法找到最优解，只能获得满意解。</li></ol><p>在上面的四大类问题中，第1类问题是计算机最擅长解决的，这类问题其实就是“数值计算”和“逻辑推理”方面的问题，而传统意义上的人工智能也就是利用逻辑推理来解决问题（如早期的“人机对弈”）。一直以来，我们都习惯于将计算机称为“电脑”，而基于“冯诺依曼”体系结构的“电脑”实际上只是实现了“人脑”理性思维这部分的功能，而且在这一点上“电脑”的表现通常是优于“人脑”的；但是“人脑”在处理模糊输入信息时表现出来的强大处理能力，在很多场景下“电脑”是难以企及的。所以我们研究机器学习的算法，就是要解决在输入模糊信息时让计算机给出满意解甚至是最优解的问题。</p><p>人类通过记忆和归纳这两种方式进行学习，通过记忆可以积累单个事实，使用归纳可以从旧的事实推导出新的事实。所以机器学习其实是一种训练，让计算机通过这种训练能够学会根据数据隐含模式进行合理推断的能力，其基本流程如下所示：</p><ol><li>观察一组实例，通常称为训练数据，它们可以表示某种统计现象的不完整信息;</li><li>对观测到的实例进行扩展，并使用推断技术对扩展过程建模;</li><li>使用这个模型对未知实例进行预测。</li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="监督学习和非监督学习"><a href="#监督学习和非监督学习" class="headerlink" title="监督学习和非监督学习"></a>监督学习和非监督学习</h4><p>监督学习是从给定的训练数据集中学习得到一个函数，当新的数据到来时，可以根据这个函数预测结果，监督学习的训练集包括输入和输出，也可以说是特征和目标。监督学习的目标是由人来标注的，而非监督学习的数据没有类别信息，训练集也没有人为标注结果，通过无监督学习可以减少数据特征的维度，以便我们可以使用二维或三维图形更加直观地展示数据中的信息 。</p><h4 id="特征向量和特征工程"><a href="#特征向量和特征工程" class="headerlink" title="特征向量和特征工程"></a>特征向量和特征工程</h4><h4 id="距离度量"><a href="#距离度量" class="headerlink" title="距离度量"></a>距离度量</h4><ol><li>欧氏距离</li></ol><p>$$<br>d &#x3D; \sqrt{\sum_{k&#x3D;1}^n(x_{1k}-x_{2k})^2}<br>$$</p><ol start="2"><li>曼哈顿距离</li></ol><p>$$<br>d &#x3D; \sum_{k&#x3D;1}^n \mid {x_{1k}-x_{2k}} \mid<br>$$</p><ol start="3"><li>切比雪夫距离</li></ol><p>$$<br>d &#x3D; max(\mid x_{1k}-x_{2k} \mid)<br>$$</p><ol start="4"><li>闵可夫斯基距离<ul><li>当$p&#x3D;1$时，就是曼哈顿距离</li><li>当$p&#x3D;2$时，就是欧式距离</li><li>当$p \to \infty$时，就是切比雪夫距离</li></ul></li></ol><p>$$<br>d &#x3D; \sqrt[p]{\sum_{k&#x3D;1}^n \mid x_{1k}-x_{2k} \mid ^p}<br>$$</p><ol start="5"><li>余弦距离<br> $$<br> cos(\theta) &#x3D; \frac{\sum_{k&#x3D;1}^n x_{1k}x_{2k}}{\sqrt{\sum_{k&#x3D;1}^n x_{1k}^2} \sqrt{\sum_{k&#x3D;1}^n x_{2k}^2}}<br> $$</li></ol><h3 id="机器学习的定义和应用领域"><a href="#机器学习的定义和应用领域" class="headerlink" title="机器学习的定义和应用领域"></a>机器学习的定义和应用领域</h3><p>根据上面的论述，我们可以给“机器学习”下一个正式的定义：<strong>机器学习是一门专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身性能的学科</strong>。即使对于机器学习这个概念不那么熟悉，但是机器学习的成果已经广泛渗透到了生产生活的各个领域，下面的这些场景对于你来说一定不陌生。</p><p>场景1：搜索引擎会根据搜索和使用习惯，优化下一次搜索的结果。</p><p>场景2：电商网站会根据你的访问历史自动推荐你可能感兴趣的商品。</p><p>场景3：金融类产品会通过你最近的金融活动信息综合评定你的贷款申请。</p><p>场景4：视频和直播平台会自动识别图片和视频中有没有不和谐的内容。</p><p>场景5：智能家电和智能汽车会根据你的语音指令做出相应的动作。</p><p>简单的总结一下，机器学习可以应用到但不限于以下领域：</p><ol><li><p>计算机视觉。计算机视觉是指机器感知环境的能力，目前在<a href="https://pjreddie.com/darknet/yolo/"><strong>物体检测</strong></a>和<strong>人脸识别</strong>这两个领域已经非常成熟且产生了大量的应用。</p><ul><li><p>刷脸支付</p><p>  <img src="/res/face_paying.png"></p></li><li><p><a href="https://quickdraw.withgoogle.com/">涂鸦识别</a></p><p>  <img src="/res/quickdraw.png"></p></li></ul></li><li><p>自然语言处理（NLP）。自然语言处理是目前机器学习中一个非常热门的分支，具体的又可以分为三类应用场景。其中文本挖掘主要是对文本进行分类，包括句法分析、情绪分析和垃圾信息检测等；而机器翻译和语音识别相信不用太多的解释大家也都清楚。</p><ul><li><p>文本挖掘</p></li><li><p>机器翻译</p></li><li><p>语音识别</p><p>  <img src="/res/xiaomi_ai_voice_box.png"></p></li></ul></li><li><p>机器人。机器人可以分为固定机器人和移动机器人两大类。固定机器人通常被用于工业生产，例如用于装配流水线。常见的移动机器人应用有货运机器人、空中机器人和自动载具。机器人需要软硬件的协作才能实现最优的作业，其中硬件包含传感器、反应器和控制器等，而软件主要是实现感知能力，包括定位、测绘、目标检测和识别等。</p><ul><li><p>机甲大师</p><p>  <img src="/res/dajiang_robomaster.png"></p></li><li><p>扫地机器人</p><p>  <img src="/res/sweep_robot.jpg"></p></li></ul></li></ol><h3 id="机器学习实施步骤"><a href="#机器学习实施步骤" class="headerlink" title="机器学习实施步骤"></a>机器学习实施步骤</h3><p>实现机器学习的一般步骤：</p><ol><li>数据收集</li><li>数据准备</li><li>数据分析</li><li>训练算法</li><li>测试算法</li><li>应用算法</li></ol><h3 id="Scikit-learn介绍"><a href="#Scikit-learn介绍" class="headerlink" title="Scikit-learn介绍"></a>Scikit-learn介绍</h3><p><img src="/res/scikit-learn-logo.png"></p><p>Scikit-learn源于Google Summer of Code项目，由David Cournapeau在2007年发起，它提供了机器学习可能用到的工具，包括数据预处理、监督学习（分类、回归）、非监督学习（聚类）、模型选择、降维等。</p><p>官网地址：<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a></p><p>安装方法：<code>pip install scikit-learn</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>82.k最近邻分类</title>
      <link href="/2024/07/01/82.k-zui-jin-lin-fen-lei/"/>
      <url>/2024/07/01/82.k-zui-jin-lin-fen-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="k最近邻分类"><a href="#k最近邻分类" class="headerlink" title="k最近邻分类"></a>k最近邻分类</h2><p>$k$最近邻（简称kNN，k-Nearest Neighbor）是Cover和Hart在1968年提出的一种简单的监督学习算法，可用于字符识别、文本分类、图像识别等领域。kNN的工作机制非常简单：给定测试样本，基于某种距离度量（如：欧式距离、曼哈顿距离等）找出训练集中与其最接近的$k$个训练样本，然后基于这$k$个“最近邻居”的信息来进行预测。对于分类任务，可以在$k$个最近邻居中选择出现次数最多的类别标签作为预测的结果；对于回归任务，可以使用$k$个最近邻居实际输出（目标值）的平均值作为预测的结果，当然也可以根据距离的远近进行加权平均，距离越近的样本权重值就越大。</p><h3 id="案例：电影分类预测"><a href="#案例：电影分类预测" class="headerlink" title="案例：电影分类预测"></a>案例：电影分类预测</h3><h3 id="k值的选择和交叉检验"><a href="#k值的选择和交叉检验" class="headerlink" title="k值的选择和交叉检验"></a>k值的选择和交叉检验</h3><p>k值的选择对于kNN算法的结果有非常显著的影响。下面用李航博士的《统计学习方法》一书中的叙述，来对k值的选择加以说明。</p><p>如果选择较小的$k$值，就相当于用较小的邻域中的训练实例进行预测，“学习”的近似误差会减小，只有与输入实例较近（相似的）训练实例才会对预测结果起作用；但缺点是“学习”的估计误差会增大，预测结果会对近邻的实例点非常敏感，如果近邻的实例点刚好是噪声，预测就会出错。换句话说，$k$值的减小就意味着整体模型变得复杂，容易发生<strong>过拟合</strong>。</p><p>如果选择较大的$k$值，就相当于用较大的邻域中的训练实例进行预测，其优点是可以减少学习的估计误差，但缺点是学习的近似误差会增大。这时候，与输入实例较远（不相似的）训练实例也会对预测起作用，使预测发生错误。对于$k&#x3D;N$的极端情况（其中$N$代表所有的训练实例的数量），那么无论输入实例是什么，都会预测它属于训练实例中最多的类，很显然，这样的模型完全忽略了训练实例中大量的有用信息，是不可取的。</p><p>实际应用中，$k$的取值通常都比较小，可以通过交叉检验的方式来选择较好的$k$值。</p><h3 id="算法优缺点"><a href="#算法优缺点" class="headerlink" title="算法优缺点"></a>算法优缺点</h3><p>优点：</p><ol><li>简单有效</li><li>重新训练代价低</li><li>适合类域交叉样本</li><li>适合大样本分类</li></ol><p>缺点：</p><ol><li>惰性学习</li><li>输出的可解释性不强</li><li>不擅长处理不均衡样本</li><li>计算量比较大</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>83.决策树</title>
      <link href="/2024/07/01/83.jue-ce-shu/"/>
      <url>/2024/07/01/83.jue-ce-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>83.推荐系统实战-1</title>
      <link href="/2024/07/01/83.tui-jian-xi-tong-shi-zhan-1/"/>
      <url>/2024/07/01/83.tui-jian-xi-tong-shi-zhan-1/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐系统实战-1"><a href="#推荐系统实战-1" class="headerlink" title="推荐系统实战(1)"></a>推荐系统实战(1)</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>84.贝叶斯分类</title>
      <link href="/2024/07/01/84.bei-xie-si-fen-lei/"/>
      <url>/2024/07/01/84.bei-xie-si-fen-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="贝叶斯分类"><a href="#贝叶斯分类" class="headerlink" title="贝叶斯分类"></a>贝叶斯分类</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>85.支持向量机</title>
      <link href="/2024/07/01/85.zhi-chi-xiang-liang-ji/"/>
      <url>/2024/07/01/85.zhi-chi-xiang-liang-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>86.K-均值聚类</title>
      <link href="/2024/07/01/86.k-jun-zhi-ju-lei/"/>
      <url>/2024/07/01/86.k-jun-zhi-ju-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="K-均值聚类"><a href="#K-均值聚类" class="headerlink" title="K-均值聚类"></a>K-均值聚类</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>87.回归分析</title>
      <link href="/2024/07/01/87.hui-gui-fen-xi/"/>
      <url>/2024/07/01/87.hui-gui-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>88.深度学习入门</title>
      <link href="/2024/07/01/88.shen-du-xue-xi-ru-men/"/>
      <url>/2024/07/01/88.shen-du-xue-xi-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="Tensorflow入门"><a href="#Tensorflow入门" class="headerlink" title="Tensorflow入门"></a>Tensorflow入门</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>89.PyTorch概述</title>
      <link href="/2024/07/01/89.pytorch-gai-shu/"/>
      <url>/2024/07/01/89.pytorch-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="PyTorch入门"><a href="#PyTorch入门" class="headerlink" title="PyTorch入门"></a>PyTorch入门</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>90.PyTorch实战</title>
      <link href="/2024/07/01/90.pytorch-shi-zhan/"/>
      <url>/2024/07/01/90.pytorch-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="PyTorch实战"><a href="#PyTorch实战" class="headerlink" title="PyTorch实战"></a>PyTorch实战</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>91.团队项目开发的问题和解决方案</title>
      <link href="/2024/07/01/91.tuan-dui-xiang-mu-kai-fa-de-wen-ti-he-jie-jue-fang-an/"/>
      <url>/2024/07/01/91.tuan-dui-xiang-mu-kai-fa-de-wen-ti-he-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="团队项目开发的问题和解决方案"><a href="#团队项目开发的问题和解决方案" class="headerlink" title="团队项目开发的问题和解决方案"></a>团队项目开发的问题和解决方案</h2><p>个人开发和团队开发这两个词相信对大家来说并不陌生。所谓个人开发就是一个人把控产品的所有内容；而团队开发则是由多个人组团并完成产品的开发。要实施团队开发以下几点是不可或缺的：</p><ol><li>对开发过程中的各种事件（例如：谁到什么时间完成了什么事情）进行管理和共享。</li><li>在团队内部共享各类工作成果以及新的知识技巧等。</li><li>管理工作成果的变更，既要防止成果被破坏，又要保证各个成员利用现有成果并行作业。</li><li>证明团队开发出的软件在任何时候都是可以正常运行的。</li><li>使用自动化的工作流程，让团队成员能够正确的实施开发、测试和部署。</li></ol><h3 id="团队项目开发常见问题"><a href="#团队项目开发常见问题" class="headerlink" title="团队项目开发常见问题"></a>团队项目开发常见问题</h3><p>团队开发相较于个人开发，容易遇到以下几个方面的问题。</p><h4 id="问题1：传统的沟通方式无法确定处理的优先级"><a href="#问题1：传统的沟通方式无法确定处理的优先级" class="headerlink" title="问题1：传统的沟通方式无法确定处理的优先级"></a>问题1：传统的沟通方式无法确定处理的优先级</h4><p>例如：使用邮件进行沟通可能出现邮件数量太多导致重要的邮件被埋没，无法管理状态，不知道哪些问题已经解决，哪些问题尚未处理，如果用全文检索邮件的方式来查询相关问题效率过于低下。</p><p>解决方案：使用缺陷管理工具。</p><h4 id="问题2：没有能够用于验证的环境"><a href="#问题2：没有能够用于验证的环境" class="headerlink" title="问题2：没有能够用于验证的环境"></a>问题2：没有能够用于验证的环境</h4><p>例如：收到项目正式环境中发生的故障报告后，需要还原正式环境需要花费很长的时间。</p><p>解决方法：实施持续交付。</p><h4 id="问题3：用别名目录管理项目分支"><a href="#问题3：用别名目录管理项目分支" class="headerlink" title="问题3：用别名目录管理项目分支"></a>问题3：用别名目录管理项目分支</h4><p>解决方法：实施版本控制。</p><h4 id="问题4：重新制作数据库非常困难"><a href="#问题4：重新制作数据库非常困难" class="headerlink" title="问题4：重新制作数据库非常困难"></a>问题4：重新制作数据库非常困难</h4><p>例如：正式环境和开发环境中数据库表结构不一致或者某个表列的顺序不一致。</p><p>解决方法：实施版本控制。</p><h4 id="问题5：不运行系统就无法察觉问题"><a href="#问题5：不运行系统就无法察觉问题" class="headerlink" title="问题5：不运行系统就无法察觉问题"></a>问题5：不运行系统就无法察觉问题</h4><p>例如：解决一个bug可能引入其他的bug或者造成系统退化，不正确的使用版本系统覆盖了其他人的修改，修改的内容相互发生了干扰，如果问题不能尽早发现，那么等过去几个月后再想追溯问题就非常麻烦了。</p><p>解决方法：实施持续集成，将团队成员的工作成果经常、持续的进行构建和测试。</p><h4 id="问题6：覆盖了其他成员修正的代码"><a href="#问题6：覆盖了其他成员修正的代码" class="headerlink" title="问题6：覆盖了其他成员修正的代码"></a>问题6：覆盖了其他成员修正的代码</h4><p>解决方法：实施版本控制。</p><h4 id="问题7：无法实施代码重构"><a href="#问题7：无法实施代码重构" class="headerlink" title="问题7：无法实施代码重构"></a>问题7：无法实施代码重构</h4><p>例如：在实施代码重构（在不影响代码产生的结果的前提下对代码内部的构造进行调整）时可能引发退化。</p><p>解决方法：大量的可重用的测试并实施持续集成。</p><h4 id="问题8：不知道bug的修正日期无法追踪退化"><a href="#问题8：不知道bug的修正日期无法追踪退化" class="headerlink" title="问题8：不知道bug的修正日期无法追踪退化"></a>问题8：不知道bug的修正日期无法追踪退化</h4><p>解决方法：版本控制系统、缺陷管理系统和持续集成之间需要交互，最好能够和自动化部署工具集成到一起来使用。</p><h4 id="问题9：发布过程太复杂"><a href="#问题9：发布过程太复杂" class="headerlink" title="问题9：发布过程太复杂"></a>问题9：发布过程太复杂</h4><p>解决方法：实施持续交付。</p><p>基于对上述问题的阐述和分析，我们基本上可以得到以下的结论，在团队开发中版本控制、缺陷管理和持续集成都是非常重要且不可或缺的。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>针对上面提到的一系列问题，我们可以得出一个简单的结论，版本控制是实施团队开发的首要前提，必须通过版本控制对产品研发过程中产生的各种信息进行管理，这些内容包括：</p><ol><li>代码。</li><li>需求和设计的相关文档。</li><li>数据库模式和初始数据。</li><li>配置文件。</li><li>库的依赖关系定义。</li></ol><h4 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h4><p><img src="/res/git-logo.png"></p><p>Git是诞生于2005年的一个开源分布式版本控制系统，最初是Linus Torvalds（Linux之父） 为了帮助管理Linux内核开发而开发的一个版本控制软件。Git与常用的版本控制工具Subversion等不同，它采用了分布式版本控制的方式，在没有中央服务器支持的环境下也能够实施版本控制。</p><p>对于有使用Subversion（以下简称为SVN）经验的人来说，Git和SVN的共同点是摒弃了传统的基于锁定模式的版本控制（早期的CVS和VSS使用了锁定模式，当一个开发者编辑一个文件时会锁定该文件，其他开发者在此期间无法编辑该文件），采用了更有效率的基于合并模式的版本控制，而二者的区别在于：</p><ol><li>Git是分布式的，SVN是集中式的，SVN需要中央服务器的支持才能工作。</li><li>Git把内容按元数据方式存储，而SVN是按文件，即把文件的元信息隐藏在一个.svn文件夹里。</li><li>Git分支和SVN的分支不同，SVN对分支的处理是相当“狗血”的。</li><li>Git没有一个全局版本号，但是可以自己维护一个版本标签。</li><li>Git的内容完整性要优于SVN，Git的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><p>总而言之，<strong>Git真的非常棒！！！</strong></p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>可以在<a href="http://git-scm.com/">Git官方网站</a>找到适合自己系统的Git下载链接并进行安装，macOS和Windows平台下安装Git都非常简单，Linux下如果要安装官方最新的版本，建议通过官方提供的Git源代码进行构建安装，步骤如下所示（以CentOS为例）。</p><p>下载Git源代码压缩文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">wget https:&#x2F;&#x2F;mirrors.edge.kernel.org&#x2F;pub&#x2F;software&#x2F;scm&#x2F;git&#x2F;git-2.23.0.tar.xz</code></pre><p>解压缩和解归档。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">xz -d git-2.23.0.tar.xztar -xvf git-2.23.0.tar</code></pre><p>安装底层依赖库。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum -y install libcurl-devel</code></pre><blockquote><p>说明：没有这个依赖库，git的网络功能将无法执行。</p></blockquote><p>安装前的配置。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd git-2.23.0.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local</code></pre><p>构建和安装。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">make &amp;&amp; make install</code></pre><p>安装成功后可以在终端中键入下面的命令检查自己的Git版本。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git --version</code></pre><p>如果之前完全没有接触过Git，可以先阅读<a href="http://www.bootcss.com/p/git-guide/">《git - 简易指南》</a>来对Git有一个大致的了解。</p><h4 id="Git本地操作"><a href="#Git本地操作" class="headerlink" title="Git本地操作"></a>Git本地操作</h4><p>可以使用下面的命令将一个文件夹变成Git仓库。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git init </code></pre><p>当你完成了上述操作后，本地目录就变成了下面的样子，下图左边是你的工作区（正在操作的工作目录），而右边是你的本地仓库，中间是工作区和本地仓库之间的暂存区（也称为缓存区）。</p><p><img src="/./res/git_repository.png"></p><blockquote><p><strong>提示</strong>：用<code>ls -la</code>查看所有文件会发现在执行完上面的命令后，文件夹下多了一个名为<code>.git</code>的隐藏文件夹，这个就是本地的Git版本仓库。</p></blockquote><p>通过<code>git add</code>可以将指定的文件或所有文件添加到暂存区。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git add &lt;file&gt;git add .</code></pre><p>这个时候使用下面的命令可以查看工作区、暂存区和本地仓库的状态。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git status</code></pre><blockquote><p><strong>提示</strong>：如果不希望将文件添加到暂存区，可以按照提示，使用<code>git rm --cached &lt;file&gt;</code>命令将文件从暂存区放回到工作区。</p></blockquote><p>如果这个时候对工作区的文件又进行了修改使得工作区和暂存区的内容并不相同了，再次执行<code>git status</code>可以看到哪个或哪些文件被修改了，如果希望用暂存区的内容恢复工作区，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git restore &lt;file&gt;git restore .</code></pre><blockquote><p><strong>注意</strong>：上面的命令目前仍然处于试验性阶段，在Git较早的版本中对应的命令是<code>git checkout -- &lt;file&gt;</code>。由于<code>git checkout</code>这个命令还可以用于切换分支，容易引起混淆，所以Git最新版本中将这个命令的两项功能分别赋予两个新的命令，一个就是上面的<code>git restore</code>，另一个是<code>git switch</code>。</p></blockquote><p>如果第一次使用Git，需要配置用户名和邮箱，然后才能将代码提交到仓库。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git config --global user.name &quot;jackfrued&quot;git config --global user.email &quot;jackfrued@126.com&quot;</code></pre><blockquote><p><strong>提示</strong>：可以用<code>git config --list</code>来查看Git的配置信息。</p></blockquote><p>通过下面的命令可以将暂存区的内容纳入本地仓库，</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git commit -m &#39;本次提交的说明&#39;</code></pre><p>可以通过<code>git log</code>查看每次提交对应的日志。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git loggit log --graph --oneline --abbrev-commit</code></pre><h4 id="Git服务器概述"><a href="#Git服务器概述" class="headerlink" title="Git服务器概述"></a>Git服务器概述</h4><p>Git不像SVN那样一定需要中央服务器才能工作，上面我们演示的版本控制操作都是在本地执行的，但是对于企业开发多人协作这样的场景还是需要中央服务器的支持。通常，企业可以选择使用代码托管平台（如<a href="https://github.com/">GitHub</a>）或自己搭建Git私服的方式来建立中央服务器（版本仓库），当然大多数的企业更倾向于后者。Github创办于2008年4月，目前是全世界最大的代码托管平台，支持企业用户（可以创建私有仓库，私有仓库内容不对外界公开）和普通用户（受限的使用私有仓库，不受限的使用公开仓库，公开仓库内容对他人可见）。Github上面代码库惊人的增长速度证明了它是非常成功的，在2018年6月被微软以75亿美元的天价收购。</p><p>国内也有不少类似Github的代码托管平台，最有名的当属<a href="https://gitee.com/">码云</a>和<a href="https://coding.net/">CODING</a>，目前码云和CODING对注册用户都提供了受限的使用私有仓库的功能，支持<strong>Pull Request</strong>（一种对话机制，可以在提交你的工作成果时让相关人员或团队注意到这件事情），同时还提供了对<strong>缺陷管理</strong>、<strong>Webhook</strong>等功能支持，这些使得版本控制系统还具备了缺陷管理和持续集成的能力。当然，很多公司都不愿意将自己的商业代码托管于别人的平台，这样的公司可以用<a href="https://about.gitlab.com/">Gitlab</a>来搭建公司内部的Git私服，具体的做法在下一章为大家介绍。</p><p><img src="/./res/gitlab-about.png"></p><p>这里我们直接以码云为例来说明使用Git服务器的一些注意事项。首先需要在码云上注册账号，当然也可以使用第三方登录（github账号、微信账号、新浪微博账号、CSDN账号等），登录成功后就可以创建项目，创建项目几乎是“傻瓜式”的，无需赘述，我们只对几个地方加以说明。</p><ol><li><p>创建项目时不建议勾选如下图所示的这些选项，编程语言可以暂时不做选择，而<code>.gitignore</code>模板也可以稍后自己编写或者通过更专业的工具（如：<a href="http://gitignore.io/">http://gitignore.io/</a>网站）自动生成。</p><p><img src="/./res/gitee-create-project.png"></p></li><li><p>添加项目成员。创建项目后，可以在项目的“设置”或“管理”中找到“成员管理”功能，这样就可以将其他开发者设置为项目团队的成员，项目成员通常分为“所有者”、“管理者”、“普通成员”和“受限成员”几种角色。</p><p><img src="/./res/gitee-add-members.png"></p></li><li><p>项目的分支。创建项目后，项目只有一个默认的<strong>master</strong>分支，应该将该分支设置为“保护分支”来避免项目管理者之外的成员修改该分支（不可直接提交）。当然，如果需要我们也可以在线创建新的代码分支。</p></li><li><p>设置公钥实现免密访问。在项目的“设置”或“管理”中我们还可以找到“部署公钥管理”的选项，通过添加部署公钥，可以通过SSH（安全远程连接）的方式访问服务器而不用每次输入用户名和口令。可以使用<code>ssh-keygen</code>命令来创建密钥对。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">ssh-keygen -t rsa -b 2048 -C &quot;your_email@example.com&quot;</code></pre><blockquote><p><strong>说明</strong>：上面命令生成的密钥对在<code>~/.ssh</code>目录下，公钥文件默认的名字为<code>id_rsa.pub</code>，可以通过<code>cat id_rsa.pub</code>来查看自己的公钥。Windows用户在安装Git工具后，可以通过<strong>Git Bash</strong>来输入上面的命令。</p></blockquote></li></ol><h4 id="Git远程操作"><a href="#Git远程操作" class="headerlink" title="Git远程操作"></a>Git远程操作</h4><p>拥有了Git服务器之后，我们就可以通过Git的远程操作将自己的工作成果推到服务器的仓库中，也可以将他人的工作成果从服务器仓库更新到本地。我们以刚才在码云上创建的仓库（仓库名为<code>python</code>）为例来说明如何进行远程操作。可以在如下所示的页面上找到仓库的地址（URL），如果配置了<strong>SSH Key</strong>就使用SSH方式访问仓库，否则就用HTTPS方式，后者需要在进行远程操作时提供用户名和口令。</p><p><img src="/./res/gitee-project-index.png"></p><ol><li><p>添加远程仓库（Git服务器）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git remote add origin git@gitee.com:jackfrued&#x2F;python.git</code></pre><p>其中<code>git@gitee.com:jackfrued/python.git</code>是上图中显示的仓库的URL，而前面的<code>origin</code>是替代这个冗长的URL的字符串，简单的说<code>origin</code>就是服务器上仓库的别名（如果有多个Git服务器，这个简短的名字也会有多个）。可以用<code>git remote -v</code>来查看已经指定的Git服务，也可以用<code>git remote remove</code>来删除指定的Git服务器。</p></li><li><p>将本地代码（工作成果）推送到远程仓库。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git push -u origin master:master</code></pre><p>其中，<code>-u</code>是<code>--set-upstream</code>的缩写，用来指定推送的服务器仓库，后面的<code>origin</code>就是刚才给仓库起的简短的别名，冒号前面的<code>master</code>是本地分支名，冒号后面的<code>master</code>是远程分支名，如果本地分支<code>master</code>已经和远程分支<code>master</code>建立过关联，则冒号以及后面的部分可以省略。</p></li><li><p>从远程仓库取回代码。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git pull origin master</code></pre></li></ol><h4 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h4><ol><li><p><strong>创建</strong>和<strong>切换</strong>分支。下面的命令创建了名为<code>dev</code> 的分支并切换到该分支。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch &lt;branch-name&gt;git switch &lt;branch-name&gt;</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git switch -c &lt;branch-name&gt;</code></pre><blockquote><p><strong>注意</strong>：在之前的Git版本中，切换分支使用<code>git checkout &lt;branch-name&gt;</code>命令，也可以通过<code>git checkout -b &lt;branch-name&gt;</code>来创建并切换分支。<code>git switch</code>命令目前仍然处于试验性阶段，但很明显这个命令更加清晰的表达了它要做的事情。</p></blockquote></li><li><p><strong>关联远程</strong>分支。例如：如果当前所在的分支还没有关联到远程分支，可以使用下面的命令为它们建立关联。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch --set-upstream-to origin&#x2F;develop</code></pre><p>如果需要为指定的分支关联远程分支，可以如下操作。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch --set-upstream-to origin&#x2F;develop &lt;branch-name&gt;</code></pre><blockquote><p>提示：上面的操作假设Git服务器上存在名为<code>develop</code>的分支，<code>--set-upstream-to</code>可以缩写为<code>-u</code>。</p></blockquote><p>当然，在创建分支时，如果使用了<code>--track</code>参数，也可以直接指定与本地分支关联的远程分支，如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch --track &lt;branch-name&gt; origin&#x2F;develop</code></pre><p>如果需要解除本地分支与远程分支的关联，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch --unset-upstream &lt;branch-name&gt;</code></pre></li><li><p>分支<strong>合并</strong>。例如在<code>dev</code>分支上完成开发任务之后，如果希望将<code>dev</code>分支上的成果合并到<code>master</code>，可以先切回到<code>master</code>分支然后使用<code>git merge</code>来做分支合并，合并的结果如下图右上方所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git switch mastergit merge --no-ff dev</code></pre><p>使用<code>git merge</code>合并分支时，默认使用<code>Fast Forward</code>合并，这意味着如果删除了分支，分支上的信息就全都丢掉了，如果希望将分支上的历史版本保留下来，可以使用<code>--no-ff</code>参数来禁用<code>Fast Forward</code>。</p><p>在合并分支时，没有冲突的部分Git会做自动合并。如果发生了冲突（如<code>dev</code>和<code>master</code>分支上都修改了同一个文件），会看到<code>CONFLICT (content): Merge conflict in &lt;filename&gt;. Automatic merge failed; fix conflicts and then commit the result</code>（自动合并失败，修复冲突之后再次提交）的提示，这个时候我们可以用<code>git diff</code>来查看产生冲突的内容。解决冲突通常需要当事人当面沟通之后才能决定保留谁的版本，冲突解决后需要重新提交代码。</p></li><li><p>分支<strong>变基</strong>。分支合并操作可以将多个分支上的工作成果最终合并到一个分支上，但是再多次合并操作之后，分支可能会变得非常的混乱和复杂，为了解决这个问题，可以使用<code>git rebase</code>操作来实现分支变基。如下图所示，当我们希望将<code>master</code>和<code>dev</code>上的工作成果统一到一起的时候，也可以使用变基操作。</p><p><img src="/./res/git-rebase.png"></p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git rebase mastergit switch mastergit merge dev</code></pre><p>当我们在<code>dev</code>分支执行<code>git rebase</code>命令时，将首先计算<code>dev</code>分支和<code>master</code>分支的差集，然后应用该差集到<code>dev</code>分支，最后我们切回到<code>master</code>分支并执行操作合并，这样就看到了如上图右下方所示的干净的分支。</p></li><li><p><strong>删除</strong>分支。删除分支可以使用<code>git branch</code>加上<code>-d</code>参数，如果分支上的工作成果还没有合并，那么在删除分支时会看到<code>error: The branch &#39;&lt;branch-name&gt;&#39; is not fully merged.</code>这样的错误提示。如果希望强行删除分支，可以使用<code>-D</code>参数。删除分支的操作如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch -d &lt;branch-name&gt;error: The branch &#39;&lt;branch-name&gt;&#39; is not fully merged.If you are sure you want to delete it, run &#39;git branch -D &lt;branch-name&gt;&#39;.git branch -D &lt;branch-name&gt;</code></pre><p>如果要删除远程分支，可以使用下面的命令，但是请慎重的操作。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git branch -r -d origin&#x2F;developgit push origin :develop</code></pre><p>或者</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git push origin --delete develop</code></pre></li></ol><h4 id="Git其他操作"><a href="#Git其他操作" class="headerlink" title="Git其他操作"></a>Git其他操作</h4><ol><li><p><code>git fetch</code>：下载远程仓库的所有变动，可以将远程仓库下载到一个临时分支，然后再根据需要进行合并操作，<code>git fetch</code>命令和<code>git merge</code>命令可以看作是之前讲的<code>git pull</code>命令的分解动作。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git fetch origin master:tempgit merge temp</code></pre></li><li><p><code>git diff</code>：常用于比较工作区和仓库、暂存区与仓库、两个分支之间有什么差别。</p></li><li><p><code>git stash</code>：将当前工作区和暂存区发生的变动放到一个临时的区域，让工作区变干净。这个命令适用于手头工作还没有提交，但是突然有一个更为紧急的任务（如线上bug需要修正）需要去处理的场景。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git stashgit stash listgit stash pop</code></pre></li><li><p><code>git reset</code>：回退到指定的版本。该命令主要有三个参数，如下图所示。</p><p><img src="/./res/git-reset.png"></p></li><li><p><code>git cherry-pick</code>：挑选某个分支的单次提交并作为一个新的提交引入到你当前分支上。</p></li><li><p><code>git revert</code>：撤回提交信息。</p></li><li><p><code>git tag</code>：经常用于查看或新增一个标签。</p></li></ol><h4 id="Git工作流程（分支管理策略）"><a href="#Git工作流程（分支管理策略）" class="headerlink" title="Git工作流程（分支管理策略）"></a>Git工作流程（分支管理策略）</h4><p>既然Git是团队开发必备的工具，那么在团队协作时就必须有一个规范的工作流程，这样才能让团队高效的工作，让项目顺利的进展下去，否则工具再厉害但团队成员各自为战，冲突就会无处不在，协作更加无从谈起。我们仍然以刚才码云上创建的<code>python</code>项目为例，来说明Git的分支管理策略。</p><h5 id="Github-flow"><a href="#Github-flow" class="headerlink" title="Github-flow"></a>Github-flow</h5><ol><li><p>克隆服务器上的代码到本地。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git clone git@gitee.com:jackfrued&#x2F;python.git</code></pre></li><li><p>创建并切换到自己的分支。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git switch -c &lt;branch-name&gt;</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout -b &lt;branch-name&gt;</code></pre></li><li><p>在自己的分支上开发并在本地做版本控制。</p></li><li><p>将自己的分支（工作成果）推到服务器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git push origin &lt;branch-name&gt;</code></pre></li><li><p>在线发起一次合并请求（通常称之为<strong>Pull Request</strong>，有的地方称为<strong>Merge Request</strong>），请求将自己的工作成果合并到<code>master</code>分支，合并之后可以删除该分支。</p><p><img src="/./res/gitee-pull-request.png"></p></li></ol><p>上面这种分支管理策略就是被称为<strong>github-flow</strong>或<strong>PR</strong>的流程，它非常简单容易理解，只需要注意以下几点：</p><ol><li><code>master</code>的内容都是可以进行发布的内容（不能直接在<code>master</code>上进行修改）。</li><li>开发时应该以<code>master</code>为基础建立新分支（日常开发任务在自己的分支上进行）。</li><li>分支先在本地实施版本控制，然后以同名分支定期向服务器进行push操作。</li><li>开发任务完成后向<code>master</code>发送合并请求。</li><li>合并请求通过审查之后合并到<code>master</code>，并从<code>master</code>向正式环境发布。</li></ol><p>当然，github-flow的缺点也很明显，<code>master</code>分支默认就是当前的线上代码，但是有的时候工作成果合并到<code>master</code>分支，并不代表它就能立刻发布，这样就会导致线上版本落后于<code>master</code>分支。</p><h5 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git-flow"></a>Git-flow</h5><p>除了上述的github-flow分支管理策略外，还有一种名为git-flow的分支管理策略，它也是大多数公司愿意使用的一套流程。Git-flow借鉴了中央集权型版本控制系统的长处，为团队内部统一建立、合并和关闭分支的方法，如下图所示。</p><p><img src="/./res/git-flow.png"></p><p>在这种模式下，项目有两个长线分支，分别是<code>master</code>和<code>develop</code>，其他都是临时的的辅助分支，包括<code>feature</code>（开发特定功能的分支，开发结束后合并到<code>develop</code>）、<code>release</code>（从<code>develop</code>分离出来的为发布做准备的分支，发布结束后合并到<code>master</code>和<code>develop</code>）和<code>hotfix</code>（产品发布后出现问题时紧急建立的分支，直接从<code>master</code>分离，问题修复后合并到<code>master</code>并打上标签，同时还要合并到<code>develop</code>来避免将来的版本遗漏了这个修复工作，如果此时有正在发布中的<code>release</code>分支，还要合并到<code>release</code>分支）。具体的实施过程如下所示：</p><p><img src="/./res/git-flow-detail.png"></p><ol><li><p>最开始的时候只有<code>master</code>和<code>develop</code>分支，如上图左侧所示。</p></li><li><p>从<code>develop</code>分支创建<code>feature</code>分支（上图右上），工作完成后将工作成果合并到<code>develop</code>分支（上图右中）。</p><p>创建<code>feature</code>分支：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git switch -c feature&#x2F;user develop</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout -b feature&#x2F;user develop</code></pre><p>接下来就是在<code>feature</code>分支上进行开发并实施版本控制，这一段如何操作我们就不再赘述了。工作完成后，将<code>feature</code>分支合并到<code>develop</code>分支：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout developgit merge --no-ff feature&#x2F;usergit branch -d feature&#x2F;usergit push origin develop</code></pre></li><li><p>从<code>develop</code>分支创建<code>release</code>分支，发布结束后合并回<code>master</code>和<code>develop</code>分支。</p><p>创建<code>release</code>分支：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout -b release-0.1 developgit push -u origin release-0.1... ... ...git pullgit commit -a -m &quot;............&quot;</code></pre><p>将<code>release</code>分支合并回<code>master</code>和<code>develop</code>分支：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout mastergit merge --no-ff release-0.1git pushgit checkout developgit merge --no-ff release-0.1git pushgit branch -d release-0.1git push --delete release-0.1git tag v0.1 mastergit push --tags</code></pre></li><li><p>从<code>master</code>分支创建<code>hotfix</code>分支，在修复bug后合并到<code>develop</code>和<code>master</code>分支（上图右下）。</p><p>创建<code>hotfix</code>分支：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout -b hotfix-0.1.1 mastergit push -u origin hotfix-0.1.1... ... ...git pullgit commit -a -m &quot;............&quot;</code></pre><p>将<code>hotfix</code>分支合并回<code>develop</code>和<code>master</code>分支。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git checkout mastergit merge --no-ff hotfix-0.1.1git pushgit checkout developgit merge --no-ff hotfix-0.1.1git pushgit branch -d hotfix-0.1.1git push --delete hotfix-0.1.1git tag v0.1.1 mastergit push --tags</code></pre></li></ol><p>Git-flow流程比较容易控制各个分支的状况，但是在运用上github-flow要复杂得多，因此实际使用的时候通常会安装名为<code>gitflow</code>的命令行工具（Windows环境的Git自带了该工具）或者使用图形化的Git工具（如：SmartGit、SourceTree等）来简化操作，具体的可以参考<a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow">《git-flow 的工作流程》</a>一文，因为这篇文章写得已经很好了，本文不再进行赘述。</p><h3 id="缺陷管理"><a href="#缺陷管理" class="headerlink" title="缺陷管理"></a>缺陷管理</h3><p>没有好的团队管理工具必然导致项目进展不顺利，任务管理困难，而引入缺陷管理系统正好可以解决这些问题，通常一个缺陷管理系统都包含了以下的功能：</p><ol><li>任务管理（包括必须做什么、谁来做、什么时候完成、现在处于什么状态等）。</li><li>直观而且可以检索过去发生的各种问题。</li><li>能够对信息进行统一的管理和共享。</li><li>能够生成各类报表。</li><li>能够关联到其他系统，具有可扩展性。</li></ol><h4 id="禅道"><a href="#禅道" class="headerlink" title="禅道"></a>禅道</h4><p><a href="https://www.zentao.net/">禅道</a>是国产的专业项目管理软件，它不仅仅是缺陷管理工具，它提供了完整软件生命周期管理功能，支持<a href="http://www.scrumcn.com/agile/scrum-knowledge-library/scrum.html">Scrum敏捷开发</a>，能够实现需求管理、缺陷管理、任务管理等一系列的功能，而且拥有强大的扩展机制和丰富的功能插件。可以从禅道的官方网站提供的<a href="https://www.zentao.net/download.html">下载链接</a>来下载禅道，推荐使用一键安装包。</p><p>下面仍然以CentOS Linux为例，讲解如何利用官方提供的一键安装包来安装禅道。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd &#x2F;optwget http:&#x2F;&#x2F;dl.cnezsoft.com&#x2F;zentao&#x2F;pro8.5.2&#x2F;ZenTaoPMS.pro8.5.2.zbox_64.tar.gzgunzip ZenTaoPMS.pro8.5.2.zbox_64.tar.gztar -xvf ZenTaoPMS.pro8.5.2.zbox_64.tar</code></pre><p>我们在<code>/opt</code>目录下（官方推荐使用这个目录）下载了禅道的归档压缩文件，并进行了解压缩和解归档的操作，完成上述步骤后，会看到一个名为<code>zbox</code>的文件夹。一键安装包中内置了Apache、MySQL、PHP等应用，也就是说这些都不需要单独安装部署了，接下来我们通过下面的命令来启动禅道。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">&#x2F;opt&#x2F;zbox&#x2F;zbox -ap 8080 -mp 3307&#x2F;opt&#x2F;zbox&#x2F;zbox start</code></pre><blockquote><p>说明：上面使用<code>zbox</code>文件夹下的<code>zbox</code>命令，其中<code>-ap</code>是为了指定Apache服务器使用的端口，<code>-mp</code>是为了指定MySQL数据库使用的端口，这里使用3307端口是为了避开服务器上可能已经存在的MySQL服务的3306端口；<code>start</code>表示启动服务，<code>stop</code>可以用来停止服务。此外，需要打开防火墙8080端口以便访问禅道，注意<strong>数据库的端口决不能暴露给公网</strong>。</p></blockquote><p>打开浏览器，输入服务器的公网IP地址就可以访问禅道，如果愿意，也可以通过DNS解析绑定一个域名来进行访问，禅道的首页如下图所示，默认的管理员是<code>admin</code>，口令是<code>123456</code>。</p><p><img src="/./res/zentao-login.png"></p><p>第一次使用禅道时，建议通过点击用户名，然后通过“帮助”菜单的“新手教程”来迅速了解禅道。官方网站的文档链接中提供了<a href="https://www.zentao.net/video/c1454.html">视频教程</a>，初学者也可以通过视频教程来上手。</p><p><img src="/./res/zentao-index.png"></p><p>对敏捷开发以及敏捷闭环工具不是特别了解的，可以参考<a href="https://blog.51cto.com/newthink/1775427">《基于JIRA的Scrum敏捷开发的项目管理》</a>一文。</p><h4 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h4><p>常用的代码托管平台和之前提到的Git私服Gitlab都提供了缺陷管理的功能，当我们要报告一个bug时，可以在如下图所示的界面创建一个新的问题票（issue ticket）。填写的内容包括：</p><ol><li>**[必填]**出现问题的软件版本号、具体的使用环境（如操作系统）等相关信息。</li><li>**[必填]**能够稳定重现该问题的相关步骤。</li><li>**[必填]**描述此处期待的行为和实际的行为。</li><li>**[可选]**你对这个bug的看法（产生bug的原因是什么）。</li></ol><p><img src="/./res/gitlab-new-issue.png"></p><p>如上图所示，我们在创建问题票时，还需要将问题指派给处理问题的人，如果不清楚应该由谁来修复这个bug，就指派给项目管理者，除此之外还要指定问题的优先级（十分紧急、紧急、普通、不紧急等）、问题的标签（功能缺陷、新特性、改进增强、前瞻研究等）、里程碑（通过里程碑可以将问题与某些特定的项目节点关联起来，之后可以查看每一个里程碑的进展，可以基于软件版本号来建立里程碑，也可以基于迭代周期来建立里程碑）以及需要在哪个时间点以前修复等信息。</p><p>有些敏捷团队使用问题票来管理产品的需求，称之为“问题驱动开发”（TiDD），也就是说新功能的开发是通过创建问题票来驱动的，具体的步骤包括：建立问题票、指定责任人、开发、提交、Push到代码库。如果要创建一个和需求相关的问题票，应该要填写以下的内容：</p><ol><li>**[必填]**简短的描述需求，并用它作为标题。</li><li>**[必填]**这个需求是解决什么问题的。</li><li>**[必填]**这个需求对软件现有功能会造成什么影响。</li><li>**[必填]**这个需求应该实现什么样的功能。</li><li>**[必填]**这个需求是否依赖其他模块提供相关支持。</li><li>**[可选]**这个需求有哪些实现方式。</li><li>**[可选]**这些可选的实现方式分别有哪些优缺点。</li></ol><h4 id="其他产品"><a href="#其他产品" class="headerlink" title="其他产品"></a>其他产品</h4><p>除了禅道和GitLab之外，<a href="https://www.atlassian.com/zh/software/jira">JIRA</a>、<a href="https://www.redmine.org/">Redmine</a>、Backlog等也是不错的缺陷管理系统。目前，这些系统大都不仅仅提供了缺陷管理的功能，更多的时候它们可以作为敏捷闭环工具来使用，关于敏捷闭环工具这个话题，请大家参考<a href="https://blog.51cto.com/newthink/1775427">《基于JIRA的Scrum敏捷开发的项目管理》</a>一文。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>为了快速的产出高质量的软件，在团队开发中持续集成（CI）是一个非常重要的环节。所谓CI，就是一种让计算机自动任意次重复编译、测试、汇报等工作的方法，通过CI可以帮助开发者提早发现问题，降低各种人为失误给项目带来的风险。按照经典的软件过程模型（瀑布模型），集成的工作一般要等到所有的开发工作都结束后才能开始，但这个时候如果发现了问题，修复问题的代价是非常具体的。基本上，集成实施得越晚，代码量越大，解决问题就越困难。持续集成将版本控制、自动化构建、代码测试融入到一起，让这些工作变得自动化和可协作。由于其频繁重复整个开发流程（在指定时间内多次pull源代码并运行测试代码），所以能帮助开发者提早发现问题。</p><p>在所有的CI工具中，Jenkins和<a href="https://www.travis-ci.org/">TravisCI</a>是最具有代表性的，前者是基于 Java的开源CI工具，后者是新晋的在线CI工具，下图是Jenkins的工作面板。</p><p><img src="/./res/jenkins_new_project.png"></p><p>持续集成对于编译型语言的意义更大，对于Python这样的解释型语言，更多的时候是用于对接版本控制系统触发自动化测试并产生相应的报告，类似的功能也可以通过配置<strong>Webhook</strong>来完成。如果要通过Docker这样的虚拟化容器进行项目打包部署或者通过K8S进行容器管理，可以在持续集成平台安装对应的插件来支持这些功能。码云甚至可以直接对接<a href="https://ding-doc.dingtalk.com/">钉钉开放平台</a>使用钉钉机器人来向项目相关人员发送即时消息。GitLab也对CI和CD（持续交付）提供了支持，具体内容请大家参考<a href="https://blog.stdioa.com/2018/06/gitlab-cicd-fundmental/">《GitLab CI&#x2F;CD基础教程》</a>。</p><blockquote><p><strong>说明</strong>：</p><ol><li><p>关于敏捷开发的相关内容，有兴趣的读者可以阅读知乎上的<a href="https://zhuanlan.zhihu.com/p/33472102">《这才是敏捷开发》</a>一文。</p></li><li><p>本章中的部分插图来自于网易云课堂<a href="https://study.163.com/course/introduction/1003268008.htm">《人人都会用Git》</a>课程（免费哟），在此表示感谢。</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>92.Docker容器技术详解</title>
      <link href="/2024/07/01/92.docker-rong-qi-ji-zhu-xiang-jie/"/>
      <url>/2024/07/01/92.docker-rong-qi-ji-zhu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker容器技术详解"><a href="#Docker容器技术详解" class="headerlink" title="Docker容器技术详解"></a>Docker容器技术详解</h2><p>Docker是基于Go语言开发的开源应用容器引擎，遵从Apache Licence 2.0协议，可以让开发者打包应用以及应用的依赖包到一个可移植的容器中，然后发布到各种发行版本的Linux系统上。</p><h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>软件开发中最为麻烦的事情可能就是配置环境了。由于用户使用的操作系统具有多样性，即便使用跨平台的开发语言（如Java和Python）都不能保证代码能够在各种平台下都可以正常的运转，而且在不同的环境下我们安装的软件需要依赖的软件包也是不一样的。</p><p>那么问题来了，我们安装软件的时候可不可以把软件运行的环境一并安装？我们是不是可以把原始环境一模一样地复制过来呢？</p><p>虚拟机（virtual machine）就是带环境安装的一种解决方案，它可以在一种操作系统里面运行另一种操作系统，比如在Windows系统里面运行Linux系统，在macOS上运行Windows，而应用程序对此毫无感知。使用过虚拟机的人都知道，虚拟机用起来跟真实系统一模一样，而对于虚拟机的宿主系统来说，虚拟机就是一个普通文件，不需要了就删掉，对宿主系统或者其他的程序并没有影响。但是虚拟机通常会占用较多的系统资源，启动和关闭也非常的缓慢，总之用户体验并没有想象中的那么好。</p><p>Docker属于对Linux容器技术（LXC）的一种封装（利用了Linux的namespace和cgroup技术），它提供了简单易用的容器使用接口，是目前最流行的 Linux 容器解决方案。Docker将应用程序与该程序的依赖打包在一个文件里面，运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。下图是虚拟机和容器的对比，左边是传统的虚拟机，右边是Docker。</p><p><img src="/./res/docker_vs_vm.png"></p><p>目前，Docker主要用于几下几个方面：</p><ol><li>提供一次性的环境。</li><li>提供弹性的云服务（利用Docker很容易实现扩容和收缩）。</li><li>实践微服务架构（隔离真实环境在容器中运行多个服务）。</li></ol><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>下面以CentOS为例讲解如何安装Docker，使用<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Ubuntu</a>、<a href="https://docs.docker.com/docker-for-mac/install/">macOS</a>或<a href="https://docs.docker.com/docker-for-windows/install/">Windows</a>的用户可以通过点击对应的链接了解这些平台下如何进行安装。</p><ol><li><p>确定操作系统内核版本（CentOS 7要求64位，内核版本3.10+；CentOS 6要求64位，内核版本2.6+）。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">uname -r</code></pre></li><li><p>更新系统底层的库文件（建议一定要执行，否则在使用Docker时可能会出现莫名其妙的问题）。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">yum update</code></pre></li><li><p>移除可能存在的旧的Docker版本。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">yum list installed | grep dockeryum erase -y docker docker-common docker-engine</code></pre></li><li><p>安装yum工具包和依赖项。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre></li><li><p>通过yum工具包添加yum源（安装Docker-ce的源）。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</code></pre></li><li><p>在CentOS下使用yum安装Docker-ce并启动。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">yum -y install docker-cesystemctl start docker</code></pre></li><li><p>查看Docker的信息和版本。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker versiondocker info</code></pre></li></ol><p>接下来可以通过下载镜像和创建容器来看看Docker是否可以运转起来。可以使用下面的命令从Docker的镜像仓库下载名为hello-world的镜像文件。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker pull hello-world</code></pre><p>查看所有镜像文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker images</code></pre><pre class="language-none"><code class="language-none">REPOSITORY               TAG        IMAGE ID            CREATED             SIZEdocker.io&#x2F;hello-world    latest     fce289e99eb9        7 months ago        1.84 kB</code></pre><p>通过镜像文件创建并运行容器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container run --name mycontainer hello-world</code></pre><blockquote><p>说明：其中<code>mycontainer</code>是我们给容器起的名字，跟在<code>--name</code>参数之后；<code>hello-world</code>就是我们刚才下载的镜像文件。</p></blockquote><pre class="language-none"><code class="language-none">Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https:&#x2F;&#x2F;hub.docker.com&#x2F;For more examples and ideas, visit: https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;</code></pre><p>如果要删除这个容器，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container rm mycontainer</code></pre><p>在删除容器之后，我们还可以删除刚才下载的镜像文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker rmi hello-world</code></pre><blockquote><p>说明：如果要在Ubuntu（内核版本3.10+）下面安装和启动Docker，可以按照如下的步骤进行。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">apt updateapt install docker-ceservice docker start</code></pre><p>国内用户可以通过更换Ubuntu软件下载源来提升下载速度，具体请参照清华大学开源软件镜像站上的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">《Ubuntu镜像使用帮助》</a>。</p></blockquote><p>安装Docker后，由于直接访问<a href="https://hub.docker.com/">dockerhub</a>下载镜像会非常缓慢，建议将服务器更换为国内镜像，可以通过修改 <code>/etc/docker/daemon.json</code> 文件来做到。一般的云服务器会有自己专属的镜像，就不需要手动修改了。</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123;&quot;registry-mirrors&quot;: [        &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,        &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;    ]&#125;</code></pre><h3 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h3><p>想要玩转Docker，最简单的办法就是马上用Docker创建一些自己学习和工作中需要用到的容器，下面我们带着大家一起来创建这些容器。</p><h4 id="运行Nginx"><a href="#运行Nginx" class="headerlink" title="运行Nginx"></a>运行Nginx</h4><p>Nginx是高性能的Web服务器，同时也是做反向代理服务器的上佳选择。使用Docker可以非常简单的创建一个运行Nginx的容器，命令如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container run -d -p 80:80 --rm --name mynginx nginx</code></pre><blockquote><p>说明：上面的参数<code>-d</code>表示容器在后台运行（不产生输出到Shell）并显示容器的ID；<code>-p</code>是用来映射容器的端口到宿主机的端口，冒号前面是宿主机的端口，冒号后面是容器内部使用的端口；<code>--rm</code>表示容器停止后自动删除容器，例如执行命令<code>docker container stop mynginx</code>后，容器就不复存在了；<code>--name</code>后面的mynginx是自定义的容器名字；在创建容器的过程中，需要用到nginx的镜像文件，镜像文件的下载是自动完成的，如果没有指定版本号，默认是最新版本（latest）。</p></blockquote><p>如果需要将自己的Web项目（页面）部署到Nginx上，可以使用容器拷贝命令将指定路径下所有的文件和文件夹拷贝到容器的指定目录中。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container cp &#x2F;root&#x2F;web&#x2F;index.html mynginx:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</code></pre><p>如果不愿意拷贝文件也可以在创建容器时通过数据卷操作<code>--volume</code>将指定的文件夹映射到容器的某个目录中，例如将Web项目的文件夹直接映射到<code>/usr/share/nginx/html</code>目录。我们先通过下面的命令让刚才创建的容器停止运行。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container stop mynginx</code></pre><p>然后用下面的命令重新创建容器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container run -d -p 80:80 --rm --name mynginx --volume &#x2F;root&#x2F;docker&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</code></pre><blockquote><p>说明：上面创建容器和拷贝文件的命令中，<code>container</code>是可以省略的，也就是说<code>docker container run</code>和<code>docker run</code>是一样的，而<code>docker container cp</code>和<code>docker cp</code>是一样的。此外，命令中的<code>--volume</code>也可以缩写为<code>-v</code>，就如同<code>-d</code>是<code>--detach</code>的缩写，<code>-p</code>是<code>--publish</code>的缩写。<code>$PWD</code>代表宿主系统当前文件夹，这些对于使用过Unix或者Linux系统的人来说，应该是很容易理解的。</p></blockquote><p>要查看运行中的容器，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker ps</code></pre><pre class="language-none"><code class="language-none">CONTAINER ID    IMAGE    COMMAND                  CREATED            STATUS             PORTS                 NAMES3c38d2476384    nginx    &quot;nginx -g &#39;daemon ...&quot;   4 seconds ago      Up 4 seconds       0.0.0.0:80-&gt;80&#x2F;tcp    mynginx</code></pre><p>要启动和停止容器，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker start mynginxdocker stop mynginx</code></pre><p>由于在创建容器时使用了<code>--rm</code>选项，容器在停止时会被移除，当我们使用下面的命令查看所有容器时，应该已经看不到刚才的<code>mynginx</code>容器了。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container ls -a</code></pre><p>如果在创建容器时没有指定<code>--rm</code>选项，那么也可以使用下面的命令来删除容器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker rm mynginx</code></pre><p>要删除正在运行中的容器，需要使用<code>-f</code>选项。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker rm -f mynginx</code></pre><h4 id="运行MySQL"><a href="#运行MySQL" class="headerlink" title="运行MySQL"></a>运行MySQL</h4><p>我们再来尝试用Docker安装一台MySQL服务器，首先可以先检查一下有没有MySQL的镜像文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker search mysql</code></pre><pre class="language-none"><code class="language-none">INDEX        NAME            DESCRIPTION        STARS        OFFICIAL        AUTOMATEDdocker.io    docker.io&#x2F;mysql MySQL is a ...     8486         [OK]...</code></pre><blockquote><p>说明：上面查询结果的列依次代表索引、镜像名、镜像描述、用户评价、是否官方镜像、自动构建。</p></blockquote><p>下载MySQL镜像并指定镜像的版本号。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker pull mysql:5.7</code></pre><p>如果需要查看已经下载的镜像文件，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker images</code></pre><pre class="language-none"><code class="language-none">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEdocker.io&#x2F;nginx     latest              e445ab08b2be        2 weeks ago         126 MBdocker.io&#x2F;mysql     5.7                 f6509bac4980        3 weeks ago         373 MB</code></pre><p>创建并运行MySQL容器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 3306:3306 --name mysql57 -v &#x2F;root&#x2F;docker&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d -v &#x2F;root&#x2F;docker&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql:5.7</code></pre><blockquote><p><strong>注意</strong>：上面创建容器时我们又一次使用了数据卷操作，那是因为通常容器是随时创建随时删除的，而数据库中的数据却是需要保留下来的。</p></blockquote><p>上面的两个数据卷操作一个是映射了MySQL配置文件所在的文件夹，一个是映射了MySQL数据所在的文件夹，这两个数据卷操作非常重要。我们可以将MySQL的配置文件放在<code>$PWD/mysql/conf</code>目录下，配置文件的具体内容如下所示：</p><pre class="language-INI" data-language="INI"><code class="language-INI">[mysqld]pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidsocket&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sockdatadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqllog-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.logserver-id&#x3D;1log-bin&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql-bin.logexpire_logs_days&#x3D;30max_binlog_size&#x3D;256Msymbolic-links&#x3D;0</code></pre><p>如果安装了MySQL 8.x版本（目前的最新版本），在使用客户端工具连接服务器时可能会遇到<code>error 2059: Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded</code>的问题，这是因为MySQL 8.x默认使用了名为“caching_sha2_password”的机制对用户口令进行了更好的保护，但是如果客户端工具不支持新的认证方式，连接就会失败。解决这个问题有两种方式：一是升级客户端工具来支持MySQL 8.x的认证方式；二是进入容器，修改MySQL的用户口令认证方式。下面是具体的步骤，我们先用<code>docker exec</code>命令进入容器的交互式环境，假设运行MySQL 8.x的容器名字叫<code>mysql8x</code>。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker exec -it mysql8x &#x2F;bin&#x2F;bash</code></pre><p>进入容器的交互式Shell之后，可以首先利用MySQL的客户端工具连接MySQL服务器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">mysql -u root -pEnter password:Your MySQL connection id is 16Server version: 8.0.12 MySQL Community Server - GPLCopyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and&#x2F;or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt;</code></pre><p>接下来通过SQL来修改用户口令就可以了。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;123456&#39; password expire never;</code></pre><p>当然，如果愿意你也可以查看一下用户表检查是否修改成功。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">use mysql;select user, host, plugin, authentication_string from user where user&#x3D;&#39;root&#39;;+------+-----------+-----------------------+-------------------------------------------+| user | host      | plugin                | authentication_string                     |+------+-----------+-----------------------+-------------------------------------------+| root | %         | mysql_native_password | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 || root | localhost | mysql_native_password | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |+------+-----------+-----------------------+-------------------------------------------+2 rows in set (0.00 sec)</code></pre><p>在完成上面的步骤后，现在即便不更新客户端工具也可以连接MySQL 8.x了。</p><h4 id="运行Redis"><a href="#运行Redis" class="headerlink" title="运行Redis"></a>运行Redis</h4><p>接下来我们试一试运行多个容器并让多个容器之间通过网络通信。我们创建4个Redis容器来实现一主三从的主从复制结构。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 6379:6379 --name redis-master redisdocker run -d -p 6380:6379 --name redis-slave-1 --link redis-master:redis-master redis redis-server --replicaof redis-master 6379docker run -d -p 6381:6379 --name redis-slave-2 --link redis-master:redis-master redis redis-server --replicaof redis-master 6379docker run -d -p 6382:6379 --name redis-slave-3 --link redis-master:redis-master redis redis-server --replicaof redis-master 6379</code></pre><p>上面的命令中，<code>--link</code>参数用于给容器创建网络别名，因为三台从机（slave）需要通过网络连接自己的主机（master）。虽然，我们可以通过<code>docker inspect --format &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; &lt;container-ID&gt;</code>命令来查看到容器的IP地址，但是由于容器的即装即用性，容器的IP地址有可能会发生变化，如果直接使用IP地址，在容器重启后就可能会因为IP地址的变化导致从机无法连接到主机。使用<code>--link</code>参数创建网络别名就是为了在启动Redis服务器时在<code>redis-server</code>后面的<code>--replicaof</code>参数后使用这个别名而不是IP地址。</p><p>接下来我们进入名为<code>redis-master</code>的容器，看看主从复制的配置是否成功。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker exec -it redis-master &#x2F;bin&#x2F;bash</code></pre><p>通过<code>redis-cli</code>启动命令行工具。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">redis-cli127.0.0.1:6379&gt; info replication# Replicationrole:masterconnected_slaves:3slave0:ip&#x3D;172.17.0.4,port&#x3D;6379,state&#x3D;online,offset&#x3D;1988,lag&#x3D;0slave1:ip&#x3D;172.17.0.5,port&#x3D;6379,state&#x3D;online,offset&#x3D;1988,lag&#x3D;1slave2:ip&#x3D;172.17.0.6,port&#x3D;6379,state&#x3D;online,offset&#x3D;1988,lag&#x3D;1master_replid:94703cfa03c3ddc7decc74ca5b8dd13cb8b113eamaster_replid2:0000000000000000000000000000000000000000master_repl_offset:1988second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:1988</code></pre><h4 id="运行GitLab"><a href="#运行GitLab" class="headerlink" title="运行GitLab"></a>运行GitLab</h4><p>GitLab是由GitLab Inc.开发的Git仓库管理工具，具有wiki、问题跟踪、持续集成等一系列的功能，分为社区版和企业版。通过Docker提供的虚拟化容器，我们可以安装社区版的Docker。因为GitLab需要使用SSH协议进行安全连接，我们要暴露容器的22端口，所以可以先将宿主机SSH连接的22端口修改为其他端口（如：12345），然后再进行后续的操作。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</code></pre><p>将其中定义端口的那行代码去掉注释并将端口修改为12345。</p><pre class="language-none"><code class="language-none">Port 12345</code></pre><p>重新启动<code>sshd</code>服务。 </p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">systemctl restart sshd</code></pre><blockquote><p><strong>提示</strong>：修改端口后应该确保防火墙上也开启对应的端口，否则无法使用SSH连接到Linux服务器。</p></blockquote><p>创建需要用于数据卷映射操作的文件夹。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">mkdir -p &#x2F;root&#x2F;gitlab&#x2F;&#123;config,logs,data&#125;</code></pre><p>基于<code>gitlab/gitlab-ce</code>镜像创建容器，并暴露80端口（HTTP连接）和22端口（SSH连接）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 80:80 -p 22:22 --name gitlab -v &#x2F;root&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab -v &#x2F;root&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab -v &#x2F;root&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab gitlab&#x2F;gitlab-ce</code></pre><blockquote><p>说明：GitLab的启动比较缓慢，创建好容器后可能需要等待一段时间才能通过浏览器来进行访问。</p></blockquote><p>首次进入GitLab访问界面会提示我们修改管理员密码，设置好管理员密码后就可以在登录界面输入用户名<code>root</code>和刚才设置的密码登录到管理员控制台，在使用上还是非常简单和人性化的。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>通过上面的讲解，我们已经掌握了如何通过官方提供的镜像来创建容器。当然如果愿意，我们也可以用配置好的容器来生成镜像。简而言之，<strong>Docker镜像是由文件系统叠加而成的，系统的最底层是bootfs，相当于就是Linux内核的引导文件系统；接下来第二层是rootfs，这一层可以是一种或多种操作系统（如Debian或Ubuntu文件系统），Docker中的rootfs是只读状态的；Docker利用联合挂载技术将各层文件系统叠加到一起，最终的文件系统会包含有底层的文件和目录，这样的文件系统就是一个镜像</strong>。</p><p>之前我们讲过了如何查找、列出镜像和拉取（下载）镜像，接下来看看构建镜像的两种方式：</p><ol><li>使用<code>docker commit</code>命令。（不推荐）</li><li>使用<code>docker build</code>命令和Dockerfile文件。</li></ol><h4 id="使用commit命令构建镜像"><a href="#使用commit命令构建镜像" class="headerlink" title="使用commit命令构建镜像"></a>使用commit命令构建镜像</h4><p>为了演示如何构建镜像，我们先使用Ubuntu镜像来定制一个容器，命令如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run --name myubuntu -it ubuntu &#x2F;bin&#x2F;bash</code></pre><p>在容器中执行下面的命令来安装Apache服务器并退出容器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">apt -y upgradeapt -y install apache2exit</code></pre><p>我们将这个容器作为一个定制的Web服务器保存起来，当需要这样一台Web服务器的时候，就没有必要重新创建容器并安装Apache了。</p><p>首先我们通过下面的命令查看容器的ID。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker container ls -a</code></pre><pre class="language-none"><code class="language-none">docker container ls -aCONTAINER ID    IMAGE    COMMAND        CREATED        STATUS        PORTS    NAMES014bdb321612    ubuntu   &quot;&#x2F;bin&#x2F;bash&quot;    5 minutes ago  Exited (0)             myubuntu</code></pre><p>提交定制的容器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker commit 014bdb321612 jackfrued&#x2F;mywebserver</code></pre><p>查看镜像文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker images</code></pre><pre class="language-none"><code class="language-none">REPOSITORY              TAG       IMAGE ID        CREATED             SIZEjackfrued&#x2F;mywebserver   latest    795b294d265a    14 seconds ago      189 MB</code></pre><p>生成镜像文件以后，后面就可以利用刚才创建的镜像文件来创建新的容器。</p><h4 id="使用Dockerfile构建镜像"><a href="#使用Dockerfile构建镜像" class="headerlink" title="使用Dockerfile构建镜像"></a>使用Dockerfile构建镜像</h4><p>Dockerfile使用DSL（Domain Specific Language）来构建一个Docker镜像，只要编辑好了Dockerfile文件，就可以使用<code>docker build</code>命令来构建一个新的镜像。</p><p>我们先创建一个名为myapp的文件夹来保存项目代码和Dockerfile的文件，如下所示：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[ECS-root temp]# tree myappmyapp├── api│   ├── app.py│   ├── requirements.txt│   └── start.sh└── Dockerfile</code></pre><p>其中api是Flask项目的文件夹，其中包括了项目代码、依赖项以及启动脚本等文件，具体内容如下所示：</p><p><code>app.py</code>文件：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from flask import Flaskfrom flask_restful import Resource, Apifrom flask_cors import CORSapp &#x3D; Flask(__name__)CORS(app, resources&#x3D;&#123;r&#39;&#x2F;api&#x2F;*&#39;: &#123;&#39;origins&#39;: &#39;*&#39;&#125;&#125;)api &#x3D; Api(app)class Product(Resource):    def get(self):        products &#x3D; [&#39;Ice Cream&#39;, &#39;Chocolate&#39;, &#39;Coca Cola&#39;, &#39;Hamburger&#39;]        return &#123;&#39;products&#39;: products&#125;api.add_resource(Product, &#39;&#x2F;api&#x2F;products&#39;)</code></pre><p><code>requirements.txt</code>文件：</p><pre class="language-INI" data-language="INI"><code class="language-INI">flaskflask-restfulflask-corsgunicorn</code></pre><p><code>start.sh</code>文件：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">#!&#x2F;bin&#x2F;bashexec gunicorn -w 4 -b 0.0.0.0:8000 app:app</code></pre><blockquote><p><strong>提示</strong>：需要给start.sh文件以执行权限，可以使用<code>chmod 755 start.sh</code>命令来做到。</p></blockquote><p>Dockerfile文件：</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile"># 指定基础镜像FROM python:3.7# 指定镜像的维护者MAINTAINER jackfrued &quot;jackfrued@126.com&quot;# 将指定文件添加到容器中指定的位置ADD api&#x2F;* &#x2F;root&#x2F;api&#x2F;# 设置工作目录WORKDIR &#x2F;root&#x2F;api# 执行命令(安装Flask项目的依赖项)RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F;# 容器启动时要执行的命令ENTRYPOINT [&quot;.&#x2F;start.sh&quot;]# 暴露端口EXPOSE 8000</code></pre><p>我们来解释一下上面的Dockerfile文件。Dockerfile文件通过特殊的指令来指定基础镜像（FROM指令）、创建容器后需要指定的命令（RUN指令）以及需要暴露的端口（EXPOSE）等信息。我们稍后会专门为大家介绍这些Dockfile中的指令。</p><p>接下来我们可以使用<code>docker build</code>命令来创建镜像，如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker build -t &quot;jackfrued&#x2F;myapp&quot; .</code></pre><blockquote><p>提示：上面的命令最后面的<code>.</code> 千万不要漏掉了哦，它表示从当前路径下寻找Dockerfile。</p></blockquote><p>通过下面的命令可以查看创建好的镜像。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker images</code></pre><pre class="language-none"><code class="language-none">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZEjackfrued&#x2F;myapp              latest              6d6f026a7896        5 seconds ago       930 MB</code></pre><p>如果想知道镜像文件是如何创建出来的，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker history jackfrued&#x2F;myapp</code></pre><pre class="language-none"><code class="language-none">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT6d6f026a7896        31 seconds ago      &#x2F;bin&#x2F;sh -c #(nop)  EXPOSE 8000&#x2F;tcp              0 B                 3f7739173a79        31 seconds ago      &#x2F;bin&#x2F;sh -c #(nop)  ENTRYPOINT [&quot;.&#x2F;start.sh&quot;]    0 B                 321e6bf09bf1        32 seconds ago      &#x2F;bin&#x2F;sh -c pip install -r requirements.txt...   13 MB               2f9bf2c89ac7        37 seconds ago      &#x2F;bin&#x2F;sh -c #(nop) WORKDIR &#x2F;root&#x2F;api             0 B                 86119afbe1f8        37 seconds ago      &#x2F;bin&#x2F;sh -c #(nop) ADD multi:4b76f9c9dfaee8...   870 B               08d465e90d4d        3 hours ago         &#x2F;bin&#x2F;sh -c #(nop)  MAINTAINER jackfrued &quot;j...   0 B                 fbf9f709ca9f        12 days ago         &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;python3&quot;]              0 B </code></pre><p>使用该镜像来创建容器运行Web服务器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 8000:8000 --name myapp jackfrued&#x2F;myapp</code></pre><p>如果希望将上面创建的镜像文件放到dockerhub仓库中，可以按照如下所示的步骤进行操作。</p><p>通过下面的命令登录到dockerhub。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker login</code></pre><p>输入用户名和口令进行登录。</p><pre class="language-none"><code class="language-none">Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https:&#x2F;&#x2F;hub.docker.com to create one.Username: jackfruedPassword: Login Succeeded</code></pre><p>通过下面的命令将镜像推到仓库中。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker push jackfrued&#x2F;webserver</code></pre><p><img src="/./res/dockerhub-repo.png"></p><h4 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h4><p>想了解Dockerfile的指令可以查看官方提供的<a href="https://docs.docker.com/engine/reference/builder/">参考手册</a>，下面我们为大家介绍一些常用的指令。</p><ol><li><p><strong>FROM</strong>：设置基础镜像，必须是Dockerfile中的第一条指令。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM &lt;镜像名&gt; [AS &lt;别名&gt;]</code></pre><p>或</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM &lt;镜像名&gt;[:&lt;标签&gt;] [AS &lt;别名&gt;]</code></pre></li><li><p><strong>RUN</strong>：指定构建镜像时要执行的命令。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">RUN &lt;命令&gt; [参数1], [参数2], ... </code></pre><p>或</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;, ...]</code></pre></li><li><p><strong>CMD</strong>：指定构建镜像后要执行的命令。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">CMD &lt;命令&gt; [参数1], [参数2], ...</code></pre><p>或</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;, ...]</code></pre><blockquote><p>说明：Docker不同于虚拟机，容器本身就是一个进程，容器中的应用应该位于前台运行。CMD命令相当于就是用来指定容器主进程（创建容器后要在前台执行的程序）的，如果主进程结束了，容器也就停止运行了。所以在容器中启动Nginx不能使用<code>service nginx start</code>或是<code>systemctl start nginx</code>而是要通过<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code>让它在前台运行。</p></blockquote></li><li><p><strong>ENTRYPOINT</strong>：和CMD类似，也可以执行命令，但<code>docker run</code>命令行中指定的任何参数都会被当做参数再次传给ENTRYPOINT指令中的命令，这就使得我们可以构建一个镜像，它既可以运行一个默认的命令，也支持通过<code>docker run</code>命令行为该命令指定可覆盖的参数选项。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ENTRYPOINT &lt;命令&gt; [参数1], [参数2], ...</code></pre><p>或</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ENTRYPOINT [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;, ...]</code></pre></li><li><p><strong>WORKDIR</strong>：在通过镜像创建新容器时，在容器内部创建一个工作目录，ENTRYPOINT和CMD指定的程序会在这个目录下执行。在使用<code>docker run</code>命令时可以通过<code>-w</code>参数来覆盖由WORKDIR指定的工作目录。例如：</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">WORKDIR &#x2F;opt&#x2F;webapp</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -w &#x2F;usr&#x2F;share&#x2F;webapp ...</code></pre></li><li><p><strong>ENV</strong>：在创建镜像时设置环境变量。在使用<code>docker run</code>命令时，可以通过<code>-e</code>参数来修改环境变量的设置。例如：</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ENV DEFAULT_PORT&#x3D;8080</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -e &quot;DEFAULT_PORT&#x3D;8000&quot; ...</code></pre></li><li><p><strong>USER</strong>：指定镜像会以什么用户身份去运行。例如：</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">USER nginx</code></pre></li><li><p><strong>VOLUME</strong>：在创建容器时添加一个数据卷的挂载点。通过数据卷操作可以实现容器间数据的共享和重用，对卷所作的修改可以马上生效而不需要重新启动容器，我们之前创建容器时使用<code>--volume</code>参数就是为了实现数据卷的映射操作。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">VOLUME [&quot;&#x2F;路径1&quot;, &quot;&#x2F;路径2&#x2F;子路径2.1&#x2F;&quot;, ...]</code></pre></li><li><p><strong>ADD</strong>：将构建目录下的文件和文件夹复制到镜像中，如果是压缩文件和归档文件，ADD命令会对这些文件进行解压缩解归档的操作。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ADD [--chown&#x3D;&lt;用户&gt;:&lt;用户组&gt;] &lt;源文件&gt; &lt;目标文件&gt;</code></pre></li><li><p><strong>COPY</strong>：非常类似于ADD，但不会主动对文件进行提取操作。</p></li><li><p><strong>LABEL</strong>：为Docker镜像添加一些元数据，在使用<code>docker inspect</code>命令时会看到这些元数据。</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">LABEL version&#x3D;&quot;1.0.0&quot; location&#x3D;&quot;Chengdu&quot;</code></pre></li><li><p><strong>ONBUILD</strong>：为镜像添加触发器，当一个镜像被用作其他镜像的基础镜像，触发器将会被执行。例如：</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ONBUILD ADD . &#x2F;app&#x2F;srcONBUILD RUN cd &#x2F;app&#x2F;src &amp;&amp; make</code></pre></li></ol><h3 id="多容器管理"><a href="#多容器管理" class="headerlink" title="多容器管理"></a>多容器管理</h3><p>我们的项目可能会使用了多个容器，容器多了之后管理容器的工作就会变得麻烦。如果要对多个容器进行自动配置使得容器可以相互协作甚至实现复杂的调度，这就需要进行容器编排。Docker原生对容器编排的支持非常弱，但是可以通过社区提供的工具来实现容器编排。</p><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><p>可以通过安装Docker Compose工具来实现基于YAML文件的容器编排，YAML文件会定义一系列的容器以及容器运行时的属性，Docker Compose会根据这些配置来管理容器。</p><ol><li><p>安装Docker Compose。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.4&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</code></pre><blockquote><p>说明：如果没有curl工具，在CentOS下可以先通过包管理工具yum安装curl再执行上面的命令。</p></blockquote><p>当然我们也可以使用Python的包管理工具pip来安装Docker Compose，命令如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip3 install -U docker-compose</code></pre></li><li><p>使用Docker Compose。</p><p>我们在刚才的Flask项目中引入缓存，然后再利用Flask提供的数据接口为前端页面提供数据，使用Vue.js进行页面渲染并将静态页面部署在Nginx服务器上。项目文件夹结构如下所示：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[ECS-root ~]# tree temptemp├── docker-compose.yml├── html│   └── index.html└── myapp    ├── api    │   ├── app.py    │   ├── requirements.txt    │   └── start.sh    └── Dockerfile</code></pre><p>修改后的app.py文件代码如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from pickle import dumps, loadsfrom flask import Flaskfrom flask_restful import Resource, Apifrom flask_cors import CORSfrom redis import Redisapp &#x3D; Flask(__name__)CORS(app, resources&#x3D;&#123;r&#39;&#x2F;api&#x2F;*&#39;: &#123;&#39;origins&#39;: &#39;*&#39;&#125;&#125;)api &#x3D; Api(app)redis &#x3D; Redis(host&#x3D;&#39;redis-master&#39;, port&#x3D;6379)class Product(Resource):    def get(self):        data &#x3D; redis.get(&#39;products&#39;)        if data:            products &#x3D; loads(data)        else:            products &#x3D; [&#39;Ice Cream&#39;, &#39;Chocolate&#39;, &#39;Coca Cola&#39;, &#39;Hamburger&#39;]            redis.set(&#39;products&#39;, dumps(products))        return &#123;&#39;products&#39;: products&#125;api.add_resource(Product, &#39;&#x2F;api&#x2F;products&#39;)</code></pre><p>html文件夹用来保存静态页面，稍后我们会通一个运行Nginx的容器来向浏览器提供静态页面。index.html文件的内容如下所示：</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;    &lt;title&gt;首页&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;app&quot;&gt;        &lt;h2&gt;产品列表&lt;&#x2F;h2&gt;        &lt;ul&gt;            &lt;li v-for&#x3D;&quot;product in products&quot;&gt;&#123;&#123; product &#125;&#125;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.6.10&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        new Vue(&#123;            el: &#39;#app&#39;,             data: &#123;                products: []            &#125;,            created() &#123;                fetch(&#39;http:&#x2F;&#x2F;1.2.3.4:8000&#x2F;api&#x2F;products&#39;)                    .then(resp &#x3D;&gt; resp.json())                    .then(json &#x3D;&gt; &#123;this.products &#x3D; json.products&#125;)            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>接下来，我们要通过docker-compose.yml文件来创建三个容器并指明容器之间的依赖关系。</p><pre class="language-YAML" data-language="YAML"><code class="language-YAML">version: &#39;3&#39;services:  api-server:    build: .&#x2F;myapp    ports:      - &#39;8000:8000&#39;    links:      - redis-master  web-server:    image: nginx    ports:      - &#39;80:80&#39;    volumes:      - .&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html  redis-master:    image: redis    expose:      - &#39;6379&#39;</code></pre><p>有了这个YAML文件，我们就可以使用<code>docker-compose</code>命令来创建容器运行项目，其命令如下所示：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">[ECS-root temp]# docker-compose upCreating network &quot;temp_default&quot; with the default driverCreating temp_web-server_1   ... doneCreating temp_redis-master_1 ... doneCreating temp_api-server_1   ... doneAttaching to temp_redis-master_1, temp_web-server_1, temp_api-server_1redis-master_1  | 1:C 05 Dec 2019 11:57:26.828 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Ooredis-master_1  | 1:C 05 Dec 2019 11:57:26.828 # Redis version&#x3D;5.0.6, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just startedredis-master_1  | 1:C 05 Dec 2019 11:57:26.828 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server &#x2F;path&#x2F;to&#x2F;redis.confredis-master_1  | 1:M 05 Dec 2019 11:57:26.830 * Running mode&#x3D;standalone, port&#x3D;6379.redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # WARNING: The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of 128.redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # Server initializedredis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#39;vm.overcommit_memory &#x3D; 1&#39; to &#x2F;etc&#x2F;sysctl.conf and then reboot or run the command &#39;sysctl vm.overcommit_memory&#x3D;1&#39; for this to take effect.redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#39;echo never &gt; &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled&#39; as root, and add it to your &#x2F;etc&#x2F;rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 * Ready to accept connectionsapi-server_1    | [2019-12-05 11:57:27 +0000] [1] [INFO] Starting gunicorn 20.0.4api-server_1    | [2019-12-05 11:57:27 +0000] [1] [INFO] Listening at: http:&#x2F;&#x2F;0.0.0.0:8000 (1)api-server_1    | [2019-12-05 11:57:27 +0000] [1] [INFO] Using worker: syncapi-server_1    | [2019-12-05 11:57:27 +0000] [8] [INFO] Booting worker with pid: 8api-server_1    | [2019-12-05 11:57:27 +0000] [9] [INFO] Booting worker with pid: 9api-server_1    | [2019-12-05 11:57:27 +0000] [10] [INFO] Booting worker with pid: 10api-server_1    | [2019-12-05 11:57:27 +0000] [11] [INFO] Booting worker with pid: 11</code></pre><p> 要停止容器的运行，可以使用下面的命令。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker-compose down</code></pre></li></ol><h4 id="Kubernetes（K8S）"><a href="#Kubernetes（K8S）" class="headerlink" title="Kubernetes（K8S）"></a>Kubernetes（K8S）</h4><p>实际的生产环境中常常需要部署和管理多个协同工作的容器，docker compose解决了多容器创建和管理的问题，但是实际项目中，我们还需要Kubernetes（以下都简称为K8S）来提供一个跨主机集群的容器调度平台。K8S可以进行自动化容器的部署、扩展和操作，从而提供以容器为中心的基础架构。该项目是谷歌在2014年启动的项目，建立在谷歌公司十余年运维经验的基础之上，而且谷歌自己的应用也是运行在容器上的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>93.MySQL性能优化</title>
      <link href="/2024/07/01/93.mysql-xing-neng-you-hua/"/>
      <url>/2024/07/01/93.mysql-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL性能优化"><a href="#MySQL性能优化" class="headerlink" title="MySQL性能优化"></a>MySQL性能优化</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p>想要发挥 MySQL 的最佳性能，需要遵循 3 个基本使用原则。</p><ol><li>让MySQL回归存储的基本职能：MySQL 数据库只用于数据的存储，不进行数据的复杂计算，不承载业务逻辑，确保存储和计算分离；</li><li>查询数据时，尽量单表查询，减少跨库查询和多表关联；</li><li>杜绝大事务、大 SQL、大批量、大字段等一系列性能杀手。<ul><li>大事务：运行步骤较多，涉及的表和字段较多，容易造成资源的争抢，甚至形成死锁。一旦事务回滚，会导致资源占用时间过长。</li><li>大 SQL：复杂的SQL意味着过多的表的关联，MySQL 数据库处理关联超过3张表以上的SQL时，占用资源多，性能低下。</li><li>大批量：多条SQL一次性执行完成，可以减少一条条执行SQL产生的额外开销，但必须确保进行充分的测试，并且在业务低峰时段或者非业务时段执行。</li><li>大字段：blob、text类型的大字段要尽量少用，必须要用时，尽量与主业务表分离，减少对这类字段的检索和更新。</li></ul></li></ol><h3 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h3><ol><li>必须指定默认存储引擎为 InnoDB，并且禁用 MyISAM 存储引擎，随着 MySQL 8.0 版本的发布，所有的数据字典表都已经转换成了 InnoDB，MyISAM 存储引擎已成为了历史。</li><li>默认字符集 UTF8mb4，以前版本的 UTF8 是 UTF8mb3，未包含个别特殊字符，新版本的 UTF8mb4 包含所有字符，官方强烈建议使用此字符集。</li><li>关闭区分大小写功能。设置参数<code>lower_case_table_names</code>的值为<code>1</code>，即可关闭区分大小写功能，即大写字母 T 和小写字母 t 一样。</li><li>存储过程、触发器、视图、event等功能尽量在程序中实现，一方面是为了存储和计算分离，另一方面是因为这些功能非常不完整，调试、排错、监控都非常困难，相关数据字典也不完善，存在潜在的风险。一般在生产数据库中，禁止使用。</li><li>单个数据库实例表数量控制在2000个以内。</li></ol><h4 id="InnoDB表的注意事项"><a href="#InnoDB表的注意事项" class="headerlink" title="InnoDB表的注意事项"></a>InnoDB表的注意事项</h4><ol><li>主键列使用<code>unsigned</code>整数，可以使用<code>auto_increment</code>，但是要禁止手动更新主键。</li><li>每个列都必须添加<code>comment</code>注释。</li><li>在建表时必须显示指定<code>engine</code>。</li><li>表必备三字段：<code>xxx_id</code>、 <code>xxx_create</code>、 <code>xxx_modified</code>。其中<code>xxx_id</code>为主键，类型<code>unsigned</code>整数类型（例如：<code>int unsigned</code>）；<code>xxx_create</code>、<code>xxx_modified</code>的类型均为<code>datetime</code>类型，分别记录该条数据的创建时间、修改时间。</li><li>所有字段必须指定<code>not null</code>，为空值指定<code>default</code>值，因为MySQL难以优化<code>null</code>值，含<code>null</code>值的复合索引会失效，最终导致查询效率低。</li><li>单张表的字段数尽量空值在50个字段以内，如果字段过多可以考虑垂直拆分。</li><li>禁用<code>enum</code>和<code>set</code>类型，因为这样的类型兼容性不好且性能较差。</li><li>大文件不应该使用<code>blob</code>类型而是保存它们的路径，<code>blob</code>和<code>text</code>这样的类型会导致处理性能下降，全表扫描代价大大增加。</li><li>对货币等对精度敏感的数据，应该使用定点数（<code>decimal</code>）而不是浮点数（<code>float</code>）。</li><li>保存IP地址不要用<code>char(15)</code>，应该使用<code>int unsigned</code>，可以使用<code>inet_aton</code>和<code>inet_ntoa</code>函数实现整数和IP地址的转换。</li></ol><h3 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h3><p>在前面<a href="../Day36-40/36-38.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL.md">《关系型数据库MySQL》</a>一文中，我们已经讲到过索引的相关知识，这里我们做一个简单的回顾。</p><h4 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h4><ol><li>创建索引的列并不一定是<code>select</code>操作中要查询的列，最适合做索引的列是出现在<code>where</code>子句中经常用作筛选条件或连表子句中作为表连接条件的列。</li><li>具有唯一性的列，索引效果好；重复值较多的列，索引效果差。</li><li>如果为字符串类型创建索引，最好指定一个前缀长度，创建短索引。短索引可以减少磁盘I&#x2F;O而且在做比较时性能也更好，更重要的是MySQL底层的高速索引缓存能够缓存更多的键值。</li><li>创建一个包含N列的复合索引（多列索引）时，相当于是创建了N个索引，此时应该利用最左前缀进行匹配。</li><li>不要过度使用索引。索引并不是越多越好，索引需要占用额外的存储空间而且会影响写操作的性能（插入、删除、更新数据时索引也需要更新）。MySQL在生成执行计划时，要考虑各个索引的使用，这个也是需要耗费时间的。</li><li>要注意可能使索引失效的场景，例如：模糊查询使用了前置通配符、使用负向条件进行查询等。</li></ol><h3 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h3><p>过程，通常也称之为存储过程，它是事先编译好存储在数据库中的一组SQL的集合。调用存储过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能是有帮助的，这些我们在之前的<a href="../Day36-40/36-38.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL.md">《关系型数据库MySQL》</a>一文中已经提到过。</p><h3 id="数据分区"><a href="#数据分区" class="headerlink" title="数据分区"></a>数据分区</h3><p>MySQL支持做数据分区，通过分区可以存储更多的数据、优化查询，获得更大的吞吐量并快速删除过期的数据。关于这个知识点建议大家看看MySQL的<a href="https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html">官方文档</a>。数据分区有以下几种类型：</p><ol><li><p>RANGE分区：基于连续区间范围，把数据分配到不同的分区。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE tb_emp (    eno INT NOT NULL,    ename VARCHAR(20) NOT NULL,    job VARCHAR(10) NOT NULL,    hiredate DATE NOT NULL,    dno INT NOT NULL)PARTITION BY RANGE( YEAR(hiredate) ) (    PARTITION p0 VALUES LESS THAN (1960),    PARTITION p1 VALUES LESS THAN (1970),    PARTITION p2 VALUES LESS THAN (1980),    PARTITION p3 VALUES LESS THAN (1990),    PARTITION p4 VALUES LESS THAN MAXVALUE);</code></pre></li><li><p>LIST分区：基于枚举值的范围，把数据分配到不同的分区。</p></li><li><p>HASH分区 &#x2F; KEY分区：基于分区个数，把数据分配到不同的分区。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE tb_emp (    eno INT NOT NULL,    ename VARCHAR(20) NOT NULL,    job VARCHAR(10) NOT NULL,    hiredate DATE NOT NULL,    dno INT NOT NULL)PARTITION BY HASH(dno)PARTITIONS 4;</code></pre></li></ol><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><ol><li><p>定位低效率的SQL语句 - 慢查询日志。</p><ul><li><p>查看慢查询日志相关配置</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; show variables like &#39;slow_query%&#39;;+---------------------------+----------------------------------+| Variable_name             | Value                            |+---------------------------+----------------------------------+| slow_query_log            | OFF                              || slow_query_log_file       | &#x2F;mysql&#x2F;data&#x2F;localhost-slow.log   |+---------------------------+----------------------------------+mysql&gt; show variables like &#39;long_query_time&#39;;+-----------------+-----------+| Variable_name   | Value     |+-----------------+-----------+| long_query_time | 10.000000 |+-----------------+-----------+</code></pre></li><li><p>创建慢查询日志文件并修改所有者。</p> <pre class="language-Bash" data-language="Bash"><code class="language-Bash">touch &#x2F;var&#x2F;log&#x2F;mysqld-slow.logchown mysql &#x2F;var&#x2F;log&#x2F;mysqld-slow.log</code></pre></li><li><p>修改全局慢查询日志配置。</p> <pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; set global slow_query_log_file&#x3D;&#39;&#x2F;var&#x2F;log&#x2F;mysqld-slow.log&#39;mysql&gt; set global slow_query_log&#x3D;&#39;ON&#39;; mysql&gt; set global long_query_time&#x3D;1;</code></pre></li><li><p>或者直接修改MySQL配置文件启用慢查询日志。</p> <pre class="language-INI" data-language="INI"><code class="language-INI">[mysqld]slow_query_log&#x3D;ONslow_query_log_file&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld-slow.loglong_query_time&#x3D;1</code></pre></li></ul><blockquote><p><strong>注意</strong>：修改了配置文件需要重启MySQL，CentOS上对应的命令是<code>systemctl restart mysqld</code>。</p></blockquote></li><li><p>通过<code>explain</code>了解SQL的执行计划。例如：</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">explain select ename, job, sal from tb_emp where dno&#x3D;20\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_emp         type: refpossible_keys: fk_emp_dno          key: fk_emp_dno      key_len: 5          ref: const         rows: 7        Extra: NULL1 row in set (0.00 sec)</code></pre><ul><li><code>select_type</code>：查询类型（SIMPLE - 简单查询、PRIMARY - 主查询、UNION - 并集、SUBQUERY - 子查询）。</li><li><code>table</code>：输出结果集的表。</li><li><code>type</code>：访问类型（ALL - 全表查询性能最差、index、range、ref、eq_ref、const、NULL）。</li><li><code>possible_keys</code>：查询时可能用到的索引。</li><li><code>key</code>：实际使用的索引。</li><li><code>key_len</code>：索引字段的长度。</li><li><code>rows</code>：扫描的行数，行数越少肯定性能越好。</li><li><code>extra</code>：额外信息。</li></ul></li><li><p>通过<code>show profiles</code>和<code>show profile for query</code>分析SQL。</p><p>MySQL从5.0.37开始支持剖面系统来帮助用户了解SQL执行性能的细节，可以通过下面的方式来查看MySQL是否支持和开启了剖面系统。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select @@have_profiling;select @@profiling;</code></pre><p>如果没有开启剖面系统，可以通过下面的SQL来打开它。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">set profiling&#x3D;1;</code></pre><p>接下来就可以通过剖面系统来了解SQL的执行性能，例如：</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; select count(*) from tb_emp;+----------+| count(*) |+----------+|       14 |+----------+1 row in set (0.00 sec)mysql&gt; show profiles;+----------+------------+-----------------------------+| Query_ID | Duration   | Query                       |+----------+------------+-----------------------------+|        1 | 0.00029600 | select count(*) from tb_emp |+----------+------------+-----------------------------+1 row in set, 1 warning (0.00 sec)mysql&gt; show profile for query 1;+----------------------+----------+| Status               | Duration |+----------------------+----------+| starting             | 0.000076 || checking permissions | 0.000007 || Opening tables       | 0.000016 || init                 | 0.000013 || System lock          | 0.000007 || optimizing           | 0.000005 || statistics           | 0.000012 || preparing            | 0.000010 || executing            | 0.000003 || Sending data         | 0.000070 || end                  | 0.000012 || query end            | 0.000008 || closing tables       | 0.000012 || freeing items        | 0.000032 || cleaning up          | 0.000013 |+----------------------+----------+15 rows in set, 1 warning (0.00 sec)</code></pre></li><li><p>优化CRUD操作。</p><ul><li><p>优化<code>insert</code>语句</p><ul><li>在<code>insert</code>语句后面跟上多组值进行插入在性能上优于分开<code>insert</code>。</li><li>如果有多个连接向同一个表插入数据，使用<code>insert delayed</code>可以获得更好的性能。</li><li>如果要从一个文本文件装载数据到表时，使用<code>load data infile</code>比<code>insert</code>性能好得多。</li></ul></li><li><p>优化<code>order by</code>语句</p><ul><li>如果<code>where</code>子句的条件和<code>order by</code>子句的条件相同，而且排序的顺序与索引的顺序相同，如果还同时满足排序字段都是升序或者降序，那么只靠索引就能完成排序。</li></ul></li><li><p>优化<code>group by</code>语句</p><ul><li>在使用<code>group by</code>子句分组时，如果希望避免排序带来的开销，可以用<code>order by null</code>禁用排序。</li></ul></li><li><p>优化嵌套查询</p><ul><li>MySQL从4.1开始支持嵌套查询（子查询），这使得可以将一个查询的结果当做另一个查询的一部分来使用。在某些情况下，子查询可以被更有效率的连接查询取代，因为在连接查询时MySQL不需要在内存中创建临时表来完成这个逻辑上需要多个步骤才能完成的查询。</li></ul></li><li><p>优化or条件</p><ul><li>如果条件之间是<code>or</code>关系，则只有在所有条件都用到索引的情况下索引才会生效。</li></ul></li><li><p>优化分页查询</p><ul><li><p>分页查询时，一个比较头疼的事情是如同<code>limit 1000, 20</code>，此时MySQL已经排序出前1020条记录但是仅仅返回第1001到1020条记录，前1000条实际都用不上，查询和排序的代价非常高。一种常见的优化思路是在索引上完成排序和分页的操作，然后根据返回的结果做表连接操作来得到最终的结果，这样可以避免出现全表查询，也避免了外部排序。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select * from tb_emp order by ename limit 10000, 20;select * from tb_emp t1 inner join (select eno from tb_emp order by ename limit 10000, 20) t2 on t1.eno&#x3D;t2.eno;</code></pre><p>上面的代码中，第2行SQL是优于第1行SQL的，当然我们的前提是已经在<code>ename</code>字段上创建了索引。</p></li></ul></li><li><p>使用SQL提示</p><ul><li>USE INDEX：建议MySQL使用指定的索引。</li><li>IGNORE INDEX：建议MySQL忽略掉指定的索引。</li><li>FORCE INDEX：强制MySQL使用指定的索引。</li></ul></li></ul></li></ol><h3 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h3><p>可以使用下面的命令来查看MySQL服务器配置参数的默认值。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show variables;show variables like &#39;key_%&#39;;show variables like &#39;%cache%&#39;;show variables like &#39;innodb_buffer_pool_size&#39;;</code></pre><p>通过下面的命令可以了解MySQL服务器运行状态值。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show status;show status like &#39;com_%&#39;;show status like &#39;innodb_%&#39;;show status like &#39;connections&#39;;show status like &#39;slow_queries&#39;;</code></pre><ol><li>调整<code>max_connections</code>：MySQL最大连接数量，默认151。在Linux系统上，如果内存足够且不考虑用户等待响应时间这些问题，MySQL理论上可以支持到万级连接，但是通常情况下，这个值建议控制在1000以内。</li><li>调整<code>back_log</code>：TCP连接的积压请求队列大小，通常是max_connections的五分之一，最大不能超过900。</li><li>调整<code>table_open_cache</code>：这个值应该设置为max_connections的N倍，其中N代表每个连接在查询时打开的表的最大个数。</li><li>调整<code>innodb_lock_wait_timeout</code>：该参数可以控制InnoDB事务等待行锁的时间，默认值是50ms，对于反馈响应要求较高的应用，可以将这个值调小避免事务长时间挂起；对于后台任务，可以将这个值调大来避免发生大的回滚操作。</li><li>调整<code>innodb_buffer_pool_size</code>：InnoDB数据和索引的内存缓冲区大小，以字节为单位，这个值设置得越高，访问表数据需要进行的磁盘I&#x2F;O操作就越少，如果可能甚至可以将该值设置为物理内存大小的80%。</li></ol><h3 id="架构优化"><a href="#架构优化" class="headerlink" title="架构优化"></a>架构优化</h3><ol><li><p>通过拆分提高表的访问效率。</p><ul><li>垂直拆分</li><li>水平拆分</li></ul></li><li><p>逆范式理论。数据表设计的规范程度称之为范式（Normal Form），要提升表的规范程度通常需要将大表拆分为更小的表，范式级别越高数据冗余越小，而且在插入、删除、更新数据时出问题的可能性会大幅度降低，但是节省了空间就意味着查询数据时可能花费更多的时间，原来的单表查询可能会变成连表查询。为此，项目实践中我们通常会进行逆范式操作，故意降低范式级别增加冗余来减少查询的时间开销。</p><ul><li>1NF：列不能再拆分</li><li>2NF：所有的属性都依赖于主键</li><li>3NF：所有的属性都直接依赖于主键（消除传递依赖）</li><li>BCNF：消除非平凡多值依赖</li></ul></li><li><p>使用中间表提高统计查询速度。</p><p>使用<code>insert into 中间表 select ... where ...</code>这样的语句先将需要的数据筛选出来放到中间表中，然后再对中间表进行统计，避免不必要的运算和处理。</p></li><li><p>主从复制和读写分离，具体内容请参考<a href="./98.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md">《项目部署上线和性能调优》</a>。</p></li><li><p>配置MySQL集群。</p></li></ol><blockquote><p><strong>说明</strong>：本章内容参考了网易出品的《深入浅出MySQL》一书，该书和《高性能MySQL》一样，都对MySQL进行了深入细致的讲解，虽然总体感觉后者更加高屋建瓴，但是前者也算得上是提升MySQL技能的佳作（作者的文字功底稍显粗糙，深度也不及后者），建议有兴趣的读者可以阅读这两本书。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>94.网络API接口设计</title>
      <link href="/2024/07/01/94.wang-luo-api-jie-kou-she-ji/"/>
      <url>/2024/07/01/94.wang-luo-api-jie-kou-she-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="网络API接口设计"><a href="#网络API接口设计" class="headerlink" title="网络API接口设计"></a>网络API接口设计</h2><p>目前许多的Web应用和移动应用都使用了前后端分离的开发模式，前后端分离简单的说就是前端或移动端通过网络API接口和后台进行交互，获得接口中提供的数据并负责用户界面的渲染。API是应用程序的编程接口的缩写，网络API通常指的是基于一个URL（统一资源定位符）可以访问到的资源，也就是说通过这个URL我们就可以请求服务器对某个资源进行操作并返回操作的结果。大家可以想想，网络API接口不也是一种封装吗，简单的说就是将复杂的业务逻辑隐藏在简单的API接口中。</p><p>URL的通用格式如下所示：</p><pre class="language-none"><code class="language-none">协议:&#x2F;&#x2F;用户名:口令@主机:端口&#x2F;路径1&#x2F;...&#x2F;路径N&#x2F;资源名</code></pre><blockquote><p><strong>说明</strong>：URL中的用户名（有可能不需要提供用户名）、口令（有可能不需要提供口令）、端口（有可能使用默认端口）、路径（资源有可能直接位于根路径<code>/</code>下）并不是必需的部分，可以根据需要进行设置。</p></blockquote><p>网络API通常基于HTTP或HTTPS进行访问，基于HTTP&#x2F;HTTPS最大的好处就在于访问起来非常的简单方便，而且可以跨语言、跨应用进行访问和互操作。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h4><p>为移动端或者PC端设计网络API接口一个非常重要的原则是：<strong>根据业务实体而不是用户界面或操作来设计API接口</strong>。如果API接口的设计是根据用户的操作或者界面上的功能设置来设计，随着需求的变更，用户界面也会进行调整，需要的数据也在发生变化，那么后端开发者就要不停的调整API，或者给一个API设计出多个版本，这些都会使项目的开发和维护成本增加。我们可以将业务实体理解为服务器提供的资源，而URL就是资源的定位符（标识符），这种方式是最为简单自然的。对于相对复杂的用户操作，我们可以提供一个“门面”（设计模式中的“门面模式”），通过该“门面”把多个接口的功能组装起来即可。</p><p>下面是某个网站开放API的接口，可以看出API的设计是围绕业务实体来进行的，而且都做到了“见名知意”。</p><table><thead><tr><th>评论</th><th></th></tr></thead><tbody><tr><td>comments&#x2F;show</td><td>获取某条微博的评论列表</td></tr><tr><td>comments&#x2F;by_me</td><td>自己的评论列表</td></tr><tr><td>comments&#x2F;to_me</td><td>收到的评论列表</td></tr><tr><td>comments&#x2F;mentions</td><td>@了自己的评论列表</td></tr><tr><td>comments&#x2F;create</td><td>创建一条评论</td></tr><tr><td>comments&#x2F;destroy</td><td>删除一条评论</td></tr><tr><td>comments&#x2F;reply</td><td>回复一条评论</td></tr></tbody></table><p>需要说明的是，<strong>上面的API接口并不是REST风格的</strong>。REST是一种网络应用架构风格，被认为最适合分布式的网络应用。关于REST的知识，可以阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">《理解RESTful架构》</a>以及<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">《RESTful API设计指南》</a>，当然这两篇文章大家也要批判的阅读，因为上面阐述的观点并不完全正确，有些内容甚至是自相矛盾的。</p><p>API接口返回的数据通常都是<strong>JSON</strong>或<strong>XML</strong>格式，XML这种数据格式目前基本已经被弃用了。对于JSON格式的数据，我们需要做到不要返回null这的值，因为这样的值一旦处置失当，会给前端和移动端开发带来不必要的麻烦（因为开发者有可能会使用强类型语言）。要解决这个问题可以从源头入手，在设计数据库的时候，尽量给每个字段都加上“not null”约束或者设置合理的默认值约束。</p><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><ol><li>更新提示问题：设计一个每次使用系统首先要访问的API，该API会向移动端返回系统更新的相关信息，这样就可以提升用户更新App了。</li><li>版本升级问题：API版本升级时应该考虑对低版本的兼容，同时要让新版本和旧版本都能够被访问，可以在URL中包含版本信息或者在将版本号放在HTTP(S)协议头部，关于这个问题有很多的争论，有兴趣的可以看看<a href="https://stackoverflow.com/questions/972226/how-to-version-rest-uris">stack overflow</a>上面对这个问题的讨论。</li><li>图片尺寸问题：移动端对于一张图片可能需要不同的尺寸，可以在获取图片时传入尺寸参数并获取对应的资源；更好的做法是直接使用云存储或CDN（直接提供了图片缩放的功能），这样可以加速对资源的访问。</li></ol><h3 id="文档撰写"><a href="#文档撰写" class="headerlink" title="文档撰写"></a>文档撰写</h3><p>下面以设计评论接口为例，简单说明接口文档应该如何撰写。</p><p>首先，我们可以定义全局返回状态码。</p><table><thead><tr><th>返回码</th><th>返回信息</th><th>说明</th></tr></thead><tbody><tr><td>10000</td><td>获取评论成功</td><td></td></tr><tr><td>10001</td><td>创建评论成功</td><td></td></tr><tr><td>10002</td><td>无法创建评论</td><td>创建评论时因违反审核机制而无法创建</td></tr><tr><td>10003</td><td>评论已被删除</td><td>查看评论时评论因不和谐因素已被删除</td></tr><tr><td>10004</td><td>……</td><td>……</td></tr></tbody></table><ol><li><p>获取文章评论。</p><p><strong>GET</strong> <code>/articles/&#123;article-id&#125;/comments/</code></p><p>开发者：王大锤</p><p>最后更新时间：2018年8月10日</p><p>标签：v 1.0</p><p>接口说明：获取指定文章的所有评论</p><p>使用帮助：默认返回20条数据，需要在请求头中设置身份标识（key）</p><p>请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>整数</td><td>否</td><td>查询参数</td><td>页码，默认值1</td></tr><tr><td>size</td><td>整数</td><td>否</td><td>查询参数</td><td>每次获取评论数量（10~100），默认值20</td></tr><tr><td>key</td><td>字符串</td><td>是</td><td>请求头</td><td>用户的身份标识</td></tr></tbody></table><p>响应信息：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 10000,    &quot;message&quot;: &quot;获取评论成功&quot;,    &quot;page&quot;: 1,    &quot;size&quot;: 10,    &quot;totalPage&quot;: 35,    &quot;contents&quot;: [        &#123;            &quot;userId&quot;: 1700095,            &quot;nickname&quot;: &quot;王大锤&quot;,            &quot;pubDate&quot;: &quot;2018年7月31日&quot;,            &quot;content&quot;: &quot;小编是不是有病呀&quot;,            &#x2F;* ... *&#x2F;        &#125;,        &#123;        &quot;userId&quot;, 1995322,            &quot;nickname&quot;: &quot;白元芳&quot;,            &quot;pubDate&quot;: &quot;2018年8月2日&quot;,            &quot;content&quot;: &quot;楼上说得好&quot;,            &#x2F;* ... *&#x2F;        &#125;    ]    &#x2F;* ... *&#x2F;&#125;</code></pre></li><li><p>新增文章评论。</p><p><strong>POST</strong> <code>/articles/&#123;article-id&#125;/comments</code></p><p>开发者：王大锤</p><p>最后更新时间：2018年8月10日</p><p>标签：v 1.0</p><p>接口说明：为指定的文章创建评论</p><p>使用帮助：暂无</p><p>请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>userId</td><td>字符串</td><td>是</td><td>消息体</td><td>用户ID</td></tr><tr><td>key</td><td>字符串</td><td>是</td><td>请求头</td><td>用户的令牌</td></tr><tr><td>content</td><td>字符串</td><td>是</td><td>消息体</td><td>评论的内容</td></tr></tbody></table><p>响应信息：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 10001,    &quot;message&quot;: &quot;创建评论成功&quot;,    &quot;comment&quot;: &#123;        &quot;pubDate&quot;: &quot;2018年7月31日&quot;,        &quot;content&quot;: &quot;小编是不是有病呀&quot;        &#x2F;* ... *&#x2F;    &#125;    &#x2F;* ... *&#x2F;&#125;</code></pre></li></ol><blockquote><p><strong>提示</strong>：如果没有接口文档撰写经验，可以使用在线接口文档编辑平台<a href="http://rap2.taobao.org/">RAP2</a>或<a href="http://yapi.demo.qunar.com/">YAPI</a>来进行接口文档撰写。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>95.使用Django开发商业项目</title>
      <link href="/2024/07/01/95.shi-yong-django-kai-fa-shang-ye-xiang-mu/"/>
      <url>/2024/07/01/95.shi-yong-django-kai-fa-shang-ye-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Django开发商业项目"><a href="#使用Django开发商业项目" class="headerlink" title="使用Django开发商业项目"></a>使用Django开发商业项目</h2><blockquote><p><strong>说明</strong>：本文的部分插图来自于《Python项目开发实战》和《精通Django》，这两本书中都包含了对Django框架精彩的讲解，有兴趣的读者可以自行购买阅读。</p></blockquote><h3 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h3><p>问题1：描述一个Web应用的工作流程。</p><p><img src="/./res/web-application.png"></p><p>问题2：描述项目的物理架构。（上图中补充负载均衡（反向代理）服务器、数据库服务器、文件服务器、邮件服务器、缓存服务器、防火墙等，而且每个节点都有可能是多节点构成的集群。当然，架构都是根据业务的需要一步步演进而不是一蹴而就的。）</p><p>问题3：描述Django项目的工作流程。（如下图所示）</p><p><img src="/./res/django_request_response_cycle.png"></p><h3 id="MVC架构模式"><a href="#MVC架构模式" class="headerlink" title="MVC架构模式"></a>MVC架构模式</h3><p>问题1：为什么要使用MVC架构模式？（模型和视图解耦合）</p><p>问题2：MVC架构中每个部分的作用？（如下图所示）</p><p><img src="/./res/mvc.png"></p><h3 id="HTTP请求和响应"><a href="#HTTP请求和响应" class="headerlink" title="HTTP请求和响应"></a>HTTP请求和响应</h3><h4 id="HTTP请求-请求行-请求头-空行-消息体"><a href="#HTTP请求-请求行-请求头-空行-消息体" class="headerlink" title="HTTP请求 &#x3D; 请求行+请求头+空行+[消息体]"></a>HTTP请求 &#x3D; 请求行+请求头+空行+[消息体]</h4><p><img src="/./res/http-request.png"></p><h4 id="HTTP响应-响应行-响应头-空行-消息体"><a href="#HTTP响应-响应行-响应头-空行-消息体" class="headerlink" title="HTTP响应 &#x3D; 响应行+响应头+空行+消息体"></a>HTTP响应 &#x3D; 响应行+响应头+空行+消息体</h4><p><img src="/./res/http-response.png"></p><ol><li><p><code>HTTPRequest</code>对象的属性和方法：</p><ul><li><code>method</code> - 获取请求方法</li><li><code>path</code> &#x2F; <code>get_full_path()</code> - 获取请求路径&#x2F;带查询字符串的路径</li><li><code>scheme</code> &#x2F; <code>is_secure()</code> &#x2F; <code>get_host()</code> &#x2F; <code>get_port()</code> - 获取请求的协议&#x2F;主机&#x2F;端口</li><li><code>META</code> &#x2F; <code>COOKIES</code> - 获取请求头&#x2F;Cookie信息</li><li><code>GET</code> &#x2F; <code>POST</code> &#x2F; <code>FILES</code> - 获取GET或POST请求参数&#x2F;上传的文件</li><li><code>get_signed_cookie()</code> - 获取带签名的Cookie</li><li><code>is_ajax()</code> - 是不是Ajax异步请求</li><li><code>body</code> &#x2F; <code>content_type</code> &#x2F; <code>encoding</code> - 获取请求的消息体（bytes流）&#x2F;MIME类型&#x2F;编码</li></ul></li><li><p>中间件添加的属性：</p><ul><li><code>session</code> &#x2F; <code>user</code> &#x2F; <code>site</code></li></ul></li><li><p><code>HttpResponse</code>对象的属性和方法：</p><ul><li><code>set_cookie()</code> &#x2F; <code>set_signed_cookie()</code> &#x2F; <code>delete_cookie()</code> - 添加&#x2F;删除Cookie</li><li><code>__setitem__</code> &#x2F; <code>__getitem__</code> &#x2F; <code>__delitem__</code> - 添加&#x2F;获取&#x2F;删除响应头</li><li><code>charset</code> &#x2F; <code>content</code> &#x2F; <code>status_code</code> - 响应的字符集&#x2F;消息体（bytes流）&#x2F;状态码<ul><li>1xx：请求已经收到，继续处理</li><li>2xx（成功）：请求已经成功收到、理解和接收。</li><li>3xx（重定向）：为完成请求要继续执行后续的操作。</li><li>4xx（客户端错误）：请求不正确或不能够被受理。</li><li>5xx（服务器错误）：服务器处理请求失败。</li></ul></li></ul></li><li><p><code>JsonResponse</code>（<code>HttpResponse</code>的子类型）对象</p> <pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.http import HttpResponse, JsonResponse&gt;&gt;&gt;&gt;&gt;&gt; response &#x3D; JsonResponse(&#123;&#39;foo&#39;: &#39;bar&#39;&#125;)&gt;&gt;&gt; response.content&gt;&gt;&gt;&gt;&gt;&gt; response &#x3D; JsonResponse([1, 2, 3], safe&#x3D;False)&gt;&gt;&gt; response.content&gt;&gt;&gt;&gt;&gt;&gt; response &#x3D; HttpResponse(b&#39;...&#39;)&gt;&gt;&gt; response[&#39;cotent-type&#39;] &#x3D; &#39;application&#x2F;pdf&#39;;&gt;&gt;&gt; response[&#39;content-disposition&#39;] &#x3D; &#39;inline; filename&#x3D;&quot;xyz.pdf&quot;&#39;&gt;&gt;&gt; response[&#39;content-disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;&quot;xyz.pdf&quot;&#39;&gt;&gt;&gt;&gt;&gt;&gt; response.set_signed_cookie(&#39;foo&#39;, &#39;bar&#39;, salt&#x3D;&#39;&#39;)&gt;&gt;&gt; response.status_code &#x3D; 200</code></pre></li></ol><h3 id="数据模型-Model"><a href="#数据模型-Model" class="headerlink" title="数据模型(Model)"></a>数据模型(Model)</h3><p>问题1：关系型数据库表的设计应该注意哪些问题（范式理论和逆范式）？如何通过表来创建模型类（反向工程）？如何通过模型类来创建表（正向工程）？</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py makemigrations &lt;appname&gt;python manage.py migratepython manage.py inspectdb &gt; &lt;appname&gt;&#x2F;models.py</code></pre><p>问题2：关系型数据库中数据完整性指的是什么？什么时候需要牺牲数据完整性？（实体完整性&#x2F;参照完整性&#x2F;域完整性）</p><p>问题3：ORM是什么以及解决了什么问题？（对象模型-关系模型双向转换）</p><ol><li><p><code>Field</code>及其子类的属性：</p><ul><li>通用选项：<ul><li><code>db_column</code> &#x2F; <code>db_tablespace</code></li><li><code>null</code> &#x2F; <code>blank</code> &#x2F; <code>default</code></li><li><code>primary_key</code></li><li><code>db_index</code> &#x2F; <code>unqiue</code></li><li><code>choices</code> &#x2F; <code>help_text</code> &#x2F; <code>error_message</code> &#x2F; <code>editable</code> &#x2F; <code>hidden</code></li></ul></li><li>其他选项：<ul><li><code>CharField</code>: <code>max_length</code></li><li><code>DateField</code>: <code>auto_now</code> &#x2F; <code>auto_now_add</code></li><li><code>DecimalField</code>: <code>max_digits</code> &#x2F; <code>decimal_places</code></li><li><code>FileField</code>: <code>storage</code> &#x2F; <code>upload_to</code></li><li><code>ImageField</code>: <code>height_field</code> &#x2F; <code>width_field</code></li></ul></li></ul></li><li><p><code>ForeignKey</code>的属性：</p><ul><li><p>重要属性：</p><ul><li><p><code>db_constraint</code>（提升性能或者数据分片的情况可能需要设置为<code>False</code>）</p></li><li><p><code>on_delete</code></p><ul><li><code>CASCADE</code>：级联删除。</li></ul><ul><li><code>PROTECT</code>：抛出<code>ProtectedError</code>异常，阻止删除引用的对象。</li><li><code>SET_NULL</code>：把外键设置为<code>null</code>，当<code>null</code>属性被设置为<code>True</code>时才能这么做。</li><li><code>SET_DEFAULT</code>：把外键设置为默认值，提供了默认值才能这么做。</li></ul></li><li><p><code>related_name</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">class Dept(models.Model):    passclass Emp(models.Model):    dept &#x3D; models.ForeignKey(related_name&#x3D;&#39;+&#39;, ...)     Dept.objects.get(no&#x3D;10).emp_set.all()Emp.objects.filter(dept__no&#x3D;10)</code></pre><blockquote><p>说明：<code>related_name</code>设置为<code>&#39;+&#39;</code>，可以防止一对多外键关联从“一”的一方查询“多”的一方。</p></blockquote></li></ul></li><li><p>其他属性：</p><ul><li><code>to_field</code> &#x2F; <code>limit_choices_to</code> &#x2F; <code>swappable</code></li></ul></li></ul></li><li><p><code>Model</code>的属性和方法</p><ul><li><p><code>objects</code> &#x2F; <code>pk</code></p></li><li><p><code>save()</code> &#x2F; <code>delete()</code> </p></li><li><p><code>clean()</code> &#x2F; <code>validate_unique()</code> &#x2F; <code>full_clean()</code></p></li></ul></li><li><p><code>QuerySet</code>的方法</p><ul><li><p><code>get()</code> &#x2F; <code>all()</code> &#x2F; <code>values()</code></p><blockquote><p>说明：<code>values()</code>返回的<code>QuerySet</code>中不是模型对象而是字典</p></blockquote></li><li><p><code>count()</code> &#x2F; <code>order_by()</code> &#x2F; <code>exists()</code> &#x2F; <code>reverse()</code></p></li><li><p><code>filter()</code> &#x2F; <code>exclude()</code></p><ul><li><p><code>exact</code> &#x2F; <code>iexact</code>：精确匹配&#x2F;忽略大小写的精确匹配查询</p></li><li><p><code>contains</code> &#x2F; <code>icontains</code> &#x2F; <code>startswith / istartswith / endswith / iendswith</code>：基于<code>like</code>的模糊查询</p></li><li><p><code>in</code>：集合运算</p></li><li><p><code>gt</code> &#x2F; <code>gte</code> &#x2F; <code>lt</code> &#x2F; <code>lte</code>：大于&#x2F;大于等于&#x2F;小于&#x2F;小于等于关系运算</p></li><li><p><code>range</code>：指定范围查询（SQL中的<code>between…and…</code>）</p></li><li><p><code>year</code> &#x2F; <code>month</code> &#x2F; <code>day</code> &#x2F; <code>week_day</code> &#x2F; <code>hour</code> &#x2F; <code>minute</code> &#x2F; <code>second</code>：查询时间日期</p></li><li><p><code>isnull</code>：查询空值（<code>True</code>）或非空值（<code>False</code>）</p></li><li><p><code>search</code>：基于全文索引的全文检索</p></li><li><p><code>regex</code> &#x2F; <code>iregex</code>：基于正则表达式的模糊匹配查询</p></li><li><p><code>aggregate()</code> &#x2F; <code>annotate()</code></p></li><li><p><code>Avg</code> &#x2F; <code>Count</code> &#x2F; <code>Sum</code> &#x2F; <code>Max</code> &#x2F; <code>Min</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.db.models import Avg&gt;&gt;&gt; Emp.objects.aggregate(avg_sal&#x3D;Avg(&#39;sal&#39;))(0.001) SELECT AVG(&#96;TbEmp&#96;.&#96;sal&#96;) AS &#96;avg_sal&#96; FROM &#96;TbEmp&#96;; args&#x3D;()&#123;&#39;avg_sal&#39;: 3521.4286&#125;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; Emp.objects.values(&#39;dept&#39;).annotate(total&#x3D;Count(&#39;dept&#39;))(0.001) SELECT &#96;TbEmp&#96;.&#96;dno&#96;, COUNT(&#96;TbEmp&#96;.&#96;dno&#96;) AS &#96;total&#96; FROM &#96;TbEmp&#96; GROUP BY &#96;TbEmp&#96;.&#96;dno&#96; ORDER BY NULL LIMIT 21; args&#x3D;()&lt;QuerySet [&#123;&#39;dept&#39;: 10, &#39;total&#39;: 4&#125;, &#123;&#39;dept&#39;: 20, &#39;total&#39;: 7&#125;, &#123;&#39;dept&#39;: 30, &#39;total&#39;: 3&#125;]</code></pre></li></ul></li><li><p><code>first()</code> &#x2F; <code>last()</code></p><blockquote><p>说明：调用<code>first()</code>方法相当于用<code>[0]</code>对<code>QuerySet</code>进行切片。</p></blockquote></li><li><p><code>only()</code> &#x2F; <code>defer()</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; Emp.objects.filter(pk&#x3D;7800).only(&#39;name&#39;, &#39;sal&#39;)(0.001) SELECT &#96;TbEmp&#96;.&#96;empno&#96;, &#96;TbEmp&#96;.&#96;ename&#96;, &#96;TbEmp&#96;.&#96;sal&#96; FROM &#96;TbEmp&#96; WHERE &#96;TbEmp&#96;.&#96;empno&#96; &#x3D; 7800 LIMIT 21; args&#x3D;(7800,)&lt;QuerySet [&lt;Emp: Emp object (7800)&gt;]&gt;&gt;&gt;&gt; Emp.objects.filter(pk&#x3D;7800).defer(&#39;name&#39;, &#39;sal&#39;)(0.001) SELECT &#96;TbEmp&#96;.&#96;empno&#96;, &#96;TbEmp&#96;.&#96;job&#96;, &#96;TbEmp&#96;.&#96;mgr&#96;, &#96;TbEmp&#96;.&#96;comm&#96;, &#96;TbEmp&#96;.&#96;dno&#96; FROM &#96;TbEmp&#96; WHERE &#96;TbEmp&#96;.&#96;empno&#96; &#x3D; 7800 LIMIT 21; args&#x3D;(7800,)&lt;QuerySet [&lt;Emp: Emp object (7800)&gt;]&gt;</code></pre></li><li><p><code>create()</code> &#x2F; <code>update()</code> &#x2F; <code>raw()</code> </p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; Emp.objects.filter(dept__no&#x3D;20).update(sal&#x3D;F(&#39;sal&#39;) + 100)(0.011) UPDATE &#96;TbEmp&#96; SET &#96;sal&#96; &#x3D; (&#96;TbEmp&#96;.&#96;sal&#96; + 100) WHERE &#96;TbEmp&#96;.&#96;dno&#96; &#x3D; 20; args&#x3D;(100, 20)&gt;&gt;&gt;&gt;&gt;&gt; Emp.objects.raw(&#39;select empno, ename, job from TbEmp where dno&#x3D;10&#39;)&lt;RawQuerySet: select empno, ename, job from TbEmp where dno&#x3D;10&gt;</code></pre></li></ul></li><li><p><code>Q</code>对象和<code>F</code>对象</p><blockquote><p>说明：Q对象主要用来解决多条件组合的复杂查询；F对象主要用于更新数据。</p></blockquote><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.db.models import Q&gt;&gt;&gt; Emp.objects.filter(...     Q(name__startswith&#x3D;&#39;张&#39;),...     Q(sal__lte&#x3D;5000) | Q(comm__gte&#x3D;1000)... ) # 查询名字以“张”开头且工资小于等于5000或补贴大于等于1000的员工&lt;QuerySet [&lt;Emp: 张三丰&gt;]&gt;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from backend.models import Emp, Dept&gt;&gt;&gt; emps &#x3D; Emp.objects.filter(dept__no&#x3D;20)&gt;&gt;&gt; from django.db.models import F&gt;&gt;&gt; emps.update(sal&#x3D;F(&#39;sal&#39;) + 100)</code></pre></li><li><p>原生SQL查询</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.db import connectionswith connections[&#39;...&#39;].cursor() as cursor:    cursor.execute(&quot;UPDATE TbEmp SET sal&#x3D;sal+10 WHERE dno&#x3D;30&quot;)    cursor.execute(&quot;SELECT ename, job FROM TbEmp WHERE dno&#x3D;10&quot;)    row &#x3D; cursor.fetchall()</code></pre></li><li><p>模型管理器</p><pre class="language-Python" data-language="Python"><code class="language-Python">class BookManager(models.Manager):        def title_count(self, keyword):        return self.filter(title__icontains&#x3D;keyword).count()class Book(models.Model):        objects &#x3D; BookManager()</code></pre></li></ol><h3 id="视图函数-Controller"><a href="#视图函数-Controller" class="headerlink" title="视图函数(Controller)"></a>视图函数(Controller)</h3><h4 id="如何设计视图函数"><a href="#如何设计视图函数" class="headerlink" title="如何设计视图函数"></a>如何设计视图函数</h4><ol><li><p>用户的每个请求（用户故事）对应一个视图函数，当然也可以将用户要执行的业务逻辑封装到独立的函数中，也就是有专门的模块处理程序中的业务逻辑。</p></li><li><p>用户的请求可能会包含多个（持久化）操作，这些操作有可能需要设计成不可分割的原子性操作，那么这里就形成了事务的边界。</p><ul><li><p>事务的ACID特性。</p><ul><li>原子性（Atomicity）：事务中各项的操作要么全做要么全不做；</li><li>一致性（Consistentcy）：事务前后系统的状态是一致的；</li><li>隔离性（Isolation）：并发执行的事务无法看到彼此的中间状态；</li><li>持久性（Duration）：事务完成后所做的改动都会被持久化。</li></ul></li><li><p>事务隔离级别 - 设置事务隔离级别是为了数据库底层依据事务隔离级别为数据加上适当的锁。如果需要保证数据的强一致性，那么关系型数据库仍然是唯一的也是最好的选择，因为关系型数据库可以通过锁机制来保护数据。事务隔离级别从低到高依次是：Read Uncommitted（读未提交）、Read Committed（读提交）、Repeatable Read（可重复读）、Serializable（串行化）。事务隔离级别越高，数据并发访问的问题越少，但是性能越差；事务隔离级别越低，数据并发访问的问题越多，但是性能越好。</p></li><li><p>数据并发访问会产生5种问题（请参考我的<a href="https://blog.csdn.net/jackfrued/article/details/44921941">《Java面试题全集（上）》</a>第80题对该问题的讲解）：</p><ul><li>第1类丢失更新（A事务撤销覆盖B事务更新的数据）和第2类丢失更新（A事务提交覆盖B事务更新的数据）。</li><li>脏读（读脏数据）：一个事务读取到其他尚未提交的事务的数据。</li><li>不可重复读： 一个事务在读取它的查询结果时，被另一个事务更新了它的查询记录导致无法读到数据。</li><li>幻读：一个事务在读取它的查询结果时，发现读到了被另一个事务提交的新数据。</li></ul><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 设置全局默认的事务隔离级别set global transaction isolation level repeatable read;-- 设置当前会话的事务隔离级别set session transaction isolation level read committed;-- 查询当前会话的事务隔离级别select @@tx_isolation;</code></pre></li><li><p>Django中的事务控制。</p><ul><li><p>给每个请求绑定事务环境（反模式）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">ATOMIC_REQUESTS &#x3D; True</code></pre></li><li><p>使用事务装饰器（简单易用） - 粗粒度（控制不够精细）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">@transaction.non_atomic_requests@transaction.atomic</code></pre></li><li><p>使用上下文语法（细粒度 - 事务控制的范围更加精准）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">with transaction.atomic():    pass</code></pre></li><li><p>关闭自动提交使用手动提交。</p><pre class="language-Python" data-language="Python"><code class="language-Python">AUTOCOMMIT &#x3D; False</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">transaction.commit()transaction.rollback()</code></pre></li></ul></li></ul></li></ol><h4 id="URL配置"><a href="#URL配置" class="headerlink" title="URL配置"></a>URL配置</h4><ol><li><p>可以让部分URL只在调试模式下生效。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from django.conf import settingsurlpatterns &#x3D; [    ...]if settings.DEBUG:    urlpatterns +&#x3D; [ ... ]</code></pre></li><li><p>可以使用命名捕获组捕获路径参数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">url(r&#39;api&#x2F;code&#x2F;(?P&lt;mobile&gt;1[3-9]\d&#123;9&#125;)&#39;),path(&#39;api&#x2F;code&#x2F;&lt;str:mobile&gt;&#39;),</code></pre></li><li><p>URL配置不关心请求使用的方法（一个视图函数可以处理不同的请求方式）。</p></li><li><p>如果使用<code>url</code>函数捕获的路径参数都是字符串，<code>path</code>函数可以指定路径参数类型。</p></li><li><p>可以使用<code>include</code>函数引入其他URL配置并指定<code>namespace</code>来解决命名冲突，捕获的参数会向下传递。</p></li><li><p>在<code>url</code>和<code>path</code>函数甚至是<code>include</code>函数中都可以用字典向视图传入额外的参数，如果参数与捕获的参数同名，则使用字典中的参数。</p></li><li><p>可以用<code>reverse</code>函数实现URL的逆向解析（从名字解析出URL），在模板中也可以用<code>&#123;% url %&#125;</code>实现同样的操作。</p><pre class="language-Python" data-language="Python"><code class="language-Python">path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;)return redirect(reverse(&#39;index&#39;))return redirect(&#39;index&#39;)</code></pre></li></ol><h3 id="模板-View"><a href="#模板-View" class="headerlink" title="模板(View)"></a>模板(View)</h3><h4 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h4><ol><li><p>模板的配置和渲染函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">TEMPLATES &#x3D; [    &#123;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;), ],        &#39;APP_DIRS&#39;: True,        &#39;OPTIONS&#39;: &#123;            &#39;context_processors&#39;: [                &#39;django.template.context_processors.debug&#39;,                &#39;django.template.context_processors.request&#39;,                &#39;django.contrib.auth.context_processors.auth&#39;,                &#39;django.contrib.messages.context_processors.messages&#39;,            ],        &#125;,    &#125;,]</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">resp &#x3D; render(request, &#39;index.html&#39;, &#123;&#39;foo&#39;: ...&#125;)</code></pre></li><li><p>模板遇到变量名的查找顺序。</p><ul><li>字典查找（如：<code>foo[&#39;bar&#39;]</code>）</li><li>属性查找（如：<code>foo.bar</code>）</li><li>方法调用（如：<code>foo.bar()</code>）<ul><li>方法不能有必须传值的参数</li><li>在模板中不能够给方法传参</li><li>如果方法的<code>alters_data</code>被设置为<code>True</code>则不能调用该方法（避免误操作的风险），模型对象动态生成的<code>delete()</code>和<code>save()</code>方法都设定了<code>alters_data = True</code>。</li></ul></li><li>列表索引查找（如：<code>foo[0]</code>）</li></ul></li><li><p>模板标签的使用。</p><ul><li><code>&#123;% if %&#125;` / `&#123;% else %&#125;` / `&#123;% endif %&#125;</code></li><li><code>&#123;% for %&#125;` / `&#123;% endfor %&#125;</code></li><li><code>&#123;% ifequal %&#125;` / `&#123;% endifequal %&#125;</code> &#x2F; <code>&#123;% ifnotequal %&#125;` / `&#123;% endifnotequal %&#125;</code></li><li>&#96;&#96; &#x2F; <code>&#123;% comment %&#125;` / `&#123;% endcomment %&#125;</code></li></ul></li><li><p>过滤器的使用。</p><ul><li><code>lower</code> &#x2F; <code>upper</code> &#x2F; <code>first</code> &#x2F; <code>last</code> &#x2F; <code>truncatewords</code> &#x2F; <code>date </code>&#x2F; <code>time</code> &#x2F; <code>length</code> &#x2F; <code>pluralize</code> &#x2F; <code>center</code> &#x2F; <code>ljust</code> &#x2F; <code>rjust</code> &#x2F; <code>cut</code> &#x2F; <code>urlencode</code> &#x2F; <code>default_if_none</code> &#x2F; <code>filesizeformat</code> &#x2F; <code>join</code> &#x2F; <code>slice</code> &#x2F; <code>slugify</code></li></ul></li><li><p>模板的包含和继承。</p><ul><li><code>&#123;% include %&#125;</code> &#x2F; <code>&#123;% block %&#125;</code></li><li><code>&#123;% extends %&#125;</code></li></ul></li><li><p>模板加载器（后面优化部分会讲到）。</p><ul><li><p>文件系统加载器</p><pre class="language-Python" data-language="Python"><code class="language-Python">TEMPLATES &#x3D; [&#123;    &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,    &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],&#125;]</code></pre></li><li><p>应用目录加载器</p><pre class="language-Python" data-language="Python"><code class="language-Python">TEMPLATES &#x3D; [&#123;    &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,    &#39;APP_DIRS&#39;: True,&#125;]</code></pre></li></ul></li></ol><h4 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h4><ol><li>前端模板引擎：Handlebars &#x2F; Mustache。</li><li>前端MV*框架。<ul><li>MVC - AngularJS</li><li>MVVM(Model-View-ViewModel) - Vue.js</li></ul></li></ol><h4 id="其他视图"><a href="#其他视图" class="headerlink" title="其他视图"></a>其他视图</h4><ol><li><p>MIME（多用途Internet邮件扩展）类型 - 告知浏览器传输的数据类型。</p><table><thead><tr><th>Content-Type</th><th>说明</th></tr></thead><tbody><tr><td>application&#x2F;json</td><td><a href="https://zh.wikipedia.org/wiki/JSON">JSON</a>（JavaScript Object Notation）</td></tr><tr><td>application&#x2F;pdf</td><td><a href="https://zh.wikipedia.org/wiki/PDF">PDF</a>（Portable Document Format）</td></tr><tr><td>audio&#x2F;mpeg</td><td><a href="https://zh.wikipedia.org/wiki/MP3">MP3</a>或其他<a href="https://zh.wikipedia.org/wiki/MPEG">MPEG</a>音频文件</td></tr><tr><td>audio&#x2F;vnd.wave</td><td><a href="https://zh.wikipedia.org/wiki/WAV">WAV</a>音频文件</td></tr><tr><td>image&#x2F;gif</td><td><a href="https://zh.wikipedia.org/wiki/GIF">GIF</a>图像文件</td></tr><tr><td>image&#x2F;jpeg</td><td><a href="https://zh.wikipedia.org/wiki/JPEG">JPEG</a>图像文件</td></tr><tr><td>image&#x2F;png</td><td><a href="https://zh.wikipedia.org/wiki/PNG">PNG</a>图像文件</td></tr><tr><td>text&#x2F;html</td><td><a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>文件</td></tr><tr><td>text&#x2F;xml</td><td><a href="https://zh.wikipedia.org/wiki/XML">XML</a></td></tr><tr><td>video&#x2F;mp4</td><td><a href="https://zh.wikipedia.org/wiki/MP4">MP4</a>视频文件</td></tr><tr><td>video&#x2F;quicktime</td><td><a href="https://zh.wikipedia.org/wiki/QuickTime">QuickTime</a>视频文件</td></tr></tbody></table></li><li><p>如何处置生成的内容（inline &#x2F; attachment）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from urllib.parse import quote&gt;&gt;&gt;&gt;&gt;&gt; response[&#39;content-type&#39;] &#x3D; &#39;application&#x2F;pdf&#39;&gt;&gt;&gt; filename &#x3D; quote(&#39;Python语言规范.pdf&#39;)&gt;&gt;&gt; filename&#39;Python%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83.pdf&#39;&gt;&gt;&gt; response[&#39;content-disposition&#39;] &#x3D; f&#39;attachment; filename&#x3D;&quot;&#123;filename&#125;&quot;&#39;</code></pre><blockquote><p>提醒：URL以及请求和响应头中的中文都应该处理成<a href="https://zh.wikipedia.org/zh-hans/%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81">百分号编码</a>。</p></blockquote></li><li><p>生成CSV &#x2F; Excel &#x2F; PDF &#x2F; 统计报表。</p><ul><li><p>向浏览器传输二进制数据。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from io import BytesIObuffer &#x3D; BytesIO()resp &#x3D; HttpResponse(content_type&#x3D;&#39;...&#39;)resp[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;&quot;...&quot;&#39;resp.write(buffer.getvalue())</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">from io import BytesIOimport xlwtdef get_style(name, color&#x3D;0, bold&#x3D;False, italic&#x3D;False):    font &#x3D; xlwt.Font()    font.name, font.colour_index, font.bold, font.italic &#x3D; \    name, color, bold, italic    style &#x3D; xlwt.XFStyle()    style.font &#x3D; font    return styledef export_emp_excel(request):    # 创建Excel工作簿(使用三方库xlwt)    workbook &#x3D; xlwt.Workbook()    # 向工作簿中添加工作表    sheet &#x3D; workbook.add_sheet(&#39;员工详细信息&#39;)    # 设置表头    titles &#x3D; [&#39;编号&#39;, &#39;姓名&#39;, &#39;主管&#39;, &#39;职位&#39;, &#39;工资&#39;, &#39;部门名称&#39;]    for col, title in enumerate(titles):        sheet.write(0, col, title, get_style(&#39;HanziPenSC-W3&#39;, 2, True))    # 使用Django的ORM框架查询员工数据    emps &#x3D; Emp.objects.all().select_related(&#39;dept&#39;).select_related(&#39;mgr&#39;)    cols &#x3D; [&#39;no&#39;, &#39;name&#39;, &#39;mgr&#39;, &#39;job&#39;, &#39;sal&#39;, &#39;dept&#39;]    # 通过嵌套的循环将员工表的数据写入Excel工作表的单元格    for row, emp in enumerate(emps):        for col, prop in enumerate(cols):            val &#x3D; getattr(emp, prop, &#39;&#39;)            if isinstance(val, (Dept, Emp)):                val &#x3D; val.name            sheet.write(row + 1, col, val)    # 将Excel文件的二进制数据写入内存    buffer &#x3D; BytesIO()    workbook.save(buffer)    # 通过HttpResponse对象向浏览器输出Excel文件    resp &#x3D; HttpResponse(buffer.getvalue())    resp[&#39;content-type&#39;] &#x3D; &#39;application&#x2F;msexcel&#39;    # 如果文件名有中文需要处理成百分号编码    resp[&#39;content-disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;&quot;detail.xls&quot;&#39;    return resp</code></pre></li><li><p>大文件的流式处理：<code>StreamingHttpResponse</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def download_file(request):    file_stream &#x3D; open(&#39;...&#39;, &#39;rb&#39;)    # 如果文件的二进制数据较大则最好用迭代器进行处理避免过多的占用服务器内存    file_iter &#x3D; iter(lambda: file_stream.read(4096), b&#39;&#39;)    resp &#x3D; StreamingHttpResponse(file_iter)    # 中文文件名要处理成百分号编码    filename &#x3D; quote(&#39;...&#39;, &#39;utf-8&#39;)    resp[&#39;Content-Type&#39;] &#x3D; &#39;...&#39;    resp[&#39;Content-Disposition&#39;] &#x3D; f&#39;attachment; filename&#x3D;&quot;&#123;filename&#125;&quot;&#39;    return resp</code></pre><blockquote><p>说明：如果需要生成PDF文件，可以需要安装<code>reportlab</code>。另外，使用StreamingHttpResponse只能减少内存的开销，但是如果下载一个大文件会导致一个请求长时间占用服务器资源，比较好的做法还是把报表提前生成好（可以考虑使用定时任务），放在静态资源服务器或者是云存储服务器上以访问静态资源的方式访问。</p></blockquote></li><li><p><a href="http://echarts.baidu.com/">ECharts</a>或<a href="https://www.chartjs.org/">Chart.js</a>。</p><ul><li>思路：后端只提供JSON格式的数据，前端JavaScript渲染生成图表。</li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">def get_charts_data(request):    &quot;&quot;&quot;获取统计图表JSON数据&quot;&quot;&quot;    names &#x3D; []    totals &#x3D; []    # 通过connections获取指定数据库连接并创建游标对象    with connections[&#39;backend&#39;].cursor() as cursor:        # 在使用ORM框架时可以使用对象管理器的aggregate()和annotate()方法实现分组和聚合函数查询        # 执行原生SQL查询(如果ORM框架不能满足业务或性能需求)        cursor.execute(&#39;select dname, total from vw_dept_emp&#39;)        for row in cursor.fetchall():            names.append(row[0])            totals.append(row[1])    return JsonResponse(&#123;&#39;names&#39;: names, &#39;totals&#39;: totals&#125;)</code></pre><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;统计图表&lt;&#x2F;title&gt;    &lt;style&gt;        #main &#123;            width: 600px;            height: 400px;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;main&quot;&gt;&lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;echarts&#x2F;4.2.0-rc.2&#x2F;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        var myChart &#x3D; echarts.init($(&#39;#main&#39;)[0]);        $.ajax(&#123;            &#39;url&#39;: &#39;charts_data&#39;,            &#39;type&#39;: &#39;get&#39;,            &#39;data&#39;: &#123;&#125;,            &#39;dataType&#39;: &#39;json&#39;,            &#39;success&#39;: function(json) &#123;                var option &#x3D; &#123;                    title: &#123;                        text: &#39;员工分布统计图&#39;                    &#125;,                    tooltip: &#123;&#125;,                    legend: &#123;                        data:[&#39;人数&#39;]                    &#125;,                    xAxis: &#123;                        data: json.names                    &#125;,                    yAxis: &#123;&#125;,                    series: [&#123;                        name: &#39;人数&#39;,                        type: &#39;bar&#39;,                        data: json.totals                    &#125;]                &#125;;                myChart.setOption(option);            &#125;,            &#39;error&#39;: function() &#123;&#125;        &#125;);    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></li></ul></li></ol><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>问题1：中间件背后的设计理念是什么？（分离横切关注功能&#x2F;拦截过滤器模式）</p><p>问题2：中间件有哪些不同的实现方式？（参考下面的代码）</p><p>问题3：描述Django内置的中间件及其执行顺序。（推荐阅读：<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/middleware/#middleware-ordering">Django官方文档 - 中间件 - 中间件顺序</a>）</p><h4 id="激活中间件"><a href="#激活中间件" class="headerlink" title="激活中间件"></a>激活中间件</h4><pre class="language-Python" data-language="Python"><code class="language-Python">MIDDLEWARE &#x3D; [    &#39;django.middleware.security.SecurityMiddleware&#39;,    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,    &#39;django.middleware.common.CommonMiddleware&#39;,    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,    &#39;common.middlewares.block_sms_middleware&#39;,]</code></pre><h4 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h4><pre class="language-Python" data-language="Python"><code class="language-Python">def simple_middleware(get_response):        def middleware(request, *args, **kwargs):        response &#x3D; get_response(request, *args, **kwargs)        return response        return middleware</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">class MyMiddleware:            def __init__(self, get_response):        self.get_response &#x3D; get_response            def __call__(self, request):                response &#x3D; self.get_response(request)               return response</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">class MyMiddleware(MiddlewareMixin):        def __init__(self):        pass        def process_request(request):        pass        def process_view(request, view_func, view_args, view_kwargs):        pass        def process_template_response(request, response):        pass        def process_response(request, response):        pass        def process_exception(request, exception):        pass</code></pre><h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><ol><li><p>CommonMiddleware - 基础设置中间件</p><ul><li>DISALLOWED_USER_AGENTS - 不被允许的用户代理（浏览器）</li><li>APPEND_SLASH - 是否追加<code>/</code></li><li>USE_ETAG - 浏览器缓存相关</li></ul></li><li><p>SecurityMiddleware - 安全相关中间件</p><ul><li>SECURE_HSTS_SECONDS - 强制使用HTTPS的时间</li><li>SECURE_HSTS_INCLUDE_SUBDOMAINS - HTTPS是否覆盖子域名</li><li>SECURE_CONTENT_TYPE_NOSNIFF - 是否允许浏览器推断内容类型</li><li>SECURE_BROWSER_XSS_FILTER - 是否启用跨站脚本攻击过滤器</li><li>SECURE_SSL_REDIRECT - 是否重定向到HTTPS连接</li><li>SECURE_REDIRECT_EXEMPT - 免除重定向到HTTPS</li></ul></li><li><p>SessionMiddleware - 会话中间件</p></li><li><p>CsrfViewMiddleware - 防范跨站身份伪造中间件</p></li><li><p>XFrameOptionsMiddleware - 防范点击劫持攻击中间件</p><p><img src="/./res/click-jacking.png"></p></li></ol><p><img src="/./res/builtin-middlewares.png"></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ol><li>用法：通常不要用来生成页面上的表单控件（耦合度太高不容易定制），主要用来验证数据。</li><li>Form的属性和方法：<ul><li><code>is_valid()</code> &#x2F; <code>is_multipart()</code></li><li><code>errors</code> &#x2F; <code>fields</code> &#x2F; <code>is_bound</code> &#x2F; <code>changed_data</code> &#x2F; <code>cleaned_data</code></li><li><code>add_error()</code> &#x2F; <code>has_errors()</code> &#x2F; <code>non_field_errors()</code></li><li><code>clean()</code></li></ul></li><li>Form.errors的方法：<ul><li><code>as_data()</code> &#x2F; <code>as_json()</code> &#x2F; <code>get_json_data()</code></li></ul></li></ol><p>问题1：Django中的<code>Form</code>和<code>ModelForm</code>有什么作用？（通常不用来生成表单主要用来验证数据）</p><p>问题2：表单上传文件时应该注意哪些问题？（表单的设置、多文件上传、图片预览（FileReader）、Ajax上传文件、上传后的文件如何存储、调用云存储（如<a href="https://www.aliyun.com/product/oss">阿里云OSS</a>、<a href="https://www.qiniu.com/">七牛云</a>、<a href="https://leancloud.cn/storage/">LeanCloud</a>等））</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;...&quot; multiple&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;foo&quot;&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;foo&quot;&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;foo&quot;&gt;&lt;&#x2F;form&gt;</code></pre><blockquote><p>说明：上传图片文件的预览效果可以通过HTML5的FileReader来实现。</p></blockquote><blockquote><p>说明：使用云存储通常是比自己配置分布式文件系统这种方式更靠谱的做法，而且云存储通常成本并不太高，不仅如此大多数云存储还提供了如图片剪裁、生成水印、视频转码、CDN等服务。如果要自己做上传的视频文件转码，需要安装三方库ffmpeg，在程序中调用该三方库可以实现转码。</p></blockquote><h3 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h3><p>问题1：使用Cookie能解决什么问题？（用户跟踪，解决HTTP协议无状态问题）</p><ol><li><p>URL重写</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;www.abc.com&#x2F;path&#x2F;resource?foo&#x3D;bar</code></pre></li><li><p>隐藏域（隐式表单域）- 埋点</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;foo&quot; value&#x3D;&quot;bar&quot;&gt;    &lt;&#x2F;form&gt;</code></pre></li><li><p>Cookie - 浏览器中的临时文件（文本文件）- BASE64</p></li></ol><p>问题2：Cookie和Session之间关系是什么？（Session的标识通过Cookie保存和传输）</p><h4 id="Session的配置"><a href="#Session的配置" class="headerlink" title="Session的配置"></a>Session的配置</h4><ol><li><p>Session对应的中间件：<code>django.contrib.sessions.middleware.SessionMiddleware</code>。</p></li><li><p>Session引擎。</p><ul><li><p>基于数据库（默认方式）</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    &#39;django.contrib.sessions&#39;,]</code></pre></li><li><p>基于缓存（推荐使用）</p><pre class="language-Python" data-language="Python"><code class="language-Python">SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;SESSION_CACHE_ALIAS &#x3D; &#39;session&#39;</code></pre></li><li><p>基于文件（基本不考虑）</p></li><li><p>基于Cookie（不靠谱）</p><pre class="language-Python" data-language="Python"><code class="language-Python">SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.signed_cookies&#39;</code></pre></li></ul></li><li><p>Cookie相关的配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python">SESSION_COOKIE_NAME &#x3D; &#39;djang_session_id&#39;SESSION_COOKIE_AGE &#x3D; 1209600# 如果设置为True，Cookie就是基于浏览器窗口的Cookie，不会持久化SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; False SESSION_SAVE_EVERY_REQUEST &#x3D; FalseSESSION_COOKIE_HTTPONLY &#x3D; True</code></pre></li><li><p>session的属性和方法。</p><ul><li><code>session_key</code> &#x2F; <code>session_data</code> &#x2F; <code>expire_date</code></li><li><code>__getitem__</code> &#x2F; <code>__setitem__</code> &#x2F; <code>__delitem__</code> &#x2F; <code>__contains__</code></li><li><code>set_expiry()</code> &#x2F; <code>get_expiry_age()</code> &#x2F; <code>get_expiry_date()</code> - 设置&#x2F;获取会话超期时间</li><li><code>flush()</code> - 销毁会话</li><li><code>set_test_cookie()</code> &#x2F; <code>test_cookie_worked()</code> &#x2F; <code>delete_test_cookie()</code> - 测试浏览器是否支持Cookie（提示用户如果浏览器禁用Cookie可能会影响网站的使用）</li></ul></li><li><p>session的序列化。</p><pre class="language-Python" data-language="Python"><code class="language-Python">SESSION_SERIALIZER &#x3D; &#39;django.contrib.sessions.serializers.JSONSerializer&#39;</code></pre><ul><li><p>JSONSerializer（1.6及以后默认）- 如果想将自定义的对象放到session中，会遇到“Object of type ‘XXX’ is not JSON serializable”的问题（如果配置使用Redis保存Session，django-redis使用了Pickle序列化，这个问题就不存在了）。</p></li><li><p>PickleSerializer（1.6以前的默认）- 因为安全问题不推荐使用，但是只要不去反序列化用户构造的恶意的Payload其实也没有什么风险。关于这种方式的安全漏洞，可以参考《<a href="http://www.polaris-lab.com/index.php/archives/178/">Python Pickle的任意代码执行漏洞实践和Payload构造》</a>一文或《软件架构-Python语言实现》上关于这个问题的讲解。</p><blockquote><p>说明：如果使用了django_redis整合Redis作为session的存储引擎，那么由于django_redis又封装了一个PickleSerializer来提供序列化，所以不会存在上述的问题，且Redis中保存的value是pickle序列化之后的结果。</p></blockquote></li></ul></li></ol><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h4><pre class="language-Python" data-language="Python"><code class="language-Python">CACHES &#x3D; &#123;    # 默认缓存    &#39;default&#39;: &#123;        &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,        &#39;LOCATION&#39;: [            &#39;redis:&#x2F;&#x2F;1.2.3.4:6379&#x2F;0&#39;,        ],        &#39;KEY_PREFIX&#39;: &#39;teamproject&#39;,        &#39;OPTIONS&#39;: &#123;            &#39;CLIENT_CLASS&#39;: &#39;django_redis.client.DefaultClient&#39;,            &#39;CONNECTION_POOL_KWARGS&#39;: &#123;                &#39;max_connections&#39;: 1000,            &#125;,            &#39;PASSWORD&#39;: &#39;yourpass&#39;,        &#125;    &#125;,    # 页面缓存    &#39;page&#39;: &#123;        &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,        &#39;LOCATION&#39;: [            &#39;redis:&#x2F;&#x2F;1.2.3.4:6379&#x2F;1&#39;,        ],        &#39;KEY_PREFIX&#39;: &#39;teamproject:page&#39;,        &#39;OPTIONS&#39;: &#123;            &#39;CLIENT_CLASS&#39;: &#39;django_redis.client.DefaultClient&#39;,            &#39;CONNECTION_POOL_KWARGS&#39;: &#123;                &#39;max_connections&#39;: 500,            &#125;,            &#39;PASSWORD&#39;: &#39;yourpass&#39;,        &#125;    &#125;,    # 会话缓存    &#39;session&#39;: &#123;        &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,        &#39;LOCATION&#39;: [            &#39;redis:&#x2F;&#x2F;1.2.3.4:6379&#x2F;2&#39;,        ],        &#39;KEY_PREFIX&#39;: &#39;teamproject:session&#39;,        &#39;TIMEOUT&#39;: 1209600,        &#39;OPTIONS&#39;: &#123;            &#39;CLIENT_CLASS&#39;: &#39;django_redis.client.DefaultClient&#39;,            &#39;CONNECTION_POOL_KWARGS&#39;: &#123;                &#39;max_connections&#39;: 2000,            &#125;,            &#39;PASSWORD&#39;: &#39;yourpass&#39;,        &#125;    &#125;,    # 接口数据缓存    &#39;api&#39;: &#123;        &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,        &#39;LOCATION&#39;: [            &#39;redis:&#x2F;&#x2F;1.2.3.4:6379&#x2F;3&#39;,        ],        &#39;KEY_PREFIX&#39;: &#39;teamproject:api&#39;,        &#39;OPTIONS&#39;: &#123;            &#39;CLIENT_CLASS&#39;: &#39;django_redis.client.DefaultClient&#39;,            &#39;CONNECTION_POOL_KWARGS&#39;: &#123;                &#39;max_connections&#39;: 500,            &#125;,            &#39;PASSWORD&#39;: &#39;yourpass&#39;,        &#125;    &#125;,&#125;</code></pre><blockquote><p>说明：通过Redis底层提供的多个数据库来隔离缓存数据有助于缓存数据的管理。如果配置了Redis的主从复制（读写分离），LOCATION列表中可以配置多个Redis连接，第一个被视为master用来进行写操作，后面的被视为slave用来进行读操作。</p></blockquote><h4 id="全站缓存"><a href="#全站缓存" class="headerlink" title="全站缓存"></a>全站缓存</h4><pre class="language-Python" data-language="Python"><code class="language-Python">MIDDLEWARE_CLASSES &#x3D; [    &#39;django.middleware.cache.UpdateCacheMiddleware&#39;,    ...    &#39;django.middleware.common.CommonMiddleware&#39;,    ...    &#39;django.middleware.cache.FetchFromCacheMiddleware&#39;,]CACHE_MIDDLEWARE_ALIAS &#x3D; &#39;default&#39;CACHE_MIDDLEWARE_SECONDS &#x3D; 300CACHE_MIDDLEWARE_KEY_PREFIX &#x3D; &#39;djang:cache&#39;</code></pre><h4 id="视图层缓存"><a href="#视图层缓存" class="headerlink" title="视图层缓存"></a>视图层缓存</h4><pre class="language-Python" data-language="Python"><code class="language-Python">from django.views.decorators.cache import cache_pagefrom django.views.decorators.vary import vary_on_cookie@cache_page(timeout&#x3D;60 * 15, cache&#x3D;&#39;page&#39;)@vary_on_cookiedef my_view(request):    pass</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">from django.views.decorators.cache import cache_pageurlpatterns &#x3D; [    url(r&#39;^foo&#x2F;([0-9]&#123;1,2&#125;)&#x2F;$&#39;, cache_page(60 * 15)(my_view)),]</code></pre><h4 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h4><ol><li><p>模板片段缓存。</p><ul><li><code>&#123;% load cache %&#125;</code></li><li><code>&#123;% cache %&#125;` / `&#123;% endcache %&#125;</code></li></ul></li><li><p>使用底层API访问缓存。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.core.cache import cache&gt;&gt;&gt;&gt;&gt;&gt; cache.set(&#39;my_key&#39;, &#39;hello, world!&#39;, 30)&gt;&gt;&gt; cache.get(&#39;my_key&#39;)&gt;&gt;&gt; cache.clear()</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.core.cache import caches&gt;&gt;&gt; cache1 &#x3D; caches[&#39;page&#39;]&gt;&gt;&gt; cache2 &#x3D; caches[&#39;page&#39;]&gt;&gt;&gt; cache1 is cache2True&gt;&gt;&gt; cache3 &#x3D; caches[&#39;session&#39;]&gt;&gt;&gt; cache2 is cache3False</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django_redis import get_redis_connection&gt;&gt;&gt;&gt;&gt;&gt; redis_client &#x3D; get_redis_connection()&gt;&gt;&gt; redis_client.hgetall()</code></pre></li></ol><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><p>NOTSET &lt; DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</p><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><pre class="language-Python" data-language="Python"><code class="language-Python">LOGGING &#x3D; &#123;    &#39;version&#39;: 1,    &#39;disable_existing_loggers&#39;: False,    # 配置日志格式化器    &#39;formatters&#39;: &#123;        &#39;simple&#39;: &#123;            &#39;format&#39;: &#39;%(asctime)s %(module)s.%(funcName)s: %(message)s&#39;,            &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,        &#125;,        &#39;verbose&#39;: &#123;            &#39;format&#39;: &#39;%(asctime)s %(levelname)s [%(process)d-%(threadName)s] &#39;                      &#39;%(module)s.%(funcName)s line %(lineno)d: %(message)s&#39;,            &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,        &#125;    &#125;,    # 配置日志过滤器    &#39;filters&#39;: &#123;        &#39;require_debug_true&#39;: &#123;            &#39;()&#39;: &#39;django.utils.log.RequireDebugTrue&#39;,        &#125;,    &#125;,    # 配置日志处理器    &#39;handlers&#39;: &#123;        &#39;console&#39;: &#123;            &#39;class&#39;: &#39;logging.StreamHandler&#39;,            &#39;level&#39;: &#39;DEBUG&#39;,            &#39;filters&#39;: [&#39;require_debug_true&#39;],            &#39;formatter&#39;: &#39;simple&#39;,        &#125;,        &#39;file1&#39;: &#123;            &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,            &#39;filename&#39;: &#39;access.log&#39;,            &#39;when&#39;: &#39;W0&#39;,            &#39;backupCount&#39;: 12,            &#39;formatter&#39;: &#39;simple&#39;,            &#39;level&#39;: &#39;INFO&#39;,        &#125;,        &#39;file2&#39;: &#123;            &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,            &#39;filename&#39;: &#39;error.log&#39;,            &#39;when&#39;: &#39;D&#39;,            &#39;backupCount&#39;: 31,            &#39;formatter&#39;: &#39;verbose&#39;,            &#39;level&#39;: &#39;WARNING&#39;,        &#125;,    &#125;,    # 配置日志器    &#39;loggers&#39;: &#123;        &#39;django&#39;: &#123;            &#39;handlers&#39;: [&#39;console&#39;, &#39;file1&#39;, &#39;file2&#39;],            &#39;propagate&#39;: True,            &#39;level&#39;: &#39;DEBUG&#39;,        &#125;,    &#125;&#125;</code></pre><p><a href="https://docs.djangoproject.com/zh-hans/2.0/topics/logging/#s-examples">日志配置官方示例</a>。</p><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><ol><li><p>Linux相关命令：head、tail、grep、awk、uniq、sort</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">tail -10000 access.log | awk &#39;&#123;print $1&#125;&#39; | uniq -c | sort -r</code></pre></li><li><p>实时日志文件分析：Python + 正则表达式 + Crontab</p></li><li><p><a href="https://github.com/jkklee/web_log_analyse">《Python日志分析工具》</a>。</p></li><li><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/index.html">《集中式日志系统ELK》</a>。</p><ul><li>ElasticSearch：搜索引擎，实现全文检索。</li><li>Logstash：负责从指定节点收集日志。</li><li>Kibana：日志可视化工具。</li></ul></li><li><p>大数据日志处理：Flume+Kafka日志采集、Storm &#x2F; Spark实时数据处理、Impala实时查询。</p></li></ol><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><p>问题1：RESTful架构到底解决了什么问题？（URL具有自描述性、资源表述与视图的解耦和、互操作性利用构建微服务以及集成第三方系统、无状态性提高水平扩展能力）</p><p>问题2：项目在使用RESTful架构时有没有遇到一些问题或隐患？（对资源访问的限制、资源从属关系检查、避免泄露业务信息、防范可能的攻击）</p><blockquote><p>补充：下面的几个和安全性相关的响应头在前面讲中间件的时候提到过的。</p><ul><li>X-Frame-Options: DENY</li><li>X-Content-Type-Options: nosniff</li><li>X-XSS-Protection: 1; mode&#x3D;block;</li><li>Strict­-Transport-­Security: max-age&#x3D;31536000;</li></ul></blockquote><p>问题3：如何保护API中的敏感信息以及防范重放攻击？（摘要和令牌）</p><p>推荐阅读：<a href="https://help.aliyun.com/knowledge_detail/50041.html">《如何有效防止API的重放攻击》</a>。</p><h4 id="使用djangorestframework"><a href="#使用djangorestframework" class="headerlink" title="使用djangorestframework"></a>使用djangorestframework</h4><p>安装djangorestfrmework（为了描述方便，以下统一简称为DRF）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install djangorestframework</code></pre><p>配置DRF。</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [        &#39;rest_framework&#39;,    ]REST_FRAMEWORK &#x3D; &#123;    # 配置默认页面大小    &#39;PAGE_SIZE&#39;: 10,    # 配置默认的分页类    &#39;DEFAULT_PAGINATION_CLASS&#39;: &#39;rest_framework.pagination.PageNumberPagination&#39;,    # 配置异常处理器    # &#39;EXCEPTION_HANDLER&#39;: &#39;api.exceptions.exception_handler&#39;,    # 配置默认解析器    # &#39;DEFAULT_PARSER_CLASSES&#39;: (    #     &#39;rest_framework.parsers.JSONParser&#39;,    #     &#39;rest_framework.parsers.FormParser&#39;,    #     &#39;rest_framework.parsers.MultiPartParser&#39;,    # ),    # 配置默认限流类    # &#39;DEFAULT_THROTTLE_CLASSES&#39;: (),    # 配置默认授权类    # &#39;DEFAULT_PERMISSION_CLASSES&#39;: (    #     &#39;rest_framework.permissions.IsAuthenticated&#39;,    # ),    # 配置默认认证类    # &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (    #     &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,    # ),&#125;</code></pre><h4 id="编写序列化器"><a href="#编写序列化器" class="headerlink" title="编写序列化器"></a>编写序列化器</h4><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework import serializersfrom rest_framework.serializers import ModelSerializerfrom common.models import District, HouseType, Estate, Agentclass DistrictSerializer(ModelSerializer):    class Meta:        model &#x3D; District        fields &#x3D; (&#39;distid&#39;, &#39;name&#39;)class HouseTypeSerializer(ModelSerializer):    class Meta:        model &#x3D; HouseType        fields &#x3D; &#39;__all__&#39;class AgentSerializer(ModelSerializer):    class Meta:        model &#x3D; Agent        fields &#x3D; (&#39;agentid&#39;, &#39;name&#39;, &#39;tel&#39;, &#39;servstar&#39;, &#39;certificated&#39;)class EstateSerializer(ModelSerializer):    district &#x3D; serializers.SerializerMethodField()    agents &#x3D; serializers.SerializerMethodField()    @staticmethod    def get_agents(estate):        return AgentSerializer(estate.agents, many&#x3D;True).data    @staticmethod    def get_district(estate):        return DistrictSerializer(estate.district).data    class Meta:        model &#x3D; Estate        fields &#x3D; &#39;__all__&#39;</code></pre><h4 id="方法1：使用装饰器"><a href="#方法1：使用装饰器" class="headerlink" title="方法1：使用装饰器"></a>方法1：使用装饰器</h4><pre class="language-Python" data-language="Python"><code class="language-Python">@api_view([&#39;GET&#39;])@cache_page(timeout&#x3D;None, cache&#x3D;&#39;api&#39;)def provinces(request):    queryset &#x3D; District.objects.filter(parent__isnull&#x3D;True)    serializer &#x3D; DistrictSerializer(queryset, many&#x3D;True)    return Response(serializer.data)@api_view([&#39;GET&#39;])@cache_page(timeout&#x3D;300, cache&#x3D;&#39;api&#39;)def cities(request, provid):    queryset &#x3D; District.objects.filter(parent__distid&#x3D;provid)    serializer &#x3D; DistrictSerializer(queryset, many&#x3D;True)    return Response(serializer.data)</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [    path(&#39;districts&#x2F;&#39;, views.provinces, name&#x3D;&#39;districts&#39;),    path(&#39;districts&#x2F;&lt;int:provid&gt;&#x2F;&#39;, views.cities, name&#x3D;&#39;cities&#39;),]</code></pre><blockquote><p>说明：上面使用了Django自带的视图装饰器（@cache_page）来实现对API接口返回数据的缓存。</p></blockquote><h4 id="方法2：使用APIView及其子类"><a href="#方法2：使用APIView及其子类" class="headerlink" title="方法2：使用APIView及其子类"></a>方法2：使用APIView及其子类</h4><p>更好的复用代码，不要重“复发明轮子”。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class HouseTypeApiView(CacheResponseMixin, ListAPIView):    queryset &#x3D; HouseType.objects.all()    serializer_class &#x3D; HouseTypeSerializer</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [    path(&#39;housetypes&#x2F;&#39;, views.HouseTypeApiView.as_view(), name&#x3D;&#39;housetypes&#39;),]</code></pre><blockquote><p>说明：上面使用了drf_extensions提供的CacheResponseMixin混入类实现了对接口数据的缓存。如果重写了获取数据的方法，可以使用drf_extensions提供的@cache_response来实现对接口数据的缓存，也可以用自定义的函数来生成缓存中的key。当然还有一个选择就是通过Django提供的@method_decorator装饰器，将@cache_page装饰器处理为装饰方法的装饰器，这样也能提供使用缓存服务。</p></blockquote><p><code>drf-extensions</code>配置如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 配置DRF扩展来支持缓存API接口调用结果REST_FRAMEWORK_EXTENSIONS &#x3D; &#123;    &#39;DEFAULT_CACHE_RESPONSE_TIMEOUT&#39;: 300,    &#39;DEFAULT_USE_CACHE&#39;: &#39;default&#39;,    # 配置默认缓存单个对象的key函数    &#39;DEFAULT_OBJECT_CACHE_KEY_FUNC&#39;: &#39;rest_framework_extensions.utils.default_object_cache_key_func&#39;,    # 配置默认缓存对象列表的key函数    &#39;DEFAULT_LIST_CACHE_KEY_FUNC&#39;: &#39;rest_framework_extensions.utils.default_list_cache_key_func&#39;,&#125;</code></pre><h4 id="方法3：使用ViewSet及其子类"><a href="#方法3：使用ViewSet及其子类" class="headerlink" title="方法3：使用ViewSet及其子类"></a>方法3：使用ViewSet及其子类</h4><pre class="language-Python" data-language="Python"><code class="language-Python">class HouseTypeViewSet(CacheResponseMixin, viewsets.ModelViewSet):    queryset &#x3D; HouseType.objects.all()    serializer_class &#x3D; HouseTypeSerializer    pagination_class &#x3D; None</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">router &#x3D; DefaultRouter()router.register(&#39;housetypes&#39;, views.HouseTypeViewSet)urlpatterns +&#x3D; router.urls</code></pre><p>djangorestframework提供了基于Bootstrap定制的页面来显示接口返回的JSON数据，当然也可以使用<a href="https://www.getpostman.com/">POSTMAN</a>这样的工具对API接口进行测试。</p><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><p>在这里顺便提一下跟前端相关的几个问题。</p><p>问题1：如何让浏览器能够发起DELETE&#x2F;PUT&#x2F;PATCH？</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;form method&#x3D;&quot;post&quot;&gt;        &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;delete&quot;&gt;    &lt;&#x2F;form&gt;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">if request.method &#x3D;&#x3D; &#39;POST&#39; and &#39;_method&#39; in request.POST:    request.method &#x3D; request.POST[&#39;_method&#39;].upper()</code></pre><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script&gt;    $.ajax(&#123;        &#39;url&#39;: &#39;&#x2F;api&#x2F;provinces&#39;,        &#39;type&#39;: &#39;put&#39;,        &#39;data&#39;: &#123;&#125;,        &#39;dataType&#39;: &#39;json&#39;,        &#39;success&#39;: function(json) &#123;            &#x2F;&#x2F; Web &#x3D; 标签(内容) + CSS(显示) + JS(行为)            &#x2F;&#x2F; JavaScript &#x3D; ES + BOM + DOM            &#x2F;&#x2F; DOM操作实现页面的局部刷新        &#125;,        &#39;error&#39;: function() &#123;&#125;    &#125;);    $.getJSON(&#39;&#x2F;api&#x2F;provinces&#39;, function(json) &#123;        &#x2F;&#x2F; DOM操作实现页面的局部刷新    &#125;);&lt;&#x2F;script&gt;</code></pre><p>问题2：如何解决多个JavaScript库之间某个定义（如$函数）冲突的问题？</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script src&#x3D;&quot;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;js&#x2F;abc.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    &#x2F;&#x2F; $已经被后加载的JavaScript库占用了    &#x2F;&#x2F; 但是可以直接用绑定在window对象上的jQuery去代替$    jQuery(function() &#123;        jQuery(&#39;#okBtn&#39;).on(&#39;click&#39;, function() &#123;&#125;);    &#125;);&lt;&#x2F;script&gt;</code></pre><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;script src&#x3D;&quot;js&#x2F;abc.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    &#x2F;&#x2F; 将$让出给其他的JavaScript库使用jQuery.noConflict();jQuery(function() &#123;        jQuery(&#39;#okBtn&#39;).on(&#39;click&#39;, function() &#123;&#125;);    &#125;);&lt;&#x2F;script&gt;</code></pre><p>问题3：jQuery对象与原生DOM对象之间如何转换？</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;button id&#x3D;&quot;okBtn&quot;&gt;点我&lt;&#x2F;button&gt;&lt;script src&#x3D;&quot;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    var btn &#x3D; document.getElementById(&#39;okBtn&#39;);&#x2F;&#x2F; 原生JavaScript对象(使用相对麻烦)    var $btn &#x3D; $(&#39;#okBtn&#39;);&#x2F;&#x2F; jQuery对象(拥有更多的属性和方法而且没有浏览器兼容性问题)    $btn.on(&#39;click&#39;, function() &#123;&#125;);    &#x2F;&#x2F; $(btn)可以将原生JavaScript对象转成jQuery对象    &#x2F;&#x2F; $btn.get(0)或$btn[0]可以获得原生的JavaScript对象&lt;&#x2F;script&gt;</code></pre><h4 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h4><p>如果需要过滤数据（对数据接口设置筛选条件、排序条件等），可以使用<code>django-filter</code>三方库来实现。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install django-filter</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [        &#39;django_filters&#39;,]REST_FRAMEWORK &#x3D; &#123;      &#39;DEFAULT_FILTER_BACKENDS&#39;: (        &#39;django_filters.rest_framework.DjangoFilterBackend&#39;,        &#39;rest_framework.filters.OrderingFilter&#39;,    ),    &#125;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">from django.utils.decorators import method_decoratorfrom django.views.decorators.cache import cache_pagefrom django_filters.rest_framework import DjangoFilterBackendfrom rest_framework.filters import OrderingFilterfrom rest_framework.generics import RetrieveAPIView, ListCreateAPIViewfrom api.serializers import EstateSerializerfrom common.models import Estate@method_decorator(decorator&#x3D;cache_page(timeout&#x3D;120, cache&#x3D;&#39;api&#39;, key_prefix&#x3D;&#39;estates&#39;), name&#x3D;&#39;get&#39;)class EstateView(RetrieveAPIView, ListCreateAPIView):    queryset &#x3D; Estate.objects.all().select_related(&#39;district&#39;).prefetch_related(&#39;agents&#39;)    serializer_class &#x3D; EstateSerializer    filter_backends &#x3D; (DjangoFilterBackend, OrderingFilter)    filter_fields &#x3D; (&#39;name&#39;, &#39;district&#39;)    ordering &#x3D; (&#39;-hot&#39;, )    ordering_fields &#x3D; (&#39;hot&#39;, &#39;estateid&#39;)</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">from django_filters import rest_framework as drffrom common.models import HouseInfoclass HouseInfoFilter(drf.FilterSet):    &quot;&quot;&quot;自定义房源数据过滤器&quot;&quot;&quot;    title &#x3D; drf.CharFilter(lookup_expr&#x3D;&#39;starts&#39;)    dist &#x3D; drf.NumberFilter(field_name&#x3D;&#39;district&#39;)    min_price &#x3D; drf.NumberFilter(field_name&#x3D;&#39;price&#39;, lookup_expr&#x3D;&#39;gte&#39;)    max_price &#x3D; drf.NumberFilter(field_name&#x3D;&#39;price&#39;, lookup_expr&#x3D;&#39;lte&#39;)    type &#x3D; drf.NumberFilter()    class Meta:        model &#x3D; HouseInfo        fields &#x3D; (&#39;title&#39;, &#39;district&#39;, &#39;min_price&#39;, &#39;max_price&#39;, &#39;type&#39;)</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">class HouseInfoViewSet(CacheResponseMixin, ReadOnlyModelViewSet):    queryset &#x3D; HouseInfo.objects.all() \        .select_related(&#39;type&#39;, &#39;district&#39;, &#39;estate&#39;, &#39;agent&#39;) \        .prefetch_related(&#39;tags&#39;).order_by(&#39;-pubdate&#39;)    serializer_class &#x3D; HouseInfoSerializer    filter_backends &#x3D; (DjangoFilterBackend, OrderingFilter)    filterset_class &#x3D; HouseInfoFilter    ordering &#x3D; (&#39;price&#39;,)    ordering_fields &#x3D; (&#39;price&#39;, &#39;area&#39;)</code></pre><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><p>查看DRF中APIView类的代码可以看出，DRF默认的认证方案是 <code>DEFAULT_AUTHENTICATION_CLASSES</code>，如果修改authentication_classes就可以自行定制身份认证的方案。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class APIView(View):    # The following policies may be set at either globally, or per-view.    renderer_classes &#x3D; api_settings.DEFAULT_RENDERER_CLASSES    parser_classes &#x3D; api_settings.DEFAULT_PARSER_CLASSES    authentication_classes &#x3D; api_settings.DEFAULT_AUTHENTICATION_CLASSES    throttle_classes &#x3D; api_settings.DEFAULT_THROTTLE_CLASSES    permission_classes &#x3D; api_settings.DEFAULT_PERMISSION_CLASSES    content_negotiation_class &#x3D; api_settings.DEFAULT_CONTENT_NEGOTIATION_CLASS    metadata_class &#x3D; api_settings.DEFAULT_METADATA_CLASS    versioning_class &#x3D; api_settings.DEFAULT_VERSIONING_CLASS   # 此处省略下面的代码</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">DEFAULTS &#x3D; &#123;    # Base API policies    &#39;DEFAULT_RENDERER_CLASSES&#39;: (        &#39;rest_framework.renderers.JSONRenderer&#39;,        &#39;rest_framework.renderers.BrowsableAPIRenderer&#39;,    ),    &#39;DEFAULT_PARSER_CLASSES&#39;: (        &#39;rest_framework.parsers.JSONParser&#39;,        &#39;rest_framework.parsers.FormParser&#39;,        &#39;rest_framework.parsers.MultiPartParser&#39;    ),    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (        &#39;rest_framework.authentication.SessionAuthentication&#39;,        &#39;rest_framework.authentication.BasicAuthentication&#39;    ),    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (        &#39;rest_framework.permissions.AllowAny&#39;,    ),    &#39;DEFAULT_THROTTLE_CLASSES&#39;: (),    &#39;DEFAULT_CONTENT_NEGOTIATION_CLASS&#39;: &#39;rest_framework.negotiation.DefaultContentNegotiation&#39;,    &#39;DEFAULT_METADATA_CLASS&#39;: &#39;rest_framework.metadata.SimpleMetadata&#39;,    &#39;DEFAULT_VERSIONING_CLASS&#39;: None,    # 此处省略下面的代码&#125;</code></pre><p>自定义认证类，继承<code>BaseAuthentication</code>并重写<code>authenticate(self, request)</code>方法，通过请求中的userid和token来确定用户身份。如果认证成功，该方法应返回一个二元组（用户和令牌的信息），否则产生异常。也可以重写 <code>authenticate_header(self, request)</code>方法来返回一个字符串，该字符串将用于<code>HTTP 401 Unauthorized</code>响应中的WWW-Authenticate响应头的值。如果未重写该方法，那么当未经身份验证的请求被拒绝访问时，身份验证方案将返回<code>HTTP 403 Forbidden</code>响应。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class MyAuthentication(BaseAuthentication):    &quot;&quot;&quot;自定义用户身份认证类&quot;&quot;&quot;    def authenticate(self, request):        try:            token &#x3D; request.GET[&#39;token&#39;] or request.POST[&#39;token&#39;]            user_token &#x3D; UserToken.objects.filter(token&#x3D;token).first()            if user_token:                return user_token.user, user_token            else:                raise AuthenticationFailed(&#39;请提供有效的用户身份标识&#39;)        except KeyError:            raise AuthenticationFailed(&#39;请提供有效的用户身份标识&#39;)    def authenticate_header(self, request):        pass</code></pre><p>使用自定义的认证类。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class EstateViewSet(CacheResponseMixin, ModelViewSet):    # 通过queryset指定如何获取数据（资源）    queryset &#x3D; Estate.objects.all().select_related(&#39;district&#39;).prefetch_related(&#39;agents&#39;)    # 通过serializer_class指定如何序列化数据    serializer_class &#x3D; EstateSerializer    # 指定根据哪些字段进行数据筛选    filter_fields &#x3D; (&#39;district&#39;, &#39;name&#39;)    # 指定根据哪些字段对数据进行排序    ordering_fields &#x3D; (&#39;hot&#39;, )    # 指定用于进行用户身份验证的类    authentication_classes &#x3D; (MyAuthentication, )</code></pre><blockquote><p>说明：也可以在Django配置文件中将自定义的认证类设置为默认认证方式。</p></blockquote><h4 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h4><p>权限检查总是在视图的最开始处运行，在任何其他代码被允许进行之前。最简单的权限是允许通过身份验证的用户访问，并拒绝未经身份验证的用户访问，这对应于dfr中的<code>IsAuthenticated</code>类，可以用它来取代默认的<code>AllowAny</code>类。权限策略可以在Django的DRF配置中用<code>DEFAULT_PERMISSION_CLASSES</code>全局设置。</p><pre class="language-Python" data-language="Python"><code class="language-Python">REST_FRAMEWORK &#x3D; &#123;    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (        &#39;rest_framework.permissions.IsAuthenticated&#39;,    )&#125;</code></pre><p>也可以在基于<code>APIView</code>类的视图上设置身份验证策略。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.permissions import IsAuthenticatedfrom rest_framework.views import APIViewclass ExampleView(APIView):    permission_classes &#x3D; (IsAuthenticated, )    # 此处省略其他代码</code></pre><p>或者在基于<code>@api_view</code>装饰器的视图函数上设置。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticated@api_view([&#39;GET&#39;])@permission_classes((IsAuthenticated, ))def example_view(request, format&#x3D;None):    # 此处省略其他代码</code></pre><p>自定义权限需要继承<code>BasePermission</code>并实现以下方法中的一个或两个，下面是BasePermission的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">@six.add_metaclass(BasePermissionMetaclass)class BasePermission(object):    &quot;&quot;&quot;    A base class from which all permission classes should inherit.    &quot;&quot;&quot;    def has_permission(self, request, view):        &quot;&quot;&quot;        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.        &quot;&quot;&quot;        return True    def has_object_permission(self, request, view, obj):        &quot;&quot;&quot;        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.        &quot;&quot;&quot;        return True</code></pre><p>如果请求被授予访问权限，则方法应该返回True，否则返False。下面的例子演示了阻止黑名单中的IP地址访问接口数据（这个在反爬虫的时候很有用哟）。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework import permissionsclass BlacklistPermission(permissions.BasePermission):    &quot;&quot;&quot;    Global permission check for blacklisted IPs.    &quot;&quot;&quot;    def has_permission(self, request, view):        ip_addr &#x3D; request.META[&#39;REMOTE_ADDR&#39;]        blacklisted &#x3D; Blacklist.objects.filter(ip_addr&#x3D;ip_addr).exists()        return not blacklisted</code></pre><p>如果要实现更为完整的权限验证，可以考虑RBAC或ACL。</p><ol><li><p>RBAC - 基于角色的访问控制，如下图所示。</p><p><img src="/./res/rbac-basic.png"></p><p><img src="/./res/rbac-full.png"></p></li><li><p>ACL - 访问控制列表（每个用户绑定自己的访问白名单或黑名单）。</p></li></ol><h4 id="访问限流"><a href="#访问限流" class="headerlink" title="访问限流"></a>访问限流</h4><p>可以修改dfr配置的<code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code>两个值来设置全局默认限流策略。例如：</p><pre class="language-Python" data-language="Python"><code class="language-Python">REST_FRAMEWORK &#x3D; &#123;    &#39;DEFAULT_THROTTLE_CLASSES&#39;: (        &#39;rest_framework.throttling.AnonRateThrottle&#39;,        &#39;rest_framework.throttling.UserRateThrottle&#39;    ),    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;        &#39;anon&#39;: &#39;3&#x2F;min&#39;,        &#39;user&#39;: &#39;10000&#x2F;day&#39;    &#125;&#125;</code></pre><p><code>DEFAULT_THROTTLE_RATES</code>中使用的频率描述可能包括<code>second</code>、<code>minute</code>、<code>hour</code>或<code>day</code>。</p><p>如果要为接口单独设置限流，可以在每个视图或视图集上设置限流策略，如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from rest_framework.throttling import UserRateThrottlefrom rest_framework.views import APIViewclass ExampleView(APIView):    throttle_classes &#x3D; (UserRateThrottle, )    # 此处省略下面的代码</code></pre><p>或</p><pre class="language-Python" data-language="Python"><code class="language-Python">@api_view([&#39;GET&#39;])@throttle_classes([UserRateThrottle, ])def example_view(request, format&#x3D;None):    # 此处省略下面的代码</code></pre><p>当然也可以通过继承<code>SimpleRateThrottle</code>来自定义限流策略，通常需要重写<code>allow_request</code>和<code>wait</code>方法。</p><h3 id="异步任务和计划任务"><a href="#异步任务和计划任务" class="headerlink" title="异步任务和计划任务"></a>异步任务和计划任务</h3><h4 id="Celery的应用"><a href="#Celery的应用" class="headerlink" title="Celery的应用"></a>Celery的应用</h4><p>Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。</p><p>推荐阅读：<a href="http://docs.jinkan.org/docs/celery/">《Celery官方文档中文版》</a>，上面有极为详细的配置和使用指南。</p><p><img src="/./res/celery_architecture.png"></p><p>Celery是一个本身不提供队列服务，官方推荐使用RabbitMQ或Redis来实现消息队列服务，前者是更好的选择，它对AMQP（高级消息队列协议）做出了非常好的实现。</p><ol><li><p>安装RabbitMQ。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker pull rabbitmqdocker run -d -p 5672:5672 --name myrabbit rabbitmqdocker container exec -it myrabbit &#x2F;bin&#x2F;bash</code></pre></li><li><p>创建用户、资源以及分配操作权限。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">rabbitmqctl add_user luohao 123456rabbitmqctl set_user_tags luohao administratorrabbitmqctl add_vhost vhost1rabbitmqctl set_permissions -p vhost1 luohao &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></pre></li><li><p>创建Celery实例。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 注册环境变量os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;项目名.settings&#39;)# 创建Celery实例app &#x3D; celery.Celery(    &#39;fangtx&#39;,    broker&#x3D;&#39;amqp:&#x2F;&#x2F;luohao:123456@1.2.3.4:5672&#x2F;vhost1&#39;)# 从项目的配置文件读取Celery配置信息# app.config_from_object(&#39;django.conf:settings&#39;)# 从指定的文件(例如celery_config.py)中读取Celery配置信息# app.config_from_object(&#39;celery_config&#39;)# 让Celery自动从参数指定的应用中发现异步任务&#x2F;定时任务# app.autodiscover_tasks([&#39;common&#39;, ])# 让Celery自动从所有注册的应用中发现异步任务&#x2F;定时任务app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</code></pre></li><li><p>启动Celery创建woker（消息的消费者）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">celery -A &lt;name&gt; worker -l debug &amp;</code></pre></li><li><p>执行异步任务。</p><pre class="language-Python" data-language="Python"><code class="language-Python">@app.taskdef send_email(from_user, to_user, cc_user, subject, content):    pass# 消息的生产者send_email.delay(&#39;&#39;, [], [], &#39;&#39;, &#39;&#39;)</code></pre></li><li><p>创建定时任务。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 配置定时任务（计划任务）app.conf.update(    timezone&#x3D;settings.TIME_ZONE,    enable_utc&#x3D;True,    # 定时任务（计划任务）相当于是消息的生产者    # 如果只有生产者没有消费者那么消息就会在消息队列中积压    # 将来实际部署项目的时候生产者、消费者、消息队列可能都是不同节点    beat_schedule&#x3D;&#123;        &#39;task1&#39;: &#123;            &#39;task&#39;: &#39;common.tasks.scheduled_task&#39;,            &#39;schedule&#39;: crontab(&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;),            &#39;args&#39;: (&#39;...&#39;, )        &#125;,    &#125;,)</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">@app.taskdef scheduled_task(*args, **kwargs):    pass</code></pre></li><li><p>启动Celery创建执行定时任务的beat（消息的生产者）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">celery -A &lt;name&gt; beat -l info</code></pre></li><li><p>检查消息队列状况。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">rabbitmqctl list_queues -p vhost1</code></pre></li><li><p>监控Celery - 可以通过flower来对Celery进行监控。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install flowercelery flower --broker&#x3D;amqp:&#x2F;&#x2F;luohao:123456@120.77.222.217:5672&#x2F;vhost1</code></pre></li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>问题1：如何解决JavaScript跨域获取数据的问题？（django-cors-headers）</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    &#39;corsheaders&#39;,]MIDDLEWARE &#x3D; [    &#39;corsheaders.middleware.CorsMiddleware&#39;,]CORS_ORIGIN_ALLOW_ALL &#x3D; True# 配置跨域白名单# CORS_ORIGIN_WHITELIST &#x3D; (&#39;www.abc.com&#39;, &#39;www.baidu.com&#39;)# CORS_ORIGIN_REGEX_WHITELIST &#x3D; (&#39;...&#39;, )# CORS_ALLOW_CREDENTIALS &#x3D; True# CORS_ALLOW_METHODS &#x3D; (&#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;DELETE&#39;)</code></pre><p>问题2：网站图片（水印、剪裁）和视频（截图、水印、转码）是如何处理的？（云存储、FFmpeg）</p><p>问题3：网站如何架设（静态资源）文件系统？（FastDFS、云存储、CDN）</p><h3 id="安全保护"><a href="#安全保护" class="headerlink" title="安全保护"></a>安全保护</h3><p>问题1：什么是跨站脚本攻击（XSS)，如何防范？（对提交的内容进行消毒）</p><p>问题2：什么是跨站身份伪造（CSRF），如何防范？（使用随机令牌）</p><p>问题3：什么是SQL注射攻击（SQL Injection），如何防范？（不拼接SQL语句，避免使用单引号）</p><p>问题4：什么是点击劫持攻击（Click-hacking），如何防范？（不允许<code>&lt;iframe&gt;</code>加载非同源站点内容）</p><h4 id="Django提供的安全措施"><a href="#Django提供的安全措施" class="headerlink" title="Django提供的安全措施"></a>Django提供的安全措施</h4><p>签名数据的API</p>   <pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.core.signing import Signer&gt;&gt;&gt; signer &#x3D; Signer()&gt;&gt;&gt; value &#x3D; signer.sign(&#39;hello, world!&#39;)&gt;&gt;&gt; value&#39;hello, world!:BYMlgvWMTSPLxC-DqxByleiMVXU&#39;&gt;&gt;&gt; signer.unsign(value)&#39;hello, world!&#39;&gt;&gt;&gt;&gt;&gt;&gt; signer &#x3D; Signer(salt&#x3D;&#39;yoursalt&#39;)&gt;&gt;&gt; signer.sign(&#39;hello, world!&#39;)&#39;hello, world!:9vEvG6EA05hjMDB5MtUr33nRA_M&#39;&gt;&gt;&gt;&gt;&gt;&gt; from django.core.signing import TimestampSigner&gt;&gt;&gt; signer &#x3D; TimestampSigner()&gt;&gt;&gt; value &#x3D; signer.sign(&#39;hello, world!&#39;)&gt;&gt;&gt; value&#39;hello, world!:1fpmcQ:STwj464IFE6eUB-_-hyUVF3d2So&#39;&gt;&gt;&gt; signer.unsign(value, max_age&#x3D;5)Traceback (most recent call last):    File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;    File &quot;&#x2F;Users&#x2F;Hao&#x2F;Desktop&#x2F;fang.com&#x2F;venv&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;django&#x2F;core&#x2F;signing.py&quot;, line 198, in unsign    &#39;Signature age %s &gt; %s seconds&#39; % (age, max_age))    django.core.signing.SignatureExpired: Signature age 21.020604848861694 &gt; 5 seconds&gt;&gt;&gt; signer.unsign(value, max_age&#x3D;120)&#39;hello, world!&#39;</code></pre><p>CSRF令牌和小工具</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&#123;% csrf_token %&#125;</code></pre><ul><li>@csrf_exempt：免除令牌 </li><li>@csrf_protect：提供令牌保护</li><li>@require_csrf_token：提供令牌保护</li><li>@ensure_csrf_cookie：强制视图发送带令牌的cookie</li></ul><blockquote><p>说明：可以在Chrome浏览器中安装EditThisCookie插件来方便的查看Cookie。</p></blockquote><h4 id="用户敏感信息的保护"><a href="#用户敏感信息的保护" class="headerlink" title="用户敏感信息的保护"></a>用户敏感信息的保护</h4><ol><li><p>哈希摘要（签名）</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; import hashlib&gt;&gt;&gt; &gt;&gt;&gt; md5_hasher &#x3D; hashlib.md5()&gt;&gt;&gt; md5_hasher.update(&#39;hello, world!&#39;.encode())&gt;&gt;&gt; md5_hasher.hexdigest()&#39;3adbbad1791fbae3ec908894c4963870&#39;&gt;&gt;&gt;&gt;&gt;&gt; sha1_hasher &#x3D; hashlib.sha1()&gt;&gt;&gt; sha1_hasher.update(&#39;hello, world!&#39;.encode())&gt;&gt;&gt; sha1_hasher.update(&#39;goodbye, world!&#39;.encode())&gt;&gt;&gt; sha1_hasher.hexdigest()&#39;1f09d30c707d53f3d16c530dd73d70a6ce7596a9&#39;</code></pre></li><li><p>加密和解密（对称加密和非对称加密）</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install pycrypto</code></pre><p>AES对称加密：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from hashlib import md5&gt;&gt;&gt;&gt;&gt;&gt; from Crypto.Cipher import AES&gt;&gt;&gt; from Crypto import Random&gt;&gt;&gt;&gt;&gt;&gt; key &#x3D; md5(b&#39;mysecret&#39;).hexdigest()&gt;&gt;&gt; iv &#x3D; Random.new().read(AES.block_size)&gt;&gt;&gt; str1 &#x3D; &#39;我爱你们！&#39;&gt;&gt;&gt; str2 &#x3D; AES.new(key, AES.MODE_CFB, iv).encrypt(str1)b&#39;p\x96o\x85\x0bq\xc4-Y\xc4\xbcp\n)&amp;&#39;&gt;&gt;&gt; str3 &#x3D; AES.new(key, AES.MODE_CFB, iv).decrypt(str2).decode()&#39;我爱你们！&#39;</code></pre><p>RSA非对称加密：</p><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from Crypto.PublicKey import RSA&gt;&gt;&gt; # 生成密钥对&gt;&gt;&gt; key_pair &#x3D; RSA.generate(2048)&gt;&gt;&gt; # 导入公钥&gt;&gt;&gt; pub_key &#x3D; RSA.importKey(key_pair.publickey().exportKey())&gt;&gt;&gt; # 导入私钥&gt;&gt;&gt; pri_key &#x3D; RSA.importKey(key_pair.exportKey())&gt;&gt;&gt; # 明文&gt;&gt;&gt; message1 &#x3D; &#39;hello, world!&#39;.encode()&gt;&gt;&gt; # 加密数据&gt;&gt;&gt; message2 &#x3D; pub_key.encrypt(message1, None)(b&#39;\x03\x86t\xa0\x00\xc4\xea\xd2\x80\xed\xa7YN7\x07\xff\x88\xaa\x1eW\x0cmH0\x06\xa7\&#39;\xbc&lt;w@q\x8b\xaf\xf7:g\x92&#123;&#x3D;\xe2E\xa5@\x1as2\xdd\xcb\x8e[\x98\x85\xdf,X\xecj.U\xd6\xa7W&amp;u\&#39;Uz&quot;\x0f\x0e\\&lt;\xa4\xfavC\x93\xa7\xbcO&quot;\xb9a\x06]&lt;.\xc1\r1&#125;*\xdf\xccdqXML\x93\x1b\xe9\xda\xdf\xab|\xf8\x18\xe4\x99\xbb\x7f\x18&#125;\xd9\x9a\x1e*J\\\xca\x1a\xd1\x85\xf7t\x81\xd95&#123;\x19\xc9\x81\xb6^&#125;\x9c5\xca\xfe\xcf\xc8\xd8M\x9a\x8c-\xf1t\xee\xf9\x12\x90\x01\xca\x92~\x00c5qg5g\x95&amp;\x10\xb1\x0b\x1fo\x95\xf2\xbc\x8d\xf3f&quot;@\xc5\x188\x0bX\x9cfo\xea\x97\x05@\xe5\xb2\xda\xb8\x97a\xa5w\xa8\x01\x9a\xa5N\xc4\x81\x8d\x0f&lt;\x96iU\xd3\x95\xacJZs\xab_ #\xee\xf9\x0f\xf2\x12\xdb\xfc\xf8g\x18v\x02k+\xda\x16Si\xbf\xbb\xec\xf7w\x90\xde\xae\x97\t\xed&#123;&#125;5\xd0&#39;,)&gt;&gt;&gt; # 解密数据&gt;&gt;&gt; message3 &#x3D; pri_key.decrypt(message2)&#39;hello, world!&#39;</code></pre></li></ol><h4 id="安全相关建议"><a href="#安全相关建议" class="headerlink" title="安全相关建议"></a>安全相关建议</h4><ol><li>虽然 Django 自带了稳固的安全保护措施，但是依然要采用正确的方式部署应用程序，利用 Web 服务器、操作系统和其他组件提供的安全保护措施。</li><li>记得把 Python 代码放在 Web 服务器的文档根目录之外，避免代码意外泄露。</li><li>谨慎处理用户上传的文件。 </li><li>Django本身没有对请求次数加以限制（包括验证用户身份的请求），为了防止暴力攻击和破解，可以考虑使用具有一次消费性的验证码或对这类请求的次数进行限制。  </li><li>将缓存系统、数据库服务器以及重要的资源服务器都放在第二级防火墙之后（不要放在DMZ）。</li></ol><h3 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h3><p>测试是发现和标记缺陷的过程。所谓的缺陷是指实际结果和期望结果之间的任何差别。有的地方，测试也被认为是执行以找出错误为目的的程序的过程。 测试是为了让产品达到以下目标： </p><ol><li>满足需求用户满意</li><li>改善产品的市场占有率</li><li>树立对产品的信任</li><li>减少开发和维护的成本</li></ol><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><p>如果一个软件单元的行为方式与它的开发规范完全一样，那么该软件单元就通过了它的功能测试。</p><ul><li>白盒测试：开发人员自己实现，最基本的形式是单元测试，还有集成测试和系统测试。</li><li>黑盒测试：由开发团队之外的人执行，对测试代码没有可见性，将被测系统视为黑盒子。通常由测试人员或QA工程师来执行，Web应用可以通过Selenium这样的测试框架自动化实施。</li></ul><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><p>软件在高工作负载下对其响应性和健壮性展开的测试。</p><ul><li><p>负载测试：在特定负载下执行的测试。</p></li><li><p>压力测试：突发条件或极限条件下的性能测试。</p></li></ul><h4 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h4><p>系统的敏感数据都是经过认证和授权之后才能访问。</p><h4 id="其他测试"><a href="#其他测试" class="headerlink" title="其他测试"></a>其他测试</h4><p>易用性测试 &#x2F; 安装测试 &#x2F; 可访问性测试</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>测试函数和对象的方法（程序中最小最基本的单元）。通过对实际输出和预期输出的比对以及各种的断言条件来判定被测单元是否满足设计需求。</p><ul><li>测试用例</li><li>测试固件 - 每次测试时都要使用的东西。</li><li>测试套件（测试集）- 组合了多个测试用例而构成的集合。</li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">class UtilTest(unittest.TestCase):    def setUp(self):        self.pattern &#x3D; re.compile(r&#39;\d&#123;6&#125;&#39;)    def test_gen_mobile_code(self):        for _ in range(100):            self.assertIsNotNone(self.pattern.match(gen_mobile_code()))    def test_to_md5_hex(self):        md5_dict &#x3D; &#123;            &#39;123456&#39;: &#39;e10adc3949ba59abbe56e057f20f883e&#39;,            &#39;123123123&#39;: &#39;f5bb0c8de146c67b44babbf4e6584cc0&#39;,            &#39;1qaz2wsx&#39;: &#39;1c63129ae9db9c60c3e8aa94d3e00495&#39;,        &#125;        for key, value in md5_dict.items():            self.assertEqual(value, to_md5_hex(key))</code></pre><p><code>TestCase</code>的断言方法：</p><ul><li>assertEqual &#x2F; assertNotEqual</li><li>assertTrue &#x2F; assertFalse &#x2F; assertIsNot</li><li>assertRaise &#x2F; assertRaiseRegexp</li><li>assertAlmostEqual &#x2F; assertNotAlmostEqual</li><li>assertGreater &#x2F; assertGreaterEqual &#x2F; assertLess &#x2F; assertLessEqual</li><li>assertRegexpMatches &#x2F; assertNotRegexpMatches</li><li>assertListEqual &#x2F; assertSetEqual &#x2F; assertTupleEqual &#x2F; assertDictEqual</li></ul><p>可以使用nose2或pytest来辅助执行单元测试，同时通过cov-core或pytest-cov可以对测试覆度进行评估。覆盖率由百分比表示。比如测试代码执行过了程序的每一行，那么覆盖率就是100%。这种时候，几乎不会出现新程序上线后突然无法运行的尴尬情况。覆盖率不关心代码内容究竟是什么，覆盖率是用来检查“测试代码不足、测试存在疏漏”的一个指标，“测试内容是否妥当”并不归它管。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install nose2 pytest cov-core pytest-cov</code></pre><p>可以使用Selenium来实现Web应用的自动化测试，它还可以用于屏幕抓取与浏览器行为模拟，通过爬虫抓取页面上的动态数据也可以使用它。Selenium其实包括三个部分：</p><ul><li><p>Selenium IDE：嵌入到浏览器的插件，可以录制和回放脚本。</p><p><img src="/./res/selenium_ide.png"></p></li><li><p>Selenium WebDriver：支持多种语言可以操控浏览器的API。</p></li><li><p>Selenium Standalone Server：Selenium Grid、远程控制、分布式部署。</p></li></ul><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install selenium</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">from selenium import webdriverimport pytestimport contextlib@pytest.fixture(scope&#x3D;&#39;session&#39;)def chrome():    # 设置使用无头浏览器(不会打开浏览器窗口)    options &#x3D; webdriver.ChromeOptions()    options.add_argument(&#39;--headless&#39;)    driver &#x3D; webdriver.Chrome(options&#x3D;options)    yield driver    driver.quit()def test_baidu_index(chrome):    chrome.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#39;)    assert chrome.title &#x3D;&#x3D; &#39;百度一下，你就知道&#39;</code></pre><p>除了Selenium之外，还有一个Web自动化测试工具名叫Robot Framework。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">nose2 -v -Cpytest --cov</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">Ran 7 tests in 0.002sOKName                       Stmts   Miss  Cover----------------------------------------------example01.py                  15      0   100%example02.py                  49     49     0%example03.py                  22     22     0%example04.py                  61     61     0%example05.py                  29     29     0%example06.py                  39     39     0%example07.py                  19     19     0%example08.py                  27     27     0%example09.py                  18     18     0%example10.py                  19     19     0%example11.py                  22     22     0%example12.py                  28     28     0%example13.py                  28     28     0%test_ddt_example.py           18      0   100%test_pytest_example.py        11      6    45%test_unittest_example.py      22      0   100%----------------------------------------------TOTAL                        427    367    14%</code></pre><p>在测试过程中需要孤立各种外部依赖（数据库、外部接口调用、时间依赖），具体又包括两个方面：</p><ol><li><p>数据源：数据本地化 &#x2F; 置于内存中 &#x2F; 测试之后回滚</p></li><li><p>资源虚拟化：存根&#x2F;桩（stub）、仿制&#x2F;模拟（mock）、伪造（fake）</p><ul><li>stub：测试期间为提供响应的函数生成的替代品</li><li>mock：代替实际对象（以及该对象的API）的对象</li><li>fake：没有达到生产级别的轻量级对象</li></ul></li></ol><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>集成多个函数或方法的输入输出的测试，测试时需要将多个测试对象组合在一起。</p><ul><li>测试组件互操作性 &#x2F; 需求变更测试 &#x2F; 外部依赖和API &#x2F; 调试硬件问题 &#x2F; 在代码路径中发现异常</li></ul><h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><p>对需求的测试，测试成品是否最终满足了所有需求，在客户验收项目时进行。</p><h4 id="数据驱动测试"><a href="#数据驱动测试" class="headerlink" title="数据驱动测试"></a>数据驱动测试</h4><p>使用外部数据源实现对输入值与期望值的参数化，避免在测试中使用硬编码的数据。</p><p>被测函数：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def add(x, y):    return x + y</code></pre><p>data.csv文件：</p><pre class="language-none"><code class="language-none">3,1,20,1,-1100,50,50100,1,9915,7,8</code></pre><p>测试代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import csvfrom unittest import TestCasefrom ddt import ddt, data, unpack@ddtclass TestAdd(TestCase):    def load_data_from_csv(filename):        data_items &#x3D; []        with open(filename, &#39;r&#39;, newline&#x3D;&#39;&#39;) as fs:            reader &#x3D; csv.reader(fs)            for row in reader:                data_items.append(list(map(int, row)))        return data_items    @data(*load_data_from_csv(&#39;data.csv&#39;))    @unpack    def test_add(self, result, param1, param2):        self.assertEqual(result, add(param1, param2))</code></pre><h4 id="Django中的测试"><a href="#Django中的测试" class="headerlink" title="Django中的测试"></a>Django中的测试</h4><ol><li>测试Django视图 - Django中提供的<code>TestCase</code>扩展了<code>unittest</code>中的<code>TestCase</code>，绑定了一个名为<code>client</code>的属性，可以用来模拟浏览器发出的GET、POST、DELETE、PUT等请求。</li></ol><pre class="language-Python" data-language="Python"><code class="language-Python">class SomeViewTest(TestCase):    def test_example_view(self):        resp &#x3D; self.client.get(reverse(&#39;index&#39;))        self.assertEqual(200, resp.status_code)        self.assertEqual(5, resp.context[&#39;num&#39;])</code></pre><ol start="2"><li>运行测试 - 配置测试数据库。</li></ol><pre class="language-Python" data-language="Python"><code class="language-Python">DATABASES &#x3D; &#123;    &#39;default&#39;: &#123;        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;HOST&#39;: &#39;localhost&#39;,        &#39;PORT&#39;: 3306,        &#39;NAME&#39;: &#39;DbName&#39;,        &#39;USER&#39;: os.environ[&#39;DB_USER&#39;],        &#39;PASSWORD&#39;: os.environ[&#39;DB_PASS&#39;],        &#39;TEST&#39;: &#123;            &#39;NAME&#39;: &#39;DbName_for_testing&#39;,            &#39;CHARSET&#39;: &#39;utf8&#39;,        &#125;,    &#125;&#125;</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py testpython manage.py test commonpython manage.py test common.tests.UtilsTestpython manage.py test common.tests.UtilsTest.test_to_md5_hex</code></pre><ol start="3"><li>评估测试覆盖度</li></ol><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install coveragecoverage run --source&#x3D;&lt;path1&gt; --omit&#x3D;&lt;path2&gt; manage.py test commoncoverage reportName                            Stmts   Miss  Cover---------------------------------------------------common&#x2F;__init__.py                  0      0   100%common&#x2F;admin.py                     1      0   100%common&#x2F;apps.py                      3      3     0%common&#x2F;forms.py                    16     16     0%common&#x2F;helper.py                   32     32     0%common&#x2F;middlewares.py              19     19     0%common&#x2F;migrations&#x2F;__init__.py       0      0   100%common&#x2F;models.py                   71      2    97%common&#x2F;serializers.py              14     14     0%common&#x2F;tests.py                    14      8    43%common&#x2F;urls_api.py                  3      3     0%common&#x2F;urls_user.py                 3      3     0%common&#x2F;utils.py                    22      7    68%common&#x2F;views.py                    69     69     0%---------------------------------------------------TOTAL                             267    176    34%</code></pre><h4 id="性能测试-1"><a href="#性能测试-1" class="headerlink" title="性能测试"></a>性能测试</h4><p>问题1：性能测试的指标有哪些？</p><ol><li><p>ab（ Apache Benchmark） &#x2F; webbench &#x2F; httpperf</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum -y install httpdab -c 10 -n 1000 http:&#x2F;&#x2F;www.baidu.com&#x2F;...Benchmarking www.baidu.com (be patient).....doneServer Software:        BWS&#x2F;1.1Server Hostname:        www.baidu.comServer Port:            80Document Path:          &#x2F;Document Length:        118005 bytesConcurrency Level:      10Time taken for tests:   0.397 secondsComplete requests:      100Failed requests:        98   (Connect: 0, Receive: 0, Length: 98, Exceptions: 0)Write errors:           0Total transferred:      11918306 bytesHTML transferred:       11823480 bytesRequests per second:    252.05 [#&#x2F;sec] (mean)Time per request:       39.675 [ms] (mean)Time per request:       3.967 [ms] (mean, across all concurrent requests)Transfer rate:          29335.93 [Kbytes&#x2F;sec] receivedConnection Times (ms)              min  mean[+&#x2F;-sd] median   maxConnect:        6    7   0.6      7       9Processing:    20   27  22.7     24     250Waiting:        8   11  21.7      9     226Total:         26   34  22.8     32     258Percentage of the requests served within a certain time (ms)  50%     32  66%     34  75%     34  80%     34  90%     36  95%     39  98%     51  99%    258 100%    258 (longest request)</code></pre></li><li><p>mysqlslap</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">mysqlslap -a -c 100 -h 1.2.3.4 -u root -pmysqlslap -a -c 100 --number-of-queries&#x3D;1000 --auto-generate-sql-load-type&#x3D;read -h &lt;负载均衡服务器IP地址&gt; -u root -pmysqlslap -a --concurrency&#x3D;50,100 --number-of-queries&#x3D;1000 --debug-info --auto-generate-sql-load-type&#x3D;mixed -h 1.2.3.4 -u root -p</code></pre></li><li><p>sysbench</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">sysbench --test&#x3D;threads --num-threads&#x3D;64 --thread-yields&#x3D;100 --thread-locks&#x3D;2 runsysbench --test&#x3D;memory --num-threads&#x3D;512 --memory-block-size&#x3D;256M --memory-total-size&#x3D;32G run</code></pre></li><li><p>JMeter</p><p>请查看<a href="https://www.ibm.com/developerworks/cn/java/l-jmeter/index.html">《使用JMeter进行性能测试》</a>。</p></li><li><p>LoadRunner &#x2F; QTP</p></li></ol><h3 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h3><p>可以使用django-debug-toolbar来辅助项目调试。</p><ol><li><p>安装</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install django-debug-toolbar</code></pre></li><li><p>配置 - 修改settings.py。</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    &#39;debug_toolbar&#39;,]MIDDLEWARE &#x3D; [    &#39;debug_toolbar.middleware.DebugToolbarMiddleware&#39;,]DEBUG_TOOLBAR_CONFIG &#x3D; &#123;    # 引入jQuery库    &#39;JQUERY_URL&#39;: &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&#39;,    # 工具栏是否折叠    &#39;SHOW_COLLAPSED&#39;: True,    # 是否显示工具栏    &#39;SHOW_TOOLBAR_CALLBACK&#39;: lambda x: True,&#125;</code></pre></li><li><p>配置 - 修改urls.py。</p><pre class="language-Python" data-language="Python"><code class="language-Python">if settings.DEBUG:    import debug_toolbar    urlpatterns.insert(0, path(&#39;__debug__&#x2F;&#39;, include(debug_toolbar.urls)))</code></pre></li><li><p>使用 - 在页面右侧可以看到一个调试工具栏，上面包括了执行时间、项目设置、请求头、SQL、静态资源、模板、缓存、信号等调试信息，查看起来非常的方便。</p></li><li><p>项目上线之前，请记住<strong>去掉django-debug-toolbar相关的所有配置</strong>。</p></li></ol><h3 id="部署相关"><a href="#部署相关" class="headerlink" title="部署相关"></a>部署相关</h3><p>请参考<a href="98.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md">《项目部署上线和性能调优》</a>。</p><h3 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h3><h4 id="网站优化两大定律："><a href="#网站优化两大定律：" class="headerlink" title="网站优化两大定律："></a>网站优化两大定律：</h4><ol><li><p>尽可能的使用缓存 - 牺牲空间换取时间（普适策略）。</p></li><li><p>能推迟的都推迟 - 使用消息队列将并行任务串行来缓解服务器压力。</p><ul><li>服务器CPU利用率出现瞬时峰值 - 削峰（CPU利用率平缓的增长）</li><li>上下游节点解耦合（下订单和受理订单的系统通常是分离的）</li></ul></li></ol><h4 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h4><ol><li><p>配置缓存来缓解数据库的压力，并有合理的机制应对<a href="https://www.cnblogs.com/zhangweizhong/p/6258797.html">缓存穿透和缓存雪崩</a>。</p></li><li><p>开启<a href="https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader">模板缓存</a>来加速模板的渲染。</p><pre class="language-Python" data-language="Python"><code class="language-Python">TEMPLATES &#x3D; [    &#123;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;), ],        # &#39;APP_DIRS&#39;: True,        &#39;OPTIONS&#39;: &#123;            &#39;context_processors&#39;: [                &#39;django.template.context_processors.debug&#39;,                &#39;django.template.context_processors.request&#39;,                &#39;django.contrib.auth.context_processors.auth&#39;,                &#39;django.contrib.messages.context_processors.messages&#39;,            ],            &#39;loaders&#39;: [(                &#39;django.template.loaders.cached.Loader&#39;, [                    &#39;django.template.loaders.filesystem.Loader&#39;,                    &#39;django.template.loaders.app_directories.Loader&#39;,                ], ),            ],        &#125;,    &#125;,]</code></pre></li><li><p>用惰性求值、迭代器、<code>defer()</code>、<code>only()</code>等缓解内存压力。</p></li><li><p>用<code>select_related()</code>和<code>prefetch_related()</code>执行预加载避免“1+N查询问题”。</p></li></ol><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ol><li><p>用ID生成器代替自增主键（性能更好、适用于分布式环境）。</p><ul><li><p>自定义ID生成器 - snowflake</p></li><li><p>UUID</p></li></ul><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; my_uuid &#x3D; uuid.uuid1()&gt;&gt;&gt; my_uuidUUID(&#39;63f859d0-a03a-11e8-b0ad-60f81da8d840&#39;)&gt;&gt;&gt; my_uuid.hex&#39;63f859d0a03a11e8b0ad60f81da8d840&#39;</code></pre></li><li><p>避免不必要的外键列上的约束（除非必须保证参照完整性），更不要使用触发器之类的机制。</p></li><li><p>使用索引来优化查询性能（索引放在要用于查询的字段上）。InnoDB用的是BTREE索引，使用&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、BETWEEN或者LIKE ‘pattern’（pattern不以通配符开头）时都可以用到索引。因为建立索引需要额外的磁盘空间，而主键上是有默认的索引，所以主键要尽可能选择较短的数据类型来减少磁盘占用，提高索引的缓存效果。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">create index idx_goods_name on tb_goods (gname(10));</code></pre><pre class="language-SQL" data-language="SQL"><code class="language-SQL">-- 无法使用索引select * from tb_goods where gname like &#39;%iPhone%&#39;;-- 可以使用索引select * from tb_goods where gname like &#39;iPhone%&#39;;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python"># 无法使用索引Goods.objects.filter(name_icontains&#x3D;&#39;iPhone&#39;)# 可以使用索引Goods.objects.filter(name__istartswith&#x3D;&#39;iPhone&#39;);</code></pre></li><li><p>使用存储过程（存储在服务器端编译过的一组SQL语句）。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">drop procedure if exists sp_avg_sal_by_dept;create procedure sp_avg_sal_by_dept(deptno integer, out avg_sal float)begin     select avg(sal) into avg_sal from TbEmp where dno&#x3D;deptno;end;call sp_avg_sal_by_dept(10, @a);select @a;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; from django.db import connection&gt;&gt;&gt; cursor &#x3D; connection.cursor()&gt;&gt;&gt; cursor.callproc(&#39;sp_avg_sal_by_dept&#39;, (10, 0))&gt;&gt;&gt; cursor.execute(&#39;select @_sp_avg_sal_by_dept_1&#39;)&gt;&gt;&gt; cursor.fetchone()(2675.0,)</code></pre></li><li><p>使用数据分区。通过分区可以存储更多的数据、优化查询更大的吞吐量、可以快速删除过期的数据。关于这个知识点可以看看MySQL的<a href="https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html">官方文档</a>。</p><ul><li>RANGE分区：基于连续区间范围，把数据分配到不同的分区。</li><li>LIST分区：基于枚举值的范围，把数据分配到不同的分区。</li><li>HASH分区 &#x2F; KEY分区：基于分区个数，把数据分配到不同的分区。</li></ul><pre class="language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE tb_emp (    eno INT NOT NULL,    ename VARCHAR(20) NOT NULL,    job VARCHAR(10) NOT NULL,    hiredate DATE NOT NULL,    dno INT NOT NULL)PARTITION BY HASH(dno)PARTITIONS 4;</code></pre><pre class="language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE tb_emp (    eno INT NOT NULL,    ename VARCHAR(20) NOT NULL,    job VARCHAR(10) NOT NULL,    hiredate DATE NOT NULL,    dno INT NOT NULL)PARTITION BY RANGE( YEAR(hiredate) ) (    PARTITION p0 VALUES LESS THAN (1960),    PARTITION p1 VALUES LESS THAN (1970),    PARTITION p2 VALUES LESS THAN (1980),    PARTITION p3 VALUES LESS THAN (1990),    PARTITION p4 VALUES LESS THAN MAXVALUE);</code></pre></li><li><p>使用<code>explain</code>来分析查询性能 - 执行计划。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">explain select * from ...;</code></pre><p><code>explain</code>结果解析：</p><ul><li>select_type：表示select操作的类型，常见的值有SIMPLE（简单查询，没有使用子查询或者表连接查询）、PRIMARY（主查询，外层的查询）、UNION（并集操作中的第二个或者后面的查询）、SUBQUERY（子查询中的第一个SELECT）等。</li><li>table：输出结果的表。</li><li>type：MySQL在表中找到所需行的方式，也称为访问类型，常见的值有：<ul><li>ALL：全表扫描（遍历全表找到匹配的行）</li><li>index：索引全扫描（遍历整个索引）</li><li>range：索引范围扫描</li><li>ref：非唯一索引扫描或唯一索引的前缀扫描</li><li>eq_ref：唯一索引扫描</li><li>const &#x2F; system：表中最多有一行匹配</li><li>NULL：不用访问表或者索引</li></ul></li><li>possible_keys：查询时可能用到的索引。</li><li>key：实际使用的索引。</li><li>key_len：使用到索引字段的长度。</li><li>rows：扫描行的数量。</li><li>Extra：额外的信息（执行情况的说明或描述）。</li></ul><blockquote><p>说明：关于MySQL更多的知识尤其是性能调优和运维方面的内容，推荐大家阅读网易出品的《深入浅出MySQL（第2版）》，网易出品必属精品。</p></blockquote></li><li><p>使用慢查询日志来发现性能低下的查询。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; show variables like &#39;slow_query%&#39;;+---------------------------+----------------------------------+| Variable_name             | Value                            |+---------------------------+----------------------------------+| slow_query_log            | OFF                              || slow_query_log_file       | &#x2F;mysql&#x2F;data&#x2F;localhost-slow.log   |+---------------------------+----------------------------------+mysql&gt; show variables like &#39;long_query_time&#39;;+-----------------+-----------+| Variable_name   | Value     |+-----------------+-----------+| long_query_time | 10.000000 |+-----------------+-----------+</code></pre><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; set global slow_query_log&#x3D;&#39;ON&#39;; mysql&gt; set global long_query_time&#x3D;1;</code></pre><pre class="language-INI" data-language="INI"><code class="language-INI">[mysqld]slow_query_log&#x3D;ONslow_query_log_file&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;slow.loglong_query_time&#x3D;1</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>96.软件测试和自动化测试</title>
      <link href="/2024/07/01/96.ruan-jian-ce-shi-he-zi-dong-hua-ce-shi/"/>
      <url>/2024/07/01/96.ruan-jian-ce-shi-he-zi-dong-hua-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="软件测试和自动化测试"><a href="#软件测试和自动化测试" class="headerlink" title="软件测试和自动化测试"></a>软件测试和自动化测试</h2><h3 id="软件测试概述"><a href="#软件测试概述" class="headerlink" title="软件测试概述"></a>软件测试概述</h3><p>软件测试是一种用来促进鉴定软件的正确性、完整性、安全性和品质的过程，也就是在规定的条件下对程序进行操作以发现程序中的错误，衡量软件的品质并对其是否能满足设计要求进行评估的过程。</p><h4 id="测试的方法"><a href="#测试的方法" class="headerlink" title="测试的方法"></a>测试的方法</h4><p>黑盒测试：测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。此测试方法可适合大部分的软件测试，例如集成测试和系统测试。</p><p>白盒测试：测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑箱测试）。在白箱测试时，以编程语言的角度来设计测试案例。测试者输入数据验证数据流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。</p><p>由于时间和成本的约束，软件测试中一个最为关键的问题就是：“<strong>在所有可能的测试用例中，哪个子集能发现最多的错误？</strong>”。所以在设计测试用例时，白盒测试看重程序逻辑覆盖的程度（语句覆盖、条件覆盖、分支覆盖），黑盒测试可以使用等价类划分、边界值分析、因果图分析、错误猜测等方法来设计测试用例。</p><h4 id="测试的种类（阶段）"><a href="#测试的种类（阶段）" class="headerlink" title="测试的种类（阶段）"></a>测试的种类（阶段）</h4><p>单元测试：对软件组成单元进行测试，其目的是检验软件基本组成单位的正确性，测试的对象是软件设计的最小单位 - 函数。</p><p>集成测试：将程序模块采用适当的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测的测试工作。其主要目的是检查软件单位之间的接口是否正确，集成测试的对象是已经经过单元测试的模块。</p><p>系统测试：系统测试主要包括功能测试、界面测试、可靠性测试、易用性测试、性能测试。 </p><p>回归测试：为了检测代码修改而引入的错误所进行的测试活动。回归测试是软件维护阶段的重要工作，有研究表明，回归测试带来的耗费占软件生命周期的1&#x2F;3总费用以上。</p><h4 id="测试驱动开发（敏捷测试）"><a href="#测试驱动开发（敏捷测试）" class="headerlink" title="测试驱动开发（敏捷测试）"></a>测试驱动开发（敏捷测试）</h4><p>测试驱动开发包括以下三个步骤：</p><ol><li>为未实现的新功能或者改进编写自动化测试。</li><li>提供通过所有定义的测试的最小代码量。</li><li>重构代码以满足所需的质量标准。</li></ol><p>测试驱动开发的好处在于可以有效的防止软件回归以及提供更有质量的代码。还有就是验收测试应该由客户来进行，客户通过对使用场景来设计验收测试，对应用程序是否满足他们的要求进行客观、公正的确认。能够通过单元测试、甚至是系统测试的功能未必能够通过客户的验收测试。</p><h4 id="互联网应用和移动应用的测试"><a href="#互联网应用和移动应用的测试" class="headerlink" title="互联网应用和移动应用的测试"></a>互联网应用和移动应用的测试</h4><p>互联网应用的测试策略：</p><ol><li>表示层测试（内容测试、站点结构测试、用户环境（浏览器、操作系统等））</li><li>业务层测试（性能、数据验证、事务、外部服务）</li><li>持久层测试（响应时间、数据完整性、容错性）</li></ol><p>移动应用的测试策略：</p><ol><li>真机测试</li><li>基于模拟器的测试</li></ol><h3 id="单元（模块）测试"><a href="#单元（模块）测试" class="headerlink" title="单元（模块）测试"></a>单元（模块）测试</h3><p>Python的标准库里有为编写单元测试而准备的unittest模块，执行测试时建议使用<a href="https://docs.pytest.org/en/latest/">pytest</a>或nose2。pytest是一款能够自动搜索并执行测试的测试执行工具，并且会输出详细的错误报告。关于单元测试可以看看<a href="https://blog.csdn.net/huilan_same/article/details/52944782">《Python必会的单元测试框架 - unittest》</a>。</p><p>可以安装<a href="https://pypi.org/project/testfixtures/">testfixtures</a>库来辅助单元测试，它整合了多种典型配置器，提供了生成目录、更改系统日期、生成mock对象的功能模块，这些模块能够帮助我们将单元测试与单元测试所依赖的环境分离开。<a href="https://pypi.org/project/mock/">mock</a> 是将测试对象所依赖的对象替换为虚拟对象的库，在测试的时候，我们可以为虚拟对象指定其在被调用时的返回值以及是否发生异常等。</p><p>tox能便捷地为我们准备好执行测试所需的环境。tox会在多个virtualenv环境中搭建测试 环境，然后在这些环境中执行测试并显示结果。它能够把测试工具的选项及环境变量等内容统 一起来，所以我们只需执行tox命令即能轻松完成所需的测试。 </p><h3 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h3><h4 id="UI自动化测试"><a href="#UI自动化测试" class="headerlink" title="UI自动化测试"></a>UI自动化测试</h4><h5 id="桌面端-PyAutoGui"><a href="#桌面端-PyAutoGui" class="headerlink" title="桌面端 - PyAutoGui"></a>桌面端 - <a href="https://pyautogui.readthedocs.io/en/latest/">PyAutoGui</a></h5><h5 id="移动端-Appnium"><a href="#移动端-Appnium" class="headerlink" title="移动端 - Appnium"></a>移动端 - <a href="http://appium.io/">Appnium</a></h5><h5 id="Web端-Selenium"><a href="#Web端-Selenium" class="headerlink" title="Web端 - Selenium"></a>Web端 - <a href="https://docs.seleniumhq.org/">Selenium</a></h5><p>Selenium是实现Web应用程序的功能测试以及集成测试自动化的浏览器驱动测试工具群。和使用浏览器的用户相同，Selenium可以在浏览器进行的鼠标操作、在表单中输入文字、验证表单的值等，利用这一点就可以将手动操作变成自动化操作。</p><ol><li>Selenium优点</li></ol><ul><li>自动化测试用例制作简单。Selenium提供了Selenium IDE工具，该工具可以捕获鼠标、键盘的操作，然后通过重放功能来重复这些操作，这样就可以简单的制作测试用例。</li><li>支持多种浏览器和操作系统。</li></ul><ol start="2"><li>Selenium的组件</li></ol><ul><li><a href="https://www.seleniumhq.org/projects/ide/">Selenium IDE</a></li><li><a href="https://www.seleniumhq.org/projects/remote-control/">Selenium Remote Control</a></li><li><a href="https://www.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a></li></ul><ol start="3"><li><p>与持续集成工具协作</p><p>持续集成指的是频繁的将代码集成到主干。它的好处主要有两个：</p><ul><li>快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</li><li>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</li></ul><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是代码集成到主干之前，必须通过自动化测试，只要有一个测试用例失败，就不能集成。编程大师Martin Fowler曾经说过：“持续集成并不能消除Bug，而是让它们非常容易发现和改正。”</p><p>可以在Jenkins中安装“Seleniumhq Plugin”插件，这样就可以将Selenium IDE制作的测试用例保存为HTML格式并提供给Jenkins来使用，基本步骤是：</p><ul><li><p>在执行测试的机器上，从版本控制系统中下载测试套件和测试用例。</p></li><li><p>在执行测试的机器上下载Selenium Server。</p></li><li><p>从Jenkins的“系统管理”中选择“插件管理”来安装“Seleniumhq Plugin”。</p></li><li><p>在Jenkins的“系统管理”中选择“系统设置”并配置“Selenium Remote Control”下的“HTMLSuite Runner”。</p></li><li><p>新建测试用的Jenkins任务并进行配置，配置的内容包括：浏览器、起始URL、测试套件和测试结果输出文件。</p></li></ul><p>配置完成后，就可以执行Jenkins的“立即构建”了。</p></li></ol><p>除了Selenium之外，<a href="https://pypi.org/project/WebTest/">WebTest</a>、<a href="https://splinter.readthedocs.io/en/latest/">Splinter</a>和<a href="https://robotframework.org/">RobotFramework</a>也是Web端测试的选择，其中WebTest可以对WSGI应用执行模拟请求并获取结果，基本上所有WSGI应用的测试都可以用它；Splinter是对Selenium的二次封装，使用上更加方便简单。</p><h4 id="接口测试自动化测试"><a href="#接口测试自动化测试" class="headerlink" title="接口测试自动化测试"></a>接口测试自动化测试</h4><ol><li><a href="https://cn.python-requests.org/zh_CN/latest/">requests</a></li><li><a href="https://docs.httprunner.org/">HttpRunner</a></li><li><a href="https://github.com/svanoort/pyresttest">PyRestTest</a></li></ol><h4 id="其他方面的自动化测试"><a href="#其他方面的自动化测试" class="headerlink" title="其他方面的自动化测试"></a>其他方面的自动化测试</h4><ol><li><p><a href="https://www.locust.io/">Locust</a></p></li><li><p><a href="https://github.com/m4n3dw0lf/PytheM">pythem</a></p></li></ol><h3 id="测试相关工具"><a href="#测试相关工具" class="headerlink" title="测试相关工具"></a>测试相关工具</h3><ol><li>PostMan</li><li>AB</li><li>JMeter</li><li>LoadRunner</li><li>Benchmark Factory</li><li>WAS</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>97.电商网站技术要点剖析</title>
      <link href="/2024/07/01/97.dian-shang-wang-zhan-ji-zhu-yao-dian-pou-xi/"/>
      <url>/2024/07/01/97.dian-shang-wang-zhan-ji-zhu-yao-dian-pou-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="电商网站技术要点剖析"><a href="#电商网站技术要点剖析" class="headerlink" title="电商网站技术要点剖析"></a>电商网站技术要点剖析</h2><h3 id="商业模式"><a href="#商业模式" class="headerlink" title="商业模式"></a>商业模式</h3><ol><li>B2B - 商家对商家，交易双方都是企业（商家），最典型的案例就是阿里巴巴。</li><li>C2C - 个人对个人，例如：淘宝、人人车。</li><li>B2C - 商家对个人，例如：唯品会，聚美优品。</li><li>C2B - 个人对商家，先有消费者提出需求，后有商家按需求组织生产，例如： 尚品宅配。</li><li>O2O - 线上到线下，将线下的商务机会与互联网结合，让互联网成为线下交易的平台，例如：美团外卖、饿了么。</li><li>B2B2C - 商家对商家对个人，例如：天猫、京东。</li></ol><h3 id="需求要点"><a href="#需求要点" class="headerlink" title="需求要点"></a>需求要点</h3><ol><li>用户端<ul><li><p>首页（商品分类、广告轮播、滚动快讯、瀑布加载、推荐、折扣、热销、……）</p></li><li><p>用户（登录（第三方登录）、注册、注销、自服务（个人信息、浏览历史、收货地址、……））</p></li><li><p>商品（分类、列表、详情、搜索、热门搜索、搜索历史、添加到购物车、收藏、关注、评论、……）</p></li><li><p>购物车（查看、编辑（修改数量、删除商品、清空））</p></li><li><p>订单（提交订单（支付）、历史订单、订单详情、订单评价、……）</p></li></ul></li><li>管理端<ul><li>核心业务实体的CRUD</li><li>定时任务（周期性和非周期性，如处理未支付订单、采集数据对异常事件报警、……）</li><li>报表功能（导入导出Excel、PDF等以及前端ECharts统计图表展示）</li><li>权限控制（RBAC、白名单、黑名单、……）</li><li>业务流转（如发起退款流程，常用流程引擎有：Activity、Airflow、Spiff等）</li><li>三方服务（接入地图、短信、物流、支付、实名认证、天气、监控、云存储、……）</li></ul></li></ol><h3 id="物理模型设计"><a href="#物理模型设计" class="headerlink" title="物理模型设计"></a>物理模型设计</h3><p>首先要搞清楚两个概念：SPU（Standard Product Unit）和SKU（Stock Keeping Unit）。</p><ul><li>SPU：iPhone 6s</li><li>SKU：iPhone 6s 64G 土豪金</li></ul><p><img src="/./res/shopping-pdm.png"></p><h3 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h3><p>第三方登录是指利用第三方网站（通常是知名社交网站）的账号进行登录验证（主要是通过知名第三方网站获取到用户相关信息），比如国内的 QQ、微博，国外的Google、Facebook等。第三方登录大部分都是使用<a href="https://en.wikipedia.org/wiki/OAuth">OAuth</a>协议，它是一个关于授权的开放网络标准（<strong>数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌，用来代替密码，供第三方应用使用</strong>），得到了广泛的应用，目前通常使用的是2.0版本。关于OAuth的基础知识，可以阅读阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">《理解OAuth 2.0》</a>。关于<strong>令牌</strong>和<strong>密码</strong>的区别，我们可以简单总结出以下三点差异：</p><ol><li>令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</li><li>令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</li><li>令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</li></ol><p>所以，通过令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是OAuth协议的优势。</p><h4 id="OAuth-2-0授权流程"><a href="#OAuth-2-0授权流程" class="headerlink" title="OAuth 2.0授权流程"></a>OAuth 2.0授权流程</h4><ol><li>用户打开客户端以后，客户端要求用户（资源所有者）给予授权。</li><li>用户（资源所有者）同意给予客户端授权。</li><li>客户端使用上一步获得的授权，向认证服务器申请访问令牌。</li><li>认证服务器对客户端进行认证以后，发放访问令牌。</li><li>客户端使用访问令牌向资源服务器申请获取资源。</li><li>资源服务器确认访问令牌无误，同意向客户端开放资源。</li></ol><p><img src="/./res/oauth2.png"></p><p>如果使用微博登录进行接入，其具体步骤可以参考微博开放平台上的<a href="http://open.weibo.com/wiki/Connect/login">“微博登录接入”</a>文档。使用QQ登录进行接入，需要首先注册成为QQ互联开发者并通过审核，具体的步骤可以参考QQ互联上的<a href="http://wiki.connect.qq.com/">“接入指南”</a>，具体的步骤可以参考<a href="http://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0">“网站开发流程”</a>。</p><blockquote><p>提示：在Gitbook上面有一本名为<a href="https://shenxgan.gitbooks.io/django/content/publish/2015-08-10-django-oauth-login.html">《Django博客入门》</a>的书以Github为例介绍了第三方账号登录，有兴趣的可以自行阅读。</p></blockquote><p>通常电商网站在使用第三方登录时，会要求与网站账号进行绑定或者根据获取到的第三方账号信息（如：手机号）自动完成账号绑定。</p><h3 id="缓存预热和查询缓存"><a href="#缓存预热和查询缓存" class="headerlink" title="缓存预热和查询缓存"></a>缓存预热和查询缓存</h3><h4 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h4><p>所谓缓存预热，是指在启动服务器时将数据提前加载到缓存中，为此可以在Django应用的<code>apps.py</code>模块中编写<code>AppConfig</code>的子类并重写<code>ready()</code>方法，代码如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import pymysqlfrom django.apps import AppConfigfrom django.core.cache import cacheSELECT_PROVINCE_SQL &#x3D; &#39;select distid, name from tb_district where pid is null&#39;class CommonConfig(AppConfig):    name &#x3D; &#39;common&#39;    def ready(self):        conn &#x3D; pymysql.connect(host&#x3D;&#39;1.2.3.4&#39;, port&#x3D;3306,                               user&#x3D;&#39;root&#39;, password&#x3D;&#39;pass&#39;,                               database&#x3D;&#39;db&#39;, charset&#x3D;&#39;utf8&#39;,                               cursorclass&#x3D;pymysql.cursors.DictCursor)        try:            with conn.cursor() as cursor:                cursor.execute(SELECT_PROVINCE_SQL)                provinces &#x3D; cursor.fetchall()                cache.set(&#39;provinces&#39;, provinces)        finally:            conn.close()</code></pre><p>接下来，还需要在应用的<code>__init__.py</code>中编写下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">default_app_config &#x3D; &#39;common.apps.CommonConfig&#39;</code></pre><p>或者在项目的<code>settings.py</code>文件中注册应用。</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    ...    &#39;common.apps.CommonConfig&#39;,    ...]</code></pre><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>自定义装饰器实现查询结果的缓存。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from pickle import dumps, loadsfrom django.core.cache import cachesMODEL_CACHE_KEY &#x3D; &#39;project:modelcache:%s&#39;def my_model_cache(key, section&#x3D;&#39;default&#39;, timeout&#x3D;None):    &quot;&quot;&quot;实现模型缓存的装饰器&quot;&quot;&quot;    def wrapper1(func):        def wrapper2(*args, **kwargs):            real_key &#x3D; &#39;%s:%s&#39; % (MODEL_CACHE_KEY % key, &#39;:&#39;.join(map(str, args)))            serialized_data &#x3D; caches[section].get(real_key)            if serialized_data:                data &#x3D; loads(serialized_data)            else:                data &#x3D; func(*args, **kwargs)                cache.set(real_key, dumps(data), timeout&#x3D;timeout)            return data        return wrapper2    return wrapper1</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">@my_model_cache(key&#x3D;&#39;provinces&#39;)def get_all_provinces():    return list(Province.objects.all())</code></pre><h3 id="购物车实现"><a href="#购物车实现" class="headerlink" title="购物车实现"></a>购物车实现</h3><p>问题一：已登录用户的购物车放在哪里？未登录用户的购物车放在哪里？</p><pre class="language-Python" data-language="Python"><code class="language-Python">class CartItem(object):    &quot;&quot;&quot;购物车中的商品项&quot;&quot;&quot;    def __init__(self, sku, amount&#x3D;1, selected&#x3D;False):        self.sku &#x3D; sku        self.amount &#x3D; amount        self.selected &#x3D; selected    @property    def total(self):        return self.sku.price * self.amountclass ShoppingCart(object):    &quot;&quot;&quot;购物车&quot;&quot;&quot;    def __init__(self):        self.items &#x3D; &#123;&#125;        self.index &#x3D; 0    def add_item(self, item):        if item.sku.id in self.items:            self.items[item.sku.id].amount +&#x3D; item.amount        else:            self.items[item.sku.id] &#x3D; item    def remove_item(self, sku_id):        if sku_id in self.items:            self.items.remove(sku_id)    def clear_all_items(self):        self.items.clear()    @property    def cart_items(self):        return self.items.values()    @property    def cart_total(self):        total &#x3D; 0        for item in self.items.values():            total +&#x3D; item.total        return total</code></pre><p>已登录用户的购物车可以放在数据库中（可以先在Redis中缓存）；未登录用户的购物车可以保存在Cookie、localStorage或sessionStorage中（减少服务器端内存开销）。</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &#39;1001&#39;: &#123;sku: &#123;...&#125;, &#39;amount&#39;: 1, &#39;selected&#39;: True&#125;,     &#39;1002&#39;: &#123;sku: &#123;...&#125;, &#39;amount&#39;: 2, &#39;selected&#39;: False&#125;,    &#39;1003&#39;: &#123;sku: &#123;...&#125;, &#39;amount&#39;: 3, &#39;selected&#39;: True&#125;,&#125;</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">request.get_signed_cookie(&#39;cart&#39;)cart_base64 &#x3D; base64.base64encode(pickle.dumps(cart))response.set_signed_cookie(&#39;cart&#39;, cart_base64)</code></pre><p>问题二：用户登录之后，如何合并购物车？（目前电商应用的购物车几乎都做了持久化处理，主要是方便在多个终端之间共享数据）</p><h3 id="集成支付功能"><a href="#集成支付功能" class="headerlink" title="集成支付功能"></a>集成支付功能</h3><p>问题一：支付信息如何持久化？（必须保证每笔交易都有记录）</p><p>问题二：如何接入支付宝？（接入其他平台基本类似）</p><ol><li><a href="https://open.alipay.com/platform/home.htm">蚂蚁金服开放平台</a>。</li><li><a href="https://open.alipay.com/platform/homeRoleSelection.htm">入驻平台</a>。</li><li><a href="https://openhome.alipay.com/platform/appManage.htm#/apps">开发者中心</a>。</li><li><a href="https://docs.open.alipay.com/270/105899/">文档中心</a>。</li><li><a href="https://docs.open.alipay.com/54/103419">SDK集成</a> - <a href="https://pypi.org/project/alipay-sdk-python/">PYPI链接</a>。</li><li><a href="https://docs.open.alipay.com/270/105900/">API列表</a>。</li></ol><p><img src="/./res/alipay_web_developer.png"></p><p>配置文件：</p><pre class="language-Python" data-language="Python"><code class="language-Python">ALIPAY_APPID &#x3D; &#39;......&#39;ALIPAY_URL &#x3D; &#39;https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do&#39;ALIPAY_DEBUG &#x3D; False</code></pre><p>获得支付链接（发起支付）：</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 创建调用支付宝的对象alipay &#x3D; AliPay(    # 在线创建应用时分配的ID    appid&#x3D;settings.ALIPAY_APPID,    app_notify_url&#x3D;None,    # 自己应用的私钥    app_private_key_path&#x3D;os.path.join(        os.path.dirname(os.path.abspath(__file__)),         &#39;keys&#x2F;app_private_key.pem&#39;),    # 支付宝的公钥    alipay_public_key_path&#x3D;os.path.join(        os.path.dirname(os.path.abspath(__file__)),         &#39;keys&#x2F;alipay_public_key.pem&#39;),    sign_type&#x3D;&#39;RSA2&#39;,    debug&#x3D;settings.ALIPAY_DEBUG)# 调用获取支付页面操作order_info &#x3D; alipay.api_alipay_trade_page_pay(    out_trade_no&#x3D;&#39;...&#39;,    total_amount&#x3D;&#39;...&#39;,    subject&#x3D;&#39;...&#39;,    return_url&#x3D;&#39;http:&#x2F;&#x2F;...&#39;)# 生成完整的支付页面URLalipay_url &#x3D; settings.ALIPAY_URL + &#39;?&#39; + order_inforeturn JsonResponse(&#123;&#39;alipay_url&#39;: alipay_url&#125;)</code></pre><p>通过上面返回的链接可以进入支付页面，支付完成后会自动跳转回上面代码中设定好的项目页面，在该页面中可以获得订单号（out_trade_no）、支付流水号（trade_no）、交易金额（total_amount）和对应的签名（sign）并请求后端验证和保存交易结果，代码如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 创建调用支付宝的对象alipay &#x3D; AliPay(    # 在线创建应用时分配的ID    appid&#x3D;settings.ALIPAY_APPID,    app_notify_url&#x3D;None,    # 自己应用的私钥    app_private_key_path&#x3D;os.path.join(        os.path.dirname(os.path.abspath(__file__)),         &#39;keys&#x2F;app_private_key.pem&#39;),    # 支付宝的公钥    alipay_public_key_path&#x3D;os.path.join(        os.path.dirname(os.path.abspath(__file__)),         &#39;keys&#x2F;alipay_public_key.pem&#39;),    sign_type&#x3D;&#39;RSA2&#39;,    debug&#x3D;settings.ALIPAY_DEBUG)# 请求参数（假设是POST请求）中包括订单号、支付流水号、交易金额和签名params &#x3D; request.POST.dict()# 调用验证操作if alipay.verify(params, params.pop(&#39;sign&#39;)):    # 对交易进行持久化操作</code></pre><p>支付宝的支付API还提供了交易查询、交易结算、退款、退款查询等一系列的接口，可以根据业务需要进行调用，此处不再进行赘述。</p><h3 id="秒杀和超卖"><a href="#秒杀和超卖" class="headerlink" title="秒杀和超卖"></a>秒杀和超卖</h3><ol><li>秒杀：秒杀是通常意味着要在很短的时间处理极高的并发，系统在短时间需要承受平时百倍以上的流量，因此秒杀架构是一个比较复杂的问题，其核心思路是流量控制和性能优化，需要从前端（通过JavaScript实现倒计时、避免重复提交和限制频繁刷新）到后台各个环节的配合。流量控制主要是限制只有少部分流量进入服务后端（毕竟最终只有少部分用户能够秒杀成功），同时在物理架构上使用缓存（一方面是因为读操作多写操作少；另外可以将库存放在Redis中，利用DECR原语实现减库存；同时也可以利用Redis来进行限流，道理跟限制频繁发送手机验证码是一样的）和消息队列（消息队列最为重要的作用就是“削峰”和“上下游节点解耦合”）来进行优化；此外还要采用无状态服务设计，这样才便于进行水平扩展（通过增加设备来为系统扩容）。</li><li>超卖现象：比如某商品的库存为1，此时用户1和用户2并发购买该商品，用户1提交订单后该商品的库存被修改为0，而此时用户2并不知道的情况下提交订单，该商品的库存再次被修改为-1这就是超卖现象。解决超卖现象有三种常见的思路：<ul><li>悲观锁控制：查询商品数量的时候就用<code>select ... for update</code>对数据加锁，这样的话用户1查询库存时，用户2因无法读取库存数量被阻塞，直到用户1提交或者回滚了更新库存的操作后才能继续，从而解决了超卖问题。但是这种做法对并发访问量很高的商品来说性能太过糟糕，实际开发中可以在库存小于某个值时才考虑加锁，但是总的来说这种做法不太可取。</li><li>乐观锁控制：查询商品数量不用加锁，更新库存的时候设定商品数量必须与之前查询数量相同才能更新，否则说明其他事务已经更新了库存，必须重新发出请求。</li><li>尝试减库存：将上面的查询（<code>select</code>）和更新（<code>update</code>）操作合并为一条SQL操作，更新库存的时候，在<code>where</code>筛选条件中加上<code>库存&gt;=购买数量</code>或<code>库存-购买数量&gt;=0</code>的条件，这种做法要求事务隔离级别为读提交（read committed）。</li></ul></li></ol><blockquote><p>提示：有兴趣的可以自己在知乎上看看关于这类问题的讨论。</p></blockquote><h3 id="静态资源管理"><a href="#静态资源管理" class="headerlink" title="静态资源管理"></a>静态资源管理</h3><p>静态资源的管理可以自己架设文件服务器或者分布式文件服务器（FastDFS），但是一般的项目中没有必要这样做而且效果未必是最好的，我们建议使用云存储服务来管理网站的静态资源，国内外的云服务提供商如<a href="https://amazonaws-china.com/cn/">亚马逊</a>、<a href="https://www.aliyun.com/product/oss">阿里云</a>、<a href="https://www.qiniu.com/products/kodo">七牛</a>、<a href="https://leancloud.cn/storage/">LeanCloud</a>、<a href="https://www.bmob.cn/cloud">Bmob</a>等都提供了非常优质的云存储服务，而且价格也是一般公司可以接受的，具体的操作可以参考官方文档，例如：阿里云的<a href="https://www.alibabacloud.com/zh/support/developer-resources">对象存储 OSS开发人员指南</a>。</p><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><h4 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h4><ol><li>使用数据库的模糊查询功能 - 效率低，每次需要全表扫描，不支持分词。</li><li>使用数据库的全文检索功能 - MySQL 5.6以前只适用于MyISAM引擎，检索操作和其他的DML操作耦合在数据库中，可能导致检索操作非常缓慢，数据量达到百万级性能显著下降，查询时间很长。</li><li>使用开源搜索引擎 - 索引数据和原始数据分离，可以使用ElasticSearch或Solr来提供外置索引服务，如果不考虑高并发的全文检索需求，纯Python的Whoosh也可以考虑。</li></ol><h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><p>ElasticSearch既是一个分布式文档数据库又是一个高可扩展的开源全文搜索和分析引擎，它允许存储、搜索和分析大量的数据，并且这个过程是近实时的。它通常被用作底层引擎和技术，为复杂的搜索功能和要求提供动力，大家熟知的维基百科、Stack-Overflow、Github都使用了ElasticSearch。</p><p>ElasticSearch的底层是开源搜索引擎<a href="https://lucene.apache.org/">Lucene</a>，但是直接用Lucene会非常麻烦，必须自己编写代码去调用它的接口而且只支持Java语言。ElasticSearch相当于对Lucene进行了一次全面的封装，提供了REST风格的API接口，通过基于HTTP协议的访问方式屏蔽了编程语言的差异。ElasticSearch会为数据构建<a href="https://zh.wikipedia.org/zh-hans/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95">倒排索引</a>，但是ElasticSearch内置的分词器对中文分词的支持几乎为零，因此需要通过安装elasticsearch-analysis-ik插件来提供中文分词服务。</p><p>ElasticSearch的安装和配置可以参考<a href="https://blog.csdn.net/jinyidong/article/details/80475320">《ElasticSearch之Docker安装》</a>。除了ElasticSearch之外，也可以使用Solr、Whoosh等来提供搜索引擎服务，基本上Django项目中可以考虑如下几种方案：</p><ul><li>haystack（django-haystack &#x2F; drf-haystack） + whoosh + Jieba</li><li>haystack （django-haystack &#x2F; drf-haystack）+ elasticsearch</li><li>requests + elasticsearch</li><li>django-elasticsearch-dsl</li></ul><p>####安装和使用ElasticSearch</p><ol><li><p>使用Docker安装ElasticSearch。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker pull elasticsearch:7.6.0docker run -d -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; -e ES_JAVA_OPTS&#x3D;&quot;-Xms512m -Xmx512m&quot; --name es elasticsearch:7.6.0</code></pre><blockquote><p>说明：上面创建容器时通过<code>-e</code>参数指定了使用单机模式和Java虚拟机最小最大可用堆空间的大小，堆空间大小可以根据服务器实际能够提供给ElasticSearch的内存大小来决定，默认为2G。</p></blockquote></li><li><p>创建数据库。</p><p>请求：PUT - <code>http://1.2.3.4:9200/demo/</code></p><p>响应：</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;acknowledged&quot;: true,    &quot;shards_acknowledged&quot;: true,    &quot;index&quot;: &quot;demo&quot;&#125;</code></pre></li><li><p>查看创建的数据库。</p><p>请求：GET - <code>http://1.2.3.4:9200/demo/</code></p><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;demo&quot;: &#123;        &quot;aliases&quot;: &#123;&#125;,        &quot;mappings&quot;: &#123;&#125;,        &quot;settings&quot;: &#123;            &quot;index&quot;: &#123;                &quot;creation_date&quot;: &quot;1552213970199&quot;,                &quot;number_of_shards&quot;: &quot;5&quot;,                &quot;number_of_replicas&quot;: &quot;1&quot;,                &quot;uuid&quot;: &quot;ny3rCn10SAmCsqW6xPP1gw&quot;,                &quot;version&quot;: &#123;                    &quot;created&quot;: &quot;6050399&quot;                &#125;,                &quot;provided_name&quot;: &quot;demo&quot;            &#125;        &#125;    &#125;&#125;</code></pre></li><li><p>插入数据。</p><p>请求：POST - <code>http://1.2.3.4:9200/demo/goods/1/</code></p><p>请求头：Content-Type: application&#x2F;json</p><p>参数：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;no&quot;: &quot;5089253&quot;,    &quot;title&quot;: &quot;Apple iPhone X (A1865) 64GB 深空灰色 移动联通电信4G手机&quot;,    &quot;brand&quot;: &quot;Apple&quot;,    &quot;name&quot;: &quot;Apple iPhone X&quot;,    &quot;product&quot;: &quot;中国大陆&quot;,    &quot;resolution&quot;: &quot;2436 x 1125&quot;,    &quot;intro&quot;: &quot;一直以来，Apple都心存一个设想，期待能够打造出这样一部iPhone：它有整面屏幕，能让你在使用时，完全沉浸其中，仿佛忘了它的存在。它是如此智能，哪怕轻轻一瞥，都能得到它心有灵犀的回应。而这个设想，终于随着iPhone X的到来成为了现实。现在，就跟未来见个面吧。&quot;&#125;</code></pre><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;_index&quot;: &quot;demo&quot;,    &quot;_type&quot;: &quot;goods&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 4,    &quot;result&quot;: &quot;created&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 3,    &quot;_primary_term&quot;: 1&#125;</code></pre></li><li><p>删除数据。</p><p>请求：DELETE -  <code>http://1.2.3.4:9200/demo/goods/1/</code></p><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;_index&quot;: &quot;demo&quot;,    &quot;_type&quot;: &quot;goods&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 2,    &quot;result&quot;: &quot;deleted&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 1,    &quot;_primary_term&quot;: 1&#125;</code></pre></li><li><p>更新数据。</p><p>请求：PUT - <code>http://1.2.3.4:9200/demo/goods/1/_update</code></p><p>请求头：Content-Type: application&#x2F;json</p><p>参数：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;&quot;doc&quot;: &#123;&quot;no&quot;: &quot;5089253&quot;,    &quot;title&quot;: &quot;Apple iPhone X (A1865) 64GB 深空灰色 移动联通电信4G手机&quot;,    &quot;brand&quot;: &quot;Apple(苹果)&quot;,    &quot;name&quot;: &quot;Apple iPhone X&quot;,    &quot;product&quot;: &quot;美国&quot;,    &quot;resolution&quot;: &quot;2436 x 1125&quot;,    &quot;intro&quot;: &quot;一直以来，Apple都心存一个设想，期待能够打造出这样一部iPhone：它有整面屏幕，能让你在使用时，完全沉浸其中，仿佛忘了它的存在。它是如此智能，哪怕轻轻一瞥，都能得到它心有灵犀的回应。而这个设想，终于随着iPhone X的到来成为了现实。现在，就跟未来见个面吧。&quot;    &#125;&#125;</code></pre><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;_index&quot;: &quot;demo&quot;,    &quot;_type&quot;: &quot;goods&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 10,    &quot;result&quot;: &quot;updated&quot;,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 2,        &quot;successful&quot;: 1,        &quot;failed&quot;: 0    &#125;,    &quot;_seq_no&quot;: 9,    &quot;_primary_term&quot;: 1&#125;</code></pre></li><li><p>查询数据。</p><p>请求：GET - <code>http://1.2.3.4:9200/demo/goods/1/</code></p><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;_index&quot;: &quot;demo&quot;,    &quot;_type&quot;: &quot;goods&quot;,    &quot;_id&quot;: &quot;1&quot;,    &quot;_version&quot;: 10,    &quot;found&quot;: true,    &quot;_source&quot;: &#123;        &quot;doc&quot;: &#123;            &quot;no&quot;: &quot;5089253&quot;,            &quot;title&quot;: &quot;Apple iPhone X (A1865) 64GB 深空灰色 移动联通电信4G手机&quot;,            &quot;brand&quot;: &quot;Apple(苹果)&quot;,            &quot;name&quot;: &quot;Apple iPhone X&quot;,            &quot;product&quot;: &quot;美国&quot;,            &quot;resolution&quot;: &quot;2436 x 1125&quot;,            &quot;intro&quot;: &quot;一直以来，Apple都心存一个设想，期待能够打造出这样一部iPhone：它有整面屏幕，能让你在使用时，完全沉浸其中，仿佛忘了它的存在。它是如此智能，哪怕轻轻一瞥，都能得到它心有灵犀的回应。而这个设想，终于随着iPhone X的到来成为了现实。现在，就跟未来见个面吧。&quot;        &#125;    &#125;&#125;</code></pre></li></ol><h4 id="配置中文分词和拼音插件"><a href="#配置中文分词和拼音插件" class="headerlink" title="配置中文分词和拼音插件"></a>配置中文分词和拼音插件</h4><ol><li><p>进入Docker容器的plugins目录。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker exec -it es &#x2F;bin&#x2F;bash</code></pre></li><li><p>下载和ElasticSearch版本对应的<a href="https://github.com/medcl/elasticsearch-analysis-ik">ik</a>和<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">pinyin</a>插件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum install -y wgetcd plugins&#x2F;mkdir ikcd ikwget https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.6.0&#x2F;elasticsearch-analysis-ik-7.6.0.zipunzip elasticsearch-analysis-ik-7.6.0.ziprm -f elasticsearch-analysis-ik-7.6.0.zipcd ..mkdir pinyincd pinyinwget https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-pinyin&#x2F;releases&#x2F;download&#x2F;v7.6.0&#x2F;elasticsearch-analysis-pinyin-7.6.0.zipunzip elasticsearch-analysis-pinyin-7.6.0.ziprm -f elasticsearch-analysis-pinyin-7.6.0.zip</code></pre></li><li><p>退出容器，重启ElasticSearch。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker restart es</code></pre></li><li><p>测试中文分词效果。</p><p>请求：POST - <code>http://1.2.3.4:9200/_analyze</code></p><p>请求头：Content-Type: application&#x2F;json</p><p>参数：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;  &quot;analyzer&quot;: &quot;ik_smart&quot;,  &quot;text&quot;: &quot;中国男足在2022年卡塔尔世界杯预选赛中勇夺小组最后一名&quot;&#125;</code></pre><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;中国&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 2,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 0        &#125;,        &#123;            &quot;token&quot;: &quot;男足&quot;,            &quot;start_offset&quot;: 2,            &quot;end_offset&quot;: 4,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 1        &#125;,        &#123;            &quot;token&quot;: &quot;在&quot;,            &quot;start_offset&quot;: 4,            &quot;end_offset&quot;: 5,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 2        &#125;,        &#123;            &quot;token&quot;: &quot;2022年&quot;,            &quot;start_offset&quot;: 5,            &quot;end_offset&quot;: 10,            &quot;type&quot;: &quot;TYPE_CQUAN&quot;,            &quot;position&quot;: 3        &#125;,        &#123;            &quot;token&quot;: &quot;卡塔尔&quot;,            &quot;start_offset&quot;: 10,            &quot;end_offset&quot;: 13,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 4        &#125;,        &#123;            &quot;token&quot;: &quot;世界杯&quot;,            &quot;start_offset&quot;: 13,            &quot;end_offset&quot;: 16,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 5        &#125;,        &#123;            &quot;token&quot;: &quot;预选赛&quot;,            &quot;start_offset&quot;: 16,            &quot;end_offset&quot;: 19,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 6        &#125;,        &#123;            &quot;token&quot;: &quot;中&quot;,            &quot;start_offset&quot;: 19,            &quot;end_offset&quot;: 20,            &quot;type&quot;: &quot;CN_CHAR&quot;,            &quot;position&quot;: 7        &#125;,        &#123;            &quot;token&quot;: &quot;勇夺&quot;,            &quot;start_offset&quot;: 20,            &quot;end_offset&quot;: 22,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 8        &#125;,        &#123;            &quot;token&quot;: &quot;小组&quot;,            &quot;start_offset&quot;: 22,            &quot;end_offset&quot;: 24,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 9        &#125;,        &#123;            &quot;token&quot;: &quot;最后&quot;,            &quot;start_offset&quot;: 24,            &quot;end_offset&quot;: 26,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 10        &#125;,        &#123;            &quot;token&quot;: &quot;一名&quot;,            &quot;start_offset&quot;: 26,            &quot;end_offset&quot;: 28,            &quot;type&quot;: &quot;CN_WORD&quot;,            &quot;position&quot;: 11        &#125;    ]&#125;</code></pre></li><li><p>测试拼音分词效果。</p><p>请求：POST - <code>http://1.2.3.4:9200/_analyze</code></p><p>请求头：Content-Type: application&#x2F;json</p><p>参数：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;  &quot;analyzer&quot;: &quot;pinyin&quot;,  &quot;text&quot;: &quot;张学友&quot;&#125;</code></pre><p>响应：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;tokens&quot;: [        &#123;            &quot;token&quot;: &quot;zhang&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 0,            &quot;type&quot;: &quot;word&quot;,            &quot;position&quot;: 0        &#125;,        &#123;            &quot;token&quot;: &quot;zxy&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 0,            &quot;type&quot;: &quot;word&quot;,            &quot;position&quot;: 0        &#125;,        &#123;            &quot;token&quot;: &quot;xue&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 0,            &quot;type&quot;: &quot;word&quot;,            &quot;position&quot;: 1        &#125;,        &#123;            &quot;token&quot;: &quot;you&quot;,            &quot;start_offset&quot;: 0,            &quot;end_offset&quot;: 0,            &quot;type&quot;: &quot;word&quot;,            &quot;position&quot;: 2        &#125;    ]&#125;</code></pre></li></ol><h4 id="全文检索功能"><a href="#全文检索功能" class="headerlink" title="全文检索功能"></a>全文检索功能</h4><p>可以通过GET或者POST请求进行搜索，下面演示了搜索有“未来”关键词商品。</p><ol><li><p>GET - <code>http://120.77.222.217:9200/demo/goods/_search?q=未来</code></p><blockquote><p>注意：URL中的中文应该要处理成百分号编码。</p></blockquote><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;took&quot;: 19,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: &#123;        &quot;total&quot;: 5,        &quot;successful&quot;: 5,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    &#125;,    &quot;hits&quot;: &#123;        &quot;total&quot;: 2,        &quot;max_score&quot;: 0.73975396,        &quot;hits&quot;: [            &#123;                &quot;_index&quot;: &quot;demo&quot;,                &quot;_type&quot;: &quot;goods&quot;,                &quot;_id&quot;: &quot;1&quot;,                &quot;_score&quot;: 0.73975396,                &quot;_source&quot;: &#123;                    &quot;doc&quot;: &#123;                        &quot;no&quot;: &quot;5089253&quot;,                        &quot;title&quot;: &quot;Apple iPhone X (A1865) 64GB 深空灰色 移动联通电信4G手机&quot;,                        &quot;brand&quot;: &quot;Apple(苹果)&quot;,                        &quot;name&quot;: &quot;Apple iPhone X&quot;,                        &quot;product&quot;: &quot;美国&quot;,                        &quot;resolution&quot;: &quot;2436*1125&quot;,                        &quot;intro&quot;: &quot;一直以来，Apple都心存一个设想，期待能够打造出这样一部iPhone：它有整面屏幕，能让你在使用时，完全沉浸其中，仿佛忘了它的存在。它是如此智能，哪怕轻轻一瞥，都能得到它心有灵犀的回应。而这个设想，终于随着iPhone X的到来成为了现实。现在，就跟未来见个面吧。&quot;                    &#125;                &#125;            &#125;,            &#123;                &quot;_index&quot;: &quot;demo&quot;,                &quot;_type&quot;: &quot;goods&quot;,                &quot;_id&quot;: &quot;3&quot;,                &quot;_score&quot;: 0.68324494,                &quot;_source&quot;: &#123;                    &quot;no&quot;: &quot;42417956432&quot;,                    &quot;title&quot;: &quot;小米9 透明尊享版 手机 透明尊享 全网通(12GB + 256GB)&quot;,                    &quot;brand&quot;: &quot;小米（MI）&quot;,                    &quot;name&quot;: &quot;小米（MI）小米9透明&quot;,                    &quot;product&quot;: &quot;中国大陆&quot;,                    &quot;resolution&quot;: &quot;2340*1080&quot;,                    &quot;intro&quot;: &quot;全面透明机身，独特科幻机甲风，来自未来的设计。&quot;                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>URL中可用的搜索参数如下表所示：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>q</td><td>查询字符串</td></tr><tr><td>analyzer</td><td>分析查询字符串使用的分词器</td></tr><tr><td>analyze_wildcard</td><td>通配符或者前缀查询是否被分析，默认为false</td></tr><tr><td>default_operator</td><td>多个条件之间的关系，默认为OR，可以修改为AND</td></tr><tr><td>explain</td><td>在返回的结果中包含评分机制的解释</td></tr><tr><td>fields</td><td>只返回索引中指定的列，多个列中间用逗号隔开</td></tr><tr><td>sort</td><td>排序参考的字段，可以用:asc和:desc来指定升序和降序</td></tr><tr><td>timeout</td><td>超时时间</td></tr><tr><td>from</td><td>匹配结果的开始值，默认为0</td></tr><tr><td>size</td><td>匹配结果的条数，默认为10</td></tr></tbody></table></li><li><p>POST - <code>http://120.77.222.217:9200/demo/goods/_search</code></p><p>请求头：Content-Type: application&#x2F;json</p><p>参数：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;query&quot;: &#123;        &quot;term&quot;: &#123;            &quot;type&quot;: &quot;&quot;        &#125;    &#125;&#125;</code></pre><p>POST搜索是基于DSL的。</p></li></ol><h4 id="Django对接ElasticSearch"><a href="#Django对接ElasticSearch" class="headerlink" title="Django对接ElasticSearch"></a>Django对接ElasticSearch</h4><p>Python对接ElasticSearch的第三方库是HayStack，在Django项目中可以使用django-haystack，通过HayStack可以在不修改代码对接多种搜索引擎服务。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> django-haystack elasticsearch</code></pre><p>配置文件：</p><pre class="language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [    ...    &#39;haystack&#39;,    ...]HAYSTACK_CONNECTIONS &#x3D; &#123;    &#39;default&#39;: &#123;        # 引擎配置        &#39;ENGINE&#39;: &#39;haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine&#39;,        # 搜索引擎服务的URL        &#39;URL&#39;: &#39;http:&#x2F;&#x2F;1.2.3.4:9200&#39;,        # 索引库的名称        &#39;INDEX_NAME&#39;: &#39;goods&#39;,    &#125;,&#125;# 添加&#x2F;删除&#x2F;更新数据时自动生成索引HAYSTACK_SIGNAL_PROCESSOR &#x3D; &#39;haystack.signals.RealtimeSignalProcessor&#39;</code></pre><p>索引类：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from haystack import indexesclass GoodsIndex(indexes.SearchIndex, indexes.Indexable):    text &#x3D; indexes.CharField(document&#x3D;True, use_template&#x3D;True)    def get_model(self):        return Goods    def index_queryset(self, using&#x3D;None):        return self.get_model().objects.all()</code></pre><p>编辑text字段的模板（需要放在templates&#x2F;search&#x2F;indexes&#x2F;demo&#x2F;goods_text.txt）：</p><pre class="language-none"><code class="language-none">&#123;&#123;object.title&#125;&#125;&#123;&#123;object.intro&#125;&#125;</code></pre><p>配置URL：</p><pre class="language-Python" data-language="Python"><code class="language-Python">urlpatterns &#x3D; [    # ...    url(&#39;search&#x2F;&#39;, include(&#39;haystack.urls&#39;)),]</code></pre><p>生成初始索引：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py rebuild_index</code></pre><blockquote><p> 说明：可以参考<a href="https://www.zmrenwu.com/post/45/">《Django Haystack 全文检索与关键词高亮》</a>一文来更深入的了解基于Haystack的全文检索操作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>98.项目部署上线和性能调优</title>
      <link href="/2024/07/01/98.xiang-mu-bu-shu-shang-xian-he-xing-neng-diao-you/"/>
      <url>/2024/07/01/98.xiang-mu-bu-shu-shang-xian-he-xing-neng-diao-you/</url>
      
        <content type="html"><![CDATA[<h2 id="项目部署上线指南"><a href="#项目部署上线指南" class="headerlink" title="项目部署上线指南"></a>项目部署上线指南</h2><h3 id="准备上线"><a href="#准备上线" class="headerlink" title="准备上线"></a>准备上线</h3><ol><li><p>上线前的检查工作。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python manage.py check --deploy</code></pre></li><li><p>将DEBUG设置为False并配置ALLOWED_HOSTS。</p><pre class="language-Python" data-language="Python"><code class="language-Python">DEBUG &#x3D; FalseALLOWED_HOSTS &#x3D; [&#39;*&#39;]</code></pre></li><li><p>安全相关的配置。</p><pre class="language-Python" data-language="Python"><code class="language-Python"># 保持HTTPS连接的时间SECURE_HSTS_SECONDS &#x3D; 3600SECURE_HSTS_INCLUDE_SUBDOMAINS &#x3D; TrueSECURE_HSTS_PRELOAD &#x3D; True# 自动重定向到安全连接SECURE_SSL_REDIRECT &#x3D; True# 避免浏览器自作聪明推断内容类型SECURE_CONTENT_TYPE_NOSNIFF &#x3D; True# 避免跨站脚本攻击SECURE_BROWSER_XSS_FILTER &#x3D; True# COOKIE只能通过HTTPS进行传输SESSION_COOKIE_SECURE &#x3D; TrueCSRF_COOKIE_SECURE &#x3D; True# 防止点击劫持攻击手段 - 修改HTTP协议响应头# 当前网站是不允许使用&lt;iframe&gt;标签进行加载的X_FRAME_OPTIONS &#x3D; &#39;DENY&#39;</code></pre></li><li><p>敏感信息放到环境变量或文件中。</p><pre class="language-Python" data-language="Python"><code class="language-Python">SECRET_KEY &#x3D; os.environ[&#39;SECRET_KEY&#39;]DB_USER &#x3D; os.environ[&#39;DB_USER&#39;]DB_PASS &#x3D; os.environ[&#39;DB_PASS&#39;]REDIS_AUTH &#x3D; os.environ[&#39;REDIS_AUTH&#39;]</code></pre></li></ol><h3 id="更新服务器Python环境到3-x"><a href="#更新服务器Python环境到3-x" class="headerlink" title="更新服务器Python环境到3.x"></a>更新服务器Python环境到3.x</h3><blockquote><p>说明：如果需要清除之前的安装，就删除对应的文件和文件夹即可</p></blockquote><ol><li><p>安装底层依赖库。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libdb4-devel libpcap-devel xz-devel libffi-devel libxml2</code></pre></li><li><p>下载Python源代码。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.6&#x2F;Python-3.7.6.tar.xz</code></pre></li><li><p>验证下载文件。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">md5sum Python-3.7.6.tar.xz</code></pre></li><li><p>解压缩和解归档。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">xz -d Python-3.7.6.tar.xztar -xvf Python-3.7.6.tar</code></pre></li><li><p>执行安装前的配置（生成Makefile文件）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd Python-3.7.6.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python37 --enable-optimizations</code></pre></li><li><p>构建和安装。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">make &amp;&amp; make install</code></pre></li><li><p>配置PATH环境变量（用户或系统环境变量）并激活。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">vim ~&#x2F;.bash_profilevim &#x2F;etc&#x2F;profile</code></pre><pre class="language-INI" data-language="INI"><code class="language-INI">... 此处省略上面的代码...export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;python37&#x2F;bin... 此处省略下面的代码...</code></pre> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">source ~&#x2F;.bash_profilesource &#x2F;etc&#x2F;profile</code></pre></li><li><p>注册软链接（符号链接）- 这一步不是必须的，但通常会比较有用。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">ln -s &#x2F;usr&#x2F;local&#x2F;python37&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3</code></pre></li><li><p>测试Python环境是否更新成功（安装Python 3一定不能破坏原来的Python 2）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python3 --versionpython --version</code></pre></li></ol><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>假设项目文件夹为<code>project</code>，下面的五个子目录分别是：<code>code</code>、<code>conf</code>、<code>logs</code>、<code>stat</code>和<code>venv</code>分别用来保存项目的代码、配置文件、日志文件、静态资源和虚拟环境。其中，<code>conf</code>目录下的子目录<code>cert</code>中保存了配置HTTPS需要使用的证书和密钥；<code>code</code>目录下的项目代码可以通过版本控制工具从代码仓库中检出；虚拟环境可以通过工具（如：venv、virtualenv、pyenv等）进行创建。</p><pre class="language-none"><code class="language-none">project├── code│   └── fangtx│       ├── api│       ├── common│       ├── fangtx│       ├── forum│       ├── rent│       ├── user│       ├── manage.py│       ├── README.md│       ├── static│       └── templates├── conf│   ├── cert│   │   ├── 214915882850706.key│   │   └── 214915882850706.pem│   ├── nginx.conf│   └── uwsgi.ini├── logs│   ├── access.log│   ├── error.log│   └── uwsgi.log├── stat│   └── css│   └── images│   └── js└── venv    ├── bin    │   ├── activate    │   ├── activate.csh    │   ├── activate.fish    │   ├── celery    │   ├── celerybeat    │   ├── celeryd    │   ├── celeryd-multi    │   ├── coverage    │   ├── coverage3    │   ├── coverage-3.7    │   ├── django-admin    │   ├── django-admin.py    │   ├── easy_install    │   ├── easy_install-3.7    │   ├── pip    │   ├── pip3    │   ├── pip3.7    │   ├── __pycache__    │   ├── pyrsa-decrypt    │   ├── pyrsa-decrypt-bigfile    │   ├── pyrsa-encrypt    │   ├── pyrsa-encrypt-bigfile    │   ├── pyrsa-keygen    │   ├── pyrsa-priv2pub    │   ├── pyrsa-sign    │   ├── pyrsa-verify    │   ├── python -&gt; python3    │   ├── python3 -&gt; &#x2F;usr&#x2F;bin&#x2F;python3    │   └── uwsgi    ├── include    ├── lib    │   └── python3.7    ├── lib64 -&gt; lib    ├── pip-selfcheck.json    └── pyvenv.cfg</code></pre><p>下面以阿里云为例，简单说明如何为项目注册域名、解析域名以及购买权威机构颁发的证书。</p><ol><li><p><a href="https://wanwang.aliyun.com/domain/">注册域名</a>。</p><p><img src="/./res/aliyun-domain.png"></p></li><li><p><a href="https://beian.aliyun.com/">域名备案</a>。</p><p><img src="/./res/aliyun-keeprecord.png"></p></li><li><p><a href="https://dns.console.aliyun.com/#/dns/domainList">域名解析</a>。</p><p><img src="/./res/aliyun-dnslist.png"></p><p><img src="/./res/aliyun-resolve-settings.png"></p></li><li><p><a href="https://www.aliyun.com/product/cas">购买证书</a>。</p><p><img src="/./res/aliyun-certificate.png"></p></li></ol><p>可以使用类似于sftp的工具将证书上传到<code>conf/cert</code>目录，然后使用git克隆项目代码到<code>code</code>目录。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd codegit clone &lt;url&gt;</code></pre><p>回到项目目录，创建并激活虚拟环境。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">python3 -m venv venvsource venv&#x2F;bin&#x2F;activate</code></pre><p>重建项目依赖项。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install -r code&#x2F;teamproject&#x2F;requirements.txt</code></pre><h3 id="uWSGI的配置"><a href="#uWSGI的配置" class="headerlink" title="uWSGI的配置"></a>uWSGI的配置</h3><ol><li><p>安装uWSGI。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install uwsgi</code></pre></li><li><p>修改uWSGI的配置文件（<code>/root/project/conf/uwsgi.ini</code>）。</p><pre class="language-INI" data-language="INI"><code class="language-INI">[uwsgi]# 配置前导路径base&#x3D;&#x2F;root&#x2F;project# 配置项目名称name&#x3D;teamproject# 守护进程master&#x3D;true# 进程个数processes&#x3D;4# 虚拟环境pythonhome&#x3D;%(base)&#x2F;venv# 项目地址chdir&#x3D;%(base)&#x2F;code&#x2F;%(name)# 指定python解释器pythonpath&#x3D;%(pythonhome)&#x2F;bin&#x2F;python# 指定uwsgi文件module&#x3D;%(name).wsgi# 通信的地址和端口(自己服务器的IP地址和端口)socket&#x3D;172.18.61.250:8000# 日志文件地址logto&#x3D;%(base)&#x2F;logs&#x2F;uwsgi.log</code></pre><blockquote><p>说明：可以先将“通信的地址和端口”项等号前面改为http来进行测试，如果没有问题再改回    成socket，然后通过Nginx来实现项目的“动静分离”（静态资源交给Nginx处理，动态内容交给    uWSGI处理）。按照下面的方式可以启动uWSGI服务器。</p></blockquote></li><li><p>启动服务器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">nohup uwsgi --ini conf&#x2F;uwsgi.ini &amp;</code></pre></li></ol><h3 id="Nginx的配置"><a href="#Nginx的配置" class="headerlink" title="Nginx的配置"></a>Nginx的配置</h3><ol><li><p>安装Nginx。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum -y install nginx</code></pre></li><li><p>修改全局配置文件（<code>/etc/nginx/nginx.conf</code>）。</p> <pre class="language-Nginx" data-language="Nginx"><code class="language-Nginx"># 配置用户user nginx;# 工作进程数(建议跟CPU的核数量一致)worker_processes auto;# 错误日志error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;# 进程文件pid &#x2F;run&#x2F;nginx.pid;# 包含其他的配置include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;# 工作模式(多路IO复用方式)和连接上限events &#123;    use epoll;    worker_connections 1024;&#125;# HTTP服务器相关配置http &#123;    # 日志格式    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    # 访问日志    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    # 开启高效文件传输模式    sendfile            on;    # 用sendfile传输文件时有利于改善性能    tcp_nopush          on;    # 禁用Nagle来解决交互性问题    tcp_nodelay         on;    # 客户端保持连接时间    keepalive_timeout   30;    types_hash_max_size 2048;    # 包含MIME类型的配置    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;    # 默认使用二进制流格式    default_type        application&#x2F;octet-stream;    # 包含其他配置文件    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    # 包含项目的Nginx配置文件    include &#x2F;root&#x2F;project&#x2F;conf&#x2F;*.conf;&#125;</code></pre></li><li><p>编辑局部配置文件（<code>/root/project/conf/nginx.conf</code>）。</p> <pre class="language-Nginx" data-language="Nginx"><code class="language-Nginx">server &#123;    listen      80;    server_name _;    access_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;access.log;    error_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;error.log;    location &#x2F; &#123;        include uwsgi_params;        uwsgi_pass 172.18.61.250:8000;    &#125;    location &#x2F;static&#x2F; &#123;        alias &#x2F;root&#x2F;project&#x2F;stat&#x2F;;        expires 30d;    &#125;&#125;server &#123;    listen      443;    server_name _;    ssl         on;    access_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;access.log;    error_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;error.log;    ssl_certificate     &#x2F;root&#x2F;project&#x2F;conf&#x2F;cert&#x2F;214915882850706.pem;    ssl_certificate_key &#x2F;root&#x2F;project&#x2F;conf&#x2F;cert&#x2F;214915882850706.key;    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;    location &#x2F; &#123;        include uwsgi_params;        uwsgi_pass 172.18.61.250:8000;    &#125;    location &#x2F;static&#x2F; &#123;        alias &#x2F;root&#x2F;project&#x2F;static&#x2F;;        expires 30d;    &#125;&#125;</code></pre><p> 到此为止，我们可以启动Nginx来访问我们的应用程序，HTTP和HTTPS都是没有问题的，如果Nginx已经运行，在修改配置文件后，我们可以用下面的命令重新启动Nginx。</p></li><li><p>重启Nginx服务器。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">nginx -s reload</code></pre><p> 或</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">systemctl restart nginx</code></pre></li></ol><blockquote><p>说明：可以对Django项目使用<code>python manage.py collectstatic</code>命令将静态资源收集到指定目录下，要做到这点只需要在项目的配置文件<code>settings.py</code>中添加<code>STATIC_ROOT</code>配置即可。</p></blockquote><h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><p>下面的配置中我们使用Nginx实现负载均衡，为另外的三个Nginx服务器（通过Docker创建）提供反向代理服务。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 801:80 --name nginx1 nginx:latestdocker run -d -p 802:80 --name nginx2 nginx:latestdocker run -d -p 803:80 --name nginx3 nginx:latest</code></pre><pre class="language-Nginx" data-language="Nginx"><code class="language-Nginx">user root;worker_processes auto;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;pid &#x2F;run&#x2F;nginx.pid;include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;events &#123;    worker_connections 1024;&#125;# 为HTTP服务配置负载均衡http &#123;upstream xx &#123;server 192.168.1.100 weight&#x3D;2;server 192.168.1.101 weight&#x3D;1;server 192.168.1.102 weight&#x3D;1;    &#125;server &#123;listen       80 default_server;listen       [::]:80 default_server;listen       443 ssl;listen       [::]:443 ssl;        ssl on;access_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;access.log;error_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;error.log;ssl_certificate &#x2F;root&#x2F;project&#x2F;conf&#x2F;cert&#x2F;214915882850706.pem;ssl_certificate_key &#x2F;root&#x2F;project&#x2F;conf&#x2F;cert&#x2F;214915882850706.key;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;location &#x2F; &#123;proxy_set_header Host $host;proxy_set_header X-Forwarded-For $remote_addr;# proxy_set_header X-Real-IP $remote_addr;# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_buffering off;proxy_pass http:&#x2F;&#x2F;fangtx;&#125;&#125;&#125;</code></pre><blockquote><p>说明：Nginx在配置负载均衡时，默认使用WRR（加权轮询算法），除此之外还支持ip_hash、fair（需要安装upstream_fair模块）和url_hash算法。此外，在配置upstream模块时可以指定服务器的状态值，包括：backup（备份机器，其他服务器不可用时才将请求分配到该机器）、down、fail_timeout（请求失败达到max_fails后的暂停服务时间）、max_fails（允许请求失败的次数）和weight（轮询的权重）。</p></blockquote><h3 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a>Keepalived</h3><p>当使用Nginx进行负载均衡配置时，要考虑负载均衡服务器宕机的情况。为此可以使用Keepalived来实现负载均衡主机和备机的热切换，从而保证系统的高可用性。Keepalived的配置还是比较复杂，通常由专门做运维的人进行配置，一个基本的配置可以参照<a href="https://www.jianshu.com/p/dd93bc6d45f5">《Keepalived的配置和使用》</a>。</p><h3 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h3><p>下面还是基于Docker来演示如何配置MySQL主从复制。我们事先准备好MySQL的配置文件以及保存MySQL数据和运行日志的目录，然后通过Docker的数据卷映射来指定容器的配置、数据和日志文件的位置。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">root└── mysql    ├── master    │   ├── conf    |└── data    └── slave-1    |├── conf    |└── data    └── slave-2    |├── conf    |└── data    └── slave-3    ├── conf    └── data</code></pre><ol><li><p>MySQL的配置文件（master和slave的配置文件需要不同的server-id）。</p><pre class="language-none"><code class="language-none">[mysqld]pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidsocket&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sockdatadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqllog-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.logserver-id&#x3D;1log-bin&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql-bin.logexpire_logs_days&#x3D;30max_binlog_size&#x3D;256Msymbolic-links&#x3D;0# slow_query_log&#x3D;ON# slow_query_log_file&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;slow.log# long_query_time&#x3D;1</code></pre></li><li><p>创建和配置master。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 3306:3306 --name mysql-master \-v &#x2F;root&#x2F;mysql&#x2F;master&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d \-v &#x2F;root&#x2F;mysql&#x2F;master&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql:5.7docker exec -it mysql-master &#x2F;bin&#x2F;bash</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">mysql -u root -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 1Server version: 5.7.23-log MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and&#x2F;or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; grant replication slave on *.* to &#39;slave&#39;@&#39;%&#39; identified by &#39;iamslave&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000003 |      590 |              |                  |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)mysql&gt; quitByeexit</code></pre><p>上面创建Docker容器时使用的<code>-v</code>参数（<code>--volume</code>）表示映射数据卷，冒号前是宿主机的目录，冒号后是容器中的目录，这样相当于将宿主机中的目录挂载到了容器中。</p></li><li><p>备份主表中的数据（如果需要的话）。</p><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; flush table with read lock;</code></pre><pre class="language-Bash" data-language="Bash"><code class="language-Bash">mysqldump -u root -p 123456 -A -B &gt; &#x2F;root&#x2F;backup&#x2F;mysql&#x2F;mybak$(date +&quot;%Y%m%d%H%M%S&quot;).sql</code></pre><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; unlock table;</code></pre></li><li><p>创建和配置slave。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run -d -p 3308:3306 --name mysql-slave-1 \-v &#x2F;root&#x2F;mysql&#x2F;slave-1&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d \-v &#x2F;root&#x2F;mysql&#x2F;slave-1&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;123456 \--link mysql-master:mysql-master mysql:5.7docker run -d -p 3309:3306 --name mysql-slave-2 \-v &#x2F;root&#x2F;mysql&#x2F;slave-2&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d \-v &#x2F;root&#x2F;mysql&#x2F;slave-2&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;123456 \--link mysql-master:mysql-master mysql:5.7docker run -d -p 3310:3306 --name mysql-slave-3 \-v &#x2F;root&#x2F;mysql&#x2F;slave-3&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d \-v &#x2F;root&#x2F;mysql&#x2F;slave-3&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;123456 \--link mysql-master:mysql-master mysql:5.7docker exec -it mysql-slave-1 &#x2F;bin&#x2F;bash</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">mysql -u root -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.23-log MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and&#x2F;or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; reset slave;Query OK, 0 rows affected (0.02 sec)mysql&gt; change master to master_host&#x3D;&#39;mysql-master&#39;, master_user&#x3D;&#39;slave&#39;, master_password&#x3D;&#39;iamslave&#39;, master_log_file&#x3D;&#39;mysql-bin.000003&#39;, master_log_pos&#x3D;590;Query OK, 0 rows affected, 2 warnings (0.03 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.01 sec)mysql&gt; show slave status\G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: mysql57                  Master_User: slave                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 590               Relay_Log_File: f352f05eb9d0-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes             Replicate_Do_DB:          Replicate_Ignore_DB:           Replicate_Do_Table:       Replicate_Ignore_Table:      Replicate_Wild_Do_Table:  Replicate_Wild_Ignore_Table:                   Last_Errno: 0                   Last_Error:                 Skip_Counter: 0          Exec_Master_Log_Pos: 590              Relay_Log_Space: 534              Until_Condition: None               Until_Log_File:                Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:           Master_SSL_CA_Path:              Master_SSL_Cert:            Master_SSL_Cipher:               Master_SSL_Key:        Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:               Last_SQL_Errno: 0               Last_SQL_Error:  Replicate_Ignore_Server_Ids:             Master_Server_Id: 1                  Master_UUID: 30c38043-ada1-11e8-8fa1-0242ac110002             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:      Last_IO_Error_Timestamp:     Last_SQL_Error_Timestamp:               Master_SSL_Crl:           Master_SSL_Crlpath:           Retrieved_Gtid_Set:            Executed_Gtid_Set:                Auto_Position: 0         Replicate_Rewrite_DB:                 Channel_Name:           Master_TLS_Version:1 row in set (0.00 sec)mysql&gt; quitByeexit</code></pre><p>接下来可以如法炮制配置出slave2和slave3，这样就可以搭建起一个“一主带三从”的主从复制环境。上面创建创建容器时使用的<code>--link</code>参数用来配置容器在网络上的主机名（网络地址别名）。</p></li></ol><p>配置好主从复制后，写数据的操作应该master上执行，而读数据的操作应该在slave上完成。为此，在Django项目中需要配置DATABASE_ROUTERS并通过自定义的主从复制路由类来实现读写分离操作，如下所示：</p><pre class="language-Python" data-language="Python"><code class="language-Python">DATABASE_ROUTERS &#x3D; [    # 此处省略其他配置    &#39;common.routers.MasterSlaveRouter&#39;,]</code></pre><pre class="language-Python" data-language="Python"><code class="language-Python">class MasterSlaveRouter(object):    &quot;&quot;&quot;主从复制路由&quot;&quot;&quot;    @staticmethod    def db_for_read(model, **hints):        &quot;&quot;&quot;        Attempts to read auth models go to auth_db.        &quot;&quot;&quot;        return random.choice((&#39;slave1&#39;, &#39;slave2&#39;, &#39;slave3&#39;))    @staticmethod    def db_for_write(model, **hints):        &quot;&quot;&quot;        Attempts to write auth models go to auth_db.        &quot;&quot;&quot;        return &#39;default&#39;    @staticmethod    def allow_relation(obj1, obj2, **hints):        &quot;&quot;&quot;        Allow relations if a model in the auth app is involved.        &quot;&quot;&quot;        return None    @staticmethod    def allow_migrate(db, app_label, model_name&#x3D;None, **hints):        &quot;&quot;&quot;        Make sure the auth app only appears in the &#39;auth_db&#39;        database.        &quot;&quot;&quot;        return True</code></pre><p>上面的内容参考了Django官方文档的<a href="https://docs.djangoproject.com/en/2.1/topics/db/multi-db/#topics-db-multi-db-routing">DATABASE_ROUTERS配置</a>，对代码进行了适当的调整。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>事实上，项目上线中最为麻烦的事情就是配置软件运行环境，环境的差异会给软件的安装和部署带来诸多的麻烦，而Docker正好可以解决这个问题。关于Docker在之前的文档中我们已经介绍过了，接下来我们对Docker的知识做一些必要的补充。</p><ol><li><p>创建镜像文件。</p><p>将容器保存成镜像：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker commit -m &quot;...&quot; -a &quot;jackfrued&quot; &lt;container-name&gt; jackfrued&#x2F;&lt;image-name&gt;</code></pre><p>使用Dockerfile构建镜像：</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile"># 指定基础镜像文件FROM centos:latest# 指定维护者信息MAINTAINER jackfrued# 执行命令RUN yum -y install gccRUN cd ~RUN mkdir -p project&#x2F;codeRUN mkdir -p project&#x2F;logs# 拷贝文件COPY ...# 暴露端口EXPOSE ...# 在容器启动时执行命令CMD ~&#x2F;init.sh</code></pre><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker build -t jackfrued&#x2F;&lt;image-name&gt; .</code></pre></li><li><p>镜像的导入和导出。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker save -o &lt;file-name&gt;.tar &lt;image-name&gt;:&lt;version&gt;docker load -i &lt;file-name&gt;.tar</code></pre></li><li><p>推送到DockerHub服务器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker tag &lt;image-name&gt;:&lt;version&gt; jackfrued&#x2F;&lt;name&gt;docker logindocker push jackfrued&#x2F;&lt;name&gt;</code></pre></li><li><p>容器之间的通信。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">docker run --link &lt;container-name&gt;:&lt;alias-name&gt;</code></pre></li></ol><p>如果我们能够在Docker中完成项目的部署，并且将整个部署好的容器打包成镜像文件进行分发和安装，这样就可以解决项目在多个节点上进行部署时可能遇到的麻烦，而且整个部署可以在很短的时间内完成。</p><h3 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h3><p><a href="https://github.com/Supervisor/supervisor">Supervisor</a>是一个用Python写的进程管理工具，可以很方便的用来在类Unix系统下启动、重启（自动重启程序）和关闭进程，目前Supervisor暂时还没有提供对Python 3的支持，可以通过Python 2来安装和运行Supervisor，再通过Supervisor来管理Python 3的程序。</p><blockquote><p><strong>提示</strong>：还有一个和Supervisor功能类似的工具名为Circus，支持Python 3。</p></blockquote><ol><li><p>安装Supervisor。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">virtualenv -p &#x2F;usr&#x2F;bin&#x2F;python venvsource venv&#x2F;bin&#x2F;activatepip install supervisor</code></pre></li><li><p>查看Supervisor的配置文件。</p> <pre class="language-Shell" data-language="Shell"><code class="language-Shell">vim &#x2F;etc&#x2F;supervisord.conf</code></pre> <pre class="language-INI" data-language="INI"><code class="language-INI">; 此处省略上面的代码; The [include] section can just contain the &quot;files&quot; setting.  This; setting can list multiple files (separated by whitespace or; newlines).  It can also contain wildcards.  The filenames are; interpreted as relative to this file.  Included files *cannot*; include files themselves.[include]files &#x3D; supervisord.d&#x2F;*.ini</code></pre><p> 可以看出自定义的管理配置代码可以放在<code>/etc/supervisord.d</code>目录中，并且文件名以<code>ini</code>作为后缀即可。</p></li><li><p>编写自己的配置文件<code>fangtx.ini</code>并放在<code>/etc/supervisord.d</code>目录中。</p><pre class="language-INI" data-language="INI"><code class="language-INI">[program:project]command&#x3D;uwsgi --ini &#x2F;root&#x2F;project&#x2F;conf&#x2F;uwsgi.inistopsignal&#x3D;QUITautostart&#x3D;trueautorestart&#x3D;trueredirect_stderr&#x3D;true[program:celery]; Set full path to celery program if using virtualenvcommand&#x3D;&#x2F;root&#x2F;project&#x2F;venv&#x2F;bin&#x2F;celery -A fangtx workeruser&#x3D;rootnumprocs&#x3D;1stdout_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;celery.logstderr_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;celery_error.logautostart&#x3D;trueautorestart&#x3D;truestartsecs&#x3D;10; Need to wait for currently executing tasks to finish at shutdown.; Increase this if you have very long running tasks.;stopwaitsecs &#x3D; 600; When resorting to send SIGKILL to the program to terminate it; send SIGKILL to its whole process group instead,; taking care of its children as well.killasgroup&#x3D;true; Set Celery priority higher than default (999); so, if rabbitmq is supervised, it will start first.priority&#x3D;1000</code></pre></li><li><p>启动Supervisor。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">supervisorctl -c &#x2F;etc&#x2F;supervisord.conf</code></pre></li></ol><h3 id="其他服务"><a href="#其他服务" class="headerlink" title="其他服务"></a>其他服务</h3><ol><li><p>常用开源软件。</p><table><thead><tr><th>功能</th><th>开源方案</th></tr></thead><tbody><tr><td>版本控制工具</td><td>Git、Mercurial、SVN</td></tr><tr><td>缺陷管理</td><td>Redmine、Mantis</td></tr><tr><td>负载均衡</td><td>Nginx、LVS、HAProxy</td></tr><tr><td>邮件服务</td><td>Postfix、Sendmail</td></tr><tr><td>HTTP服务</td><td>Nginx、Apache</td></tr><tr><td>消息队列</td><td>RabbitMQ、ZeroMQ、Redis、Kafka</td></tr><tr><td>文件系统</td><td>FastDFS</td></tr><tr><td>基于位置服务（LBS）</td><td>MongoDB、Redis</td></tr><tr><td>监控服务</td><td>Nagios、Zabbix</td></tr><tr><td>关系型数据库</td><td>MySQL、PostgreSQL</td></tr><tr><td>非关系型数据库</td><td>MongoDB、Redis、Cassandra、TiDB</td></tr><tr><td>搜索引擎</td><td>ElasticSearch、Solr</td></tr><tr><td>缓存服务</td><td>Mamcached、Redis</td></tr></tbody></table></li><li><p>常用云服务。</p><table><thead><tr><th>功能</th><th>可用的云服务</th></tr></thead><tbody><tr><td>团队协作工具</td><td>Teambition、钉钉</td></tr><tr><td>代码托管平台</td><td>Github、Gitee、CODING</td></tr><tr><td>邮件服务</td><td>SendCloud</td></tr><tr><td>云存储（CDN）</td><td>七牛、OSS、LeanCloud、Bmob、又拍云、S3</td></tr><tr><td>移动端推送</td><td>极光、友盟、百度</td></tr><tr><td>即时通信</td><td>环信、融云</td></tr><tr><td>短信服务</td><td>云片、极光、Luosimao、又拍云</td></tr><tr><td>第三方登录</td><td>友盟、ShareSDK</td></tr><tr><td>网站监控和统计</td><td>阿里云监控、监控宝、百度云观测、小鸟云</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>99.面试中的公共问题</title>
      <link href="/2024/07/01/99.mian-shi-zhong-de-gong-gong-wen-ti/"/>
      <url>/2024/07/01/99.mian-shi-zhong-de-gong-gong-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="面试中的公共问题"><a href="#面试中的公共问题" class="headerlink" title="面试中的公共问题"></a>面试中的公共问题</h2><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><ol><li><p>TCP&#x2F;IP模型相关问题。</p><blockquote><p>建议阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">《互联网协议入门（一）》</a>和<a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html">《互联网协议入门（二）》</a>。</p></blockquote></li><li><p>HTTP和HTTPS相关问题。</p><blockquote><p>建议阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>和<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">《SSL&#x2F;TLS协议运行机制的概述》</a>。</p></blockquote></li><li><p>Linux常用命令和服务。</p></li><li><p>进程和线程之间的关系。什么时候用多线程？什么时候用多进程？。</p></li><li><p>关系型数据库相关问题（ACID、事务隔离级别、锁、SQL优化）。</p></li><li><p>非关系型数据库相关问题（CAP&#x2F;BASE、应用场景）。</p></li></ol><h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><ol><li><p>开发中用过哪些标准库和三方库。</p><blockquote><p>标准库：sys &#x2F; os &#x2F; re &#x2F; math &#x2F; random &#x2F; logging &#x2F; json &#x2F; pickle &#x2F; shelve &#x2F; socket &#x2F; datetime &#x2F; hashlib &#x2F; configparser &#x2F; urllib &#x2F; itertools &#x2F; collections &#x2F; functools &#x2F; threading &#x2F; multiprocess &#x2F; timeit &#x2F; atexit &#x2F; abc &#x2F; asyncio &#x2F; base64 &#x2F; concurrent.futures &#x2F; copy &#x2F; csv &#x2F; operator &#x2F; enum &#x2F; heapq &#x2F; http &#x2F; profile &#x2F; pstats &#x2F; ssl &#x2F; unittest &#x2F; uuid</p><p>三方库：openpyxl &#x2F; xlrd &#x2F; xlwt &#x2F; PyPDF2 &#x2F; ReportLab &#x2F; PyYAML &#x2F; jieba &#x2F; pillow &#x2F; requests &#x2F; urllib3 &#x2F; responses &#x2F; aiohttp &#x2F; BeautifulSoup4 &#x2F; lxml &#x2F; pyquery &#x2F; PyMySQL &#x2F; psycopg2 &#x2F; redis &#x2F; PyMongo &#x2F; Peewee &#x2F; SQLAlchemy &#x2F; alipay &#x2F; PyJWT &#x2F; itsdangerous &#x2F; celery &#x2F; flower &#x2F; elasticsearch-dsl-py &#x2F; PyCrypto &#x2F; Paramiko &#x2F; logbook &#x2F; nose &#x2F; pytest &#x2F; coverage &#x2F; Selenium &#x2F; lineprofiler &#x2F; memoryprofiler &#x2F; matplotlib &#x2F; pygal &#x2F; OpenCV</p></blockquote></li><li><p>装饰器的作用、原理和实现。</p></li><li><p>使用过哪些魔法方法。</p><blockquote><p>建议阅读<a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html">《Python魔术方法指南》</a>。</p></blockquote></li><li><p>生成式、生成器、迭代器的编写。</p></li><li><p>列表、集合、字典的底层实现。</p></li><li><p>垃圾回收相关问题。</p></li><li><p>并发编程的相关问题。</p></li><li><p>协程和异步I&#x2F;O相关知识。</p></li></ol><h3 id="Django和Flask"><a href="#Django和Flask" class="headerlink" title="Django和Flask"></a>Django和Flask</h3><ol><li><p>MVC架构（MTV）解决了什么问题。</p></li><li><p>中间件的执行流程以及如何自定义中间件。</p></li><li><p>REST数据接口如何设计（URL、域名、版本、过滤、状态码、安全性）。</p><blockquote><p>建议阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">《RESTful API设计指南》</a>。</p></blockquote></li><li><p>使用ORM框架实现CRUD操作的相关问题。</p><ul><li>如何实现多条件组合查询 &#x2F; 如何执行原生的SQL &#x2F; 如何避免N+1查询问题</li></ul></li><li><p>如何执行异步任务和定时任务。</p></li><li><p>如何实现页面缓存和查询缓存？缓存如何预热？</p></li></ol><h3 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a>爬虫相关</h3><ol><li>Scrapy框架的组件和数据处理流程。</li><li>爬取的目的（项目中哪些地方需要用到爬虫的数据）。</li><li>使用的工具（抓包、下载、清理、存储、分析、可视化）。</li><li>数据的来源（能够轻松的列举出10个网站）。</li><li>数据的构成（抓取的某个字段在项目中有什么用）。</li><li>反反爬措施（限速、请求头、Cookie池、代理池、Selenium WebDriver、RoboBrowser、TOR、OCR）。</li><li>数据的体量（最后抓取了多少数据，多少W条数据或多少个G的数据）。</li><li>后期数据处理（持久化、数据补全、归一化、格式化、转存、分类）。</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>科学运算函数库（SciPy和NumPy常用运算）。</li><li>数据分析库（Pandas中封装的常用算法）。</li><li>常用的模型及对应的场景（分类、回归、聚类）。</li><li>提取了哪些具体的指标。</li><li>如何评价模型的优劣。</li><li>每种模型实际操作的步骤，对结果如何评价。</li></ol><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ol><li>项目团队构成以及自己在团队中扮演的角色（在项目中的职责）。</li><li>项目的业务架构（哪些模块及子模块）和技术架构（移动端、PC端、后端技术栈）。</li><li>软件控制管理相关工具（版本控制、问题管理、持续集成）。</li><li>核心业务实体及其属性，实体与实体之间的关系。</li><li>用到哪些依赖库，依赖库主要解决哪方面的问题。</li><li>项目如何部署上线以及项目的物理架构（Nginx、Gunicorn&#x2F;uWSGI、Redis、MongoDB、MySQL、Supervisor等）。</li><li>如何对项目进行测试，有没有做过性能调优。</li><li>项目中遇到的困难有哪些，如何解决的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PEP8风格指南</title>
      <link href="/2024/07/01/pep8-feng-ge-zhi-nan/"/>
      <url>/2024/07/01/pep8-feng-ge-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="PEP-8风格指南"><a href="#PEP-8风格指南" class="headerlink" title="PEP 8风格指南"></a>PEP 8风格指南</h2><p>PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的<a href="https://www.python.org/dev/peps/pep-0008/">PEP 8链接</a>中找到该文档，下面我们对该文档的关键部分做一个简单的总结。</p><h3 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h3><ol><li><u>使用空格来表示缩进而不要用制表符（Tab）。</u>这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C&#x2F;C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。</li><li><u>和语法相关的每一层缩进都用4个空格来表示。</u></li><li><u>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</u></li><li><u>函数和类的定义，代码前后都要用两个空行进行分隔。</u></li><li><u>在同一个类中，各个方法之间应该用一个空行进行分隔。</u></li><li><u>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</u></li></ol><h3 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h3><p>PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。</p><ol><li><u>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</u></li><li><u>类中受保护的实例属性，应该以一个下划线开头。</u></li><li><u>类中私有的实例属性，应该以两个下划线开头。</u></li><li><u>类和异常的命名，应该每个单词首字母大写。</u></li><li><u>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</u></li><li><u>类的实例方法，应该把第一个参数命名为<code>self</code>以表示对象自身。</u></li><li><u>类的类方法，应该把第一个参数命名为<code>cls</code>以表示该类自身。</u></li></ol><h3 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h3><p>在Python之禅（可以使用<code>import this</code>查看）中有这么一句名言：“There should be one– and preferably only one –obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。</p><ol><li><u>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。</u>例如<code>if a is not b</code>就比<code>if not a is b</code>更容易让人理解。</li><li>不要用检查长度的方式来判断字符串、列表等是否为<code>None</code>或者没有元素，应该用<code>if not x</code>这样的写法来检查它。</li><li><u>就算<code>if</code>分支、<code>for</code>循环、<code>except</code>异常捕获等中只有一行代码，也不要将代码和<code>if</code>、<code>for</code>、<code>except</code>等写在一起，分开写才会让代码更清晰。</u></li><li><u><code>import</code>语句总是放在文件开头的地方。</u></li><li><u>引入模块的时候，<code>from math import sqrt</code>比<code>import math</code>更好。</u></li><li><u>如果有多个<code>import</code>语句，应该将其分为三部分，从上到下分别是Python<strong>标准模块</strong>、<strong>第三方模块</strong>和<strong>自定义模块</strong>，每个部分内部应该按照模块名称的<strong>字母表顺序</strong>来排列。</u></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之禅的最佳翻译</title>
      <link href="/2024/07/01/python-zhi-shan-de-zui-jia-fan-yi/"/>
      <url>/2024/07/01/python-zhi-shan-de-zui-jia-fan-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Zen-of-Python（Python之禅）"><a href="#Zen-of-Python（Python之禅）" class="headerlink" title="Zen of Python（Python之禅）"></a>Zen of Python（Python之禅）</h2><ol><li>Beautiful is better than ugly. （优美比丑陋好）<br></li><li>Explicit is better than implicit.（清晰比晦涩好）<br></li><li>Simple is better than complex.（简单比复杂好）<br></li><li>Complex is better than complicated.（复杂比错综复杂好）<br></li><li>Flat is better than nested.（扁平比嵌套好）<br></li><li>Sparse is better than dense.（稀疏比密集好）<br></li><li>Readability counts.（可读性很重要）<br></li><li>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）<br></li><li>Although practicality beats purity.（但现实往往并不那么完美）<br></li><li>Errors should never pass silently.（异常不应该被静默处理）<br></li><li>Unless explicitly silenced.（除非你希望如此）<br></li><li>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）<br></li><li>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）<br></li><li>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人[^1]）<br></li><li>Now is better than never.（现在开始做比不做好）<br></li><li>Although never is often better than *right* now.（不做比盲目去做好[^2]）<br></li><li>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它通常不是一个好的方案）<br></li><li>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）<br></li><li>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）<br></li></ol><p>[^1]:这里指的是 Python 之父 Guido van Rossumm。<br>[^2]:极限编程中的YAGNI原则</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python参考书籍</title>
      <link href="/2024/07/01/python-can-kao-shu-ji/"/>
      <url>/2024/07/01/python-can-kao-shu-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h2><h3 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h3><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h3 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h3><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h3 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h3><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python容器使用小技巧</title>
      <link href="/2024/07/01/python-rong-qi-shi-yong-xiao-ji-qiao/"/>
      <url>/2024/07/01/python-rong-qi-shi-yong-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="Python容器类型使用小技巧"><a href="#Python容器类型使用小技巧" class="headerlink" title="Python容器类型使用小技巧"></a>Python容器类型使用小技巧</h2><p>Python中提供了非常丰富的容器型数据类型，大家最为熟悉的有<code>list</code>、<code>tuple</code>、<code>set</code>、<code>dict</code>等。下面为大家分享一些使用这些类型的小技巧，希望帮助大家写出更加Pythonic的代码。</p><h3 id="从字典中取最大"><a href="#从字典中取最大" class="headerlink" title="从字典中取最大"></a>从字典中取最大</h3><p>假设字典对象对应的变量名为<code>my_dict</code>。</p><ul><li><p>取出最大值</p>  <pre class="language-Python" data-language="Python"><code class="language-Python">max(my_dict.values())</code></pre></li><li><p>取值最大值的键</p>  <pre class="language-Python" data-language="Python"><code class="language-Python">max(my_dict, key&#x3D;my_dict.get)</code></pre></li><li><p>取出最大值的键和值</p>  <pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">max</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>  或</p>  <pre class="language-Python" data-language="Python"><code class="language-Python">import operatormax(my_dict.items(), key&#x3D;operator.itemgetter(1))</code></pre><blockquote><p><strong>说明</strong>：上面用到了<code>operator</code>模块的<code>itemgetter</code>函数，这个函数的的作用如下所示。在上面的代码中，<code>itemgetter</code>帮我们获取到了二元组中的第2个元素。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def itemgetter(*items):    if len(items) &#x3D;&#x3D; 1:        item &#x3D; items[0]        def g(obj):            return obj[item]    else:        def g(obj):            return tuple(obj[item] for item in items)    return g</code></pre></blockquote></li></ul><h3 id="统计列表元素出现次数"><a href="#统计列表元素出现次数" class="headerlink" title="统计列表元素出现次数"></a>统计列表元素出现次数</h3><p>假设列表对象对应的变量名为<code>my_list</code>。</p><pre class="language-Python" data-language="Python"><code class="language-Python">&#123;x: my_list.count(x) for x in set(my_list)&#125;</code></pre><p>或</p><pre class="language-Python" data-language="Python"><code class="language-Python">from itertools import groupby&#123;key: len(list(group)) for key, group in groupby(sorted(my_list))&#125;</code></pre><blockquote><p><strong>说明</strong>：<code>groupby</code>函数会将相邻相同元素分到一个组中，所以先用<code>sorted</code>函数排序就是为了将相同的元素放到一起。</p></blockquote><p>或</p><pre class="language-Python" data-language="Python"><code class="language-Python">from collections import Counterdict(Counter(my_list))</code></pre><h3 id="截断列表元素"><a href="#截断列表元素" class="headerlink" title="截断列表元素"></a>截断列表元素</h3><p>假设列表对象对应的变量名为<code>my_list</code>，通常大家会想到用下面的方式来截断列表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">my_list &#x3D; my_list[:i]my_list &#x3D; my_list[j:]</code></pre><p>然而，更好的方式使用下面的操作，大家可以认真想想为什么。</p><pre class="language-Python" data-language="Python"><code class="language-Python">del my_list[i:]del my_list[:j]</code></pre><h3 id="按最长列表实现zip操作"><a href="#按最长列表实现zip操作" class="headerlink" title="按最长列表实现zip操作"></a>按最长列表实现zip操作</h3><p>Python的内置函数<code>zip</code>可以产生一个生成器对象，该生成器对象将两个或多个可迭代对象的元素组装到一起，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">list(zip(&#39;abc&#39;, [1, 2, 3, 4]))</code></pre><p>执行上面的代码会得到一个如下所示的列表，相信大家也注意到了，列表中元素的个数是由<code>zip</code>函数中长度最小的可迭代对象决定的，所以下面的列表中只有3个元素。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)]</code></pre><p>如果希望由<code>zip</code>函数中长度最大的可迭代对象来决定最终迭代出的元素个数，可以试一试<code>itertools</code>模块的<code>zip_longest</code>函数，其用法如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from itertools import zip_longestlist(zip_longest(&#39;abc&#39;, [1, 2, 3, 4]))</code></pre><p>上面的代码创建出的列表对象如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3), (None, 4)]</code></pre><h3 id="快速拷贝一个列表"><a href="#快速拷贝一个列表" class="headerlink" title="快速拷贝一个列表"></a>快速拷贝一个列表</h3><p>如果希望快速拷贝一个列表对象，可以通过切片操作来实现，但是切片操作仅实现了浅拷贝，简单的说就是切片创建了新的列表对象，但是新列表中的元素是和之前的列表共享的。如果希望实现深拷贝，可以使用<code>copy</code>模块的<code>deepcopy</code>函数。</p><ul><li><p>浅拷贝</p>  <pre class="language-Python" data-language="Python"><code class="language-Python">thy_list &#x3D; my_list[:]</code></pre><p>  或</p>  <pre class="language-Python" data-language="Python"><code class="language-Python">import copythy_list &#x3D; copy.copy(my_list)</code></pre></li><li><p>深拷贝</p>  <pre class="language-Python" data-language="Python"><code class="language-Python">import copythy_list &#x3D; copy.deepcopy(my_list)</code></pre></li></ul><h3 id="对两个或多个列表对应元素进行操作"><a href="#对两个或多个列表对应元素进行操作" class="headerlink" title="对两个或多个列表对应元素进行操作"></a>对两个或多个列表对应元素进行操作</h3><p>Python内置函数中的<code>map</code>函数可以对一个可迭代对象中的元素进行“映射”操作，这个函数在批量处理数据时非常有用。但是很多人都不知道，这个函数还可以作用于多个可迭代对象，通过传入的函数对多个可迭代对象中的对应元素进行处理，如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">my_list &#x3D; [11, 13, 15, 17]thy_list &#x3D; [2, 4, 6, 8, 10]list(map(lambda x, y: x + y, my_list, thy_list))</code></pre><p>上面的操作会得到如下所示的列表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[13, 17, 21, 25]</code></pre><p>当然，同样的操作也可以用<code>zip</code>函数配合列表生成式来完成。</p><pre class="language-Python" data-language="Python"><code class="language-Python">my_list &#x3D; [11, 13, 15, 17]thy_list &#x3D; [2, 4, 6, 8, 10][x + y for x, y in zip(my_list, thy_list)]</code></pre><h3 id="处理列表中的空值和零值"><a href="#处理列表中的空值和零值" class="headerlink" title="处理列表中的空值和零值"></a>处理列表中的空值和零值</h3><p>假设列表对象对应的变量名为<code>my_list</code>，如果列表中有空值（<code>None</code>）和零值，我们可以用下面的方式去掉空值和零值。</p><pre class="language-Python" data-language="Python"><code class="language-Python">list(filter(bool, my_list))</code></pre><p>对应的列表生成式语法如下所示。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[x for x in my_list if x]</code></pre><h3 id="从嵌套列表中抽取指定列"><a href="#从嵌套列表中抽取指定列" class="headerlink" title="从嵌套列表中抽取指定列"></a>从嵌套列表中抽取指定列</h3><p>假设<code>my_list</code>是一个如下所示的嵌套列表，该嵌套列表可以用来表示数学上的矩阵，如果要取出矩阵第一列的元素构成一个列表，我们可以这样写。</p><pre class="language-Python" data-language="Python"><code class="language-Python">my_list &#x3D; [    [1, 1, 2, 2],    [5, 6, 7, 8],    [3, 3, 4, 4],]col1, *_ &#x3D; zip(*my_list)list(col1)</code></pre><p>这里我们会得到一个如下所示的列表，刚好是矩阵的第一列。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[1, 5, 3]</code></pre><p>以此类推，如果想取出矩阵第二列的元素构成一个列表，可以用如下所示的方法。</p><pre class="language-Python" data-language="Python"><code class="language-Python">_, col2, *_ &#x3D; zip(*my_list)list(col2)</code></pre><p>至此，如果要实现矩阵的转置操作，我们也可以按照上面的思路写出下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[list(x) for x in zip(*my_list)]</code></pre><p>经过上面的操作，我们会得到如下所示的列表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">[[1, 5, 3],  [1, 6, 3],  [2, 7, 4],  [2, 8, 4]]</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>不知道上面的内容有没有触及到大家的知识盲区，如果有的话欢迎在评论区留言讨论。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析师面试题</title>
      <link href="/2024/07/01/python-shu-ju-fen-xi-shi-mian-shi-ti/"/>
      <url>/2024/07/01/python-shu-ju-fen-xi-shi-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="Python数据分析师面试题"><a href="#Python数据分析师面试题" class="headerlink" title="Python数据分析师面试题"></a>Python数据分析师面试题</h2><h3 id="基础知识部分"><a href="#基础知识部分" class="headerlink" title="基础知识部分"></a>基础知识部分</h3><h3 id="编程能力部分"><a href="#编程能力部分" class="headerlink" title="编程能力部分"></a>编程能力部分</h3><h3 id="商业项目部分"><a href="#商业项目部分" class="headerlink" title="商业项目部分"></a>商业项目部分</h3><ol><li>近期公司的X指标出现了明显的下滑，说说你会如果系统化的分析指标下滑的原因。</li><li>公司对App进行了版本迭代，对X功能做出了调整，请说明你会如何评估改版的效果。</li><li>公司对App做了一次营销拉新活动，请说明你会如何评估本次拉新活动的效果。</li><li>请说说你在设计数据报表时一般会考虑哪些问题。</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程惯例</title>
      <link href="/2024/07/01/python-bian-cheng-guan-li/"/>
      <url>/2024/07/01/python-bian-cheng-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Python编程惯例"><a href="#Python编程惯例" class="headerlink" title="Python编程惯例"></a>Python编程惯例</h2><p>“惯例”这个词指的是“习惯的做法，常规的办法，一贯的做法”，与这个词对应的英文单词叫“idiom”。由于Python跟其他很多编程语言在语法和使用上还是有比较显著的差别，因此作为一个Python开发者如果不能掌握这些惯例，就无法写出“Pythonic”的代码。下面我们总结了一些在Python开发中的惯用的代码。</p><ol><li><p>让代码既可以被导入又可以被执行。</p><pre class="language-Python" data-language="Python"><code class="language-Python">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</code></pre></li><li><p>用下面的方式判断逻辑“真”或“假”。</p><pre class="language-Python" data-language="Python"><code class="language-Python">if x:if not x:</code></pre><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;jackfrued&#39;fruits &#x3D; [&#39;apple&#39;, &#39;orange&#39;, &#39;grape&#39;]owners &#x3D; &#123;&#39;1001&#39;: &#39;骆昊&#39;, &#39;1002&#39;: &#39;王大锤&#39;&#125;if name and fruits and owners:    print(&#39;I love fruits!&#39;)</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;jackfrued&#39;fruits &#x3D; [&#39;apple&#39;, &#39;orange&#39;, &#39;grape&#39;]owners &#x3D; &#123;&#39;1001&#39;: &#39;骆昊&#39;, &#39;1002&#39;: &#39;王大锤&#39;&#125;if name !&#x3D; &#39;&#39; and len(fruits) &gt; 0 and owners !&#x3D; &#123;&#125;:    print(&#39;I love fruits!&#39;)</code></pre></li><li><p>善于使用in运算符。</p><pre class="language-Python" data-language="Python"><code class="language-Python">if x in items: # 包含for x in items: # 迭代</code></pre><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;Hao LUO&#39;if &#39;L&#39; in name:    print(&#39;The name has an L in it.&#39;)</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;Hao LUO&#39;if name.find(&#39;L&#39;) !&#x3D; -1:    print(&#39;This name has an L in it!&#39;)</code></pre></li><li><p>不使用临时变量交换两个值。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a, b &#x3D; b, a</code></pre></li><li><p>用序列构建字符串。</p><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">chars &#x3D; [&#39;j&#39;, &#39;a&#39;, &#39;c&#39;, &#39;k&#39;, &#39;f&#39;, &#39;r&#39;, &#39;u&#39;, &#39;e&#39;, &#39;d&#39;]name &#x3D; &#39;&#39;.join(chars)print(name)  # jackfrued</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">chars &#x3D; [&#39;j&#39;, &#39;a&#39;, &#39;c&#39;, &#39;k&#39;, &#39;f&#39;, &#39;r&#39;, &#39;u&#39;, &#39;e&#39;, &#39;d&#39;]name &#x3D; &#39;&#39;for char in chars:    name +&#x3D; charprint(name)  # jackfrued</code></pre></li><li><p>EAFP优于LBYL。</p><p>EAFP - <strong>E</strong>asier to <strong>A</strong>sk <strong>F</strong>orgiveness than <strong>P</strong>ermission.</p><p>LBYL - <strong>L</strong>ook <strong>B</strong>efore <strong>Y</strong>ou <strong>L</strong>eap.</p><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">d &#x3D; &#123;&#39;x&#39;: &#39;5&#39;&#125;try:    value &#x3D; int(d[&#39;x&#39;])    print(value)except (KeyError, TypeError, ValueError):    value &#x3D; None</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">d &#x3D; &#123;&#39;x&#39;: &#39;5&#39;&#125;if &#39;x&#39; in d and isinstance(d[&#39;x&#39;], str) \and d[&#39;x&#39;].isdigit():    value &#x3D; int(d[&#39;x&#39;])    print(value)else:    value &#x3D; None</code></pre></li><li><p>使用enumerate进行迭代。</p><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">fruits &#x3D; [&#39;orange&#39;, &#39;grape&#39;, &#39;pitaya&#39;, &#39;blueberry&#39;]for index, fruit in enumerate(fruits):print(index, &#39;:&#39;, fruit)</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">fruits &#x3D; [&#39;orange&#39;, &#39;grape&#39;, &#39;pitaya&#39;, &#39;blueberry&#39;]index &#x3D; 0for fruit in fruits:    print(index, &#39;:&#39;, fruit)    index +&#x3D; 1</code></pre></li><li><p>用生成式生成列表。</p><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; [7, 20, 3, 15, 11]result &#x3D; [num * 3 for num in data if num &gt; 10]print(result)  # [60, 45, 33]</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; [7, 20, 3, 15, 11]result &#x3D; []for i in data:    if i &gt; 10:        result.append(i * 3)print(result)  # [60, 45, 33]</code></pre></li><li><p>用zip组合键和值来创建字典。</p><p><strong>好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">keys &#x3D; [&#39;1001&#39;, &#39;1002&#39;, &#39;1003&#39;]values &#x3D; [&#39;骆昊&#39;, &#39;王大锤&#39;, &#39;白元芳&#39;]d &#x3D; dict(zip(keys, values))print(d)</code></pre><p><strong>不好</strong>的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">keys &#x3D; [&#39;1001&#39;, &#39;1002&#39;, &#39;1003&#39;]values &#x3D; [&#39;骆昊&#39;, &#39;王大锤&#39;, &#39;白元芳&#39;]d &#x3D; &#123;&#125;for i, key in enumerate(keys):    d[key] &#x3D; values[i]print(d)</code></pre></li></ol><blockquote><p><strong>说明</strong>：这篇文章的内容来自于网络，有兴趣的读者可以阅读<a href="http://safehammad.com/downloads/python-idioms-2014-01-16.pdf">原文</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个小例子助你彻底理解协程</title>
      <link href="/2024/07/01/yi-ge-xiao-li-zi-zhu-ni-che-di-li-jie-xie-cheng/"/>
      <url>/2024/07/01/yi-ge-xiao-li-zi-zhu-ni-che-di-li-jie-xie-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一个小例子助你彻底理解协程"><a href="#一个小例子助你彻底理解协程" class="headerlink" title="一个小例子助你彻底理解协程"></a>一个小例子助你彻底理解协程</h2><p>协程，可能是Python中最让初学者困惑的知识点之一，它也是Python中实现并发编程的一种重要方式。Python中可以使用多线程和多进程来实现并发，这两种方式相对来说是大家比较熟悉的。事实上，还有一种实现并发的方式叫做异步编程，而协程就是实现异步编程的必要方式。</p><p>所谓协程，可以简单的理解为多个相互协作的子程序。在同一个线程中，当一个子程序阻塞时，我们可以让程序马上从一个子程序切换到另一个子程序，从而避免CPU因程序阻塞而闲置，这样就可以提升CPU的利用率，相当于用一种协作的方式加速了程序的执行。所以，我们可以言简意赅的说：<strong>协程实现了协作式并发</strong>。</p><p>接下来用一个小例子帮助大家理解什么是协作式并发，先看看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import timedef display(num):    time.sleep(1)    print(num)for num in range(10):    display(num)</code></pre><p>上面这段代码相信大家很容看懂，程序会输出0到9的数字，每隔1秒中输出一个数字，因此整个程序的执行需要大约10秒时间。值得注意的是，因为没有使用多线程或多进程，程序中只有一个执行单元，而<code>time.sleep(1)</code>的休眠操作会让整个线程停滞1秒钟，对于上面的代码来说，在这段时间里面CPU是完全闲置的没有做什么事情。</p><p>我们再来看看使用协程会发生什么事情。从Python 3.5开始，使用协程实现协作式编发有了更为便捷的语法，我们可以使用<code>async</code>来定义异步函数，可以使用<code>await</code>让一个阻塞的子程序将CPU让给与它协作的子程序。在Python 3.7中，<code>asyanc</code>和<code>await</code>成为了正式的关键字，让开发者有一种喜大普奔的感觉。我们先看看如何定义一个异步函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import asyncioasync def display(num):    await asyncio.sleep(1)    print(num)</code></pre><p>接下来敲黑板说重点。异步函数不同于普通函数，调用普通函数会得到返回值，而调用异步函数会得到一个协程对象。我们需要将协程对象放到一个事件循环中才能达到与其他协程对象协作的效果，因为事件循环会负责处理子程序切换的操作，简单的说就是让阻塞的子程序让出CPU给可以执行的子程序。</p><p>我们先通过下面的列表生成式来代码10个协程对象，跟刚才在循环中调用display函数的道理一致。</p><pre class="language-Python" data-language="Python"><code class="language-Python">coroutines &#x3D; [display(num) for num in range(10)]</code></pre><p>通过下面的代码可以获取事件循环并将协程对象放入事件循环中。</p><pre class="language-Python" data-language="Python"><code class="language-Python">loop &#x3D; asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(coroutines))loop.close()</code></pre><p>执行上面的代码会发现，10个分别会阻塞1秒钟的协程总共只阻塞了约1秒种的时间，这就说明<strong>协程对象一旦阻塞会将CPU让出而不是让CPU处于闲置状态</strong>，这样就大大的<strong>提升了CPU的利用率</strong>。而且我们还会注意到，0到9的数字并不是按照我们创建协程对象的顺序打印出来的，这正是我们想要的结果啊；另外，多次执行该程序会发现每次输出的结果都不太一样，这正是并发程序本身执行顺序不确定性造成的结果。</p><p>上面的例子来自于著名的“花书”（《Python高级并发编程》），为了让大家对协程的体会更加深刻，对原书的代码做了小的改动，这个例子虽然简单，但是它已经让你体会到了协作式并发的魅力。在商业项目中，如果需要使用协作式并发，还可以将系统默认的事件循环替换为<code>uvloop</code>提供的事件循环，这样会获得更好的性能，因为<code>uvloop</code>是基于著名的跨平台异步I&#x2F;O库libuv实现的。另外，如果要做基于HTTP的网络编程，三方库<strong>aiohttp</strong>是不错的选择，它基于asyncio实现了异步的HTTP服务器和客户端。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建自己的博客</title>
      <link href="/2024/07/01/shi-yong-hexo-da-jian-zi-ji-de-bo-ke/"/>
      <url>/2024/07/01/shi-yong-hexo-da-jian-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Hexo搭建自己的博客"><a href="#使用Hexo搭建自己的博客" class="headerlink" title="使用Hexo搭建自己的博客"></a>使用Hexo搭建自己的博客</h2><p>对于一个程序员来说，搭建一个属于自己的博客平台是非常有意义的事情。首先，博客可以记录自己的成长历程，也是对自己一段时间学习和工作的总结和沉淀；其他，通过博客可以营销自己，增强自己在互联网或行业内的影响力，为将来更好的职业生涯打一个坚实的基础。前几年有一本名为《软技能 - 代码之外的生存指南》的畅销书，我记得书中有这么一段话：“流行乐队的音乐才华可能并不比夜店驻场乐队高多少，他们为什么就可以在全世界巡回演出，创造一个又一个白金记录？……你的营销做得越好，你的才华才能表现得淋漓尽致。”</p><p>这里顺便啰嗦两句，在互联网如此发达的今天，我们应该如何营销自己呢？自我营销首先要从打造个人品牌做起，对于程序员来说，最容易去做好的一件事情还是搭建自己的博客。博客相当于是你在互联网上的一个基地，尤其是当你拥有了属于自己的独立博客后，你可以做很多自己想做的事情，既可以传达自己的思想，又可以提升自己的影响力，当然如果你的博客经营得非常好，你可以从中获利。当然，除了博客，直播、视频网站、投稿、写书、技术活动都是可选的自我营销方式。当然，做自我营销也需要持之以恒，三天打鱼两天晒网是很难有什么收获的。</p><h3 id="Hexo概述"><a href="#Hexo概述" class="headerlink" title="Hexo概述"></a>Hexo概述</h3><p>Hexo是一个快速、简洁且高效的博客框架，它能够将<a href="https://zh.wikipedia.org/zh-hans/Markdown">Markdown格式</a>的文档渲染成漂亮的网页，这样我们就可以在很短的时间内迅速的创建出网站的静态内容，而Markdown格式对程序员来说相信并不陌生。要想使用Hexo来搭建自己的博客，我实在想不出有什么教程比<a href="https://hexo.io/zh-cn/">官方文档</a>更好，强烈建议大家阅读官方文档来了解Hexo，下面我只做一个简要的使用说明。</p><blockquote><p>说明：<strong>Markdown</strong>是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，同时也对图片、图表、数学公式提供了支持，可以用来书写电子书、软件文档等，同时也可以非常方便的转换为HTML页面或者是PDF文档。</p></blockquote><p>要使用Hexo，首先得确保计算机上已经安装了<a href="https://nodejs.org/en/">node.js</a>环境和<a href="https://git-scm.com/">git</a>环境，前者是一个能够在服务器端运行JavaScript代码的环境，后者是版本控制工具。安装node.js主要是为了使用它的包管理工具npm，所以不需要先系统的学习node.js的知识；而安装git是为了利用版本控制系统克隆代码已经将博客项目托管到三方平台，如果想学习git，最好的资料是官方网站上的<a href="https://git-scm.com/book/zh/v2"><em>Git Pro</em></a>和<a href="http://www.worldhello.net/gotgit/index.html">《Git权威指南》</a>。安装完成后，我们可以通过下面的命令来确认node.js环境以及它的包管理工具是否安装成功。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">node --versionnpm --version</code></pre><p>可以通过下面的命令来检查是否安装了git环境。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">git --version</code></pre><p>我们可以使用npm来安装Hexo，npm是node.js的包管理工具，跟Python的pip工具作用一样，可以用它来安装依赖库和三方工具。在第一次使用npm的时候，我们可以先将npm的下载源更换为国内的淘宝镜像，这样下载的速度会有非常显著的提升。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><p>接下来我们就通过npm来安装Hexo，命令如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">npm install -g hexo-cli</code></pre><p>安装成功后，就可以使用Hexo来创建属于自己的博客啦。</p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><blockquote><p>说明：以下内容基本上来自于Hexo的官方文档，推荐大家阅读官方文档。</p></blockquote><p>我们先通过下面的命令来创建一个专门保存博客项目的文件夹，该命令会从github上克隆博客项目和默认的主题。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo init blog</code></pre><p>接下来我们进入这个文件夹并查看目录结构。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">cd blogls -lR</code></pre><pre class="language-none"><code class="language-none">total 232-rw-r--r--    1 Hao  staff    1768  8  8 01:15 _config.ymldrwxr-xr-x  274 Hao  staff    8768  8  8 01:19 node_modules-rw-r--r--    1 Hao  staff  109972  8  8 01:19 package-lock.json-rw-r--r--    1 Hao  staff     443  8  8 01:15 package.jsondrwxr-xr-x    5 Hao  staff     160  8  8 01:15 scaffoldsdrwxr-xr-x    3 Hao  staff      96  8  8 01:15 sourcedrwxr-xr-x    3 Hao  staff      96  8  8 01:15 themes</code></pre><blockquote><p>说明：Windows环境命令行提示符中可以使用dir命令查看目录结构。需要说明的是：<code>_config.yml</code>是博客项目的配置文件；<code>package.json</code>是项目的依赖项文件；<code>scaffolds</code>保存了Markdown文件的模板，也就是向新添加的Markdown文件中默认填充的内容；<code>source</code>目录下有一个名为<code>_post</code>的目录，我们稍后可以将编写好的Markdown文件放到该目录，这样就可以利用Hexo将Markdown文件处理成博客的静态页面，生成的静态页面将置于<code>public</code>目录下；<code>themes</code>文件夹保存了博客使用的主题。</p></blockquote><p>然后我们通过下面的命令来安装项目所需的依赖项（<code>package.json</code>文件指明了这些依赖项）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">npm install</code></pre><p>做完上述的操作以后，我们已经可以直接通过下面的命令来生成博客。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo generate</code></pre><p>该命令也可以缩写为：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo g</code></pre><p>之前我们在安装依赖项的时候包括了一个名为<code>hexo-server</code>的依赖项，该依赖项可以帮助我们启动一个基于node.js的服务器来运行我们的博客项目，使用下面的命令即可启动服务器。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo server</code></pre><p>该命令也可以缩写为：</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo s</code></pre><pre class="language-none"><code class="language-none">INFO  Start processingINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.</code></pre><p>从运行命令的提示信息可以看到，服务器已经运转起并使用了4000端口，可以通过<code>Ctrl+C</code>来终止服务器的运行。如果要修改服务器使用的端口，可以在启动服务器的时候加上<code>-p</code>参数；如果希望服务器启动后，自动打开默认的浏览器访问服务器，可以使用<code>-o</code>参数，如下所示。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo s -p 8000 -o</code></pre><p>至此，我们已经可以看到Hexo在没有配置也没有加入自己的Markdown文件下生成的首页，如下图所示。</p><p><img src="/./res/hexo-default-index.png"></p><p>接下来我们修改博客的配置文件。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">vim _config.yml</code></pre><pre class="language-YAML" data-language="YAML"><code class="language-YAML"># Hexo Configuration## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;# Sitetitle: 骆昊的技术专栏subtitle: 传道、授业、解惑，分享知识带来的快乐description:keywords:author: 骆昊language: zhtimezone:# URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: http:&#x2F;&#x2F;jackfrued.toproot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads&#x2F;codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight:  enable: true  line_number: true  auto_detect: false  tab_replace:  # Home page setting# path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)# per_page: Posts displayed per page. (0 &#x3D; disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &#39;&#39;  per_page: 10  order_by: -date  # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date &#x2F; Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: landscape# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type:</code></pre><p>下面是YAML文件中相关选项的说明。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站的标题</td></tr><tr><td><code>subtitle</code></td><td>网站的副标题</td></tr><tr><td><code>description</code></td><td>网站的描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词，可以用逗号分隔多个关键词</td></tr><tr><td><code>author</code></td><td>自己的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站使用时区，默认使用电脑上设置的时区</td></tr><tr><td><code>url</code></td><td>网址</td></tr><tr><td><code>root</code></td><td>网站根目录</td></tr><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容，默认source目录</td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件，默认public目录</td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹，默认tags目录</td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹，默认archives目录</td></tr><tr><td><code>category_dir</code></td><td>分类文件夹，默认categories目录</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格，默认false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为首字母大写，默认false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接，默认true</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址，默认false</td></tr><tr><td><code>default_category</code></td><td>默认分类</td></tr><tr><td><code>date_format</code></td><td>日期格式，默认YYYY-MM-DD</td></tr><tr><td><code>time_format</code></td><td>时间格式，默认HH:mm:ss</td></tr><tr><td><code>per_page</code></td><td>每页显示的文章数量 ，默认值10，0表示不使用分页</td></tr><tr><td><code>pagination_dir</code></td><td>分页目录，默认为page目录</td></tr><tr><td><code>theme</code></td><td>当前主题名称</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table><p>我们将编写好的Markdown文件可以拷贝到<code>source/_posts</code>目录，我们可以在每个Markdown文件的上方添加Front-matter来对文件的布局、标题、分类、标签、发布日期等信息加以说明。所谓Front-matter，就是每个Markdown文件最上方以<code>---</code>分隔的区域，可以在Front-matter中设置以下内容。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr></tbody></table><p>例如：</p><pre class="language-Markdown" data-language="Markdown"><code class="language-Markdown">---title: Python编程惯例categories: - Python基础tags:- Python- PEP8date: 2019-8-1---## Python惯例“惯例”这个词指的是“习惯的做法，常规的办法，一贯的做法”，与这个词对应的英文单词叫“idiom”。由于Python跟其他很多编程语言在语法和使用上还是有比较显著的差别，因此作为一个Python开发者如果不能掌握这些惯例，就无法写出“Pythonic”的代码。下面我们总结了一些在Python开发中的惯用的代码。1. 让代码既可以被导入又可以被执行。   if __name__ &#x3D;&#x3D; &#39;__main__&#39;:2. 用下面的方式判断逻辑“真”或“假”。   if x:   if not x:</code></pre><p>在完成上述工作后，我们可以通过下面的命令先清理之前生成的内容。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo clean</code></pre><p>接下来我们就可以用之前讲过的命令重新生成并运行博客项目。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo generatehexo server -p 8000 -o</code></pre><h3 id="将博客托管到GitHub"><a href="#将博客托管到GitHub" class="headerlink" title="将博客托管到GitHub"></a>将博客托管到GitHub</h3><p>我们可以利用GitHub网站提供的<a href="https://pages.github.com/">Pages服务</a>来托管我们的博客。在GitHub Pages的首页上就有一个教程指导我们如何托管自己的网站，当然第一步得在GitHub上注册一个属于自己的账号，登录成功之后才能进行后续的操作。</p><ol><li><p>根据自己的用户名创建一个仓库，仓库<strong>一定</strong>要取名为“用户名.github.io”。例如：我在GitHub上的用户名是jackfrued，那么我的托管博客项目的仓库一定要命名为jackfrued.github.io。</p><p><img src="/./res/create-new-repo.png"></p></li><li><p>修改博客项目的配置文件<code>_config.yml</code>，配置使用GitHub来部署该博客项目。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">vim _config.yml</code></pre><pre class="language-YAML" data-language="YAML"><code class="language-YAML"># 省略上面的内容# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;jackfrued&#x2F;jackfrued.github.io.git  branch: master</code></pre><p>上面的配置中，type指定了使用git进行项目部署，repo指定了部署项目的git仓库的URL，我们这里使用的是HTTPS的地址，如果之前配置过密钥对也可以使用SSH的地址，branch指定了将代码同步到仓库中的哪一个分支，通常master分支就是发布项目最终工作成果的分支，也称为项目的主分支。</p></li><li><p>安装名为<code>hexo-deployer-git</code>的部署器插件，通过该插件就能实现一键部署。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">npm install hexo-deployer-git --save</code></pre></li><li><p>可以使用下面的命令来实现一键部署到GitHub。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo deploy -g</code></pre><p>或者</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">hexo generate -d</code></pre></li><li><p>接下来在浏览器中输入<a href="https://jackfrued.github.io/">jackfrued.github.io</a>就能够看到自己的博客，现在全世界的人都可以通过这个URL来访问你的博客。大家是否注意到，访问你博客的这个URL就是刚才我们给仓库起的名字，因为你在GitHub上注册的用户名是独一无二的，所以这个域名也是全世界独一无二的。</p></li></ol><h3 id="将博客绑定到自己的域名"><a href="#将博客绑定到自己的域名" class="headerlink" title="将博客绑定到自己的域名"></a>将博客绑定到自己的域名</h3><p>虽然我们已经通过GitHub提供的域名访问到了自己的博客，但是如果我们不愿意“寄人篱下”，我们在利用GitHub Pages提供的托管服务同时，也可以将博客绑定到自己专属的域名。如果暂时还没有购买域名，我们可以在提供域名购买服务的网站（如：<a href="https://www.hichina.com/">万网</a>、<a href="https://www.godaddy.com/">GoDaddy</a>）上进行购买。</p><p><img src="/./res/wanwang.png"></p><blockquote><p>说明：目前国内对域名的管理日趋严格，在购买域名时需要填写一大堆的个人信息，进行实名认证后才能获得域名，这一点相信大家能够理解。</p></blockquote><p>比如说，我现在已经购买了一个名为“jackfrued.top”的域名，如何让它跟“jackfrued.github.io”这个域名做一个绑定呢，我们可以利用<a href="https://dns.console.aliyun.com/">阿里云控制台</a>或者<a href="https://www.dnspod.cn/">DNSPod</a>来做一个域名解析服务。在域名解析平台登录成功后，可以添加或选择自己的域名来配置域名解析。点击“添加记录”按钮，创建一个类型为CNAME的域名解析，CNAME类型的解析代表将一个域名解析到另一个域名，如下图所示。</p><p><img src="/./res/dns-configuration.png"></p><p>完成这一步后，还不能马上通过自己的域名访问到博客项目，最后需要在博客项目的<code>source</code>目录下添加一个名为CNAME的文件（请注意这个文件的名字是全大写字母的）。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">vim CNAME</code></pre><p>编辑该文件的内容，如下所示。</p><pre class="language-none"><code class="language-none">jackfrued.top</code></pre><p>可以清理一下之前生成的内容，然后将项目重新生成并发布到GitHub就大功告成了！现在我们已经拥有了独立域名的博客，希望大家可以利用它做些有意义的事情（记录自己的成长历程、分享自己的工作经验、提升个人的影响力）。加油吧，程序员！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好玩的Python</title>
      <link href="/2024/07/01/hao-wan-de-python/"/>
      <url>/2024/07/01/hao-wan-de-python/</url>
      
        <content type="html"><![CDATA[<h2 id="好玩的Python"><a href="#好玩的Python" class="headerlink" title="好玩的Python"></a>好玩的Python</h2><p>因为下面的代码都非常简单，简单到直接使用Python的交互式环境就能完成。当然，官方Python自带的交互式环境比较难用，推荐大家使用ipython，可以使用下面的命令来安装ipython，安装成功后键入ipython命令就能进入交互式环境。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install ipython</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip3 install ipython</code></pre><p>ipython最直观的优点：</p><ol><li>可以用?或者??来获取帮助。</li><li>可以用!调用系统命令。</li><li>可以使用Tab键自动补全。</li><li>可以使用魔法指令，如：%timeit。</li></ol><h3 id="没有工具用代码也能P图"><a href="#没有工具用代码也能P图" class="headerlink" title="没有工具用代码也能P图"></a>没有工具用代码也能P图</h3><ol><li><p>安装pillow三方库。</p><p>PIL（Python Imaging Library）是Python平台事实上的图像处理标准库了。PIL功能非常强大，而API却非常简单易用。但是PIL仅支持到Python 2.7，而且很多年都没有人维护了，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫<a href="https://github.com/python-pillow/Pillow">Pillow</a>，除了支持Python 3.x还加入了很多有用且有趣的新特性。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install pillow</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip3 install pillow</code></pre></li><li><p>加载图片。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from PIL import Imagechiling &#x3D; Image.open(&#39;chiling.jpg&#39;)chiling.show()</code></pre></li><li><p>使用滤镜。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">from PIL import ImageFilterchiling.filter(ImageFilter.EMBOSS).show()chiling.filter(ImageFilter.CONTOUR).show()</code></pre></li><li><p>图像剪裁和粘贴。</p><pre class="language-Python" data-language="Python"><code class="language-Python">rect &#x3D; 220, 690, 265, 740 watch &#x3D; chiling.crop(rect)watch.show()blured_watch &#x3D; watch.filter(ImageFilter.GaussianBlur(4))chiling.paste(blured_watch, (220, 690))chiling.show()</code></pre></li><li><p>生成镜像。</p><pre class="language-Python" data-language="Python"><code class="language-Python">chiling2 &#x3D; chiling.transpose(Image.FLIP_LEFT_RIGHT)chiling2.show()</code></pre></li><li><p>生成缩略图。</p><pre class="language-Python" data-language="Python"><code class="language-Python">width, height &#x3D; chiling.sizewidth, height &#x3D; int(width * 0.4), int(height * 0.4)chiling.thumbnail((width, height))</code></pre></li><li><p>合成图片。</p><pre class="language-Python" data-language="Python"><code class="language-Python">frame &#x3D; Image.open(&#39;frame.jpg&#39;)frame.show()frame.paste(chiling, (210, 150))frame.paste(chiling2, (522, 150))frame.show()</code></pre></li></ol><p>上面的知识在<a href="https://github.com/jackfrued/Python-100-Days">Python-100-Days</a>项目的<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/15.%E5%9B%BE%E5%83%8F%E5%92%8C%E5%8A%9E%E5%85%AC%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86.md">第15天</a>中也有对应的内容。</p><h3 id="向微信好友群发祝福视频"><a href="#向微信好友群发祝福视频" class="headerlink" title="向微信好友群发祝福视频"></a>向微信好友群发祝福视频</h3><ol><li><p>安装itchat三方库。</p><p><a href="https://itchat.readthedocs.io/zh/latest/">itchat</a>是一个开源的微信个人号接口，使用Python调用微信从未如此简单。</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install itchat</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip3 install itchat</code></pre></li><li><p>登录微信。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import itchatitchat.auto_login()</code></pre><blockquote><p>说明：用自己的微信扫描屏幕上出现的二维码就完成了登录操作，登录之后才能获取自己的好友信息以及发送消息给自己的好友。</p></blockquote></li><li><p>查找自己的朋友。</p><pre class="language-Python" data-language="Python"><code class="language-Python">friends_list &#x3D; itchat.get_friends(update&#x3D;True)print(len(friends_list))luohao &#x3D; friends_list[0]props &#x3D; [&#39;NickName&#39;, &#39;Signature&#39;, &#39;Sex&#39;]for prop in props:    print(luohao[prop])</code></pre><blockquote><p>说明：friends_list相当于是一个列表，列表中的第一个元素是自己。</p></blockquote></li><li><p>随机选出5个朋友，获得他们的用户名、昵称、签名。</p><pre class="language-Python" data-language="Python"><code class="language-Python">lucky_friends &#x3D; random.sample(friends_list[1:], 5) props &#x3D; [&#39;NickName&#39;, &#39;Signature&#39;, &#39;City&#39;]for friend in lucky_friends:    for prop in props:        print(friend[prop] or &#39;没有此项信息&#39;)        print(&#39;-&#39; * 80)</code></pre></li><li><p>给朋友发送文字消息。</p><pre class="language-Python" data-language="Python"><code class="language-Python">itchat.send_msg(&#39;急需一个红包来拯救堕落的灵魂！！！&#39;, toUserName&#x3D;&#39;@8e06606db03f0e28d0ff884083f727e6&#39;)</code></pre></li><li><p>群发视频给幸运的朋友们。</p><pre class="language-Python" data-language="Python"><code class="language-Python">lucky_friends &#x3D; random.sample(friends_list[1:], 5) for friend in lucky_friends:    username &#x3D; friend[&#39;UserName&#39;]    itchat.send_video(&#39;&#x2F;Users&#x2F;Hao&#x2F;Desktop&#x2F;my_test_video.mp4&#39;, toUserName&#x3D;username)</code></pre></li></ol><p>利用itchat还能做很多事情，比如有好友给自己发了消息又撤回了，如果想查看这些被撤回的消息，itchat就可以做到（注册一个接收消息的钩子函数，请参考<a href="https://blog.csdn.net/enweitech/article/details/79585043">CSDN上的一篇文章</a>）；再比如，有时候我们想知道某个好友有没有把我们删除或者拉入黑名单，也可以利用itchat封装的群聊功能，非好友和黑名单用户不会被拉入群聊，通过创建群聊函数的返回值就可以判定你和指定的人之间的关系。</p><h3 id="不用客户端查看热点新闻"><a href="#不用客户端查看热点新闻" class="headerlink" title="不用客户端查看热点新闻"></a>不用客户端查看热点新闻</h3><ol><li><p>安装requests库。（点击常看<a href="https://2.python-requests.org/zh_CN/latest/">官方文档</a>）</p><p><img src="/./res/requests.png"></p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip install requests</code></pre><p>或</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">pip3 install requests</code></pre></li><li><p>爬取新闻数据或者通过API接口获取新闻数据。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import requestsresp &#x3D; requests.get(&#39;http:&#x2F;&#x2F;api.tianapi.com&#x2F;allnews&#x2F;?key&#x3D;请使用自己申请的Key&amp;col&#x3D;7&amp;num&#x3D;50&#39;)</code></pre><blockquote><p>说明：上面使用了天行数据提供的数据接口，需要的话可以自行去<a href="https://www.tianapi.com/">天行数据</a>的网站注册开通，调用接口的时候要填写注册成功后系统分配给你的key。</p></blockquote></li><li><p>使用反序列化将JSON字符串解析为字典并获取新闻列表。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import jsonnewslist &#x3D; json.loads(resp.text)[&#39;newslist&#39;]</code></pre></li><li><p>对新闻列表进行循环遍历，找到感兴趣的新闻，例如：华为。</p><pre class="language-Python" data-language="Python"><code class="language-Python">for news in newslist:    title &#x3D; news[&#39;title&#39;]    url &#x3D; news[&#39;url&#39;]    if &#39;华为&#39; in title:        print(title)        print(url)</code></pre></li><li><p>调用短信网关发送短信到手机上，告知关注的新闻标题并给出链接。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import repattern &#x3D; re.compile(r&#39;https*:\&#x2F;\&#x2F;[^\&#x2F;]*\&#x2F;(?P&lt;url&gt;.*)&#39;) matcher &#x3D; pattern.match(url)if matcher:    url &#x3D; matcher.group(&#39;url&#39;)    resp &#x3D; requests.post(        url&#x3D;&#39;http:&#x2F;&#x2F;sms-api.luosimao.com&#x2F;v1&#x2F;send.json&#39;,        auth&#x3D;(&#39;api&#39;, &#39;key-请使用你自己申请的Key&#39;),        data&#x3D;&#123;            &#39;mobile&#39;: &#39;13548041193&#39;,            &#39;message&#39;: f&#39;发现一条您可能感兴趣的新闻 - &#123;title&#125;，详情点击https:&#x2F;&#x2F;news.china.com&#x2F;&#123;url&#125; 查看。【Python小课】&#39;        &#125;,        timeout&#x3D;10,        verify&#x3D;False    )</code></pre><blockquote><p>说明：上面的代码使用了<a href="https://luosimao.com/">螺丝帽</a>提供的短信网关服务，利用短信网关发送短信是需要支付费用的，但是一般的平台都会提供若干条免费的测试短信。发送短信必须遵守平台的规则，违规的短信是无法发送的。上面发短信时使用的短信模板（“发现一条您可能感兴趣的新闻 - ###，详情点击<a href="https://news.china.com/###">https://news.china.com/###</a> 查看。”）和短信签名（“【Python小课】”）需要登录螺丝帽管理平台进行配置，如果不清楚如何配置，可以联系平台的客服人员进行咨询。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见反爬策略及应对方案</title>
      <link href="/2024/07/01/chang-jian-fan-pa-ce-lue-ji-ying-dui-fang-an/"/>
      <url>/2024/07/01/chang-jian-fan-pa-ce-lue-ji-ying-dui-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="常见反爬策略及应对方案"><a href="#常见反爬策略及应对方案" class="headerlink" title="常见反爬策略及应对方案"></a>常见反爬策略及应对方案</h2><ol><li><p>构造合理的HTTP请求头。</p><ul><li><p>Accept</p></li><li><p>User-Agent</p></li><li><p>Referer</p></li><li><p>Accept-Encoding</p></li><li><p>Accept-Language</p></li></ul></li><li><p>检查网站生成的Cookie。</p><ul><li>有用的插件：<a href="http://www.editthiscookie.com/">EditThisCookie</a></li><li>如何处理脚本动态生成的Cookie</li></ul></li><li><p>抓取动态内容。</p><ul><li>Selenium + WebDriver</li><li>Chrome &#x2F; Firefox - Driver</li></ul></li><li><p>限制爬取的速度。</p></li><li><p>处理表单中的隐藏域。</p><ul><li>在读取到隐藏域之前不要提交表单</li><li>用RoboBrowser这样的工具辅助提交表单</li></ul></li><li><p>处理表单中的验证码。</p><ul><li><p>OCR（Tesseract） - 商业项目一般不考虑 </p></li><li><p>专业识别平台 - 超级鹰 &#x2F; 云打码</p><pre class="language-Python" data-language="Python"><code class="language-Python">from hashlib import md5class ChaoClient(object):    def __init__(self, username, password, soft_id):        self.username &#x3D; username        password &#x3D;  password.encode(&#39;utf-8&#39;)        self.password &#x3D; md5(password).hexdigest()        self.soft_id &#x3D; soft_id        self.base_params &#x3D; &#123;            &#39;user&#39;: self.username,            &#39;pass2&#39;: self.password,            &#39;softid&#39;: self.soft_id,        &#125;        self.headers &#x3D; &#123;            &#39;Connection&#39;: &#39;Keep-Alive&#39;,            &#39;User-Agent&#39;: &#39;Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0)&#39;,        &#125;    def post_pic(self, im, codetype):        params &#x3D; &#123;            &#39;codetype&#39;: codetype,        &#125;        params.update(self.base_params)        files &#x3D; &#123;&#39;userfile&#39;: (&#39;captcha.jpg&#39;, im)&#125;        r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;upload.chaojiying.net&#x2F;Upload&#x2F;Processing.php&#39;, data&#x3D;params, files&#x3D;files, headers&#x3D;self.headers)        return r.json()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    client &#x3D; ChaoClient(&#39;用户名&#39;, &#39;密码&#39;, &#39;软件ID&#39;)    with open(&#39;captcha.jpg&#39;, &#39;rb&#39;) as file:                                                        print(client.post_pic(file, 1902))                                          </code></pre></li></ul></li><li><p>绕开“陷阱”。</p><ul><li>网页上有诱使爬虫爬取的爬取的隐藏链接（陷阱或蜜罐）</li><li>通过Selenium+WebDriver+Chrome判断链接是否可见或在可视区域</li></ul></li><li><p>隐藏身份。</p><ul><li><p>代理服务 -  快代理 &#x2F; 讯代理 &#x2F; 芝麻代理 &#x2F; 蘑菇代理 &#x2F; 云代理</p><p><a href="https://cuiqingcai.com/5094.html">《爬虫代理哪家强？十大付费代理详细对比评测出炉！》</a></p></li><li><p>洋葱路由 - 国内需要翻墙才能使用</p><pre class="language-Shell" data-language="Shell"><code class="language-Shell">yum -y install toruseradd admin -d &#x2F;home&#x2F;adminpasswd adminchown -R admin:admin &#x2F;home&#x2F;adminchown -R admin:admin &#x2F;var&#x2F;run&#x2F;tortor</code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年薪50W+的Python程序员如何写代码</title>
      <link href="/2024/07/01/nian-xin-50w-de-python-cheng-xu-yuan-ru-he-xie-dai-ma/"/>
      <url>/2024/07/01/nian-xin-50w-de-python-cheng-xu-yuan-ru-he-xie-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="年薪50W-的Python程序员如何写代码"><a href="#年薪50W-的Python程序员如何写代码" class="headerlink" title="年薪50W+的Python程序员如何写代码"></a>年薪50W+的Python程序员如何写代码</h2><h3 id="为什么要用Python写代码"><a href="#为什么要用Python写代码" class="headerlink" title="为什么要用Python写代码"></a>为什么要用Python写代码</h3><h4 id="没有对比就没有伤害"><a href="#没有对比就没有伤害" class="headerlink" title="没有对比就没有伤害"></a>没有对比就没有伤害</h4><blockquote><p><strong>很多互联网和移动互联网企业对开发效率的要求高于对执行效率的要求</strong>。</p></blockquote><h5 id="例子1：hello-world"><a href="#例子1：hello-world" class="headerlink" title="例子1：hello, world"></a>例子1：hello, world</h5><p>C的版本：</p><pre class="language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main() &#123;    printf(&quot;hello, world\n&quot;);    return 0;&#125;</code></pre><p>Java的版本：</p><pre class="language-Java" data-language="Java"><code class="language-Java">class Example01 &#123;        public static void main(String[] args) &#123;        System.out.println(&quot;hello, world&quot;);    &#125;&#125;</code></pre><p>Python的版本：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(&#39;hello, world&#39;)</code></pre><h5 id="例子2：1-100求和"><a href="#例子2：1-100求和" class="headerlink" title="例子2：1-100求和"></a>例子2：1-100求和</h5><p>C的版本：</p><pre class="language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main() &#123;    int total &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; 100; ++i) &#123;        total +&#x3D; i;    &#125;    printf(&quot;%d\n&quot;, total);return 0;&#125;</code></pre><p>Python的版本：</p><pre class="language-Java" data-language="Java"><code class="language-Java">print(sum(range(1, 101)))</code></pre><h5 id="例子3：创建和初始化数组（列表）"><a href="#例子3：创建和初始化数组（列表）" class="headerlink" title="例子3：创建和初始化数组（列表）"></a>例子3：创建和初始化数组（列表）</h5><p>Java的版本：</p><pre class="language-Java" data-language="Java"><code class="language-Java">import java.util.Arrays;public class Example03 &#123;    public static void main(String[] args) &#123;        boolean[] values &#x3D; new boolean[10];        Arrays.fill(values, true);        System.out.println(Arrays.toString(values));        int[] numbers &#x3D; new int[10];        for (int i &#x3D; 0; i &lt; numbers.length; ++i) &#123;            numbers[i] &#x3D; i + 1;        &#125;        System.out.println(Arrays.toString(numbers));    &#125;&#125;</code></pre><p>Python的版本：</p><pre class="language-Python" data-language="Python"><code class="language-Python">values &#x3D; [True] * 10print(values)numbers &#x3D; [x for x in range(1, 11)]print(numbers)</code></pre><h5 id="例子4：双色球随机选号"><a href="#例子4：双色球随机选号" class="headerlink" title="例子4：双色球随机选号"></a>例子4：双色球随机选号</h5><p>Java的版本：</p><pre class="language-Java" data-language="Java"><code class="language-Java">import java.util.List;import java.util.ArrayList;import java.util.Collections;import java.util.Scanner;class Example03 &#123;    &#x2F;**     * 产生[min, max)范围的随机整数     *&#x2F;    public static int randomInt(int min, int max) &#123;        return (int) (Math.random() * (max - min) + min);    &#125;        &#x2F;**     * 输出一组双色球号码     *&#x2F;    public static void display(List&lt;Integer&gt; balls) &#123;        for (int i &#x3D; 0; i &lt; balls.size(); ++i) &#123;            System.out.printf(&quot;%02d &quot;, balls.get(i));            if (i &#x3D;&#x3D; balls.size() - 2) &#123;                System.out.print(&quot;| &quot;);            &#125;        &#125;        System.out.println();    &#125;    &#x2F;**     * 生成一组随机号码     *&#x2F;    public static List&lt;Integer&gt; generate() &#123;        List&lt;Integer&gt; redBalls &#x3D; new ArrayList&lt;&gt;();        for (int i &#x3D; 1; i &lt;&#x3D; 33; ++i) &#123;            redBalls.add(i);        &#125;        List&lt;Integer&gt; selectedBalls &#x3D; new ArrayList&lt;&gt;();        for (int i &#x3D; 0; i &lt; 6; ++i) &#123;            selectedBalls.add(redBalls.remove(randomInt(0, redBalls.size())));        &#125;        Collections.sort(selectedBalls);        selectedBalls.add(randomInt(1, 17));        return selectedBalls;    &#125;        public static void main(String[] args) &#123;        try (Scanner sc &#x3D; new Scanner(System.in)) &#123;            System.out.print(&quot;机选几注: &quot;);            int num &#x3D; sc.nextInt();            for (int i &#x3D; 0; i &lt; num; ++i) &#123;                display(generate());            &#125;        &#125;    &#125;&#125;</code></pre><p>Python的版本：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randint, sampledef generate():    &quot;&quot;&quot;生成一组随机号码&quot;&quot;&quot;    red_balls &#x3D; [x for x in range(1, 34)]    selected_balls &#x3D; sample(red_balls, 6)    selected_balls.sort()    selected_balls.append(randint(1, 16))    return selected_ballsdef display(balls):    &quot;&quot;&quot;输出一组双色球号码&quot;&quot;&quot;    for index, ball in enumerate(balls):        print(f&#39;&#123;ball:0&gt;2d&#125;&#39;, end&#x3D;&#39; &#39;)        if index &#x3D;&#x3D; len(balls) - 2:            print(&#39;|&#39;, end&#x3D;&#39; &#39;)    print()num &#x3D; int(input(&#39;机选几注: &#39;))for _ in range(num):    display(generate())</code></pre><blockquote><p><strong>温馨提示</strong>：珍爱生命，远离任何形式的赌博。</p></blockquote><h5 id="例子5：实现一个简单的HTTP服务器。"><a href="#例子5：实现一个简单的HTTP服务器。" class="headerlink" title="例子5：实现一个简单的HTTP服务器。"></a>例子5：实现一个简单的HTTP服务器。</h5><p>Java的版本：</p><blockquote><p><strong>说明</strong>：JDK 1.6以前，需要通过套接字编程来实现，具体又可以分为多线程和NIO两种做法。JDK 1.6以后，可以使用<code>com.sun.net.httpserver</code>包提供的<code>HttpServer</code>类来实现。</p></blockquote><pre class="language-Java" data-language="Java"><code class="language-Java">import com.sun.net.httpserver.HttpExchange;import com.sun.net.httpserver.HttpHandler;import com.sun.net.httpserver.HttpServer;import java.io.IOException;import java.io.OutputStream;import java.net.InetSocketAddress;class Example05 &#123;    public static void main(String[] arg) throws Exception &#123;        HttpServer server &#x3D; HttpServer.create(new InetSocketAddress(8000), 0);        server.createContext(&quot;&#x2F;&quot;, new RequestHandler());        server.start();    &#125;    static class RequestHandler implements HttpHandler &#123;                @Override        public void handle(HttpExchange exchange) throws IOException &#123;            String response &#x3D; &quot;&lt;h1&gt;hello, world&lt;&#x2F;h1&gt;&quot;;            exchange.sendResponseHeaders(200, 0);            try (OutputStream os &#x3D; exchange.getResponseBody()) &#123;                os.write(response.getBytes());            &#125;        &#125;    &#125;&#125;</code></pre><p>Python的版本：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from http.server import HTTPServer, SimpleHTTPRequestHandlerclass RequestHandler(SimpleHTTPRequestHandler):    def do_GET(self):        self.send_response(200)        self.end_headers()        self.wfile.write(&#39;&lt;h1&gt;hello, world&lt;&#x2F;h1&gt;&#39;.encode())server &#x3D; HTTPServer((&#39;&#39;, 8000), RequestHandler)server.serve_forever()</code></pre><p>或</p><pre class="language-Python" data-language="Python"><code class="language-Python">python3 -m http.server 8000</code></pre><h4 id="一行Python代码可以做什么"><a href="#一行Python代码可以做什么" class="headerlink" title="一行Python代码可以做什么"></a>一行Python代码可以做什么</h4><blockquote><p><strong>很多时候，你的问题只需一行Python代码就能解决</strong>。</p></blockquote><pre class="language-Python" data-language="Python"><code class="language-Python"># 一行代码实现求阶乘函数fac &#x3D; lambda x: __import__(&#39;functools&#39;).reduce(int.__mul__, range(1, x + 1), 1)# 一行代码实现求最大公约数函数gcd &#x3D; lambda x, y: y % x and gcd(y % x, x) or x# 一行代码实现判断素数的函数is_prime &#x3D; lambda x: x &gt; 1 and not [f for f in range(2, int(x ** 0.5) + 1) if x % f &#x3D;&#x3D; 0]# 一行代码实现快速排序quick_sort &#x3D; lambda items: len(items) and quick_sort([x for x in items[1:] if x &lt; items[0]]) + [items[0]] + quick_sort([x for x in items[1:] if x &gt; items[0]]) or items# 生成FizzBuzz列表[&#39;Fizz&#39;[x % 3 * 4:] + &#39;Buzz&#39;[x % 5 * 4:] or x for x in range(1, 101)]</code></pre><h4 id="设计模式从未如此简单"><a href="#设计模式从未如此简单" class="headerlink" title="设计模式从未如此简单"></a>设计模式从未如此简单</h4><blockquote><p><strong>Python是动态类型语言，大量的设计模式在Python中被简化或弱化</strong>。</p></blockquote><p>思考：如何优化下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(num):    if num in (1, 2):        return 1    return fib(num - 1) + fib(num - 2)</code></pre><p>代理模式在Python中可以通过内置的或自定义的装饰器来实现。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import lru_cache@lru_cache()def fib(num):    if num in (1, 2):        return 1    return fib(num - 1) + fib(num - 2)for n in range(1, 121):    print(f&#39;&#123;n&#125;: &#123;fib(n)&#125;&#39;)</code></pre><blockquote><p><strong>说明</strong>：通过Python标准库<code>functools</code>模块的<code>lru_cache</code>装饰器为<code>fib</code>函数加上缓存代理，缓存函数执行的中间结果，优化代码的性能。</p></blockquote><p>单例模式在Python中可以通过自定义的装饰器或元类来实现。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import wrapsfrom threading import RLockdef singleton(cls):    instances &#x3D; &#123;&#125;    lock &#x3D; RLock()    @wraps(cls)    def wrapper(*args, **kwargs):        if cls not in instances:            with lock:                if cls not in instances:                    instances[cls] &#x3D; cls(*args, **kwargs)        return instances[cls]</code></pre><blockquote><p><strong>说明</strong>：需要实现单例模式的类只需要添加上面的装饰器即可。</p></blockquote><p>原型模式在Python中可以通过元类来实现。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import copyclass PrototypeMeta(type):    def __init__(cls, *args, **kwargs):        super().__init__(*args, **kwargs)        cls.clone &#x3D; lambda self, is_deep&#x3D;True: \            copy.deepcopy(self) if is_deep else copy.copy(self)</code></pre><blockquote><p><strong>说明</strong>：通过元类给指定了<code>metaclass=PrototypeMeta</code>的类添加一个<code>clone</code>方法实现对象克隆，利用Python标准库<code>copy</code>模块的<code>copy</code>和<code>deepcopy</code>分别实现浅拷贝和深拷贝。</p></blockquote><h4 id="数据采集和数据分析从未如此简单"><a href="#数据采集和数据分析从未如此简单" class="headerlink" title="数据采集和数据分析从未如此简单"></a>数据采集和数据分析从未如此简单</h4><blockquote><p><strong>网络数据采集是Python最擅长的领域之一。</strong></p></blockquote><p>例子：获取豆瓣电影“Top250”。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import randomimport timeimport requestsfrom bs4 import BeautifulSoupfor page in range(10):    resp &#x3D; requests.get(        url&#x3D;f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&#123;25 * page&#125;&#39;,        headers&#x3D;&#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&#125;    )    soup &#x3D; BeautifulSoup(resp.text, &quot;lxml&quot;)    for elem in soup.select(&#39;a &gt; span.title:nth-child(1)&#39;):        print(elem.text)    time.sleep(random.random() * 5)</code></pre><blockquote><p><strong>利用NumPy、Pandas、Matplotlib可以轻松实现数据分析和可视化</strong>。</p></blockquote><p><img src="/res/use-pandas-in-jupyter-notebook.png"></p><h3 id="写出Python代码的正确姿势"><a href="#写出Python代码的正确姿势" class="headerlink" title="写出Python代码的正确姿势"></a>写出Python代码的正确姿势</h3><blockquote><p><strong>用Python写代码就要写出Pythonic的代码</strong>。</p></blockquote><h4 id="姿势1：选择结构的正确姿势"><a href="#姿势1：选择结构的正确姿势" class="headerlink" title="姿势1：选择结构的正确姿势"></a>姿势1：选择结构的正确姿势</h4><p>跨界开发者的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;jackfrued&#39;fruits &#x3D; [&#39;apple&#39;, &#39;orange&#39;, &#39;grape&#39;]owners &#x3D; &#123;&#39;name&#39;: &#39;骆昊&#39;, &#39;age&#39;: 40, &#39;gender&#39;: True&#125;if name !&#x3D; &#39;&#39; and len(fruits) &gt; 0 and len(owners.keys()) &gt; 0:    print(&#39;Jackfrued love fruits.&#39;)</code></pre><p>Pythonic的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;jackfrued&#39;fruits &#x3D; [&#39;apple&#39;, &#39;orange&#39;, &#39;grape&#39;]owners &#x3D; &#123;&#39;name&#39;: &#39;骆昊&#39;, &#39;age&#39;: 40, &#39;gender&#39;: True&#125;if name and fruits and owners:    print(&#39;Jackfrued love fruits.&#39;)</code></pre><h4 id="姿势2：交换两个变量的正确姿势"><a href="#姿势2：交换两个变量的正确姿势" class="headerlink" title="姿势2：交换两个变量的正确姿势"></a>姿势2：交换两个变量的正确姿势</h4><p>跨界开发者的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">temp &#x3D; aa &#x3D; bb &#x3D; temp</code></pre><p>或</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; a ^ bb &#x3D; a ^ ba &#x3D; a ^ b</code></pre><p>Pythonic的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">a, b &#x3D; b, a</code></pre><h4 id="姿势3：用序列组装字符串的正确姿势"><a href="#姿势3：用序列组装字符串的正确姿势" class="headerlink" title="姿势3：用序列组装字符串的正确姿势"></a>姿势3：用序列组装字符串的正确姿势</h4><p>跨界开发者的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">chars &#x3D; [&#39;j&#39;, &#39;a&#39;, &#39;c&#39;, &#39;k&#39;, &#39;f&#39;, &#39;r&#39;, &#39;u&#39;, &#39;e&#39;, &#39;d&#39;]name &#x3D; &#39;&#39;for char in chars:    name +&#x3D; char</code></pre><p>Pythonic的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">chars &#x3D; [&#39;j&#39;, &#39;a&#39;, &#39;c&#39;, &#39;k&#39;, &#39;f&#39;, &#39;r&#39;, &#39;u&#39;, &#39;e&#39;, &#39;d&#39;]name &#x3D; &#39;&#39;.join(chars)</code></pre><h4 id="姿势4：遍历列表的正确姿势"><a href="#姿势4：遍历列表的正确姿势" class="headerlink" title="姿势4：遍历列表的正确姿势"></a>姿势4：遍历列表的正确姿势</h4><p>跨界开发者的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">fruits &#x3D; [&#39;orange&#39;, &#39;grape&#39;, &#39;pitaya&#39;, &#39;blueberry&#39;]index &#x3D; 0for fruit in fruits:    print(index, &#39;:&#39;, fruit)    index +&#x3D; 1</code></pre><p>Pythonic的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">fruits &#x3D; [&#39;orange&#39;, &#39;grape&#39;, &#39;pitaya&#39;, &#39;blueberry&#39;]for index, fruit in enumerate(fruits):    print(index, &#39;:&#39;, fruit)</code></pre><h4 id="姿势5：创建列表的正确姿势"><a href="#姿势5：创建列表的正确姿势" class="headerlink" title="姿势5：创建列表的正确姿势"></a>姿势5：创建列表的正确姿势</h4><p>跨界开发者的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; [7, 20, 3, 15, 11]result &#x3D; []for i in data:    if i &gt; 10:        result.append(i * 3)</code></pre><p>Pythonic的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; [7, 20, 3, 15, 11]result &#x3D; [num * 3 for num in data if num &gt; 10]</code></pre><h4 id="姿势6：确保代码健壮性的正确姿势"><a href="#姿势6：确保代码健壮性的正确姿势" class="headerlink" title="姿势6：确保代码健壮性的正确姿势"></a>姿势6：确保代码健壮性的正确姿势</h4><p>跨界开发者的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; &#123;&#39;x&#39;: &#39;5&#39;&#125;if &#39;x&#39; in data and isinstance(data[&#39;x&#39;], (str, int, float)) \        and data[&#39;x&#39;].isdigit():    value &#x3D; int(data[&#39;x&#39;])    print(value)else:    value &#x3D; None</code></pre><p>Pythonic的代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">data &#x3D; &#123;&#39;x&#39;: &#39;5&#39;&#125;try:    value &#x3D; int(data[&#39;x&#39;])    print(value)except (KeyError, TypeError, ValueError):    value &#x3D; None</code></pre><h3 id="使用Lint工具检查你的代码规范"><a href="#使用Lint工具检查你的代码规范" class="headerlink" title="使用Lint工具检查你的代码规范"></a>使用Lint工具检查你的代码规范</h3><p>阅读下面的代码，看看你能看出哪些地方是有毛病的或者说不符合Python的编程规范的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from enum import *@uniqueclass Suite (Enum):    SPADE, HEART, CLUB, DIAMOND &#x3D; range(4)class Card(object):    def __init__(self,suite,face ):        self.suite &#x3D; suite        self.face &#x3D; face    def __repr__(self):        suites&#x3D;&#39;♠♥♣♦&#39;        faces&#x3D;[&#39;&#39;,&#39;A&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;10&#39;,&#39;J&#39;,&#39;Q&#39;,&#39;K&#39;]        return f&#39;&#123;suites[self.suite.value]&#125;&#123;faces[self.face]&#125;&#39;import randomclass Poker(object):    def __init__(self):        self.cards &#x3D;[Card(suite, face) for suite in Suite            for face in range(1, 14)]        self.current&#x3D;0    def shuffle (self):        self.current&#x3D;0        random.shuffle(self.cards)    def deal (self):        card &#x3D; self.cards[self.current]        self.current+&#x3D;1        return card    def has_next (self):        if self.current&lt;len(self.cards): return True        return Falsep &#x3D; Poker()p.shuffle()print(p.cards)</code></pre><h4 id="PyLint的安装和使用"><a href="#PyLint的安装和使用" class="headerlink" title="PyLint的安装和使用"></a>PyLint的安装和使用</h4><p>Pylint是Python代码分析工具，它分析Python代码中的错误，查找不符合代码风格标准（默认使用的代码风格是 PEP 8）和有潜在问题的代码。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install pylintpylint [options] module_or_package</code></pre><p>Pylint输出格式如下所示。</p><blockquote><p>模块名:行号:列号:    消息类型    消息</p></blockquote><p>消息类型有以下几种：</p><ol><li>C - 惯例：违反了Python编程惯例（PEP 8）的代码。</li><li>R - 重构：写得比较糟糕需要重构的代码。</li><li>W - 警告：代码中存在的不影响代码运行的问题。</li><li>E - 错误：代码中存在的影响代码运行的错误。</li><li>F - 致命错误：导致Pylint无法继续运行的错误。</li></ol><p>Pylint命令的常用参数：</p><ol><li><code>--disable=&lt;msg ids&gt;</code>或<code>-d &lt;msg ids&gt;</code>：禁用指定类型的消息。</li><li><code>--errors-only</code>或<code>-E</code>：只显示错误。</li><li><code>--rcfile=&lt;file&gt;</code>：指定配置文件。</li><li><code>--list-msgs</code>：列出Pylint的消息清单。</li><li><code>--generate-rcfile</code>：生成配置文件的样例。</li><li><code>--reports=&lt;y_or_n&gt;</code>或<code>-r &lt;y_or_n&gt;</code>：是否生成检查报告。</li></ol><h3 id="使用Profile工具剖析你的代码性能"><a href="#使用Profile工具剖析你的代码性能" class="headerlink" title="使用Profile工具剖析你的代码性能"></a>使用Profile工具剖析你的代码性能</h3><h4 id="cProfile模块"><a href="#cProfile模块" class="headerlink" title="cProfile模块"></a>cProfile模块</h4><p><code>example01.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">import cProfiledef is_prime(num):    for factor in range(2, int(num ** 0.5) + 1):        if num % factor &#x3D;&#x3D; 0:            return False    return Trueclass PrimeIter:    def __init__(self, total):        self.counter &#x3D; 0        self.current &#x3D; 1        self.total &#x3D; total    def __iter__(self):        return self    def __next__(self):        if self.counter &lt; self.total:            self.current +&#x3D; 1            while not is_prime(self.current):                self.current +&#x3D; 1            self.counter +&#x3D; 1            return self.current        raise StopIteration()        cProfile.run(&#39;list(PrimeIter(10000))&#39;)</code></pre><p>执行结果：</p><pre class="language-none"><code class="language-none">114734 function calls in 0.573 secondsOrdered by: standard namencalls  tottime  percall  cumtime  percall filename:lineno(function)     1    0.006    0.006    0.573    0.573 &lt;string&gt;:1(&lt;module&gt;)     1    0.000    0.000    0.000    0.000 example.py:14(__init__)     1    0.000    0.000    0.000    0.000 example.py:19(__iter__) 10001    0.086    0.000    0.567    0.000 example.py:22(__next__)104728    0.481    0.000    0.481    0.000 example.py:5(is_prime)     1    0.000    0.000    0.573    0.573 &#123;built-in method builtins.exec&#125;     1    0.000    0.000    0.000    0.000 &#123;method &#39;disable&#39; of &#39;_lsprof.Profiler&#39; objects&#125;</code></pre><p>####line_profiler</p><p>给需要剖析时间性能的函数加上一个<code>profile</code>装饰器，这个函数每行代码的执行次数和时间都会被剖析。</p><p><code>example02.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">@profiledef is_prime(num):    for factor in range(2, int(num ** 0.5) + 1):        if num % factor &#x3D;&#x3D; 0:            return False    return Trueclass PrimeIter:    def __init__(self, total):        self.counter &#x3D; 0        self.current &#x3D; 1        self.total &#x3D; total    def __iter__(self):        return self    def __next__(self):        if self.counter &lt; self.total:            self.current +&#x3D; 1            while not is_prime(self.current):                self.current +&#x3D; 1            self.counter +&#x3D; 1            return self.current        raise StopIteration()list(PrimeIter(1000))</code></pre><p>安装和使用<code>line_profiler</code>三方库。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">pip install line_profilerkernprof -lv example.pyWrote profile results to example02.py.lprofTimer unit: 1e-06 sTotal time: 0.089513 sFile: example02.pyFunction: is_prime at line 1 #      Hits         Time  Per Hit   % Time  Line Contents&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1                                           @profile 2                                           def is_prime(num): 3     86624      43305.0      0.5     48.4      for factor in range(2, int(num ** 0.5) + 1): 4     85624      42814.0      0.5     47.8          if num % factor &#x3D;&#x3D; 0: 5      6918       3008.0      0.4      3.4              return False 6      1000        386.0      0.4      0.4      return True</code></pre><p>####memory_profiler </p><p>给需要剖析内存性能的函数加上一个<code>profile</code>装饰器，这个函数每行代码的内存使用情况都会被剖析。</p><p><code>example03.py</code></p><pre class="language-Python" data-language="Python"><code class="language-Python">@profiledef eat_memory():    items &#x3D; []    for _ in range(1000000):        items.append(object())    return itemseat_memory()</code></pre><p>安装和使用<code>memory_profiler</code>三方库。</p><pre class="language-Python" data-language="Python"><code class="language-Python">pip install memory_profilerpython3 -m memory_profiler example.pyFilename: example03.pyLine #    Mem usage    Increment   Line Contents&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     1   38.672 MiB   38.672 MiB   @profile     2                             def eat_memory():     3   38.672 MiB    0.000 MiB       items &#x3D; []     4   68.727 MiB    0.000 MiB       for _ in range(1000000):     5   68.727 MiB    1.797 MiB           items.append(object())     6   68.727 MiB    0.000 MiB       return items</code></pre><h3 id="如何构建综合职业素养"><a href="#如何构建综合职业素养" class="headerlink" title="如何构建综合职业素养"></a>如何构建综合职业素养</h3><h4 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h4><ol><li>了解全局</li><li>确定范围</li><li>定义目标</li><li>寻找资源</li><li>创建学习计划</li><li>筛选资源</li><li>开始学习，浅尝辄止（YAGNI）</li><li>动手操作，边学边玩</li><li>全面掌握，学以致用</li><li>乐为人师，融会贯通</li></ol><h4 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h4><ol><li><p>提升专注力</p></li><li><p>充分利用碎片时间</p></li><li><p>使用番茄工作法</p></li><li><p>时间是怎么浪费掉的</p></li><li><p>任何行动都比不采取行动好</p><p><img src="/res/action.png"></p></li></ol><h4 id="好书推荐"><a href="#好书推荐" class="headerlink" title="好书推荐"></a>好书推荐</h4><ol><li>职业规划：《软技能 - 代码之外的生存指南》</li><li>吴军系列：《浪潮之巅》、《硅谷之谜》、《数学之美》、……</li><li>时间管理：《成为一个更高效的人》、《番茄工作法图解》</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么选择了Python</title>
      <link href="/2024/07/01/wo-wei-shi-me-xuan-ze-liao-python/"/>
      <url>/2024/07/01/wo-wei-shi-me-xuan-ze-liao-python/</url>
      
        <content type="html"><![CDATA[<h2 id="我为什么选择了Python"><a href="#我为什么选择了Python" class="headerlink" title="我为什么选择了Python"></a>我为什么选择了Python</h2><p>目前，Python语言的发展势头在国内国外都是不可阻挡的，Python凭借其简单优雅的语法，强大的生态圈从众多语言中脱颖而出，如今已经是稳坐编程语言排行榜前三的位置。国内很多Python开发者都是从Java开发者跨界过来的，我自己也不例外。我简单的跟大家交代一下，我为什么选择了Python。</p><h3 id="Python-vs-Java"><a href="#Python-vs-Java" class="headerlink" title="Python vs. Java"></a>Python vs. Java</h3><p>我们通过几个例子来比较一下，做同样的事情Java和Python的代码都是怎么写的。</p><p>例子1：在终端中输出“hello, world”。</p><p>Java代码：</p><pre class="language-Java" data-language="Java"><code class="language-Java">class Test &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;hello, world&quot;);    &#125;&#125;</code></pre><p>Python代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(&#39;hello, world&#39;)</code></pre><p>例子2：从1到100求和。</p><p>Java代码：</p><pre class="language-Java" data-language="Java"><code class="language-Java">class Test &#123;        public static void main(String[] args) &#123;        int total &#x3D; 0;        for (int i &#x3D; 1; i &lt;&#x3D; 100; i +&#x3D; 1) &#123;            total +&#x3D; i;        &#125;        System.out.println(total);    &#125;&#125;</code></pre><p>Python代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">print(sum(range(1, 101)))</code></pre><p>例子3：双色球随机选号。</p><p>Java代码：</p><pre class="language-Java" data-language="Java"><code class="language-Java">import java.util.List;import java.util.ArrayList;import java.util.Collections;class Test &#123;    &#x2F;**     * 产生[min, max)范围的随机整数     *&#x2F;    public static int randomInt(int min, int max) &#123;        return (int) (Math.random() * (max - min) + min);    &#125;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 初始化备选红色球        List&lt;Integer&gt; redBalls &#x3D; new ArrayList&lt;&gt;();        for (int i &#x3D; 1; i &lt;&#x3D; 33; ++i) &#123;            redBalls.add(i);        &#125;        List&lt;Integer&gt; selectedBalls &#x3D; new ArrayList&lt;&gt;();        &#x2F;&#x2F; 选出六个红色球        for (int i &#x3D; 0; i &lt; 6; ++i) &#123;            selectedBalls.add(redBalls.remove(randomInt(0, redBalls.size())));        &#125;        &#x2F;&#x2F; 对红色球进行排序        Collections.sort(selectedBalls);        &#x2F;&#x2F; 添加一个蓝色球        selectedBalls.add(randomInt(1, 17));        &#x2F;&#x2F; 输出选中的随机号码        for (int i &#x3D; 0; i &lt; selectedBalls.size(); ++i) &#123;            System.out.printf(&quot;%02d &quot;, selectedBalls.get(i));            if (i &#x3D;&#x3D; selectedBalls.size() - 2) &#123;                System.out.print(&quot;| &quot;);            &#125;        &#125;        System.out.println();    &#125;&#125;</code></pre><p>Python代码：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from random import randint, sample# 初始化备选红色球red_balls &#x3D; [x for x in range(1, 34)]# 选出六个红色球selected_balls &#x3D; sample(red_balls, 6)# 对红色球进行排序selected_balls.sort()# 添加一个蓝色球selected_balls.append(randint(1, 16))# 输出选中的随机号码for index, ball in enumerate(selected_balls):    print(&#39;%02d&#39; % ball, end&#x3D;&#39; &#39;)    if index &#x3D;&#x3D; len(selected_balls) - 2:        print(&#39;|&#39;, end&#x3D;&#39; &#39;)print()</code></pre><p>相信，看完这些例子后，你一定感受到了我选择了Python是有道理的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口文档参考示例</title>
      <link href="/2024/07/01/jie-kou-wen-dang-can-kao-shi-li/"/>
      <url>/2024/07/01/jie-kou-wen-dang-can-kao-shi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="接口文档参考示例"><a href="#接口文档参考示例" class="headerlink" title="接口文档参考示例"></a>接口文档参考示例</h2><ol start="0"><li><p>用户登录 - <strong>POST</strong> <code>/api/login/</code></p><p>   开发者：骆昊</p><p>   版本号：v1</p><p>   最后修改时间：</p><p>   接口说明：登录成功后，会生成或更新用户令牌（token）。</p><p>   使用帮助：测试数据库中预设了四个可供使用的账号，如下表所示。</p><table><thead><tr><th>用户名</th><th>用户口令</th><th>角色</th></tr></thead><tbody><tr><td>jackfrued</td><td>123456</td><td>管理员</td></tr><tr><td>wangdachui</td><td>123123</td><td>普通用户</td></tr><tr><td>hellokitty</td><td>123123</td><td>房地产经理人</td></tr><tr><td>wuzetian</td><td>123456</td><td>房东</td></tr></tbody></table><p>   请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>字符串</td><td>是</td><td>消息体</td><td>用户名</td></tr><tr><td>password</td><td>字符串</td><td>是</td><td>消息体</td><td>用户口令</td></tr></tbody></table><p>   响应信息：</p><ul><li><p>登录成功：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 30000,    &quot;message&quot;: &quot;用户登录成功&quot;,    &quot;token&quot;: &quot;f83e0f624e2311e9af1f00163e02b646&quot;&#125;</code></pre></li><li><p>登录失败：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 30001,    &quot;message&quot;: &quot;用户名或密码错误&quot;&#125;</code></pre></li></ul></li><li><p>发送短信验证码 - <strong>GET</strong> <code>/api/mobile_code/&#123;国内手机号&#125;/</code></p><p>开发者：骆昊</p><p>版本号：v1</p><p>接口说明：给指定手机号发送短信验证码的接口，手机号必须是国内手机号，作为路径参数写到URL中。接口显示短信发送成功时，指定的手机号并不会收到短息，因为使用的三方短信平台赠送的测试短信已经用完了。</p><p>使用帮助：国内手机号暂不支持国际区号。</p><p>请求参数：暂无。</p><p>响应信息：</p><ul><li><p>请求成功：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 10001,    &quot;msg&quot;: &quot;短信验证码发送成功&quot;&#125;</code></pre></li><li><p>两次请求间隔小于60秒：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 10002,    &quot;msg&quot;: &quot;请不要在60秒以内重复发送手机验证码&quot;&#125;</code></pre></li><li><p>手机号无效：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 10003,    &quot;msg&quot;: &quot;请提供有效的手机号&quot;&#125;</code></pre></li><li><p>短信服务平台故障：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;code&quot;: 10004,    &quot;msg&quot;: &quot;短信服务暂时无法使用&quot;&#125;</code></pre></li></ul></li><li><p>获取所有省级行政单位 - <strong>GET</strong> <code>/api/districts/</code></p><p>开发者：骆昊</p><p>版本号：v1</p><p>接口说明：暂无。</p><p>使用帮助：暂无。</p><p>请求参数：暂无。</p><p>响应信息：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">[    &#123;        &quot;distid&quot;: 110000,        &quot;name&quot;: &quot;北京市&quot;    &#125;,    &#123;        &quot;distid&quot;: 120000,        &quot;name&quot;: &quot;天津市&quot;    &#125;]</code></pre></li><li><p>获取指定行政单位详情及其管辖的行政单位 - <strong>GET</strong> <code>/api/districts/&#123;行政单位编号&#125;/</code></p><p>开发者：骆昊</p><p>版本号：v1</p><p>接口说明：通过URL参数指定行政单位编号，如果行政单位编号为省级行政单位编号，则返回该省以及该省所辖市级行政单位的信息；如果行政单位编号为市级行政单位编号，则返回该市以及该市所辖区县的信息；如果行政单位编号为区县一级行政单位编号，则返回该区县的信息，下级行政单位<code>cities</code>属性值为<code>[]</code>。</p><p>使用帮助：数据库中除四川省外其他行政单位的“intro”数据都没有录入，该字段可能为空字符串。</p><p>请求参数：暂无。</p><p>响应信息：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;distid&quot;: 510000,    &quot;name&quot;: &quot;四川省&quot;,    &quot;intro&quot;: &quot;位于中国西南地区内陆，东连重庆，南邻云南、贵州，西接西藏，北界陕西、甘肃、青海，四川省总面积48.6万平方千米，省会成都。截至2018年底，四川省下辖18个省辖市，3个自治州，17个县级市，108个县，4个自治县，54个市辖区。&quot;,    &quot;cities&quot;: [        &#123;            &quot;distid&quot;: 510100,            &quot;name&quot;: &quot;成都市&quot;        &#125;,        &#123;            &quot;distid&quot;: 510300,            &quot;name&quot;: &quot;自贡市&quot;        &#125;,        &#123;            &quot;distid&quot;: 510400,            &quot;name&quot;: &quot;攀枝花市&quot;        &#125;    ]&#125;</code></pre></li><li><p>获取热门城市 - <strong>GET</strong> <code>/api/hotcities/</code></p><p>开发者：骆昊</p><p>版本号：v1</p><p>接口说明：暂无。</p><p>使用帮助：暂无。</p><p>请求参数：暂无。</p><p>响应信息：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">[    &#123;        &quot;distid&quot;: 110100,        &quot;name&quot;: &quot;北京市&quot;    &#125;,    &#123;        &quot;distid&quot;: 120100,        &quot;name&quot;: &quot;天津市&quot;    &#125;,    &#123;        &quot;distid&quot;: 130100,        &quot;name&quot;: &quot;石家庄&quot;    &#125;]</code></pre></li><li><p>分页获取房地产经理人信息 - <strong>GET</strong> <code>/api/agents/</code></p><p>开发者：骆昊</p><p>版本号：v1</p><p>接口说明：经理人姓名按照前缀模糊匹配的方式进行处理；经理人服务星级是指经理人服务星级不得低于该星级；经理人是否持证只有0（未持证上岗）和1（持证上岗）两个选项。三个参数代表的筛选条件之间是而且的关系。返回结果为分页之后的房地产经理人信息。</p><p>使用帮助：暂无。</p><p>请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>字符串</td><td>否</td><td>查询参数</td><td>经理人姓名</td></tr><tr><td>key</td><td>字符串</td><td>否</td><td>查询参数</td><td>经理人服务星级</td></tr><tr><td>cert</td><td>字符串</td><td>否</td><td>查询参数</td><td>经理人是否持证</td></tr><tr><td>page</td><td>整数</td><td>否</td><td>查询参数</td><td>页码，默认值为1</td></tr><tr><td>size</td><td>整数</td><td>否</td><td>查询参数</td><td>页面大小，默认值为5，最大值不超过50</td></tr></tbody></table><p>响应信息：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;count&quot;: 1,    &quot;next&quot;: null,    &quot;previous&quot;: null,    &quot;results&quot;: [        &#123;            &quot;agentid&quot;: 6,            &quot;estates&quot;: [                &#123;                    &quot;estateid&quot;: 11,                    &quot;name&quot;: &quot;灵芝新村&quot;,                    &quot;hot&quot;: 20                &#125;            ],            &quot;name&quot;: &quot;肖利丽&quot;,            &quot;tel&quot;: &quot;13040813886&quot;,            &quot;servstar&quot;: 4,            &quot;realstar&quot;: 4,            &quot;profstar&quot;: 4,            &quot;certificated&quot;: false        &#125;    ]&#125;</code></pre></li><li><p>新增房地产经理人 - <strong>POST</strong> <code>/api/agents/</code></p><p>开发者：骆昊</p><p>版本号：v1</p><p>接口说明：暂无。</p><p>使用帮助：需要登录且拥有管理员权限，用户身份令牌在请求头中提供。</p><p>请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>字符串</td><td>是</td><td>消息体</td><td>经理人姓名</td></tr><tr><td>tel</td><td>字符串</td><td>是</td><td>消息体</td><td>经理人手机</td></tr><tr><td>servstar</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>realstar</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>profstar</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>certificated</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>token</td><td>字符串</td><td>是</td><td>请求头</td><td>用户身份认证令牌</td></tr></tbody></table><p>响应信息：</p><ul><li><p>新增成功 - 状态码<strong>201</strong>：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;agentid&quot;: 8,    &quot;estates&quot;: [],    &quot;name&quot;: &quot;孙小美&quot;,    &quot;tel&quot;: &quot;13800991234&quot;,    &quot;servstar&quot;: 0,    &quot;realstar&quot;: 0,    &quot;profstar&quot;: 0,    &quot;certificated&quot;: false&#125;</code></pre></li><li><p>未提供身份认证信息 - 状态码<strong>401</strong>：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;detail&quot;: &quot;不正确的身份认证信息。&quot;&#125;</code></pre></li><li><p>当前用户没有操作权限 - 状态码<strong>403</strong>：</p><pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;detail&quot;: &quot;您没有执行该操作的权限。&quot;&#125;</code></pre></li></ul></li><li><p>编辑房地产经理人信息 - <strong>PUT</strong> <code>/api/agents/&#123;房地产经理人编号&#125;/</code></p><p> 开发者：骆昊</p><p> 版本号：v1</p><p> 接口说明：暂无。</p><p> 使用帮助：需要登录且拥有管理员权限，用户身份令牌在请求头中提供。</p><p> 请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>字符串</td><td>是</td><td>消息体</td><td>经理人姓名</td></tr><tr><td>tel</td><td>字符串</td><td>是</td><td>消息体</td><td>经理人手机</td></tr><tr><td>servstar</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>realstar</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>profstar</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>certificated</td><td>整数</td><td>否</td><td>消息体</td><td>默认值0</td></tr><tr><td>token</td><td>字符串</td><td>是</td><td>请求头</td><td>用户身份认证令牌</td></tr></tbody></table><p> 响应信息：</p><ul><li>更新成功 - 状态码<strong>200</strong>：</li></ul>  <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;agentid&quot;: 1,    &quot;estates&quot;: [        &#123;            &quot;estateid&quot;: 1,            &quot;name&quot;: &quot;今日家园&quot;,            &quot;hot&quot;: 20        &#125;,        &#123;            &quot;estateid&quot;: 2,            &quot;name&quot;: &quot;翡翠园&quot;,            &quot;hot&quot;: 30        &#125;,        &#123;            &quot;estateid&quot;: 3,            &quot;name&quot;: &quot;万科城市花园&quot;,            &quot;hot&quot;: 22        &#125;    ],    &quot;name&quot;: &quot;袁晓梦&quot;,    &quot;tel&quot;: &quot;158173555285&quot;,    &quot;servstar&quot;: 5,    &quot;realstar&quot;: 4,    &quot;profstar&quot;: 3,    &quot;certificated&quot;: true&#125;</code></pre><ul><li>未提供身份认证信息 - 状态码<strong>403</strong> - 与新增类同</li><li>当前用户没有操作权限 - 状态码<strong>403</strong> - 与新增类同</li></ul></li><li><p>删除房地产经理人 - <strong>DELETE</strong> <code>/api/agents/&#123;房地产经理人编号&#125;/</code></p><p> 开发者：骆昊</p><p> 版本号：v1</p><p> 接口说明：暂无。</p><p> 使用说明：暂无。</p><p> 请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>字符串</td><td>是</td><td>请求头</td><td>用户身份认证令牌</td></tr></tbody></table><p> 响应信息：</p><ul><li>删除成功 - 状态码<strong>204</strong></li><li>未提供身份认证信息 - 状态码<strong>403</strong> - 与新增类同</li><li>当前用户没有操作权限 - 状态码<strong>403</strong> - 与新增类同</li></ul></li><li><p>分页获取楼盘信息 - <strong>GET</strong> <code>/api/estates/</code></p><p> 开发者：骆昊</p><p> 版本号：v1</p><p> 接口说明：经理人姓名按照前缀模糊匹配的方式进行处理；经理人服务星级是指经理人服务星级不得低于该星级；经理人是否持证只有0（未持证上岗）和1（持证上岗）两个选项。三个参数代表的筛选条件之间是而且的关系。返回结果为分页之后的房地产经理人信息。</p><p> 使用帮助：暂无。</p><p> 请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>字符串</td><td>否</td><td>查询参数</td><td>楼盘名（模糊匹配）</td></tr><tr><td>dist</td><td>字符串</td><td>否</td><td>查询参数</td><td>楼盘所在地区编号</td></tr><tr><td>page</td><td>整数</td><td>否</td><td>查询参数</td><td>页码，默认值为1</td></tr><tr><td>size</td><td>整数</td><td>否</td><td>查询参数</td><td>页面大小，默认值为5，最大值不超过50</td></tr></tbody></table><p> 响应信息：</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;count&quot;: 16,    &quot;next&quot;: &quot;https:&#x2F;&#x2F;120.77.222.217&#x2F;api&#x2F;estates&#x2F;?page&#x3D;2&quot;,    &quot;previous&quot;: null,    &quot;results&quot;: [        &#123;            &quot;estateid&quot;: 6,            &quot;district&quot;: &#123;                &quot;distid&quot;: 440303,                &quot;name&quot;: &quot;罗湖区&quot;            &#125;,            &quot;agents&quot;: [                &#123;                    &quot;agentid&quot;: 2,                    &quot;name&quot;: &quot;杨伟&quot;,                    &quot;tel&quot;: &quot;13352939550&quot;,                    &quot;servstar&quot;: 3                &#125;,                &#123;                    &quot;agentid&quot;: 4,                    &quot;name&quot;: &quot;郭志鹏&quot;,                    &quot;tel&quot;: &quot;13686810707&quot;,                    &quot;servstar&quot;: 4                &#125;            ],            &quot;name&quot;: &quot;幸福里&quot;,            &quot;hot&quot;: 300,            &quot;intro&quot;: &quot;&quot;        &#125;    ]&#125;</code></pre></li><li><p>新增楼盘 - <strong>POST</strong> <code>/api/estates/</code></p></li></ol><p>  开发者：骆昊</p><p>  版本号：v1</p><p>  接口说明：暂无。</p><p>  使用帮助：需要登录且拥有管理员权限，用户身份令牌在请求头中提供。</p><p>  请求参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>字符串</td><td>是</td><td>消息体</td><td>楼盘名称</td></tr><tr><td>hot</td><td>整数</td><td>否</td><td>消息体</td><td>楼盘热度，默认值0</td></tr><tr><td>intro</td><td>字符串</td><td>否</td><td>消息体</td><td>楼盘介绍，默认值空字符串</td></tr><tr><td>distid</td><td>整数</td><td>是</td><td>消息体</td><td>楼盘所在地区编号</td></tr><tr><td>token</td><td>字符串</td><td>是</td><td>请求头</td><td>用户身份认证令牌</td></tr></tbody></table><p>  响应信息：</p><ul><li><p>新增成功 - 状态码<strong>201</strong>：</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;estateid&quot;: 17,    &quot;district&quot;: 510107,    &quot;name&quot;: &quot;世纪锦苑&quot;,    &quot;hot&quot;: 100,    &quot;intro&quot;: &quot;&quot;&#125;</code></pre></li><li><p>未提供身份认证信息 - 状态码<strong>403</strong>：</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;detail&quot;: &quot;请提供有效的身份认证信息&quot;&#125;</code></pre></li><li><p>当前用户没有操作权限 - 状态码<strong>403</strong>：</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;detail&quot;: &quot;You do not have permission to perform this action.&quot;&#125;</code></pre></li></ul><ol start="11"><li><p>编辑楼盘信息 - <strong>PUT</strong> <code>/api/estates/&#123;楼盘编号&#125;</code></p></li><li><p>删除楼盘信 - <strong>DELETE</strong> <code>/api/estates/&#123;楼盘编号&#125;</code></p></li><li><p>获取所有户型信息 - <strong>GET</strong> <code>/api/housetypes/</code></p></li><li><p>新增户型 - <strong>POST</strong> <code>/api/housetypes/</code></p></li><li><p>编辑户型信息 - <strong>PUT</strong> <code>/api/housetypes/&#123;户型编号&#125;</code></p></li><li><p>删除户型 - <strong>DELETE</strong> <code>/api/housetypes/&#123;户型编号&#125;</code></p></li><li><p>分页获取房源信息 - <strong>GET</strong> <code>/api/houseinfos/</code></p><p> 开发者：骆昊</p><p> 版本号：v1</p><p> 接口说明：暂无。</p><p> 使用帮助：暂无。</p><p> 请求参数：    </p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>参数位置</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>字符串</td><td>否</td><td>查询参数</td><td>房源标题关键词</td></tr><tr><td>dist</td><td>整数</td><td>否</td><td>查询参数</td><td>楼盘所在地区编号</td></tr><tr><td>min_price</td><td>整数</td><td>否</td><td>查询参数</td><td>价格区间下限</td></tr><tr><td>max_price</td><td>整数</td><td>否</td><td>查询参数</td><td>价格区间上限</td></tr><tr><td>type</td><td>整数</td><td>否</td><td>查询参数</td><td>户型编号</td></tr><tr><td>page</td><td>整数</td><td>否</td><td>查询参数</td><td>页码，默认值为1</td></tr><tr><td>size</td><td>整数</td><td>否</td><td>查询参数</td><td>页面大小，默认值为5，最大值不超过50</td></tr></tbody></table><p> 响应信息：</p> <pre class="language-JSON" data-language="JSON"><code class="language-JSON">&#123;    &quot;count&quot;: 7,    &quot;next&quot;: &quot;http:&#x2F;&#x2F;localhost:8000&#x2F;api&#x2F;houseinfos&#x2F;?dist&#x3D;440303&amp;page&#x3D;2&quot;,    &quot;previous&quot;: null,    &quot;results&quot;: [    ]&#125;</code></pre></li><li><p>查看房源详情 - <strong>GET</strong> <code>/api/houseinfos/&#123;房源编号&#125;</code></p></li><li><p>新增房源 - <strong>POST</strong> <code>/api/houseinfos/</code></p></li><li><p>编辑房源信息 - <strong>PUT</strong> <code>/api/houseinfos/&#123;房源编号&#125;</code></p></li><li><p>删除房源 - <strong>DELETE</strong> <code>/api/houseinfos/&#123;房源编号&#125;</code></p></li><li><p>随机获取指定数量的房源标签 - <strong>GET</strong> <code>/api/tags/</code></p></li><li><p>分页查看房源标签 - <strong>GET</strong> <code>/api/tags/</code></p></li><li><p>新增房源标签 - <strong>POST</strong> <code>/api/tags/</code></p></li><li><p>删除房源标签 - <strong>DELETE</strong>  <code>/api/tags/&#123;房源编号&#125;</code></p></li><li><p>查看房源的图片 - <strong>GET</strong> <code>/api/houseinfos/&#123;房源编号&#125;/photos/</code></p></li><li><p>为房源添加图片 - <strong>POST</strong> <code>/api/houseinfos/&#123;房源编号&#125;/photos/</code></p></li><li><p>删除房源图片 - <strong>DELETE</strong> <code>/api/houseinfos/&#123;房源编号&#125;/photos/&#123;图片编号&#125;</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转PyCharm</title>
      <link href="/2024/07/01/wan-zhuan-pycharm/"/>
      <url>/2024/07/01/wan-zhuan-pycharm/</url>
      
        <content type="html"><![CDATA[<h2 id="玩转PyCharm"><a href="#玩转PyCharm" class="headerlink" title="玩转PyCharm"></a>玩转PyCharm</h2><p>PyCharm是由JetBrains公司开发的提供给Python专业的开发者的一个集成开发环境，它最大的优点是能够大大提升Python开发者的工作效率，为开发者集成了很多用起来非常顺手的功能，包括代码调试、高亮语法、代码跳转、智能提示、自动补全、单元测试、版本控制等等。此外，PyCharm还提供了对一些高级功能的支持，包括支持基于Django框架的Web开发。</p><h3 id="PyCharm的下载和安装"><a href="#PyCharm的下载和安装" class="headerlink" title="PyCharm的下载和安装"></a>PyCharm的下载和安装</h3><p>可以在<a href="https://www.jetbrains.com/">JetBrains公司的官方网站</a>找到PyCharm的<a href="https://www.jetbrains.com/pycharm/download/">下载链接</a>，有两个可供下载的版本，一个是社区版（PyCharm CE），一个是专业版（PyCharm Professional）。社区版在Apache许可证下发布，可以免费使用；专业版在专用许可证下发布，需要购买授权后才能使用，但新用户可以试用30天。很显然，专业版提供了更为强大的功能和对企业级开发的各种支持，但是对于初学者来说，社区版已经足够强大和好用了。安装PyCharm只需要直接运行下载的安装程序，然后持续的点击“Next”（下一步）按钮就可以啦。下面是我在Windows系统下安装PyCharm的截图，安装完成后点击“Finish”（结束）按钮关闭安装向导，然后可以通过双击桌面的快捷方式来运行PyCharm。</p><p><img src="/res/pycharm-installation.png"></p><h3 id="首次使用的设置"><a href="#首次使用的设置" class="headerlink" title="首次使用的设置"></a>首次使用的设置</h3><p>第一次使用PyCharm时，会有一个导入设置的向导，如果之前没有使用PyCharm或者没有保存过设置的就直接选择“Do not import settings”进入下一步即可，下面是我在macOS系统下第一次使用PyCharm时的截图。</p><p><img src="/res/pycharm-import-settings.png"></p><p>专业版的PyCharm是需要激活的，<strong>强烈建议大家在条件允许的情况下支付费用来支持优秀的产品</strong>，如果不用做商业用途或者不需要使用PyCharm的高级功能，我们可以暂时选择试用30天或者使用社区版的PyCharm。如果你是一名学生，希望购买PyCharm来使用，可以看看<a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369">教育优惠官方申请指南</a>。如下图所示，我们需要点击“Evaluate”按钮来试用专业版PyCharm。</p><p><img src="/res/pycharm-activation.png"></p><p>接下来是选择UI主题，可以根据个人喜好进行选择，深色的主题比较护眼而浅色的主题对比度更好。</p><p><img src="/res/pycharm-ui-themes.png"></p><p>再接下来是创建可以在“终端”或“命令行提示符”中运行PyCharm的启动脚本，当然也可以不做任何勾选，直接点击“Next: Featured plugins”按钮进入下一环节。</p><p><img src="/res/pycharm-create-launcher.png"></p><p>然后可以选择需要安装哪些插件，我们可以暂时什么都不安装，等需要的时候再来决定。</p><p><img src="/res/pycharm-install-plugins.png"></p><p>最后点击上图右下角的“Start using PyCharm”（开始使用PyCharm）就可以开启你的PyCharm之旅了。</p><h3 id="用PyCharm创建项目"><a href="#用PyCharm创建项目" class="headerlink" title="用PyCharm创建项目"></a>用PyCharm创建项目</h3><p>启动PyCharm之后会来到一个欢迎页，在欢迎页上我们可以选择“创建新项目”（Create New Project）、“打开已有项目”（Open）和“从版本控制系统中检出项目”（Get from Version Control）。</p><p><img src="/res/pycharm-welcome.png"></p><p>如果选择了“Create New Project”来创建新项目就会打一个创建项目的向导页。下图所示是PyCharm专业版创建新项目的向导页，可以看出专业版支持的项目类型非常的多，而社区版只能创建纯Python项目（Pure Python），没有这一系列的选项。</p><p><img src="/res/pycharm-project-wizard.png"></p><p>接下来，我们要为项目创建专属的虚拟环境，每个Python项目最好都在自己专属的虚拟环境中运行，因为每个项目对Python解释器和三方库的需求并不相同，虚拟环境对不同的项目进行了隔离。在上图所示的界面在，我们可以选择新建虚拟环境（New environment using Virtualenv），这里的“Virtualenv”是PyCharm默认选择的创建虚拟环境的工具，我们就保留这个默认的选项就可以了。</p><p>项目创建完成后就可以开始新建各种文件来书写Python代码了，如下图所示。左侧是项目浏览器，可以看到刚才创建的项目文件夹以及虚拟环境文件夹。我们可以在项目上点击鼠标右键，选择“New”，在选择“Python File”来创建Python代码文件，下图中我们创建了两个Python文件，分别是<code>poker_game.py</code>和<code>salary_system.py</code>。当然，如果愿意，也可以使用复制粘贴的方式把其他地方的Python代码文件复制到项目文件夹下。</p><p><img src="/res/pycharm-workspace.png"></p><p>在工作窗口点击鼠标右键可以在上下文菜单中找到“Run”选项，例如要运行<code>salary_system.py</code>文件，右键菜单会显示“Run ‘salary_system’”选项，点击这个选项我们就可以运行Python代码啦，运行结果在屏幕下方的窗口可以看到，如下图所示。</p><p><img src="/res/pycharm-run-result.png"></p><h3 id="常用操作和快捷键"><a href="#常用操作和快捷键" class="headerlink" title="常用操作和快捷键"></a>常用操作和快捷键</h3><p>PyCharm为写Python代码提供了自动补全和高亮语法功能，这也是PyCharm作为集成开发环境（IDE）的基本功能。PyCharm的“File”菜单有一个“Settings”菜单项（macOS上是在“PyCharm”菜单的“Preferences…”菜单项），这个菜单项会打开设置窗口，可以在此处对PyCharm进行设置，如下图所示。</p><p><img src="/Users/Hao/Desktop/Python-Core-50-Courses/res/pycharm-settings.png"></p><p>PyCharm的菜单项中有一个非常有用的“Code”菜单，菜单中提供了自动生成代码、自动补全代码、格式化代码、移动代码等选项，这些功能对开发者来说是非常有用的，大家可以尝试使用这些菜单项或者记住它们对应的快捷键，例如在macOS上，格式化代码这个菜单项对应的快捷键是<code>alt+command+L</code>。除此之外，“Refactor”菜单也非常有用，它提供了一些重构代码的选项。所谓重构是在不改变代码执行结果的前提下调整代码的结构，这也是资深程序员的一项重要技能。还有一个值得一提的菜单是“VCS”，VCS是“Version Control System”（版本控制系统）的缩写，这个菜单提供了对代码版本管理的支持。版本控制的知识会在其他的课程中为大家讲解。</p><p>下表列出了一些PyCharm中特别常用的快捷键，当然如果愿意，也可以通过设置窗口中“Keymap”菜单项自定义快捷键，PyCharm本身也针对不同的操作系统和使用习惯对快捷键进行了分组。</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td><code>command + j</code></td><td>显示可用的代码模板</td></tr><tr><td><code>command + b</code></td><td>查看函数、类、方法的定义</td></tr><tr><td><code>ctrl + space</code></td><td>万能代码提示快捷键，一下不行按两下</td></tr><tr><td><code>command + alt + l</code></td><td>格式化代码</td></tr><tr><td><code>alt + enter</code></td><td>万能代码修复快捷键</td></tr><tr><td><code>ctrl + /</code></td><td>注释&#x2F;反注释代码</td></tr><tr><td><code>shift + shift</code></td><td>万能搜索快捷键</td></tr><tr><td><code>command + d</code> &#x2F; <code>command + y</code></td><td>复制&#x2F;删除一行代码</td></tr><tr><td><code>command + shift + -</code> &#x2F; <code>command + shift + +</code></td><td>折叠&#x2F;展开所有代码</td></tr><tr><td><code>F2</code></td><td>快速定位到错误代码</td></tr><tr><td><code>command+ alt + F7</code></td><td>查看哪些地方用到了指定的函数、类、方法</td></tr></tbody></table><blockquote><p><strong>说明</strong>：Windows系统下如果使用PyCharm的默认设置，可以将上面的<code>command</code>键换成<code>ctrl</code>键即可，唯一的例外是<code>ctrl + space</code>那个快捷键，因为它跟Windows系统切换输入法的快捷键是冲突的，所以在Windows系统下默认没有与之对应的快捷键。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用函数还是用复杂的表达式</title>
      <link href="/2024/07/01/yong-han-shu-huan-shi-yong-fu-za-de-biao-da-shi/"/>
      <url>/2024/07/01/yong-han-shu-huan-shi-yong-fu-za-de-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="用函数还是用复杂的表达式"><a href="#用函数还是用复杂的表达式" class="headerlink" title="用函数还是用复杂的表达式"></a>用函数还是用复杂的表达式</h2><p>Perl语言的原作者<em>Larry Wall</em>曾经说过，伟大的程序员都有三个优点：懒惰、暴躁和自负。乍一看这三个词语没有一个是褒义词，但在程序员的世界里，这三个词有不同的意义。首先，懒惰会促使程序员去写一些省事儿的程序来辅助自己或别人更好的完成工作，这样我们就无需做那些重复和繁琐的劳动；同理能够用3行代码解决的事情，我们也绝不会写出10行代码来。其次，暴躁会让程序员主动的去完成一些你还没有提出的工作，去优化自己的代码让它更有效率，能够3秒钟完成的任务，我们绝不能容忍1分钟的等待。最后，自负会促使程序员写出可靠无误的代码，我们写代码不是为了接受批评和指责，而是为了让其他人来膜拜。</p><p>那么接下来就有一个很有意思的问题值得探讨一下，我们需要一个程序从输入的三个数中找出最大的那个数。这个程序对任何会编程的人来说都是小菜一碟，甚至不会编程的人经过10分钟的学习也能搞定。下面是用来解决这个问题的Python代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))c &#x3D; int(input(&#39;c &#x3D; &#39;))if a &gt; b:the_max &#x3D; aelse:the_max &#x3D; bif c &gt; the_max:the_max &#x3D; cprint(&#39;The max is:&#39;, the_max)</code></pre><p>但是我们刚才说了，程序员都是懒惰的，很多程序员都会使用三元条件运算符来改写上面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))c &#x3D; int(input(&#39;c &#x3D; &#39;))the_max &#x3D; a if a &gt; b else bthe_max &#x3D; c if c &gt; the_max else the_maxprint(&#39;The max is:&#39;, the_max)</code></pre><p>需要说明的是，Python在2.5版本以前是没有上面代码第4行和第5行中使用的三元条件运算符的，究其原因是Guido van Rossum（Python之父）认为三元条件运算符并不能帮助 Python变得更加简洁，于是那些习惯了在C&#x2F;C++或Java中使用三元条件运算符（在这些语言中，三元条件运算符也称为“Elvis运算符”，因为<code>?:</code>放在一起很像著名摇滚歌手猫王Elvis的大背头）的程序员试着用<code>and</code>和<code>or</code>运算符的短路特性来模拟出三元操作符，于是在那个年代，上面的代码是这样写的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))c &#x3D; int(input(&#39;c &#x3D; &#39;))the_max &#x3D; a &gt; b and a or bthe_max &#x3D; c &gt; the_max and c or the_maxprint(&#39;The max is:&#39;, the_max)</code></pre><p>但是这种做法在某些场景下是不能成立的，且看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; 0b &#x3D; -100# 下面的代码本来预期输出a的值，结果却得到了b的值# 因为a的值0在进行逻辑运算时会被视为False来处理print(True and a or b)# print(a if True else b)</code></pre><p>所以在Python 2.5以后引入了三元条件运算符来避免上面的风险（上面代码被注释掉的最后一句话）。那么，问题又来了，上面的代码还可以写得更简短吗？答案是肯定的。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))c &#x3D; int(input(&#39;c &#x3D; &#39;))print(&#39;The max is:&#39;, (a if a &gt; b else b) if (a if a &gt; b else b) &gt; c else c)</code></pre><p>但是，这样做真的好吗？如此复杂的表达式是不是让代码变得晦涩了很多呢？我们发现，在实际开发中很多开发者都喜欢过度的使用某种语言的特性或语法糖，于是简单的多行代码变成了复杂的单行表达式，这样做真的好吗？这个问题我也不止一次的问过自己，现在我能给出的答案是下面的代码，使用辅助函数。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def the_max(x, y):return x if x &gt; y else ya &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))c &#x3D; int(input(&#39;c &#x3D; &#39;))print(&#39;The max is:&#39;, the_max(the_max(a, b), c))</code></pre><p>上面的代码中，我定义了一个辅助函数<code>the_max</code>用来找出参数传入的两个值中较大的那一个，于是下面的输出语句可以通过两次调用<code>the_max</code>函数来找出三个数中的最大值，现在代码的可读性是不是好了很多。用辅助函数来替代复杂的表达式真的是一个不错的选择，关键是比较大小的逻辑转移到这个辅助函数后不仅可以反复调用它，而且还可以进行级联操作。</p><p>当然，很多语言中比较大小的函数根本没有必要自己来实现（通常都是内置函数），Python也是如此。Python内置的max函数利用了Python对可变参数的支持，允许一次性传入多个值或者一个迭代器并找出那个最大值，所以上面讨论的问题在Python中也就是一句话的事，但是从复杂表达式到使用辅助函数简化复杂表达式这个思想是非常值得玩味的，所以分享出来跟大家做一个交流。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; int(input(&#39;a &#x3D; &#39;))b &#x3D; int(input(&#39;b &#x3D; &#39;))c &#x3D; int(input(&#39;c &#x3D; &#39;))print(&#39;The max is:&#39;, max(a, b, c))</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知乎问题回答</title>
      <link href="/2024/07/01/zhi-hu-wen-ti-hui-da/"/>
      <url>/2024/07/01/zhi-hu-wen-ti-hui-da/</url>
      
        <content type="html"><![CDATA[<h2 id="知乎问题回答"><a href="#知乎问题回答" class="headerlink" title="知乎问题回答"></a>知乎问题回答</h2><h3 id="Python学习完基础语法知识后，如何进一步提高？"><a href="#Python学习完基础语法知识后，如何进一步提高？" class="headerlink" title="Python学习完基础语法知识后，如何进一步提高？"></a>Python学习完基础语法知识后，如何进一步提高？</h3><p>如果你已经完成了Python基础语法的学习，想要知道接下来如何提高，那么你得先问问自己你要用Python来做什么？目前学习Python后可能的就业方向包括以下几个领域，我把每个领域需要的技术作为了一个简单的关键词摘要。</p><blockquote><p>说明：以下数据参考了主要的招聘门户网站以及职友集。</p></blockquote><table><thead><tr><th>职位</th><th>所需技能</th><th>招聘需求量</th></tr></thead><tbody><tr><td>Python后端开发工程师</td><td>Python基础<br>Django &#x2F; Flask &#x2F; Tornado &#x2F; Sanic<br>RESTful &#x2F; 接口文档撰写<br>MySQL &#x2F; Redis &#x2F; MongoDB &#x2F; ElasticSearch<br>Linux &#x2F; Git &#x2F; Scrum &#x2F; PyCharm</td><td>一般</td></tr><tr><td>Python爬虫开发工程师</td><td>Python基础<br>常用标准库和三方库<br>Scrapy &#x2F; PySpider<br>Selenium &#x2F; Appnium<br>Redis &#x2F; MongoDB &#x2F; MySQL<br>前端 &#x2F; HTTP(S) &#x2F; 抓包工具</td><td>较少</td></tr><tr><td>Python量化交易开发工程师</td><td>Python基础<br>数据结构 &#x2F; 算法 &#x2F; 设计模式<br>NoSQL（KV数据库）<br>金融学（两融、期权、期货、股票） &#x2F; 数字货币</td><td>一般</td></tr><tr><td>Python数据分析工程师 &#x2F;<br>Python机器学习工程师</td><td>统计学专业 &#x2F; 数学专业 &#x2F; 计算机专业<br>Python基础 &#x2F; 算法设计<br>SQL &#x2F; NoSQL &#x2F; Hive &#x2F; Hadoop &#x2F; Spark<br>NumPy &#x2F; Scikit-Learn &#x2F; Pandas &#x2F; Seaborn<br>PyTorch &#x2F; Tensorflow &#x2F; OpenCV</td><td>大</td></tr><tr><td>Python自动化测试工程师</td><td>Python基础 &#x2F; 单元测试 &#x2F; 软件测试基础<br>Linux &#x2F; Shell &#x2F; JIRA &#x2F; 禅道 &#x2F; Jenkins &#x2F; CI &#x2F; CD<br>Selenium &#x2F; Robot Framework &#x2F; Appnium<br>ab &#x2F; sysbench &#x2F; JMeter &#x2F; LoadRunner &#x2F; QTP</td><td>大</td></tr><tr><td>Python自动化运维工程师</td><td>Python基础 &#x2F; Linux &#x2F; Shell <br>Fabric &#x2F; Ansible &#x2F; Playbook<br>Zabbix &#x2F; Saltstack &#x2F; Puppet<br>Docker &#x2F; paramiko</td><td>大</td></tr><tr><td>Python云平台开发工程师</td><td>Python基础<br>OpenStack &#x2F; CloudStack<br>Ovirt &#x2F; KVM<br>Docker &#x2F; K8S</td><td>较少</td></tr></tbody></table><p>如果弄清了自己将来要做的方向，就可以开始有针对性的学习了，下面给大家一个推荐书籍的清单。</p><ol><li><p>入门读物</p><ul><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python编程从入门到实践》（<em>Python Crash Course</em>）</li><li>《Python Cookbook》</li></ul></li><li><p>进阶读物</p><ul><li>《软件架构 - Python语言实现》（<em>Software Architecture with Python</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ul></li><li><p>数据库相关</p><ul><li>《MySQL必知必会》（<em>MySQL Crash Course</em>）</li><li>《深入浅出MySQL - 数据库开发、优化与管理维护》</li><li>《MongoDB权威指南》（<em>MongoDB: The Definitive Guide</em>）</li><li>《Redis实战》（<em>Redis in Action</em>）</li><li>《Redis开发与运维》</li></ul></li><li><p>Linux &#x2F; Shell &#x2F; Docker &#x2F; 运维</p><ul><li>《鸟哥的Linux私房菜》</li><li>《Linux命令行与shell脚本编程大全》（<em>Linux Command Line and Shell Scripting Bible</em>）</li><li>《Python自动化运维:技术与最佳实践》</li><li>《第一本Docker书》（<em>The Docker Book</em>）</li><li>《Docker经典实例》（Docker Cookbook）</li></ul></li><li><p>Django &#x2F; Flask &#x2F; Tornado</p><ul><li><p>《Django基础教程》（<em>Tango with Django</em>）</p></li><li><p>《轻量级Django》（<em>Lightweight Django</em>）</p></li><li><p>《精通Django》（<em>Mastering Django: Core</em>）</p></li><li><p>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</p></li><li><p>《Two Scoops of Django: Best Practice of Django 1.8》</p></li><li><p>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</p></li><li><p>《深入理解Flask》（<em>Mastering Flask</em>）</p></li><li><p>《Introduction to Tornado》</p></li></ul></li><li><p>爬虫开发</p><ul><li><p>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</p></li><li><p>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</p></li><li><p>《Python网络数据采集》（<em>Web Scraping with Python</em>）</p></li><li><p>《Python爬虫开发与项目实战》</p></li><li><p>《Python 3网络爬虫开发实战》</p></li></ul></li><li><p>数据分析</p><ul><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ul></li><li><p>机器学习</p><ul><li><p>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</p></li><li><p>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</p></li><li><p>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</p></li><li><p>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</p></li><li><p>《TensorFlow：实战Google深度学习框架》</p></li></ul></li><li><p>其他书籍</p><ul><li>《Pro Git》</li><li>《Selenium自动化测试 - 基于Python语言》（<em>Learning Selenium Testing Tools with Python</em>）</li><li>《Selenium自动化测试之道》</li><li>《Scrum敏捷软件开发》（<em>Software Development using Scrum</em>）</li><li>《高效团队开发 - 工具与方法》</li></ul></li></ol><p>当然学习编程，最重要的通过项目实战来提升自己的综合能力，Github上有大量的优质开源项目，其中不乏优质的Python项目。有一个名为<a href="https://github.com/mahmoud/awesome-python-applications">“awesome-python-applications”</a>的项目对这些优质的资源进行了归类并提供了传送门，大家可以了解下。如果自学能力不是那么强，可以通过网络上免费或者付费的视频课程来学习对应的知识；如果自律性没有那么强，那就只能建议花钱参加培训班了，因为花钱在有人监督的环境下学习对很多人来说确实是一个捷径，但是要记得：“师傅领进门，修行靠各人”。选择自己热爱的东西并全力以赴，不要盲目的跟风学习，这一点算是过来人的忠告吧。记得我自己刚开始进入软件开发这个行业时，有人跟我说过这么一句话，现在也分享出来与诸君共勉：“浮躁的人有两种：只观望而不学习的人，只学习而不坚持的人；浮躁的人都不是高手。”</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门系列1-周而复始</title>
      <link href="/2024/07/01/suan-fa-ru-men-xi-lie-1-zhou-er-fu-shi/"/>
      <url>/2024/07/01/suan-fa-ru-men-xi-lie-1-zhou-er-fu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="算法入门系列课程1-周而复始"><a href="#算法入门系列课程1-周而复始" class="headerlink" title="算法入门系列课程1 - 周而复始"></a>算法入门系列课程1 - 周而复始</h2><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><ol><li><p>什么是算法？</p><p>解决问题的正确方法和具体的实施步骤。</p><p>例子1：如何在两栋相距50m的大楼的两个房间牵一条线（两个房间都有窗）？</p><ul><li>养一只鸟（如鸽子），将线送过去</li><li>用很长的杆子将线递过去</li><li>用无人机（遥控飞行器）将线送过去</li></ul><p>如何评价这些方法的好坏？<strong>少花钱，不费事</strong>！</p><p>例子2：大教室里坐了几百名学生一起听课，如何快速的统计学生人数？</p><p>例子3：向列表容器中<strong>逆向</strong>插入100000个元素。</p><ul><li><p>方法1：</p><pre class="language-Python" data-language="Python"><code class="language-Python">nums &#x3D; []for i in range(100000):    nums.append(i)nums.reverse()</code></pre></li><li><p>方法2：</p><pre class="language-Python" data-language="Python"><code class="language-Python">nums &#x3D; []for i in range(100000):    nums.insert(0, i)</code></pre></li></ul><p>例子3：生成Fibonacci数列（前100个Fibonacci数）。</p><ul><li><p>方法1 - 递推：</p><pre class="language-Python" data-language="Python"><code class="language-Python">a, b &#x3D; 0, 1for num in range(1, 101):    a, b &#x3D; b, a + b    print(f&#39;&#123;num&#125;: &#123;a&#125;&#39;)</code></pre></li><li><p>方法2 - 递归：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(num):    if num in (1, 2):        return 1    return fib(num - 1) + fib(num - 2)for num in range(1, 101):    print(f&#39;&#123;num&#125;: &#123;fib(num)&#125;&#39;)</code></pre></li><li><p>方法3 - 改进的递归：</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fib(num, temp&#x3D;&#123;&#125;):    if num in (1, 2):        return 1    elif num not in temp:        temp[num] &#x3D; fib(num - 1) + fib(num - 2)    return temp[num]</code></pre></li><li><p>方法4  - 改进的递归：</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import lru_cache@lru_cache()def fib(num):    if num in (1, 2):        return 1    return fib(num - 1) + fib(num - 2)</code></pre></li></ul></li><li><p>如何评价算法的好坏？</p><p><a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">渐近时间复杂度</a>和渐近空间复杂度。</p></li><li><p>大<em><strong>O</strong></em>符号的意义？</p><p>表示一个函数相对于输入规模的增长速度，也可以称之为函数的数量级。</p><table><thead><tr><th>大<em>O</em>符号</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>$$O(c)$$</td><td>常量时间复杂度</td><td>布隆过滤器 &#x2F; 哈希存储</td></tr><tr><td>$$O(log_2n)$$</td><td>对数时间复杂度</td><td>二分查找（折半查找）</td></tr><tr><td>$$O(n)$$</td><td>线性时间复杂度</td><td>顺序查找 &#x2F; 桶排序</td></tr><tr><td>$$O(n*log_2n)$$</td><td>对数线性时间复杂度</td><td>高级排序算法（归并排序、快速排序）</td></tr><tr><td>$$O(n^2)$$</td><td>平方时间复杂度</td><td>简单排序算法（选择排序、插入排序、冒泡排序）</td></tr><tr><td>$$O(n^3)$$</td><td>立方时间复杂度</td><td>Floyd算法 &#x2F; 矩阵乘法运算</td></tr><tr><td>$$O(2^n)$$</td><td>几何级数时间复杂度</td><td>汉诺塔</td></tr><tr><td>$$O(n!)$$</td><td>阶乘时间复杂度</td><td>旅行经销商问题</td></tr></tbody></table></li></ol><h3 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h3><p>在计算机科学中，<strong>穷举法</strong>或者<strong>暴力搜索法</strong>是一个非常非常直观的解决问题的方法，这种方法通过一项一项的列举解决方案所有可能的候选项以及检查每个候选项是否符合问题的描述，最终得到问题的解。</p><p>虽然暴力搜索很容易实现，并且如果解决方案存在它就一定能够找到，但是它的代价是和候选方案的数量成比例的，由于这一点，在很多实际问题中，消耗的代价会随着问题规模的增加而快速地增长。因此，当问题规模有限或当存在可用于将候选解决方案的集合减少到可管理大小时，就可以使用暴力搜索。另外，当实现方法的简单度比速度更重要的时候，也可以考虑使用这种方法。</p><h3 id="经典例子"><a href="#经典例子" class="headerlink" title="经典例子"></a>经典例子</h3><ol><li><p><strong>百钱百鸡</strong>问题：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100元买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p><pre class="language-Python" data-language="Python"><code class="language-Python">for x in range(21):    for y in range(34):        z &#x3D; 100 - x - y        if z % 3 &#x3D;&#x3D; 0 and 5 * x + 3 * y + z &#x2F;&#x2F; 3 &#x3D;&#x3D; 100:            print(x, y, z)</code></pre></li><li><p><strong>五人分鱼</strong>问题：ABCDE五人在某天夜里合伙捕鱼，最后疲惫不堪各自睡觉。第二天A第一个醒来，他将鱼分为5份，扔掉多余的1条，拿走了属于自己的一份；B第二个醒来，也将鱼分为5份，扔掉多余的1条，拿走属于自己的一份；然后C、D、E依次醒来，也按同样的方式分鱼，问他们至少捕了多少条鱼？</p><pre class="language-Python" data-language="Python"><code class="language-Python">fish &#x3D; 6while True:    total &#x3D; fish    enough &#x3D; True    for _ in range(5):        if (total - 1) % 5 &#x3D;&#x3D; 0:            total &#x3D; (total - 1) &#x2F;&#x2F; 5 * 4        else:            enough &#x3D; False            break    if enough:        print(fish)        break    fish +&#x3D; 5</code></pre></li><li><p><strong>暴力破解口令</strong>：</p><pre class="language-Python" data-language="Python"><code class="language-Python">import reimport PyPDF2with open(&#39;Python_Tricks_encrypted.pdf&#39;, &#39;rb&#39;) as pdf_file_stream:    reader &#x3D; PyPDF2.PdfFileReader(pdf_file_stream)    with open(&#39;dictionary.txt&#39;, &#39;r&#39;) as txt_file_stream:        file_iter &#x3D; iter(lambda: txt_file_stream.readline(), &#39;&#39;)        for word in file_iter:            word &#x3D; re.sub(r&#39;\s&#39;, &#39;&#39;, word)            if reader.decrypt(word):                print(word)                break</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门系列2 - 在水一方</title>
      <link href="/2024/07/01/suan-fa-ru-men-xi-lie-2-zai-shui-yi-fang/"/>
      <url>/2024/07/01/suan-fa-ru-men-xi-lie-2-zai-shui-yi-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="算法入门系列2-在水一方"><a href="#算法入门系列2-在水一方" class="headerlink" title="算法入门系列2 - 在水一方"></a>算法入门系列2 - 在水一方</h2><p>在第一次的公开课中，我们讲到了穷举法。穷举法也被称为暴力搜索法，今天我们要讲的回溯法就是暴力搜索法的一种。接下来我们讲到的很多算法跟“递归”这个概念有或多或少的关系，所以我们先说说“递归”。</p><h3 id="现实中的递归"><a href="#现实中的递归" class="headerlink" title="现实中的递归"></a>现实中的递归</h3><p>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……</p><p>野比大雄在房间里，用时光电视看着未来的情况。电视画面中，野比大雄在房间里，用时光电视看着未来的情况。电视画面中，野比大雄在房间里，用时光电视看着未来的情况……</p><p>阶乘的递归定义：$$0! &#x3D; 1$$，$$n!&#x3D;n*(n-1)!$$ ，使用被定义对象的自身来为其下定义称为递归定义。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E7%BD%97%E6%96%AF%E7%89%B9%E6%95%88%E5%BA%94">德罗斯特效应</a>是递归的一种视觉形式。图中女性手持的物体中有一幅她本人手持同一物体的小图片，进而小图片中还有更小的一幅她手持同一物体的图片……</p><p><img src="/./res/droste.png"></p><h3 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h3><p>在程序中，一个函数如果直接或者间接的调用了自身，我们就称之为递归函数。</p><p>写递归函数有两个要点：</p><ol><li>收敛条件 - 什么时候结束递归。</li><li>递归公式 - 每一项与前一项（前<em>N</em>项）的关系。</li></ol><p>例子1：求阶乘。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def fac(num):    if num &#x3D;&#x3D; 0:        return 1    return num * fac(num - 1)</code></pre><p>Python对递归的深度加以了限制（默认1000层函数调用），如果想突破这个限制，可以使用下面的方法。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import syssys.setrecursionlimit(10000)</code></pre><p>例子2：爬楼梯 - 楼梯有<em>n</em>个台阶，一步可以走1阶、2阶或3阶，走完<em>n</em>个台阶共有多少种不同的走法。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def climb(num):    if num &#x3D;&#x3D; 0:        return 1    elif num &lt; 0:        return 0    return climb(num - 1) + climb(num - 2) + climb(num - 3)</code></pre><p><strong>注意</strong>：上面的递归函数性能会非常的差，因为时间复杂度是几何级数级的。</p><p>优化后的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from functools import lru_cache@lru_cache()def climb(num):    if num &#x3D;&#x3D; 0:        return 1    elif num &lt; 0:        return 0    return climb(num - 1) + climb(num - 2) + climb(num - 3)</code></pre><p>不使用的递归的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def climb(num):    a, b, c &#x3D; 1, 2, 4    for _ in range(num - 1):        a, b, c &#x3D; b, c, a + b + c    return a</code></pre><p><strong>重点</strong>：有更好的办法的时候，请不要考虑递归。</p><h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><p><strong>回溯法</strong>是<a href="https://zh.wikipedia.org/wiki/%E6%9A%B4%E5%8A%9B%E6%90%9C%E5%B0%8B%E6%B3%95">暴力搜索法</a>中的一种。对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束满足问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。</p><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><p>例子1：<strong>迷宫寻路</strong>。</p><p><img src="/./res/maze.png"></p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;迷宫寻路&quot;&quot;&quot;import randomimport sysWALL &#x3D; -1ROAD &#x3D; 0ROWS &#x3D; 10COLS &#x3D; 10def find_way(maze, i&#x3D;0, j&#x3D;0, step&#x3D;1):    &quot;&quot;&quot;走迷宫&quot;&quot;&quot;    if 0 &lt;&#x3D; i &lt; ROWS and 0 &lt;&#x3D; j &lt; COLS and maze[i][j] &#x3D;&#x3D; 0:        maze[i][j] &#x3D; step        if i &#x3D;&#x3D; ROWS - 1 and j &#x3D;&#x3D; COLS - 1:            print(&#39;&#x3D;&#39; * 20)            display(maze)            sys.exit(0)        find_way(maze, i + 1, j, step + 1)        find_way(maze, i, j + 1, step + 1)        find_way(maze, i - 1, j, step + 1)        find_way(maze, i, j - 1, step + 1)        maze[i][j] &#x3D; ROADdef reset(maze):    &quot;&quot;&quot;重置迷宫&quot;&quot;&quot;    for i in range(ROWS):        for j in range(COLS):            num &#x3D; random.randint(1, 10)            maze[i][j] &#x3D; WALL if num &gt; 7 else ROAD    maze[0][0] &#x3D; maze[ROWS - 1][COLS - 1] &#x3D; ROADdef display(maze):    &quot;&quot;&quot;显示迷宫&quot;&quot;&quot;    for row in maze:        for col in row:            if col &#x3D;&#x3D; -1:                print(&#39;■&#39;, end&#x3D;&#39; &#39;)            elif col &#x3D;&#x3D; 0:                print(&#39;□&#39;, end&#x3D;&#39; &#39;)            else:                print(f&#39;&#123;col&#125;&#39;.ljust(2), end&#x3D;&#39;&#39;)        print()def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    maze &#x3D; [[0] * COLS for _ in range(ROWS)]    reset(maze)    display(maze)    find_way(maze)    print(&#39;没有出路!!!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p><strong>说明：</strong>上面的代码用随机放置围墙的方式来生成迷宫，更好的生成迷宫的方式请参考<a href="https://indienova.com/indie-game-development/generate-tile-based-maze-with-backtracking/">《简单的使用回溯法生成 Tile Based 迷宫》</a>一文。</p><p>例子2：<strong>骑士巡逻</strong> - 国际象棋中的骑士（马），按照骑士的移动规则走遍整个棋盘的每一个方格，而且每个方格只能够经过一次。</p><p><img src="/./res/knight_tour.gif"></p><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;骑士巡逻&quot;&quot;&quot;import sysSIZE &#x3D; 8def display(board):    &quot;&quot;&quot;显示棋盘&quot;&quot;&quot;    for row in board:        for col in row:            print(f&#39;&#123;col&#125;&#39;.rjust(2, &#39;0&#39;), end&#x3D;&#39; &#39;)        print()def patrol(board, i&#x3D;0, j&#x3D;0, step&#x3D;1):    &quot;&quot;&quot;巡逻&quot;&quot;&quot;    if 0 &lt;&#x3D; i &lt; SIZE and 0 &lt;&#x3D; j &lt; SIZE and board[i][j] &#x3D;&#x3D; 0:        board[i][j] &#x3D; step        if step &#x3D;&#x3D; SIZE * SIZE:            display(board)            sys.exit(0)        patrol(board, i + 1, j + 2, step + 1)        patrol(board, i + 2, j + 1, step + 1)        patrol(board, i + 2, j - 1, step + 1)        patrol(board, i + 1, j - 2, step + 1)        patrol(board, i - 1, j - 2, step + 1)        patrol(board, i - 2, j - 1, step + 1)        patrol(board, i - 2, j + 1, step + 1)        patrol(board, i - 1, j + 2, step + 1)        board[i][j] &#x3D; 0def main():    &quot;&quot;&quot;主函数&quot;&quot;&quot;    board &#x3D; [[0] * SIZE for _ in range(SIZE)]    patrol(board)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre><p>例子3：<strong>八皇后</strong> - 如何能够在8×8的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。</p><p><img src="/./res/eight_queen.png"></p><p><strong>说明</strong>：这个问题太经典了，网上有大把的答案，留给大家自己搞定。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语面试</title>
      <link href="/2024/07/01/ying-yu-mian-shi/"/>
      <url>/2024/07/01/ying-yu-mian-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="英语面试"><a href="#英语面试" class="headerlink" title="英语面试"></a>英语面试</h2><p>以下用I表示面试官（Interviewer），用C表示面试者（Candidate）。</p><h3 id="开场寒暄"><a href="#开场寒暄" class="headerlink" title="开场寒暄"></a>开场寒暄</h3><ol><li><p>I: Thanks for waiting. (Please follow me.)</p><p>C: It’s no problem.</p></li><li><p>I: How are you doing this morning?</p><p>C: I’m great. &#x2F; I’m doing fine. Thank you. &#x2F; How about you?</p></li><li><p>I: How did you get here?</p><p>C: I took the subway here. &#x2F; I drove here.</p></li><li><p>I: Glad to meet you.</p><p>C: Glad to meet you. &#x2F; It’s great to finally meet you in person. (之前电话沟通过的)</p></li></ol><h3 id="正式面试"><a href="#正式面试" class="headerlink" title="正式面试"></a>正式面试</h3><h4 id="人力面试"><a href="#人力面试" class="headerlink" title="人力面试"></a>人力面试</h4><ol><li><p>I: Can you tell me a little bit about yourself? (介绍下自己)</p><p>原则：不要谈私生活和奇怪的癖好（王者荣耀打到星耀并不值得在这里说），因为别人更想知道的是你的专业技能（qulifications）和工作经验（experience），所以重点在你之前的公司（company name）、职位（title）、时间（years）和主要职责（major responsibilities）</p><p>C: Thank you for having me. My name is Dachui WANG. I’m 22 years old, and I’m single. I have a Bachelor’s Degree of Computer Science from Tsinghua University. I was a Junior Java Programmer for ABC Technologies during my college life. Then I become an intermediate Java engineer for XYZ Corporation in last two years. Programming is my everyday life and programming is where my passion is. I think I have a good knowledge of Java enterprise application developement using light-weight frameworks like Spring, Guice, Hibernate and other open source middle-ware like Dubbo, Mycat, rocketmq and so on and so forth. I love reading, travelling and playing basketball in my spare time. That’s all! Thank you!</p></li><li><p>I: How would you describe your personality? (你的性格)</p><p>C: I’m hard working, eager to learn, and very serious about my work. I enjoy working with other people and I love challenges.</p></li><li><p>I: What do you know about our company? (你对我们公司有什么了解)</p><p>(需要做功课，了解公司的状况和企业文化，该公司在这个行业中的一个状况，有什么核心业务，主要的竞争对手有哪些)</p><p>C: The one thing that I like the most about our company is your core values. I think they’re very important in this industry because …(自由发挥的部分)… I personally really believe in the cause as well. Of course, I’m very interested in your products such as …(功课部分)… and the techniques behind them.</p></li><li><p>I: Why are you leaving your last job? (为什么离职)</p><p>C: I want to advance my career and I think this job offers more challenges and  opportunities for me do to that.</p></li><li><p>I: What do you see yourself in 3 or 5 years? (3-5年职业规划)</p><p>C: My long term goals involve growing with the company, where I can continue to learn, to take on additional responsibilities and to contribute as much value as I can. I intend to take advantage of all of these.</p></li><li><p>I: What’s your salary expectation? (期望薪资)</p><p>C: My salary expectation is in line with my experience and qualifications. I believe our company will pay me and every other employee fairly. (把球踢给对方先看看对方报价是多少，如果对方非要你报价再说后面的内容) I think 15 thousands RMB or above is fitting for me to leave in Chengdu.</p></li><li><p>I: Do you have any questions for me? (问面试官的问题)</p><p>C: What’s the growth potential for this position?</p></li></ol><h4 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h4><ol><li>I: What’s difference between an interface and an abstract class?</li><li>I: What are pass by reference and pass by value?</li><li>I: What’s the difference between process and threads?</li><li>I: Explain the available thread state in high-level.</li><li>I: What’s deadlocks? How to avoid them?</li><li>I: How HashMap works in Java?</li><li>I: What’s the difference between ArrayList and LinkedList? (类似的问题还有很多，比如比较HashSet和TreeSet、HashMap和Hashtable)</li><li>I: Tell me what you know about garbage collection in Java.</li><li>I: What’re two types of exceptions in Java?</li><li>I: What’s the advantage of PreparedStatement over Statement?</li><li>I: What’s the use of CallableStatement?</li><li>I: What does connection pool mean?</li><li>I: Explain the life cycle of a Servlet.</li><li>I: What’s the difference between redirect and forward?</li><li>I: What’s EL? What’re implicit objects of EL?</li><li>I: Tell me what you know about Spring framework and its benefits.</li><li>I: What’re different types of dependency injection.</li><li>I: Are singleton beans thread safe in Spring framework?</li><li>I: What’re the benefits of Spring framework’s transaction management?</li><li>I: Explain what’s AOP.</li><li>I: What’s a proxy and how to implement proxy pattern?</li><li>I: How Spring MVC works?</li><li>I: What’s the working scenario of Hibernate and MyBatis?</li><li>I: How to implement SOA?</li><li>I: Make a brief introduction of the projects you are involved before?</li></ol><p>上面主要是面试Java程序员的问题，但是整个流程大致如此。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年我们踩过的那些坑</title>
      <link href="/2024/07/01/na-xie-nian-wo-men-cai-guo-de-na-xie-keng/"/>
      <url>/2024/07/01/na-xie-nian-wo-men-cai-guo-de-na-xie-keng/</url>
      
        <content type="html"><![CDATA[<h2 id="那些年我们踩过的那些坑"><a href="#那些年我们踩过的那些坑" class="headerlink" title="那些年我们踩过的那些坑"></a>那些年我们踩过的那些坑</h2><h3 id="坑1-整数比较的坑"><a href="#坑1-整数比较的坑" class="headerlink" title="坑1 - 整数比较的坑"></a>坑1 - 整数比较的坑</h3><p>在 Python 中一切都是对象，整数也是对象，在比较两个整数时有两个运算符<code>==</code>和<code>is</code>，它们的区别是：</p><ul><li><code>is</code>比较的是两个整数对象的id值是否相等，也就是比较两个引用是否代表了内存中同一个地址。</li><li><code>==</code>比较的是两个整数对象的内容是否相等，使用<code>==</code>时其实是调用了对象的<code>__eq__()</code>方法。</li></ul><p>知道了<code>is</code>和<code>==</code>的区别之后，我们可以来看看下面的代码，了解Python中整数比较有哪些坑，<strong>以CPython解释器为例</strong>，大家先看看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def main():x &#x3D; y &#x3D; -1while True:x +&#x3D; 1y +&#x3D; 1if x is y:print(&#39;%d is %d&#39; % (x, y))else:print(&#39;Attention! %d is not %d&#39; % (x, y))breakx &#x3D; y &#x3D; 0while True:x -&#x3D; 1y -&#x3D; 1if x is y:print(&#39;%d is %d&#39; % (x, y))else:print(&#39;Attention! %d is not %d&#39; % (x, y))breakif __name__ &#x3D;&#x3D; &#39;__main__&#39;:main()</code></pre><p>上面代码的部分运行结果如下图所示。这个结果是因为CPython出于性能优化的考虑，把频繁使用的整数对象用一个叫<code>small_ints</code>的对象池缓存起来造成的。<code>small_ints</code>缓存的整数值被设定为<code>[-5, 256]</code>这个区间，也就是说，如果使用CPython解释器，在任何引用这些整数的地方，都不需要重新创建<code>int</code>对象，而是直接引用缓存池中的对象。如果整数不在该范围内，那么即便两个整数的值相同，它们也是不同的对象。</p><p><img src="/./res/int-is-comparation.png"></p><p>当然仅仅如此这个坑就不值一提了，如果你理解了上面的规则，我们就再看看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; 257def main():b &#x3D; 257  # 第6行c &#x3D; 257  # 第7行print(b is c)  # Trueprint(a is b)  # Falseprint(a is c)  # Falseif __name__ &#x3D;&#x3D; &quot;__main__&quot;:main()</code></pre><p>程序的执行结果已经用注释写在代码上了。够坑吧！看上去<code>a</code>、<code>b</code>和<code>c</code>的值都是一样的，但是<code>is</code>运算的结果却不一样。为什么会出现这样的结果，首先我们来说说Python程序中的代码块。所谓代码块是程序的一个最小的基本执行单位，一个模块文件、一个函数体、一个类、交互式命令中的单行代码都叫做一个代码块。上面的代码由两个代码块构成，<code>a = 257</code>是一个代码块，<code>main</code>函数是另外一个代码块。CPython底层为了进一步提升性能还做了一个设定：对于同一个代码块中值不在<code>small_ints</code>缓存范围之内的整数，如果同一个代码块中已经存在一个值与其相同的整数对象，那么就直接引用该对象，否则创建新的<code>int</code>对象。需要大家注意的是，这条规则对数值型适用，但对字符串则需要考虑字符串的长度，这一点可以自行证明。<br>为了验证刚刚的结论，我们可以借用<code>dis</code>模块（听名字就知道是进行反汇编的模块）从字节码的角度来看看这段代码。如果不理解什么是字节码，可以先看看<a href="(http://www.cnblogs.com/restran/p/4903056.html)">《谈谈 Python 程序的运行原理》</a>这篇文章。可以先用<code>import dis</code>导入<code>dis</code>模块并按照如下所示的方式修改代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">import disdis.dis(main)</code></pre><p>代码的执行结果如下图所示。可以看出代码第6行和第7行，也就是<code>main</code>函数中的257是从同一个位置加载的，因此是同一个对象；而代码第9行的<code>a</code>明显是从不同的地方加载的，因此引用的是不同的对象。</p><p><img src="/./res/result-of-dis.png"></p><p>如果还想对这个问题进行进一步深挖，推荐大家阅读<a href="https://foofish.net/python_int_implement.html">《Python整数对象实现原理》</a>这篇文章。</p><h3 id="坑2-嵌套列表的坑"><a href="#坑2-嵌套列表的坑" class="headerlink" title="坑2 - 嵌套列表的坑"></a>坑2 - 嵌套列表的坑</h3><p>Python中有一种内置的数据类型叫列表，它是一种容器，可以用来承载其他的对象（准确的说是其他对象的引用），列表中的对象可以称为列表的元素，很明显我们可以把列表作为列表中的元素，这就是所谓的嵌套列表。嵌套列表可以模拟出现实中的表格、矩阵、2D游戏的地图（如植物大战僵尸的花园）、棋盘（如国际象棋、黑白棋）等。但是在使用嵌套的列表时要小心，否则很可能遭遇非常尴尬的情况，下面是一个小例子。</p><pre class="language-Python" data-language="Python"><code class="language-Python">names &#x3D; [&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;]subjs &#x3D; [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]scores &#x3D; [[0] * 3] * 5for row, name in enumerate(names):    print(&#39;请输入%s的成绩&#39; % name)    for col, subj in enumerate(subjs):        scores[row][col] &#x3D; float(input(subj + &#39;: &#39;))        print(scores)</code></pre><p>我们希望录入5个学生3门课程的成绩，于是定义了一个有5个元素的列表，而列表中的每个元素又是一个由3个元素构成的列表，这样一个列表的列表刚好跟一个表格是一致的，相当于有5行3列，接下来我们通过嵌套的for-in循环输入每个学生3门课程的成绩。程序执行完成后我们发现，每个学生3门课程的成绩是一模一样的，而且就是最后录入的那个学生的成绩。</p><p>要想把这个坑填平，我们首先要区分对象和对象的引用这两个概念，而要区分这两个概念，还得先说说内存中的栈和堆。我们经常会听人说起“堆栈”这个词，但实际上“堆”和“栈”是两个不同的概念。众所周知，一个程序运行时需要占用一些内存空间来存储数据和代码，那么这些内存从逻辑上又可以做进一步的划分。对底层语言（如C语言）有所了解的程序员大都知道，程序中可以使用的内存从逻辑上可以为五个部分，按照地址从高到低依次是：栈（stack）、堆（heap）、数据段（data segment）、只读数据段（static area）和代码段（code segment）。其中，栈用来存储局部、临时变量，以及函数调用时保存现场和恢复现场需要用到的数据，这部分内存在代码块开始执行时自动分配，代码块执行结束时自动释放，通常由编译器自动管理；堆的大小不固定，可以动态的分配和回收，因此如果程序中有大量的数据需要处理，这些数据通常都放在堆上，如果堆空间没有正确的被释放会引发内存泄露的问题，而像Python、Java等编程语言都使用了垃圾回收机制来实现自动化的内存管理（自动回收不再使用的堆空间）。所以下面的代码中，变量<code>a</code>并不是真正的对象，它是对象的引用，相当于记录了对象在堆空间的地址，通过这个地址我们可以访问到对应的对象；同理，变量<code>b</code>是列表容器的引用，它引用了堆空间上的列表容器，而列表容器中并没有保存真正的对象，它保存的也仅仅是对象的引用。</p> <pre class="language-Python" data-language="Python"><code class="language-Python">a &#x3D; object()b &#x3D; [&#39;apple&#39;, &#39;pitaya&#39;, &#39;grape&#39;]</code></pre><p>知道了这一点，我们可以回过头看看刚才的程序，我们对列表进行<code>[[0] * 3] * 5</code>操作时，仅仅是将<code>[0, 0, 0]</code>这个列表的地址进行了复制，并没有创建新的列表对象，所以容器中虽然有5个元素，但是这5个元素引用了同一个列表对象，这一点可以通过<code>id</code>函数检查<code>scores[0]</code>和<code>scores[1]</code>的地址得到证实。所以正确的代码应该按照如下的方式进行修改。</p><pre class="language-Python" data-language="Python"><code class="language-Python">names &#x3D; [&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;]subjs &#x3D; [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]scores &#x3D; [[]] * 5for row, name in enumerate(names):    print(&#39;请输入%s的成绩&#39; % name)    scores[row] &#x3D; [0] * 3    for col, subj in enumerate(subjs):        scores[row][col] &#x3D; float(input(subj + &#39;: &#39;))        print(scores)</code></pre><p>或者</p><pre class="language-Python" data-language="Python"><code class="language-Python">names &#x3D; [&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;]subjs &#x3D; [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]scores &#x3D; [[0] * 3 for _ in range(5)]for row, name in enumerate(names):    print(&#39;请输入%s的成绩&#39; % name)    scores[row] &#x3D; [0] * 3    for col, subj in enumerate(subjs):        scores[row][col] &#x3D; float(input(subj + &#39;: &#39;))        print(scores)</code></pre><p>如果对内存的使用不是很理解，可以看看<a href="http://www.pythontutor.com/">PythonTutor网站</a>上提供的代码可视化执行功能，通过可视化执行，我们可以看到内存是如何分配的，从而避免在使用嵌套列表或者复制对象时可能遇到的坑。</p><p><img src="/./res/python-tutor-visualize.png"></p><p><img src="/./res/python-tutor-visualize2.png"></p><h3 id="坑3-访问修饰符的坑"><a href="#坑3-访问修饰符的坑" class="headerlink" title="坑3 - 访问修饰符的坑"></a>坑3 - 访问修饰符的坑</h3><p>用Python做过面向对象编程的人都知道，Python的类提供了两种访问控制权限，一种是公开，一种是私有（在属性或方法前加上双下划线）。而用惯了Java或C#这类编程语言的人都知道，类中的属性（数据抽象）通常都是私有的，其目的是为了将数据保护起来；而类中的方法（行为抽象）通常都是公开的，因为方法是对象向外界提供的服务。但是Python并没有从语法层面确保私有成员的私密性，因为它只是对类中所谓的私有成员进行了命名的变换，如果知道命名的规则照样可以直接访问私有成员，请看下面的代码。</p><pre class="language-Python" data-language="Python"><code class="language-Python">class Student(object):    def __init__(self, name, age):        self.__name &#x3D; name        self.__age &#x3D; age    def __str__(self):        return self.__name + &#39;: &#39; + str(self.__age)stu &#x3D; Student(&#39;骆昊&#39;, 38)print(stu._Student__name)print(stu._Student__age)</code></pre><p>Python为什么要做出这样的设定呢？用一句广为流传的格言来解释这个问题：“We are all consenting adults here”（我们都是成年人）。这句话表达了很多Python程序员的一个共同观点，那就是开放比封闭要好，我们应该自己对自己的行为负责而不是从语言层面来限制对数据或方法的访问。</p><p>所以在Python中我们实在没有必要将类中的属性或方法用双下划线开头的命名处理成私有的成员，因为这并没有任何实际的意义。如果想对属性或方法进行保护，我们建议用单下划线开头的受保护成员，虽然它也不能真正保护这些属性或方法，但是它相当于给调用者一个暗示，让调用者知道这是不应该直接访问的属性或方法，而且这样做并不影响子类去继承这些东西。</p><p>需要提醒大家注意的是，Python类中的那些魔法方法，如<code>__str__</code>、<code>__repr__</code>等，这些方法并不是私有成员哦，虽然它们以双下划线开头，但是他们也是以双下划线结尾的，这种命名并不是私有成员的命名，这一点对初学者来说真的很坑。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/06/30/main2048-js/"/>
      <url>/2024/06/30/main2048-js/</url>
      
        <content type="html"><![CDATA[<h1 id="main2048-js"><a href="#main2048-js" class="headerlink" title="main2048.js"></a>main2048.js</h1><p><a href="./file/main2048.js">main2048.js</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/06/30/file/main2048/"/>
      <url>/2024/06/30/file/main2048/</url>
      
        <content type="html"><![CDATA[// JavaScript Documentvar board=new Array();var score=0;function init(){for(var i=0;i<4;i++)  for(var j=0;j<4;j++){$("#"+i+j).css("top",getTop(i,j));$("#"+i+j).css("left",getLeft(i,j));}}function newgame(){init();}$(document).ready(function(){newgame();});]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>10年变化</title>
      <link href="/2024/06/30/10-nian-bian-hua/"/>
      <url>/2024/06/30/10-nian-bian-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="10年变化"><a href="#10年变化" class="headerlink" title="10年变化"></a>10年变化</h1><p>2019&#x2F;2&#x2F;3 21:00  星期日 晴</p><p>    <em>淅淅沥沥的雨声伴随了昨晚一整晚的睡眠，夜半梦醒，听到耳边传来窗外的雨声，仿佛春雨般让人心情舒畅，享受了半刻便有沉沉的睡去。</em></p><p>_    清晨，让人讶异的事情：外面竟没有一丝雨后的气息，昨日阴沉的天空明明为这场雨做了最好的铺垫，然而善变的冬季却来了一个最大的转折。让人意想不到的是这雨竟然是水龙头假扮的。它竟悄悄的打开了强加在自己头上的枷锁，给了这家的主人一个并不开心的惊喜。街头那长长的拦在街坊邻里中间的水龙就是这一页“雨”的成果。_</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019元日</title>
      <link href="/2024/06/30/2019-yuan-ri/"/>
      <url>/2024/06/30/2019-yuan-ri/</url>
      
        <content type="html"><![CDATA[<h1 id="2019元日"><a href="#2019元日" class="headerlink" title="2019元日"></a>2019元日</h1><p><img src="https://wstcly.top/picgo/s90122-182703.jpg" alt="s90122-182703.jpg"></p><p>2019&#x2F;2&#x2F;5 21:28  周二 晴</p><hr><p>  新年也给自己一个么么哒＾3＾</p><p>  今天和很久没见的朋友重聚一面，又将是新一次各奔东西。像是一个循环，年复一年，不同只是大家都在变化，有好有坏。</p><p>  花有重开日，人无再少年，每一次相聚都像青春般值得留恋，值得珍惜。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装RabbitMQ</title>
      <link href="/2024/06/30/centos7-an-zhuang-rabbitmq-jian-shu/"/>
      <url>/2024/06/30/centos7-an-zhuang-rabbitmq-jian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7安装RabbitMQ"><a href="#Centos7安装RabbitMQ" class="headerlink" title="Centos7安装RabbitMQ"></a>Centos7安装RabbitMQ</h1><p><a href="https://www.jianshu.com/u/b890fe5e2ec1"><img src="https://wstcly.top/picgo/webp.webp" alt="webp.webp"></a></p><p><a href="https://www.jianshu.com/u/b890fe5e2ec1">Rumple</a></p><p>2019.05.22 13:04:38字数 12阅读 4,023</p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class="language-none"><code class="language-none"># 准备yum updateyum install epel-releaseyum install gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf java-1.8.0-openjdk-devel git wget wxBase.x86_64# 安装erlangyum install -y erlang# 安装rabbitmqwget https:&#x2F;&#x2F;github.com&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;releases&#x2F;download&#x2F;v3.7.15&#x2F;rabbitmq-server-3.7.15-1.el7.noarch.rpm# 导入秘钥rpm --import https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;rabbitmq-release-signing-key.asc# 安装yum install rabbitmq-server-3.7.15-1.el7.noarch.rpm1234567891011121314151617181920</code></pre><h2 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h2><pre class="language-none"><code class="language-none">systemctl start rabbitmq-server# 设置开机启动systemctl enable rabbitmq-server12345</code></pre><h2 id="三、管理"><a href="#三、管理" class="headerlink" title="三、管理"></a>三、管理</h2><pre class="language-none"><code class="language-none">rabbitmq默认的工作端口为256721</code></pre><pre class="language-none"><code class="language-none"># 启用web管理界面rabbitmq-plugins enable rabbitmq_management# guest用户只能用于localhost访问# 添加新用户及授权rabbitmqctl add_user fort fortrabbitmqctl set_user_tags fort administratorrabbitmqctl set_permissions -p &#x2F; fort &#39;.*&#39; &#39;.*&#39; &#39;.*&#39;rabbitmqctl list_permissions# 访问ip:15672即可进入管理界面12345678910111213141516</code></pre><p><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’375’%3e%3cpath d&#x3D;’M728.064 343.943529c-17.648941-2.891294-23.552-20.239059-26.503529-28.912941V104.026353C701.560471 46.200471 654.396235 0 595.425882 0c-53.007059 0-97.28 40.478118-106.134588 89.569882-29.997176 184.862118-138.541176 255.457882-217.630118 280.937412a26.142118 26.142118 0 0 0-18.130823 24.877177v560.067764c0 19.817412 16.022588 35.84 35.84 35.84h535.973647c56.018824-11.565176 94.328471-31.804235 120.892235-86.738823l120.832-416.105412c23.552-75.173647-14.757647-147.395765-100.231529-144.564706h-238.772706z m-571.813647 31.744H76.619294C35.358118 375.687529 0 410.383059 0 450.861176v462.426353c0 43.369412 32.406588 78.004706 76.619294 78.004706h79.631059c27.708235 0 50.115765-22.407529 50.115765-50.115764V425.863529a50.115765 50.115765 0 0 0-50.115765-50.115764z’ data-evernote-id&#x3D;’153’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em><br>0人点赞_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ viewBox&#x3D;’64 64 896 896’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-icon&#x3D;’right’ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ data-evernote-id&#x3D;’379’%3e%3cpath d&#x3D;’M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z’ data-evernote-id&#x3D;’380’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)_</p><p><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’384’%3e%3cpath d&#x3D;’M771.413333 668.728889c-18.773333 3.015111-25.031111 20.878222-28.16 29.866667v217.884444c0 59.733333-49.948444 107.52-112.412444 107.52a115.427556 115.427556 0 0 1-112.412445-92.558222c-31.857778-190.919111-146.830222-263.850667-230.627555-290.133334a27.420444 27.420444 0 0 1-19.228445-26.168888V37.944889C268.572444 17.066667 285.582222 0 306.631111 0h567.864889c59.335111 11.946667 99.953778 32.824889 128 89.543111l128.113778 429.909333c24.974222 77.653333-15.644444 152.291556-106.211556 149.276445H771.413333z m-605.866666-32.824889H81.180444C37.546667 635.904 0 600.064 0 558.250667V80.611556C0 35.84 34.360889 0 81.180444 0H165.546667c29.297778 0 53.077333 23.779556 53.077333 53.077333v529.749334a53.077333 53.077333 0 0 1-53.077333 53.077333z’ data-evernote-id&#x3D;’132’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em></p><p><a href="https://www.jianshu.com/nb/37219629">_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’http://www.w3.org/2000/svg' width='1em' height='1em' fill='currentColor' aria-hidden='true' focusable='false' class='js-evernote-checked' data-evernote-id='389'%3e%3cpath d='M178.390055 120.591045C111.268624 120.591045 56.888889 174.401955 56.888889 240.556383V903.97778C56.888889 970.302855 111.097977 1024 178.390055 1024h545.731364c67.121431 0 121.558049-53.81091 121.558049-120.02222V240.613265c0-66.268192-54.209088-120.02222-121.558049-120.02222H178.390055z m455.117432 301.136319H269.06087a30.147761 30.147761 0 0 1 0-60.238641h364.503499a30.147761 30.147761 0 0 1 0 60.238641z m303.18409 301.136318a30.318409 30.318409 0 0 1-30.375291-30.318409V180.317742c0-66.268192-53.81091-120.02222-121.330519-120.022219H329.697688a30.147761 30.147761 0 0 1 0-60.23864l454.946784 0.056882C885.326618 0.113765 967.009987 80.887013 967.009987 180.602155v511.943118a30.318409 30.318409 0 0 1-30.31841 30.318409z m-303.18409-120.47728H269.06087a30.147761 30.147761 0 1 1 0-60.238641h364.503499a30.147761 30.147761 0 0 1 0 60.238641z' data-evernote-id='143' class='js-evernote-checked'%3e%3c/path%3e%3c/svg%3e)_系统配置</a><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’395’%3e%3cpath d&#x3D;’M232.727273 579.87878833C271.28679 579.87878833 302.545455 548.62012233 302.545455 510.06060633 302.545455 471.50108933 271.28679 440.24242433 232.727273 440.24242433 194.167756 440.24242433 162.909091 471.50108933 162.909091 510.06060633 162.909091 548.62012233 194.167756 579.87878833 232.727273 579.87878833ZM512 579.87878833C550.559516 579.87878833 581.818182 548.62012233 581.818182 510.06060633 581.818182 471.50108933 550.559516 440.24242433 512 440.24242433 473.440484 440.24242433 442.181818 471.50108933 442.181818 510.06060633 442.181818 548.62012233 473.440484 579.87878833 512 579.87878833ZM791.272727 579.87878833C829.832243 579.87878833 861.090909 548.62012233 861.090909 510.06060633 861.090909 471.50108933 829.832243 440.24242433 791.272727 440.24242433 752.713211 440.24242433 721.454545 471.50108933 721.454545 510.06060633 721.454545 548.62012233 752.713211 579.87878833 791.272727 579.87878833Z’ data-evernote-id&#x3D;’99’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em></p><p>“小礼物走一走，来简书关注我”<br>还没有人赞赏，支持一下</p><p><a href="https://www.jianshu.com/u/b890fe5e2ec1"><img src="https://wstcly.top/picgo/webp-1.webp" alt="webp-1.webp"></a></p><p><a href="https://www.jianshu.com/u/b890fe5e2ec1" title="Rumple">Rumple</a>why so serious？why so serious？</p><p>总资产1 (约0.08元)共写了1307字获得5个赞共0个粉丝</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 政企 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求方法</title>
      <link href="/2024/06/30/http-qing-qiu-fang-shi-zhong-8-chong-qing-qiu-fang-fa-jian-dan-jie-shao/"/>
      <url>/2024/06/30/http-qing-qiu-fang-shi-zhong-8-chong-qing-qiu-fang-fa-jian-dan-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP请求方式中8种请求方法（简单介绍）"><a href="#HTTP请求方式中8种请求方法（简单介绍）" class="headerlink" title="HTTP请求方式中8种请求方法（简单介绍）"></a>HTTP请求方式中8种请求方法（简单介绍）</h1><p><img src="https://wstcly.top/picgo/1418466-20180810112625596-2103906128.png" alt="1418466-20180810112625596-2103906128.png"></p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/2024/06/30/javascript/"/>
      <url>/2024/06/30/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p><strong>插入<script>javascript code</script></strong></p><p>引入外部文件：<script src="script.js"></script></p><p>javaScript文件可放在文件的任何位置，但一般放在head标签内<img src="https://wstcly.top/picgo/52a6ad240001086506440600.png" alt="52a6ad240001086506440600.png"></p><p>d或body中。</p><p><strong>函数</strong></p><p><strong>function 函数名(参数1，参数2)</strong></p><p>{     函数代码;</p><p><strong>注：参数无需定义，可直接使用   function add(x,y){};</strong></p><p><strong>函数调用：</strong></p><p><strong>第一种情况:在<script>标签内调用。</strong></p><p><strong>add2();</strong>//调用函数，直接写函数名</p><p>**第二种情况:**在HTML文件中调用，如通过点击按钮后调用定义好的函数。</p><p><strong><input type="button" value="显示文字" onclick="函数名（）" /></strong></p><p><strong>输出：document.write(内容或变量+内容+"标签"。。。)；</strong></p><p>警告（alert 消息对话框）</p><p>语法： **  alert(字符串或变量);�**�</p><p><strong>注意:</strong></p><ol><li><p>在点击对话框"确定"按钮前，不能进行任何其它操作。</p></li><li><p>消息对话框通常可以用于调试程序。</p></li><li><p>alert输出内容，可以是字符串或变量，与document.write 相似。</p></li></ol><p>确认（confirm 消息对话框）</p><p> 语法：confirm(str);</p><p><strong>str：</strong>在消息对话框中要显示的文本<strong>返回值:�</strong>�Boolean值</p><p>提问：（prompt 消息对话框）</p><p>语法：prompt(str1,str2);</p><p><strong>参数说明：</strong></p><p>str1: 要显示在消息对话框中的文本，不可修改</p><p>str2：文本框中的内容，可以修改</p><p><strong>返回值:</strong></p><p>1. 点击确定按钮，文本框中的内容将作为函数返回值2. 点击取消按钮，将返回<strong>null</strong></p><p>打开新窗口（window.open）</p><p><strong>语法：</strong></p><p>window.open([URL], [窗口名称], [参数字符串])</p><p><strong>参数说明:</strong></p><p><strong>URL：</strong>可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。</p><p><strong>窗口名称：</strong>可选参数，被打开窗口的名称。</p><p>    1.该名称由字母、数字和下划线字符组成。</p><p>    2."_top"、"_blank"、"_selft"具有特殊意义的名称。</p><p>       _blank：在新窗口显示目标网页</p><p>       _self：在当前窗口显示目标网页</p><p>       _top：框架网页中在上部窗口中显示目标网页</p><p>    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。</p><p>    4.name 不能包含有空格。<strong>参数字符串：</strong>可选参数，设置窗口参数，各参数用逗号隔开。</p><p><img src="https://wstcly.top/picgo/52e3677900013d6a05020261.jpg" alt="52e3677900013d6a05020261.jpg"></p><p>例如：<script type="text/javascript"> window.open('<a href="http://www.imooc.com','_blank','width=300,height=200,menubar=no,toolbar=no/">http://www.imooc.com&#39;,&#39;_blank&#39;,&#39;width=300,height=200,menubar=no,toolbar=no</a>, status=no,scrollbars=yes')</script></p><p>注意参数字符串</p><p>关闭窗口（window.close）</p><p><strong>用法：</strong></p><p>window.close();   &#x2F;&#x2F;关闭本窗口</p><p>或</p><p>&lt;窗口对象&gt;.close();   &#x2F;&#x2F;关闭指定的窗口&#96;&#96;&#96;<br> var mywin&#x3D;window.open(‘<a href="http://www.imooc.com/">http://www.imooc.com</a>‘); &#x2F;&#x2F;将新打的窗口对象，存储在变量mywin中<br>   mywin.close();</p><pre class="language-none"><code class="language-none">通过ID获取元素**语法:**** document.getElementById(“id”)�**�     **结果:null****或[****object HTMLParagraphElement]**innerHTML 属性innerHTML 属性用于获取或替换 HTML 元素的内容。进行赋值或输出。**语法:****Object.innerHTML&#x3D;&quot;新内容&quot;;****注意:**1.Object是获取的元素对象，如通过document.getElementById(&quot;ID&quot;)获取的元素。2.注意书写，innerHTML区分大小写。**我们通过id&#x3D;&quot;con&quot;获取&lt;p&gt; 元素，并将元素的内容输出和改变元素内容**改变 HTML 样式**Object.style.property&#x3D;new style;**![52e4d4240001dd6c04850229.jpg](image&#x2F;52e4d4240001dd6c04850229.jpg)显示和隐藏（display属性）网页中经常会看到显示和隐藏的效果，可通过display属性来设置。**语法：**</code></pre><p>Object.style.display &#x3D; value</p><pre class="language-none"><code class="language-none">**注意:**Object是获取的元素对象，如通过document.getElementById(&quot;id&quot;)获取的元素。**value取****值:****[![79da77cd3e18a810267c1d61a80a4ebb.jpg](image&#x2F;79da77cd3e18a810267c1d61a80a4ebb.jpg)](http:&#x2F;&#x2F;img.mukewang.com&#x2F;52e4dba5000179da04110095.jpg)**![52e4dcf50001bead09310689.jpg](image&#x2F;52e4dcf50001bead09310689.jpg)控制类名（className 属性）object.className&#x3D;&quot;classname&quot;;object.calssName返回类名    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;       function add()&#123;          var p1 &#x3D; document.getElementById(&quot;p1&quot;);          p1.className&#x3D;&quot;one&quot;;       &#125;       function modify()&#123;          var p2 &#x3D; document.getElementById(&quot;p2&quot;);          p2.className&#x3D;&quot;two&quot;;       &#125;    &lt;&#x2F;script&gt;变量 var 变量名操作符：。。。数组： var myarr&#x3D;new Array(); &#x2F;&#x2F;定义数组 myarr[0]&#x3D;80; myarr[1]&#x3D;60; myarr[2]&#x3D;99; 我们创建数组的同时，还可以为数组指定长度，长度可任意指定。</code></pre><p>var myarray&#x3D; new Array(8); &#x2F;&#x2F;创建数组，存储8个数据。 </p><pre class="language-none"><code class="language-none">**注意：**1.创建的新数组是空数组，没有值，如输出，则显示undefined。2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外。 **初始化方法：**第一种方法：</code></pre><p>var myarray &#x3D; new Array(66,80,90,77,59);&#x2F;&#x2F;创建数组同时赋值</p><pre class="language-none"><code class="language-none">第二种方法：</code></pre><p> var myarray &#x3D; [66,80,90,77,59];&#x2F;&#x2F;直接输入一个数组（称 “字面量数组”）</p><pre class="language-none"><code class="language-none">**注意：**数组存储的数据可以是任何类型（数字、字符、布尔值等）数组的操作：**数组名.length;&#x2F;&#x2F;获取数组长度**同时，JavaScript数组的length属性是可变的，这一点需要特别注意。arr.length&#x3D;10; &#x2F;&#x2F;增大数组的长度document.write(arr.length); &#x2F;&#x2F;数组长度已经变为10**二维数组：**var myarr&#x3D;new Array();  &#x2F;&#x2F;先声明一维 for(var i&#x3D;0;i&lt;2;i++)&#123;   &#x2F;&#x2F;一维长度为2   myarr[i]&#x3D;new Array();  &#x2F;&#x2F;再声明二维    for(var j&#x3D;0;j&lt;3;j++)&#123;   &#x2F;&#x2F;二维长度为3   myarr[i][j]&#x3D;i+j;   &#x2F;&#x2F; 赋值，每个数组元素的值为i+j   &#125; &#125;2. **二维数组的定义方法二**var Myarr &#x3D; [[0 , 1 , 2 ],[1 , 2 , 3, ]]**事件：**![53e198540001b66404860353.png](image&#x2F;53e198540001b66404860353.png)一、 鼠标单击事件：onclick 一般和按钮配合使用&lt;input type&#x3D;&quot;button&quot;,value&#x3D;&quot;显示内容&quot;,onclick&#x3D;&quot;函数名&quot; &#x2F;&gt;二、鼠标经过事件：onmousehover三、鼠标离开事件：onmouseout四、光标聚焦事件 ：onfocus 五、失焦事件：onblur六、内容选中事件：onselect七、内容改变事件：onchange八、加载事件：onload  写在body标签事件内九、卸载事件：onunload**对象：****访问对象属性：objName.properName****访问对象方法：objName.methName****日期 Date对象：**定义：var Udate&#x3D;new Date(); 如果要自定义初始值，可以用以下方法：</code></pre><p>var d &#x3D; new Date(2012, 10, 1);  &#x2F;&#x2F;2012年10月1日<br>var d &#x3D; new Date(‘Oct 1, 2012’); &#x2F;&#x2F;2012年10月1日</p><pre class="language-none"><code class="language-none">我们最好使用下面介绍的“方法”来严格定义时间。![555c650d0001ae7b04180297.png](image&#x2F;555c650d0001ae7b04180297.png)var mydate&#x3D;new Date();mydate.get&#x2F;setFullYear(); var weekday&#x3D;[&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;];  document.write(&quot;今天是：&quot; + weekday[mydate.getDay()]);mydate.setTime(mydate.getTime()+60*60*1000);&#x2F;&#x2F;推迟1小时**String 字符串对象：****定义：var mystr&#x3D;&quot;I love S.Z !&quot;****属性：length 、**方法：**parseInt(字符);    toUpperCase();  toLowerCase(); charAt(int)**&#x2F;&#x2F;int若不再合理范围内，返回空字符**indexOf(&#39;a&#39;,startpos);**&#x2F;&#x2F;查找 指定字符的首次出现的位置，失败返回-1eg：  var mystr&#x3D;&quot;Hello World!&quot;  document.write(mystr.indexOf(&quot;o&quot;,mystr.indexOf(&quot;o&quot;)+1));&#x2F;&#x2F;查找第二个字母出现的位置**split(&quot;指定的分割符&quot;，分割次数);&#x2F;**&#x2F;分割次数为可选参数 &#x2F;&#x2F;取“”,则每个字符均分割**substring(starPos,stopPos);**starPos必选（不选则为全部选取），stopPos可选  提取下标之间的字符串**注意：**1. 返回的内容是从 start开始(包含start位置的字符)到 stop-1 处的所有字符，其长度为 stop 减start。2. 如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。3. 如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。**substr(starPos,length);**(必需，可选)可选若忽略，则为全部字符。**注意：**如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。如果startPos为负数且绝对值大于字符串长度，startPos为0。**Math对象****提供对数据的数学运算****注意：**Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。对象属性**![532fe7cf0001e7b505170269.png](image&#x2F;532fe7cf0001e7b505170269.png)**对象方法![532fe841000174db05160622.png](image&#x2F;532fe841000174db05160622.png)向上取整：ceil(float);返回大于等于该值的整数向下取整：floor（float）；四舍五入：round（float）； . 如果 x 与两侧整数同等接近，则结果接近 +∞方向的数字值 。(如 -5.5 将舍入为 -5; -5.52 将舍入为 -6)随机数生成：random()&#x2F;&#x2F;生成0~1的随机数**数组对象**方法：![533295ab0001dead05190599.png](image&#x2F;533295ab0001dead05190599.png)**obj.concat(字符串，数组)；**不改变原数组**obj.join(“.”);**将数组元素串成一个字符串，返回，不改变原数组元素(用点连接)**obj.reverse();**颠倒数组元素的顺序，改变了原数组**obj.slice(start,end）;**1.返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。2. 该方法并不会修改数组，而是返回一个子数组。3. String.slice() 与 Array.slice() 相似。**obj.sort(方法函数);**</code></pre><p>myArray.sort(sortMethod);</p><pre class="language-none"><code class="language-none">**注意:�**�该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：        若返回值&lt;&#x3D;-1，则表示 A 在排序后的序列中出现在 B 之前。  若返回值&gt;-1 &amp;&amp; &lt;1，则表示 A 和 B 具有相同的排序顺序。  若返回值&gt;&#x3D;1，则表示 A 在排序后的序列中出现在 B 之后。function name()&#123;  return  a-b;&#x2F;&#x2F;若降序，return b-a;&#125;Window对象  window对象是BOM的核心，window对象指当前的浏览器窗口。Window 对象方法![535483720001a54506670563.jpg](image&#x2F;535483720001a54506670563.jpg)**JS计时器**在JavaScript中，我们可以在设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。**计时器类型：**一次性计时器：仅在指定的延迟时间之后触发一次。间隔性触发计时器：每隔一定的时间间隔就触发一次。**![56976e1700014fc504090143.jpg](image&#x2F;56976e1700014fc504090143.jpg)**setInterval(函数名，毫秒)；setTimeout(函数或代码，毫秒)；通过setTimeout(函数中潜嵌套setTimeout（），毫秒)&#x2F;&#x2F;达到无穷循环的效果**History对象**history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。**注意:从**窗口**被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。****语法：**</code></pre><p>window.history.[属性|方法]</p><pre class="language-none"><code class="language-none">**注意：**window可以省略。**属性：****length:打开URL的数量****方法:****back（）加载history列表的前一个URL&#x2F;&#x2F;相当于go(-1);****forward() 加载history 列表的下一个URL&#x2F;&#x2F;相当于go(1);****go(int(如1,0,-1)) 加载history列表的某个具体的页面****Location对象**location用于获取或设置窗体的URL，并且可以用于解析URL。**语法:**location.[属性|方法]**location对象属性图示****![53605c5a0001b26909900216.png](image&#x2F;53605c5a0001b26909900216.png)****location对象属性****![5354b1d00001c4ec06220271.jpg](image&#x2F;5354b1d00001c4ec06220271.jpg)****location对象方法****![5354b1eb00016a2405170126.jpg](image&#x2F;5354b1eb00016a2405170126.jpg)****Navigator对象**Navigator 对象包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。**对象属性****![5354cff70001428b06880190.jpg](image&#x2F;5354cff70001428b06880190.jpg)****document.write(navigator.appName);****navigator. userAgent   **返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)******screen对象****window.screen.属性****对象属性：****![5354d2810001a47706210213.jpg](image&#x2F;5354d2810001a47706210213.jpg)****认识DOM****文档对象模型**文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。**HTML****文档可以说由节点构成的集合，DOM节点有:****1.�**�**元素节点：**上图中&lt;html&gt;、&lt;body&gt;、&lt;p&gt;等都是元素节点，即标签。**2.�**�**文本节点:**向用户展示的内容，如&lt;li&gt;...&lt;&#x2F;li&gt;中的JavaScript、DOM、CSS等文本。**3.�**�**属性节点:**元素属性，如&lt;a&gt;标签的链接属性href&#x3D;&quot;http:&#x2F;&#x2F;www.imooc.com&quot;。**节点属性:![5375c953000117ee05240129.jpg](image&#x2F;5375c953000117ee05240129.jpg)****遍历节点树：![53f17a6400017d2905230219.png](image&#x2F;53f17a6400017d2905230219.png)****Dom操作：![538d29da000152db05360278.png](image&#x2F;538d29da000152db05360278.png)****document.getElementsByName(&quot;&quot;);****有length属性,可同数组一样访问****document.getElementByTaName(&quot;&quot;);**返回带有指定标签名的节点对象的集合。返回元素的顺序是它们在文档中的顺序。1. Tagname是标签的名称，如p、a、img等标签名。**可同数组一样访问****三种的区别：****Id返回一个，Name，TaName返回一组****getAttribute()方法**获取属性值elementNode.getAttribute(&quot;name&quot;);name为属性名例如：getElementById(&quot;link&quot;).getAttribute(&quot;id&quot;);**setAttritebute(&quot;name&quot;,value);**设置元素结点的新属性并赋值属性：childNodes[]（子结点）**访问子结点的第一和最后一项**：node。firstchild    node.lastchild**访问父节点**：elementNode。parentNode；注意父节点只有一个**访问兄弟节点：**nodeObj.nextSibling  没有则返回null，。previousSibling 返回先前的一个节点（处于同一树级中）。可能返回节点间的空白文本结点，可通过循环判断nodeType是否为1function get_nextSibling(n)&#123;var x&#x3D;n.nextSibling;while(x.nodeType!&#x3D;1)x&#x3D;x.nextSibling;return x;&#125;**在已有结点后添加新的结点**：appendChild(newone);![5398fd020001ad4905890193.png](image&#x2F;5398fd020001ad4905890193.png)**在已有节点前插入新节点:**nodeobj.insertBefore(newnode,node.firstChild);**删除节点：nodeobj.**removeChild();**元素替换：**oldNode.replaceChild ()    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;      function replaceMessage()&#123;        var newnode&#x3D;document.createElement(&quot;i&quot;);        var newnodeText&#x3D;document.createTextNode(&quot;javaScript是一个很常用的技术&quot;);        newnode.appendChild(newnodeText);        var oldNode&#x3D;document.getElementById(&quot;oldnode&quot;);        oldNode.parentNode.replaceChild(newnode,oldNode);       &#125;  创建元素节点：document.createElement(字符串。指明创建元素的类型)**注意：**要与appendChild() 或 insertBefore()方法联合使用，将元素显示在页面中。**创建文本节点：** var x&#x3D;document.createElement(&quot;div&quot;);var node&#x3D;document.createTextNode(&quot;I love imooc&quot;）;x.appendChild(x);docuement.body.appendChild(x);**浏览器窗口可视区域大小：**一、获得浏览器窗口的尺寸的方法：window.innerHeight__浏览器窗口的内部高度window.innerWidth__浏览器窗口的内部高度二、对于IE8、7、6、5：document.documentElement.clientHeight表示HTML文档所在窗口的当前高度。document.documentElement.clientWidth表示HTML所在窗口的当前宽度document.body&#x2F;&#x2F;相当于body标签document.body.clientHeightdocument.body.clientWidth三、不同浏览器的兼容操作：var h&#x3D;document.documentElement.clientHeight||document.body.clientHeight;var w&#x3D;docuemnt.documentElement.clientHeight||document.body.clientWidth;document.write(w+&quot;*&quot;+h);网页尺寸scrollHeight  scrollWidth获取网页内容高度和宽度一、针对IE、Opera：scrollHeight是网页内容实际高度，可以小于clienHeight.二、针对NS、FF:scrollHeight是网页的内容高度，不过最小值是clientHeight。也就是说网页内容实际高度小于clientHeight时，scrollHeight返回clientHeight.三、浏览器兼容操作：var w&#x3D;document.documentElement.scrollWidth||document.body.scrollWidth;var h&#x3D;document.documentElement.scrollHeight||document.body.scrollHeight;网页尺寸（包括滚动条等边线，会随窗口的显示大小改变）offsetHeight一、值offsetHeight&#x3D;clientHeight+滚动条+边框二、浏览器兼容性var w&#x3D;document.documentElement.offsetWidth||document.body.offsetWidth;var h&#x3D;document.documentElement.offsetWidth||document.body.offsetWidth;网页卷曲的举例与偏移量![5347b2b10001e1a307520686.png](image&#x2F;5347b2b10001e1a307520686.png)**scrollLeft:**设置或获取位于给定对象左边界与窗口中目前可见内容的最左端之间的距离 ，即左边灰色的内容。**scrollTop:**设置或获取位于对象最顶端与窗口中可见内容的最顶端之间的距离 ，即上边灰色的内容。**offsetLeft:**获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 。**offsetTop:**获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算顶端位置 。**注意:****1. 区分大小写****2. offsetParent：布局中设置postion属性(Relative、Absolute、fixed)的父容器，从最近的父节点开始，一层层向上找，直到HTML的body。**</code></pre>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装配置</title>
      <link href="/2024/06/30/mysql/"/>
      <url>/2024/06/30/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>下载地址： <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>默认配置文件：my.ini 手动创建后放在根目录下</p><pre class="language-none"><code class="language-none">[mysql]# 设置mysql客户端默认字符集default-character-set&#x3D;utf8[mysqld]# 设置3306端口port &#x3D; 3306# 设置mysql的安装目录basedir&#x3D;D:&#x2F;tools&#x2F;web&#x2F;mysql-8.0.11-winx64# 设置mysql数据库的数据的存放目录datadir&#x3D;D:&#x2F;tools&#x2F;web&#x2F;mysql-8.0.11-winx64&#x2F;data# 允许最大连接数max_connections&#x3D;20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server&#x3D;utf8# 创建新表时将使用的默认存储引擎default-storage-engine&#x3D;INNODB#修改密码加密方式default_authentication_plugin&#x3D;mysql_native_password#无密码登陆mysqld --console --skip-grant-tables --shared-memory</code></pre><p>添加环境变量：</p><p>cd bin: 初始化data文件夹： mysqld –initialize-insecure –user&#x3D;mysql;</p><p>安装：mysqld install</p><p>启动服务：start mysql</p><p>关闭服务：net stop mysql</p><p>修改密码以及加密规则：</p><p>打开cmd：mysql -uroot -p</p><p>开机自启动： </p><p>cp &#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld &amp;&amp; chkconfig mysqld on</p><p>启动服务： systemctl start mysqld</p><p>允许远程登陆：  use mysql; update user set host&#x3D;’%’ where user &#x3D;’root’;</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’WITH GRANT OPTION;</p><p>flush privileges;</p><p>修改root密码： alter user ‘root‘@’%’ identified by  ‘123’;</p><p>flush privileges;</p><p>修改验证方式： update user set plugin&#x3D;’mysql_native_password’ where user&#x3D;’root’;</p><p>可视化软件SQLyog：<a href="https://pan.baidu.com/s/1TWeii3pIVUd4r-_PdggR3A">https://pan.baidu.com/s/1TWeii3pIVUd4r-_PdggR3A</a></p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的六种工作模式</title>
      <link href="/2024/06/30/rabbitmq-de-liu-chong-gong-zuo-mo-shi-darjeely-bo-ke-yuan/"/>
      <url>/2024/06/30/rabbitmq-de-liu-chong-gong-zuo-mo-shi-darjeely-bo-ke-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ的六种工作模式"><a href="#RabbitMQ的六种工作模式" class="headerlink" title="RabbitMQ的六种工作模式"></a><a href="https://www.cnblogs.com/Jeely/p/10784013.html">RabbitMQ的六种工作模式</a></h1><h3 id="一-基于erlang语言：-是一种支持高并发的语言"><a href="#一-基于erlang语言：-是一种支持高并发的语言" class="headerlink" title="一.基于erlang语言： 是一种支持高并发的语言"></a><strong>一.基于erlang语言： 是一种支持高并发的语言</strong></h3><h5 id="RabbitMQ的六种工作模式："><a href="#RabbitMQ的六种工作模式：" class="headerlink" title="RabbitMQ的六种工作模式："></a><strong>RabbitMQ的六种工作模式：</strong></h5><h5 id="1-1-simple简单模式"><a href="#1-1-simple简单模式" class="headerlink" title="1.1 simple简单模式"></a><strong>1.1 simple简单模式</strong></h5><p><img src="/image/20181221114009759.png" alt="20181221114009759.png"></p><ol><li>消息产生着§将消息放入队列</li><li>消息的消费者(consumer) 监听(while) 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除(隐患 消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失)应用场景:聊天(中间有一个过度的服务器;p端,c端)</li></ol><h5 id="1-2-work工作模式-资源的竞争"><a href="#1-2-work工作模式-资源的竞争" class="headerlink" title="1.2 work工作模式(资源的竞争)"></a><strong>1.2 work工作模式(资源的竞争)</strong></h5><p><img src="/image/20181221114036231.png" alt="20181221114036231.png"></p><ol><li>消息产生者将消息放入队列消费者可以有多个,消费者1,消费者2,同时监听同一个队列,消息被消费?C1 C2共同争抢当前的消息队列内容,谁先拿到谁负责消费消息(隐患,高并发情况下,默认会产生某一个消息被多个消费者共同使用,可以设置一个开关(syncronize,与同步锁的性能不一样) 保证一条消息只能被一个消费者使用)</li><li>应用场景:红包;大项目中的资源调度(任务分配系统不需知道哪一个任务执行系统在空闲,直接将任务扔到消息队列中,空闲的系统自动争抢)</li></ol><h5 id="1-3-publish-subscribe发布订阅-共享资源"><a href="#1-3-publish-subscribe发布订阅-共享资源" class="headerlink" title="1.3 publish&#x2F;subscribe发布订阅(共享资源)"></a><strong>1.3 publish&#x2F;subscribe发布订阅(共享资源)</strong></h5><p><img src="/image/20181221114050657.png" alt="20181221114050657.png"></p><ol><li>X代表交换机rabbitMQ内部组件,erlang 消息产生者是代码完成,代码的执行效率不高,消息产生者将消息放入交换机,交换机发布订阅把消息发送到所有消息队列中,对应消息队列的消费者拿到消息进行消费</li><li>相关场景:邮件群发,群聊天,广播(广告)</li></ol><h5 id="1-4-routing路由模式"><a href="#1-4-routing路由模式" class="headerlink" title="1.4 routing路由模式"></a><strong>1.4 routing路由模式</strong></h5><p><img src="/image/20181221114420299.png" alt="20181221114420299.png"></p><ol><li>消息生产者将消息发送给交换机按照路由判断,路由是字符串(info) 当前产生的消息携带路由字符(对象的方法),交换机根据路由的key,只能匹配上路由key对应的消息队列,对应的消费者才能消费消息;</li><li>根据业务功能定义路由字符串</li><li>从系统的代码逻辑中获取对应的功能字符串,将消息任务扔到对应的队列中业务场景:error 通知;EXCEPTION;错误通知的功能;传统意义的错误通知;客户通知;利用key路由,可以将程序中的错误封装成消息传入到消息队列中,开发者可以自定义消费者,实时接收错误;</li></ol><h5 id="1-5-topic-主题模式-路由模式的一种"><a href="#1-5-topic-主题模式-路由模式的一种" class="headerlink" title="1.5 topic 主题模式(路由模式的一种)"></a><strong>1.5 topic 主题模式(路由模式的一种)</strong></h5><p><img src="/image/20181221114208408.png" alt="20181221114208408.png"></p><ol><li>星号井号代表通配符</li><li>星号代表多个单词,井号代表一个单词</li><li>路由功能添加模糊匹配</li><li>消息产生者产生消息,把消息交给交换机</li><li>交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费</li></ol><h5 id="1-6RPC-先不做解释"><a href="#1-6RPC-先不做解释" class="headerlink" title="1.6RPC 先不做解释"></a><strong>1.6RPC 先不做解释</strong></h5><p>参考文档：1.<a href="https://blog.csdn.net/chou_out_man/article/details/79244019">https://blog.csdn.net/chou_out_man&#x2F;article&#x2F;details&#x2F;79244019</a></p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot跨域访问配置</title>
      <link href="/2024/06/30/springboot-kua-yu-fang-wen-pei-zhi-jian-shu/"/>
      <url>/2024/06/30/springboot-kua-yu-fang-wen-pei-zhi-jian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot跨域访问配置"><a href="#SpringBoot跨域访问配置" class="headerlink" title="SpringBoot跨域访问配置"></a>SpringBoot跨域访问配置</h1><p><a href="https://www.jianshu.com/u/129d137fa8d1">%!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)</a></p><p><a href="https://www.jianshu.com/u/129d137fa8d1">时光飞旭</a></p><p>_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’234’%3e%3cpath d&#x3D;’M751.144277 307.2l-123.016533-238.933333h159.778133a81.92 81.92 0 0 1 59.1872 25.258666l160.256 167.492267A27.306667 27.306667 0 0 1 987.620011 307.2h-236.475734z m270.506667 111.547733L640.927744 946.039467a27.306667 27.306667 0 0 1-48.128-24.234667L766.504277 375.466667h-56.388266l-170.5984 590.165333a27.306667 27.306667 0 0 1-52.462934 0.034133L315.500544 375.466667H259.112277l174.523734 545.5872a27.306667 27.306667 0 0 1-48.128 24.302933L5.160277 418.747733A27.306667 27.306667 0 0 1 27.346944 375.466667H999.464277a27.306667 27.306667 0 0 1 22.152534 43.281066zM18.301611 261.0176L178.557611 93.525333A81.92 81.92 0 0 1 237.744811 68.266667h159.744L274.506411 307.2H38.030677a27.306667 27.306667 0 0 1-19.729066-46.1824zM453.877077 68.266667h117.896534l122.9824 238.933333H330.894677l122.9824-238.933333z’ data-evernote-id&#x3D;’128’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)_0.2132018.12.19 23:15:29字数 831阅读 4,207</p><h3 id="什么是跨域访问（CORS）"><a href="#什么是跨域访问（CORS）" class="headerlink" title="什么是跨域访问（CORS）"></a>什么是跨域访问（CORS）</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p><h3 id="跨域原理"><a href="#跨域原理" class="headerlink" title="跨域原理"></a>跨域原理</h3><ul><li>跨域只存在于浏览器端，不存在于安卓&#x2F;ios&#x2F;Node.js&#x2F;python&#x2F; java等其它环境；</li><li>跨域请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了；</li><li>之所以会跨域，是因为受到了同源策略的限制，同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。</li></ul><h3 id="跨域访问介绍"><a href="#跨域访问介绍" class="headerlink" title="跨域访问介绍"></a>跨域访问介绍</h3><p>举个例子：假设虚假网站中存在一个form表单，用户填写之后可以根据真实的路由向真实网站请求数据，真实网站接收到用户请求之后返回所需数据，这时候如果虚假网站可以直接接收的话，可以把请求结果保存下来，从而窃取用户的信息。</p><p><img src="https://wstcly.top/picgo/7632302-39030af48631cb40.png" alt="7632302-39030af48631cb40.png"></p><p>跨域访问限制.png</p><h4 id="官方形象化解释："><a href="#官方形象化解释：" class="headerlink" title="官方形象化解释："></a>官方形象化解释：</h4><p>ajax或者iframe指向的地址中，二级域名、端口、协议必须与主页面完全相同，否则就算跨域</p><p><img src="https://wstcly.top/picgo/7632302-04537925f4484b52.png" alt="7632302-04537925f4484b52.png"></p><p>跨域访问原理.png</p><h3 id="需求介绍"><a href="#需求介绍" class="headerlink" title="需求介绍"></a>需求介绍</h3><p>但是如果在一个项目中同时定义了多个服务，每个服务之间的端口号不一致，那么如何从一个服务调用另一个服务的接口呢？</p><p>该<a href="https://github.com/guangxush/SpringBoot_CORS">项目</a>中（里面的具体需求不在描述,，可自行git查看）下面有多个Module服务，cors用于处理用户的信息，web模块用于展示用户的信息（为了举例子，故意分开写），这时web(8080端口)需要用到cors（8081端口）下面请求用户数据的接口，但是由于端口号不一致，即使在同一个域名下也无法正常访问</p><p><img src="https://wstcly.top/picgo/7632302-3fc2e11463056c09.png" alt="7632302-3fc2e11463056c09.png"></p><p>项目框架.png</p><p><img src="https://wstcly.top/picgo/7632302-c1cf0a71b9d88951.png" alt="7632302-c1cf0a71b9d88951.png"></p><p>7632302-b196665beb89b6bf.png</p><p>直接输入id并点击查询，请求会被拦截：</p><p>浏览器提示index.html请求cors用户信息报错：</p><p><img src="https://wstcly.top/picgo/7632302-b1b8cb2830a1cd14.png" alt="7632302-b1b8cb2830a1cd14.png"></p><p>浏览器对请求拦截.png</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用Java配置cors<a href="https://github.com/guangxush/SpringBoot_CORS/blob/master/cors/src/main/java/com/shgx/cors/config/CorsConfig.java">CorsConfig.java</a>，使得整个应用都支持CORS（跨域访问解决方案很多，这里简单介绍一个）</p><pre class="language-none"><code class="language-none">@Configurationpublic class CorsConfig implements WebMvcConfigurer &#123;    &#x2F;**     * 页面跨域访问Controller过滤     *     * @return     *&#x2F;    @Override    public void addCorsMappings(CorsRegistry registry) &#123;        WebMvcConfigurer.super.addCorsMappings(registry);        registry.addMapping(&quot;&#x2F;**&quot;)                .allowedHeaders(&quot;*&quot;)                .allowedMethods(&quot;POST&quot;,&quot;GET&quot;)                .allowedOrigins(&quot;*&quot;);    &#125;&#125;123456789101112131415161718</code></pre><p>此时再次进行查询数据获取成功：</p><p><img src="https://wstcly.top/picgo/7632302-b196665beb89b6bf.png" alt="7632302-b196665beb89b6bf.png"></p><p>添加跨域访问配置并成功返回cors中信息.png</p><h3 id="部分接口跨域访问"><a href="#部分接口跨域访问" class="headerlink" title="部分接口跨域访问"></a>部分接口跨域访问</h3><p>但是如果cors中包含多个接口，只想暴露一部分出去应该怎么配置？</p><p>可以更改Mapping：</p><pre class="language-none"><code class="language-none">@Configurationpublic class CorsConfig implements WebMvcConfigurer &#123;    &#x2F;**     * 页面跨域访问Controller过滤     *     * @return     *&#x2F;    @Override    public void addCorsMappings(CorsRegistry registry) &#123;        WebMvcConfigurer.super.addCorsMappings(registry);        registry.addMapping(&quot;&#x2F;open&#x2F;**&quot;)                .allowedHeaders(&quot;*&quot;)                .allowedMethods(&quot;POST&quot;,&quot;GET&quot;)                .allowedOrigins(&quot;*&quot;);    &#125;&#125;123456789101112131415161718</code></pre><p>只开放部分接口</p><p>测试结果如下：</p><p>下图中从上到下按钮访问依次介绍：</p><ul><li>“查询”按钮访问外部cors下面的开放接口：<a href="https://github.com/guangxush/SpringBoot_CORS/blob/master/cors/src/main/java/com/shgx/cors/controller/UserController.java">UserController.java</a></li><li>“测试1”按钮访问web下面的本地接口：<a href="https://github.com/guangxush/SpringBoot_CORS/blob/master/web/src/main/java/com/shgx/web/controller/NativeController.java">NativeController.java</a></li><li>“测试2”按钮访问cors下面的封闭接口：<a href="https://github.com/guangxush/SpringBoot_CORS/blob/master/cors/src/main/java/com/shgx/cors/controller/AnotherController.java">AnotherController.java</a></li></ul><p>测试结果如下图所示：</p><ul><li>外部“查询”访问成功</li><li>本地“测试”访问成功</li><li>外部“测试”访问失败<br>  <img src="https://wstcly.top/picgo/7632302-5eb5dd4abc2cbe11.png" alt="7632302-5eb5dd4abc2cbe11.png"><br>  跨域访问开放部分接口.png</li></ul><h3 id="配置需要注意的地方"><a href="#配置需要注意的地方" class="headerlink" title="配置需要注意的地方"></a>配置需要注意的地方</h3><p>如果在<a href="https://github.com/guangxush/SpringBoot_CORS/blob/master/cors/src/main/resources/application.properties">application.properties</a>中已经配置了访问路由，如下图所示：</p><p><img src="https://wstcly.top/picgo/7632302-d06506529ee607e1.png" alt="7632302-d06506529ee607e1.png"></p><p>访问路由配置.png</p><p>请不要在跨域访问的配置文件<a href="https://github.com/guangxush/SpringBoot_CORS/blob/master/cors/src/main/java/com/shgx/cors/config/CorsConfig.java">CorsConfig.java</a>再次中添加该路由（如下图所示），否则会导致匹配失败的情况</p><pre class="language-none"><code class="language-none">@Configurationpublic class CorsConfig implements WebMvcConfigurer &#123;    &#x2F;**     * 页面跨域访问Controller过滤     *     * @return     *&#x2F;    @Override    public void addCorsMappings(CorsRegistry registry) &#123;        WebMvcConfigurer.super.addCorsMappings(registry);        registry.addMapping(&quot;&#x2F;operation&#x2F;open&#x2F;**&quot;)                .allowedHeaders(&quot;*&quot;)                .allowedMethods(&quot;POST&quot;,&quot;GET&quot;)                .allowedOrigins(&quot;*&quot;);    &#125;&#125;123456789101112131415161718</code></pre><p><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’575’%3e%3cpath d&#x3D;’M728.064 343.943529c-17.648941-2.891294-23.552-20.239059-26.503529-28.912941V104.026353C701.560471 46.200471 654.396235 0 595.425882 0c-53.007059 0-97.28 40.478118-106.134588 89.569882-29.997176 184.862118-138.541176 255.457882-217.630118 280.937412a26.142118 26.142118 0 0 0-18.130823 24.877177v560.067764c0 19.817412 16.022588 35.84 35.84 35.84h535.973647c56.018824-11.565176 94.328471-31.804235 120.892235-86.738823l120.832-416.105412c23.552-75.173647-14.757647-147.395765-100.231529-144.564706h-238.772706z m-571.813647 31.744H76.619294C35.358118 375.687529 0 410.383059 0 450.861176v462.426353c0 43.369412 32.406588 78.004706 76.619294 78.004706h79.631059c27.708235 0 50.115765-22.407529 50.115765-50.115764V425.863529a50.115765 50.115765 0 0 0-50.115765-50.115764z’ data-evernote-id&#x3D;’155’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em><br>2人点赞_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ viewBox&#x3D;’64 64 896 896’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-icon&#x3D;’right’ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ data-evernote-id&#x3D;’579’%3e%3cpath d&#x3D;’M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z’ data-evernote-id&#x3D;’580’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)_</p><p><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’584’%3e%3cpath d&#x3D;’M771.413333 668.728889c-18.773333 3.015111-25.031111 20.878222-28.16 29.866667v217.884444c0 59.733333-49.948444 107.52-112.412444 107.52a115.427556 115.427556 0 0 1-112.412445-92.558222c-31.857778-190.919111-146.830222-263.850667-230.627555-290.133334a27.420444 27.420444 0 0 1-19.228445-26.168888V37.944889C268.572444 17.066667 285.582222 0 306.631111 0h567.864889c59.335111 11.946667 99.953778 32.824889 128 89.543111l128.113778 429.909333c24.974222 77.653333-15.644444 152.291556-106.211556 149.276445H771.413333z m-605.866666-32.824889H81.180444C37.546667 635.904 0 600.064 0 558.250667V80.611556C0 35.84 34.360889 0 81.180444 0H165.546667c29.297778 0 53.077333 23.779556 53.077333 53.077333v529.749334a53.077333 53.077333 0 0 1-53.077333 53.077333z’ data-evernote-id&#x3D;’134’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em></p><p><a href="https://www.jianshu.com/nb/28780344">_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’http://www.w3.org/2000/svg' width='1em' height='1em' fill='currentColor' aria-hidden='true' focusable='false' class='js-evernote-checked' data-evernote-id='589'%3e%3cpath d='M178.390055 120.591045C111.268624 120.591045 56.888889 174.401955 56.888889 240.556383V903.97778C56.888889 970.302855 111.097977 1024 178.390055 1024h545.731364c67.121431 0 121.558049-53.81091 121.558049-120.02222V240.613265c0-66.268192-54.209088-120.02222-121.558049-120.02222H178.390055z m455.117432 301.136319H269.06087a30.147761 30.147761 0 0 1 0-60.238641h364.503499a30.147761 30.147761 0 0 1 0 60.238641z m303.18409 301.136318a30.318409 30.318409 0 0 1-30.375291-30.318409V180.317742c0-66.268192-53.81091-120.02222-121.330519-120.022219H329.697688a30.147761 30.147761 0 0 1 0-60.23864l454.946784 0.056882C885.326618 0.113765 967.009987 80.887013 967.009987 180.602155v511.943118a30.318409 30.318409 0 0 1-30.31841 30.318409z m-303.18409-120.47728H269.06087a30.147761 30.147761 0 1 1 0-60.238641h364.503499a30.147761 30.147761 0 0 1 0 60.238641z' data-evernote-id='145' class='js-evernote-checked'%3e%3c/path%3e%3c/svg%3e)_SpringBoot</a><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’595’%3e%3cpath d&#x3D;’M232.727273 579.87878833C271.28679 579.87878833 302.545455 548.62012233 302.545455 510.06060633 302.545455 471.50108933 271.28679 440.24242433 232.727273 440.24242433 194.167756 440.24242433 162.909091 471.50108933 162.909091 510.06060633 162.909091 548.62012233 194.167756 579.87878833 232.727273 579.87878833ZM512 579.87878833C550.559516 579.87878833 581.818182 548.62012233 581.818182 510.06060633 581.818182 471.50108933 550.559516 440.24242433 512 440.24242433 473.440484 440.24242433 442.181818 471.50108933 442.181818 510.06060633 442.181818 548.62012233 473.440484 579.87878833 512 579.87878833ZM791.272727 579.87878833C829.832243 579.87878833 861.090909 548.62012233 861.090909 510.06060633 861.090909 471.50108933 829.832243 440.24242433 791.272727 440.24242433 752.713211 440.24242433 721.454545 471.50108933 721.454545 510.06060633 721.454545 548.62012233 752.713211 579.87878833 791.272727 579.87878833Z’ data-evernote-id&#x3D;’101’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em></p><p>“小礼物走一走，来简书关注我”<br>还没有人赞赏，支持一下</p><p><a href="https://www.jianshu.com/u/129d137fa8d1">%!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)</a></p><p><a href="https://www.jianshu.com/u/129d137fa8d1" title="时光飞旭">时光飞旭</a></p><p>总资产10 (约0.86元)共写了2.2W字获得87个赞共37个粉丝</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC Controller</title>
      <link href="/2024/06/30/spring-mvc/"/>
      <url>/2024/06/30/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p>Controller的三种方式</p><p><img src="/image/.png" alt=".png"></p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发规范</title>
      <link href="/2024/06/30/vue-kai-fa-gui-fan/"/>
      <url>/2024/06/30/vue-kai-fa-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1 id="vue开发规范"><a href="#vue开发规范" class="headerlink" title="vue开发规范"></a>vue开发规范</h1><p>Vue 开发规范目录及说明</p><ul><li>规范目的</li><li>命名规范</li><li>结构化规范注</li><li>释规范</li><li>编码规范</li><li>CSS 规范</li></ul><h5 id="规范目的"><a href="#规范目的" class="headerlink" title="规范目的"></a>规范目的</h5><blockquote><p>为提高团队协作效率</p><p>便于后台人员添加功能及前端后期优化维护</p><p>输出高质量的文档</p></blockquote><h5 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h5><blockquote><p>为了让大家书写可维护的代码，而不是一次性的代码</p><p>让团队当中其他人看你的代码能一目了然</p><p>甚至一段时间时候后你再看你某个时候写的代码也能看</p></blockquote><h6 id="普通变量命名规范"><a href="#普通变量命名规范" class="headerlink" title="普通变量命名规范"></a>普通变量命名规范</h6><ul><li>命名方法 ：驼峰命名法</li><li>命名规范 ：</li></ul><blockquote><ol><li>命名必须是跟需求的内容相关的词，如</li></ol></blockquote><p>let productPageDetail &#x3D; “产品详情页面”;</p><blockquote><ol><li>命名是复数的时候需要加s,如</li></ol></blockquote><p>const productList &#x3D; new Array();</p><h6 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h6><ul><li>命名方法 : 全部大写</li><li>命名规范 : 使用大写字母匈牙利式命名法。</li></ul><p>const MAX_COUNT &#x3D; 10</p><p>const URL &#x3D; ‘<a href="https://www.cupshe.com/">https://www.cupshe.com/</a>‘</p><h6 id="组件命名规范（驼峰式命名）"><a href="#组件命名规范（驼峰式命名）" class="headerlink" title="组件命名规范（驼峰式命名）"></a>组件命名规范（驼峰式命名）</h6><ul><li>公用组件以zsxj_kj(公司+项目名)开头如：</li></ul><p>zsxjKJ-TopBar,</p><p>zsxjCRM-TopBar</p><ul><li>页面内部组件以组件模块名简写为开头，Item 为结尾，如：</li></ul><p>addToCartItem,</p><p>checkoutItem</p><h6 id="method-方法命名命名规范"><a href="#method-方法命名命名规范" class="headerlink" title="method 方法命名命名规范"></a>method 方法命名命名规范</h6><ul><li>匈牙利式命名，统一使用动词或者动词+名词形式</li></ul><p>get_user_list,</p><p>submit_cart_product</p><ul><li>请求数据方法，以 data 结尾</li></ul><p>get_product_list_data</p><p>get_user_data</p><h6 id="views下的文件命名"><a href="#views下的文件命名" class="headerlink" title="views下的文件命名"></a>views下的文件命名</h6><ul><li>尽量是名词,且使用驼峰命名法</li></ul><p>productDetailPage</p><h6 id="props-命名"><a href="#props-命名" class="headerlink" title="props 命名"></a>props 命名</h6><ul><li>在声明 prop 的时候，使用驼峰命名法，在模板中使用 kebab-case</li></ul><p><code>&lt;script&gt;</code></p><p><code>props: &#123;</code></p><p><code>    greetingText: String</code></p><p><code>&#125;</code></p><p><code>&lt;/script&gt;</code></p><p><code>&lt;welcome-message greeting-text=&quot;hi&quot;&gt;&lt;/welcome-message&gt;</code></p><h5 id="结构化规范"><a href="#结构化规范" class="headerlink" title="结构化规范"></a>结构化规范</h5><h6 id="目录文件夹及子文件规范"><a href="#目录文件夹及子文件规范" class="headerlink" title="目录文件夹及子文件规范"></a>目录文件夹及子文件规范</h6><blockquote><p>以下统一管理处均对应相应模块</p><p>以下全局文件文件均以 index.js 导出，并在 main.js 中导入</p><p>以下临时文件，在使用后，接口已经有了，发版后清除</p></blockquote><p>src                                 源码目录</p><p>|– api                                 接口，统一管理</p><p>|– assets                              静态资源，统一管理</p><p>|– components                          公用组件，全局文件</p><p>|– filters                             过滤器，全局工具</p><p>|– icons                              图标，全局资源</p><p>|– datas                              模拟数据，临时存放</p><p>|– lib                                 外部引用的插件存放及修改文件</p><p>|– mock                                模拟接口，临时存放</p><p>|– router                              路由，统一管理</p><p>|– store                               vuex, 统一管理</p><p>|– views                             视图目录</p><p>| |– staffWorkbench                     视图模块名</p><p>| |– |– staffWorkbench.vue              模块入口页面</p><p>| |– |– indexComponents                 模块页面级组件文件夹</p><p>| |– |– components                      模块通用组件文件夹</p><h6 id="vue-文件基本结构"><a href="#vue-文件基本结构" class="headerlink" title="vue 文件基本结构"></a>vue 文件基本结构</h6><p><code>&lt;template&gt;</code></p><p>    <div></p><p>    </div></p></template><script>    export default {        components : {`        },`        data () {`            return {``            }``        },``        mounted() {``        }，``        methods: {``        }``}``</script>`<!--声明语言，并且添加scoped--><style lang="scss" scoped>`</style>`<h6 id="组件选项顺序"><a href="#组件选项顺序" class="headerlink" title="组件选项顺序"></a>组件选项顺序</h6><ul><li><p>components</p></li><li><p>props</p></li><li><p>data</p></li><li><p>computed</p></li><li><p>created</p></li><li><p>mounted</p></li><li><p>metods</p></li><li><p>filter</p></li><li><p>watch</p></li></ul><h5 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h5><h6 id="务必添加注释列表"><a href="#务必添加注释列表" class="headerlink" title="务必添加注释列表"></a>务必添加注释列表</h6><blockquote><ol><li>公共组件使用说明</li><li>各组件中重要函数或者类说明</li><li>复杂的业务逻辑处理说明</li><li>特殊情况的代码处理说明,对于代码中特殊用途的变量、存在临界值、函数中使用的 hack、使用</li><li>了某种算法或思路等需要进行注释描述</li><li>多重 if 判断语句</li><li>注释块必须以&#x2F;（至少两个星号）开头&#x2F;</li><li>单行注释使用&#x2F;&#x2F;</li></ol></blockquote><h5 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h5><h6 id="指令规范"><a href="#指令规范" class="headerlink" title="指令规范"></a>指令规范</h6><p><code>:class=&quot;&#123;&#39;show-left&#39;：true&#125;&quot;</code></p><p>@click&#x3D;”getListData”</p><h6 id="v-for-循环必须加上-key-属性，在整个-for-循环中-key-需要唯一"><a href="#v-for-循环必须加上-key-属性，在整个-for-循环中-key-需要唯一" class="headerlink" title="v-for 循环必须加上 key 属性，在整个 for 循环中 key 需要唯一"></a>v-for 循环必须加上 key 属性，在整个 for 循环中 key 需要唯一</h6><p><code>&lt;ul&gt;</code></p><p>    <li v-for="todo in todos" :key="todo.id"></p><p>        </p><p>    </li></p><p><code>&lt;/ul&gt;</code></p><h6 id="避免-v-if-和-v-for-同时用在一个元素上（性能问题）"><a href="#避免-v-if-和-v-for-同时用在一个元素上（性能问题）" class="headerlink" title="避免 v-if 和 v-for 同时用在一个元素上（性能问题）"></a>避免 v-if 和 v-for 同时用在一个元素上（性能问题）</h6><ul><li>将数据替换为一个计算属性，让其返回过滤后的列表</li></ul><p><code>&lt;ul&gt;</code></p><p>    <li v-for="user in activeUsers" :key="user.id"></p><p>        </p><p>     </li></p></ul><script>`computed: {`    activeUsers: function () {        return this.users.filter(function (user) {`            return user.isActive``        })``    }``}``</script>`<ul><li>将 v-if 移动至容器元素上 (比如 ul, ol)</li></ul><p><code>&lt;ul v-if=&quot;shouldShowUsers&quot;&gt;</code></p><p>    <li v-for="user in users" :key="user.id"></p><p>        </p><p>    </li></p><p><code>&lt;/ul&gt;</code></p><p>props: {</p><p>    status: {</p><p>        type: String,</p><p>        required: true,</p><p>        validator: function (value) {</p><p>            return [</p><p>               ‘syncing’,</p><p>                ‘synced’,</p><p>                ‘version-conflict’,</p><p>                ‘error’</p><p>            ].indexOf(value) !&#x3D;&#x3D; -1</p><p>        }</p><p>    }</p><p><code>&#125;</code></p><h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><blockquote><p>避免 this.$parent调试信息</p><p>console.log() debugger 使用完及时删除</p></blockquote><p>除了三目运算，if,else 等禁止简写</p><h6 id="CSS-规范"><a href="#CSS-规范" class="headerlink" title="CSS 规范"></a>CSS 规范</h6><blockquote><p>统一使用”-“连字符</p><p>省略值为 0 时的单位</p><p>如果 CSS 可以做到，就不要使用 JS</p><p>建议并适当缩写值，提高可读性，特殊情况除外</p></blockquote><p>padding-bottom: 0;</p><p>margin: 0;</p><ul><li>分类的命名方法</li></ul><blockquote><p>使用单个字母加上”-“为前缀</p><p>布局（grid）（.g-）</p><p>模块（module）（.m-）</p><p>元件（unit）（.u-）</p><p>功能（function）（.f-）</p><p>皮肤（skin）（.s-）</p><p>状态（.z-）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不知道是所有人都这样</title>
      <link href="/2024/06/30/bu-zhi-dao-shi-suo-you-ren-du-zhe-yang-huan-shi-wei-du-wo-zi-ji-yue-shi-zai-te-shu-shi-qi-yue-xi-wang-bie-ren-neng-xiang-zheng-chang-shi-hou-na-yang-dui-dai/"/>
      <url>/2024/06/30/bu-zhi-dao-shi-suo-you-ren-du-zhe-yang-huan-shi-wei-du-wo-zi-ji-yue-shi-zai-te-shu-shi-qi-yue-xi-wang-bie-ren-neng-xiang-zheng-chang-shi-hou-na-yang-dui-dai/</url>
      
        <content type="html"><![CDATA[<p>不知道是所有人都这样，还是唯独我自己。越是在特殊时期，越希望别人能像正常时候那样对待。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人的镜子</title>
      <link href="/2024/06/30/ren-de-jing-zi/"/>
      <url>/2024/06/30/ren-de-jing-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="人的镜子"><a href="#人的镜子" class="headerlink" title="人的镜子"></a>人的镜子</h1><p>人，总是通过照镜子来观察自身，再去装饰自己，去变成别人喜欢的样子。</p><p>信心和自卑的来源，都是那面镜子。镜子给出积极的反馈，你就变得自信；镜子给出消极的回应，自卑紧随而来。若是无法从中摆脱出来，苦恼就会来的很自然，喜悲不定，欢忧轮转。</p><p>守住初心，方得始终。固守本心，不为流言蜚语所动，不为冷言热语所讽，知易行难。于风口浪尖狂舞，极尽生命之所能。能顶住千夫所指，能放下众人所望，真真切切，踽踽独行。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会不会还是像她</title>
      <link href="/2024/06/30/hui-bu-hui-huan-shi-xiang-ta/"/>
      <url>/2024/06/30/hui-bu-hui-huan-shi-xiang-ta/</url>
      
        <content type="html"><![CDATA[<h1 id="会不会还是像她"><a href="#会不会还是像她" class="headerlink" title="会不会还是像她"></a>会不会还是像她</h1><p>    和她的对话好像和她是一样的，难道结局也是类似？我不敢确定这是不是真的，就和我不敢真正的向她倾诉一样。她是否会察觉我的每个动作都有爱的痕迹，每一次帮助都是在她还未身处险地之前。</p><p>总会有那么一点担心，总会有那么一点迷茫。害怕结局和之前一样。怪我没有分清，怪我没有看清，这只是简单的同学情谊。害的你被我惊扰，平添一缕烦恼。把错都算在我头上吧，反正你也没有付出过什么，把忧愁都丢给我吧，反正你也没期待过什么。</p><p>    让我觉得自己像是一个傻子的，不是我不顾一切的呆头呆脑的去迎合，而是疑虑将我困在原地，你却早已远去。我总是觉得你这么对我，也许是超过了本分，缘起所致，可在你看来，这不过是出于礼貌，这真的是我们的差别，是造成这一切困扰的根源。不知道当你知道于你而言只是无垠的海远到看不见边的一起翻涌，却在我的内心深处最平静的小湖边掀起最长久的波澜的时候，会做何感想，可能更多的是处于礼貌的无奈罢。</p><p>    如今的我只想奉上衷心的祝福，希望你所托付的那个人不会让你在看不见的角落里落泪，不会让你一个人在黑夜里徘徊。眼角向下，愁眉深锁，也许是在懊悔，也许是在为自己当初的选择感到可悲。希望那不是你。永远不会出现在你的世界里。</p><p>    能抓在手里的幸福，谁会忍心让它过户。所说的放手，大抵是见不到了希望，满剩荒凉。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JWT实现Token认证</title>
      <link href="/2024/06/30/shi-yong-jwt-shi-xian-token-ren-zheng-jian-shu/"/>
      <url>/2024/06/30/shi-yong-jwt-shi-xian-token-ren-zheng-jian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="使用JWT实现Token认证"><a href="#使用JWT实现Token认证" class="headerlink" title="使用JWT实现Token认证"></a>使用JWT实现Token认证</h1><h1 id="使用JWT实现Token认证-1"><a href="#使用JWT实现Token认证-1" class="headerlink" title="使用JWT实现Token认证"></a>使用JWT实现Token认证</h1><p><a href="https://www.jianshu.com/u/4757052c2a58">%!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)</a></p><p><a href="https://www.jianshu.com/u/4757052c2a58">aishenla</a></p><p>_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’234’%3e%3cpath d&#x3D;’M751.144277 307.2l-123.016533-238.933333h159.778133a81.92 81.92 0 0 1 59.1872 25.258666l160.256 167.492267A27.306667 27.306667 0 0 1 987.620011 307.2h-236.475734z m270.506667 111.547733L640.927744 946.039467a27.306667 27.306667 0 0 1-48.128-24.234667L766.504277 375.466667h-56.388266l-170.5984 590.165333a27.306667 27.306667 0 0 1-52.462934 0.034133L315.500544 375.466667H259.112277l174.523734 545.5872a27.306667 27.306667 0 0 1-48.128 24.302933L5.160277 418.747733A27.306667 27.306667 0 0 1 27.346944 375.466667H999.464277a27.306667 27.306667 0 0 1 22.152534 43.281066zM18.301611 261.0176L178.557611 93.525333A81.92 81.92 0 0 1 237.744811 68.266667h159.744L274.506411 307.2H38.030677a27.306667 27.306667 0 0 1-19.729066-46.1824zM453.877077 68.266667h117.896534l122.9824 238.933333H330.894677l122.9824-238.933333z’ data-evernote-id&#x3D;’128’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)_42018.08.15 15:42:39字数 187阅读 119,211</p><p>为什么使用JWT？</p><p>随着技术的发展，分布式web应用的普及，通过session管理用户登录状态成本越来越高，因此慢慢发展成为token的方式做登录身份校验，然后通过token去取redis中的缓存的用户信息，随着之后jwt的出现，校验方式更加简单便捷化，无需通过redis缓存，而是直接根据token取出保存的用户信息，以及对token可用性校验，单点登录更为简单。</p><p>JWT架构图</p><p><img src="https://wstcly.top/picgo/3383598-c82676bb8445bae9.png" alt="3383598-c82676bb8445bae9.png"></p><p>JWT架构图.png</p><p>使用JWT核心代码：</p><p>maven依赖：</p><pre class="language-none"><code class="language-none">        &lt;dependency&gt;            &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;            &lt;version&gt;3.2.0&lt;&#x2F;version&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;            &lt;version&gt;0.7.0&lt;&#x2F;version&gt;        &lt;&#x2F;dependency&gt;12345678910</code></pre><p>JWT工具类：</p><p>用于生成Token，和Token验证</p><pre class="language-none"><code class="language-none">public class JwtUtils &#123;    &#x2F;**     * 签发JWT     * @param id     * @param subject 可以是JSON数据 尽可能少     * @param ttlMillis     * @return  String     *     *&#x2F;    public static String createJWT(String id, String subject, long ttlMillis) &#123;        SignatureAlgorithm signatureAlgorithm &#x3D; SignatureAlgorithm.HS256;        long nowMillis &#x3D; System.currentTimeMillis();        Date now &#x3D; new Date(nowMillis);        SecretKey secretKey &#x3D; generalKey();        JwtBuilder builder &#x3D; Jwts.builder()                .setId(id)                .setSubject(subject)   &#x2F;&#x2F; 主题                .setIssuer(&quot;user&quot;)     &#x2F;&#x2F; 签发者                .setIssuedAt(now)      &#x2F;&#x2F; 签发时间                .signWith(signatureAlgorithm, secretKey); &#x2F;&#x2F; 签名算法以及密匙        if (ttlMillis &gt;&#x3D; 0) &#123;            long expMillis &#x3D; nowMillis + ttlMillis;            Date expDate &#x3D; new Date(expMillis);            builder.setExpiration(expDate); &#x2F;&#x2F; 过期时间        &#125;        return builder.compact();    &#125;    &#x2F;**     * 验证JWT     * @param jwtStr     * @return     *&#x2F;    public static CheckResult validateJWT(String jwtStr) &#123;        CheckResult checkResult &#x3D; new CheckResult();        Claims claims &#x3D; null;        try &#123;            claims &#x3D; parseJWT(jwtStr);            checkResult.setSuccess(true);            checkResult.setClaims(claims);        &#125; catch (ExpiredJwtException e) &#123;            checkResult.setErrCode(SystemConstant.JWT_ERRCODE_EXPIRE);            checkResult.setSuccess(false);        &#125; catch (SignatureException e) &#123;            checkResult.setErrCode(SystemConstant.JWT_ERRCODE_FAIL);            checkResult.setSuccess(false);        &#125; catch (Exception e) &#123;            checkResult.setErrCode(SystemConstant.JWT_ERRCODE_FAIL);            checkResult.setSuccess(false);        &#125;        return checkResult;    &#125;    public static SecretKey generalKey() &#123;        byte[] encodedKey &#x3D; Base64.decode(SystemConstant.JWT_SECERT);        SecretKey key &#x3D; new SecretKeySpec(encodedKey, 0, encodedKey.length, &quot;AES&quot;);        return key;    &#125;        &#x2F;**     *      * 解析JWT字符串     * @param jwt     * @return     * @throws Exception     *&#x2F;    public static Claims parseJWT(String jwt) throws Exception &#123;        SecretKey secretKey &#x3D; generalKey();        return Jwts.parser()            .setSigningKey(secretKey)            .parseClaimsJws(jwt)            .getBody();    &#125;&#125;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172</code></pre><p>如何使用？</p><p>代码实例：</p><pre class="language-none"><code class="language-none">public class LoginController &#123;    @Autowired    UserRepository userRepository;        @ApiOperation(value&#x3D;&quot;用户登陆&quot;)    @RequestMapping(value&#x3D;&quot;login&quot;,method &#x3D; RequestMethod.POST)    public ReturnVo login(String username, String password,HttpServletResponse            response) &#123;        User user &#x3D;  userRepository.findByUsername(username);        if(user!&#x3D;null)&#123;            if(user.getPassword().equals(password))&#123;                &#x2F;&#x2F;把token返回给客户端--&gt;客户端保存至cookie--&gt;客户端每次请求附带cookie参数                String JWT &#x3D; JwtUtils.createJWT(&quot;1&quot;, username, SystemConstant.JWT_TTL);                return ReturnVo.ok(JWT);            &#125;else&#123;                return ReturnVo.error();            &#125;        &#125;else&#123;            return ReturnVo.error();        &#125;    &#125;    @ApiOperation(value&#x3D;&quot;获取用户信息&quot;)    @RequestMapping(value&#x3D;&quot;description&quot;,method &#x3D; RequestMethod.POST)    public ReturnVo description(String username) &#123;        User user &#x3D;  userRepository.findByUsername(username);        return ReturnVo.ok(user.getDescription());    &#125;&#125;12345678910111213141516171819202122232425262728</code></pre><p><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’864’%3e%3cpath d&#x3D;’M728.064 343.943529c-17.648941-2.891294-23.552-20.239059-26.503529-28.912941V104.026353C701.560471 46.200471 654.396235 0 595.425882 0c-53.007059 0-97.28 40.478118-106.134588 89.569882-29.997176 184.862118-138.541176 255.457882-217.630118 280.937412a26.142118 26.142118 0 0 0-18.130823 24.877177v560.067764c0 19.817412 16.022588 35.84 35.84 35.84h535.973647c56.018824-11.565176 94.328471-31.804235 120.892235-86.738823l120.832-416.105412c23.552-75.173647-14.757647-147.395765-100.231529-144.564706h-238.772706z m-571.813647 31.744H76.619294C35.358118 375.687529 0 410.383059 0 450.861176v462.426353c0 43.369412 32.406588 78.004706 76.619294 78.004706h79.631059c27.708235 0 50.115765-22.407529 50.115765-50.115764V425.863529a50.115765 50.115765 0 0 0-50.115765-50.115764z’ data-evernote-id&#x3D;’155’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em><br>63人点赞_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ viewBox&#x3D;’64 64 896 896’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-icon&#x3D;’right’ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ data-evernote-id&#x3D;’868’%3e%3cpath d&#x3D;’M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z’ data-evernote-id&#x3D;’869’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)_</p><p><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’873’%3e%3cpath d&#x3D;’M771.413333 668.728889c-18.773333 3.015111-25.031111 20.878222-28.16 29.866667v217.884444c0 59.733333-49.948444 107.52-112.412444 107.52a115.427556 115.427556 0 0 1-112.412445-92.558222c-31.857778-190.919111-146.830222-263.850667-230.627555-290.133334a27.420444 27.420444 0 0 1-19.228445-26.168888V37.944889C268.572444 17.066667 285.582222 0 306.631111 0h567.864889c59.335111 11.946667 99.953778 32.824889 128 89.543111l128.113778 429.909333c24.974222 77.653333-15.644444 152.291556-106.211556 149.276445H771.413333z m-605.866666-32.824889H81.180444C37.546667 635.904 0 600.064 0 558.250667V80.611556C0 35.84 34.360889 0 81.180444 0H165.546667c29.297778 0 53.077333 23.779556 53.077333 53.077333v529.749334a53.077333 53.077333 0 0 1-53.077333 53.077333z’ data-evernote-id&#x3D;’134’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em></p><p><a href="https://www.jianshu.com/nb/7010086">_![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’http://www.w3.org/2000/svg' width='1em' height='1em' fill='currentColor' aria-hidden='true' focusable='false' class='js-evernote-checked' data-evernote-id='878'%3e%3cpath d='M178.390055 120.591045C111.268624 120.591045 56.888889 174.401955 56.888889 240.556383V903.97778C56.888889 970.302855 111.097977 1024 178.390055 1024h545.731364c67.121431 0 121.558049-53.81091 121.558049-120.02222V240.613265c0-66.268192-54.209088-120.02222-121.558049-120.02222H178.390055z m455.117432 301.136319H269.06087a30.147761 30.147761 0 0 1 0-60.238641h364.503499a30.147761 30.147761 0 0 1 0 60.238641z m303.18409 301.136318a30.318409 30.318409 0 0 1-30.375291-30.318409V180.317742c0-66.268192-53.81091-120.02222-121.330519-120.022219H329.697688a30.147761 30.147761 0 0 1 0-60.23864l454.946784 0.056882C885.326618 0.113765 967.009987 80.887013 967.009987 180.602155v511.943118a30.318409 30.318409 0 0 1-30.31841 30.318409z m-303.18409-120.47728H269.06087a30.147761 30.147761 0 1 1 0-60.238641h364.503499a30.147761 30.147761 0 0 1 0 60.238641z' data-evernote-id='145' class='js-evernote-checked'%3e%3c/path%3e%3c/svg%3e)_javaEE</a><em>![](data:image&#x2F;svg+xml,%3csvg xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ width&#x3D;’1em’ height&#x3D;’1em’ fill&#x3D;’currentColor’ aria-hidden&#x3D;’true’ focusable&#x3D;’false’ class&#x3D;’js-evernote-checked’ data-evernote-id&#x3D;’884’%3e%3cpath d&#x3D;’M232.727273 579.87878833C271.28679 579.87878833 302.545455 548.62012233 302.545455 510.06060633 302.545455 471.50108933 271.28679 440.24242433 232.727273 440.24242433 194.167756 440.24242433 162.909091 471.50108933 162.909091 510.06060633 162.909091 548.62012233 194.167756 579.87878833 232.727273 579.87878833ZM512 579.87878833C550.559516 579.87878833 581.818182 548.62012233 581.818182 510.06060633 581.818182 471.50108933 550.559516 440.24242433 512 440.24242433 473.440484 440.24242433 442.181818 471.50108933 442.181818 510.06060633 442.181818 548.62012233 473.440484 579.87878833 512 579.87878833ZM791.272727 579.87878833C829.832243 579.87878833 861.090909 548.62012233 861.090909 510.06060633 861.090909 471.50108933 829.832243 440.24242433 791.272727 440.24242433 752.713211 440.24242433 721.454545 471.50108933 721.454545 510.06060633 721.454545 548.62012233 752.713211 579.87878833 791.272727 579.87878833Z’ data-evernote-id&#x3D;’101’ class&#x3D;’js-evernote-checked’%3e%3c&#x2F;path%3e%3c&#x2F;svg%3e)</em></p><p>“小礼物走一走，来简书关注我”<br>还没有人赞赏，支持一下</p><p><a href="https://www.jianshu.com/u/4757052c2a58"><img src="https://wstcly.top/picgo/webp.webp" alt="webp.webp"></a></p><p><a href="https://www.jianshu.com/u/4757052c2a58" title="aishenla">aishenla</a></p><p>总资产4 (约0.30元)共写了1356字获得98个赞共34个粉丝</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假如</title>
      <link href="/2024/06/30/jia-ru/"/>
      <url>/2024/06/30/jia-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="假如"><a href="#假如" class="headerlink" title="假如"></a>假如</h1><p>想假如，却不能够。假如我不放手，多年以后，会怪我恨我或感动，想假如是最空虚的痛，为什么幸福都是幻梦，一靠近天堂也就快醒了。</p><p>或许，爱情更像是落叶，看似飞翔却在坠落。</p><p>凋零的不只是秋天，更是那曾经炙热的心。</p><p>真的可以倒流，你会做什么，一样选择我或不抱我，假如温柔放手，你是否懂得，走错了可以再回头。</p><p>真的有一天你也会夜半梦醒，后悔我或那个选择，想假如，是最空虚的痛，曾经拥有却又尽情挥霍。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
            <tag> 歌词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做你的眼睛</title>
      <link href="/2024/06/30/zuo-ni-de-yan-jing/"/>
      <url>/2024/06/30/zuo-ni-de-yan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="做你的眼睛"><a href="#做你的眼睛" class="headerlink" title="做你的眼睛"></a>做你的眼睛</h1><p>没人能只站在自己的位置，做出最正确的决定，从对方视角才能看清这个世界</p><p>很多在自己看来与错误毫无瓜葛的言语、行为，在对方的视角下就变成了最难以接受的事情。这似乎就是人性的弱点之一吧，总是从自我出发，在自我中不知不觉伤害了别人，等到发现才追悔莫及，然后再归咎到自己身上，让双方都受到情绪的惩罚。</p><p>能看到事情全貌的可能只有旁观者。我做不到照顾两个人的感受，同样你也不能。信任和宽容并不是只存在理性思维中的方法论，我已经在试着控制情绪、照顾你的情绪，但现在看来我做的并不是很好。我不知道该怎么不引起你的误解，相信你也在内心做了很多努力，不让自己情绪的堤岸垮塌，可真当洪水侵袭而来的时候，它还是在眼前完全垮塌，你我却无能为力。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入职培训</title>
      <link href="/2024/06/30/ru-zhi-pei-xun/"/>
      <url>/2024/06/30/ru-zhi-pei-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="入职培训"><a href="#入职培训" class="headerlink" title="入职培训"></a>入职培训</h1><p>从到广东联通报道之日起，到今天已经一周过去了。</p><p>这一周内，我充分体验到了国企的形式化流程，填写资料，提交资料，破冰游戏，广州文化游，薪酬解读，员工等级体系，安全生产，然后是风采展示（ 每组两个节目，本组朗诵和歌唱）。节目的准备阶段并没有什么记忆点，简单的准备练习，动作设计，并没有抱有太高的期待，同时也并没有展现出十分完美的节目效果。由于彩排以及之前的所有排练并没有伴奏（bgm），因此在正是开始表演的时候，一开始就出现了一点小小的查错，当然，这对于整个舞台来说并没有什么的，因为整段垮掉的节目此起彼伏，接踵而至。少数的几个极具特色的节目，让我印象深刻的有：1、舞蹈（玛利亚）2、明天，你好（手语表演），可以算得上是完整且具有欣赏性。</p><p>除此之外，公司的员工食堂也可以说是一个福利吧，因为其物美价廉算是对工资的一种弥补吧，工资什么的，毕竟生活的幸福感才是我们的终极目标，所以呢，就不必太过于纠结了。</p><p>经过一周的铺垫，正规的入职培训姗姗来迟。占用了原本的周末时间去广州邮电职业技术学院报到，包括军训、专业培训、素质拓展等内容等。具体体验如何，就等着我前去检验了。</p><p>自我认为准备完毕，只待东风扬帆！（洗漱用品、衣服、鞋子、电子产品等等）</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全自动图床方案分享（不止图片</title>
      <link href="/2024/06/30/quan-zi-dong-tu-chuang-fang-an-fen-xiang-bu-zhi-tu-pian/"/>
      <url>/2024/06/30/quan-zi-dong-tu-chuang-fang-an-fen-xiang-bu-zhi-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>直接上方案：typora + github + vercel</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>闲来无事想写写blog，但又发现一直以来都没有一个像样的图床，于是决定花点时间来搞一搞，看了网上的方案，使用github作为图床还是比较稳的（关键是免费且不会跑路呀），但鉴于国内访问github的感人速度，CDN加速必不可少，于我而言，可选的cdn加速方案有两个：</p><ul><li>jsdelivr</li><li>vercel</li></ul><p>正好前段时间玩vercel的时候买了域名还在闲置，直接方案二</p></blockquote><p>具体链路也很简单：本地上传 or [服务器上传图片，检测文件变动，自动commit]，图片上传github，vercel自动部署更新，整体耗时也就秒级别，完全够用，当然不止图片，音频、视频文件都可以</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>按照刚才说的步骤：</p><ol><li>建立一个github仓库</li><li>建立<a href="https://vercel.com/new">vercel</a>项目</li><li>本地 or 服务器上传图片</li></ol><p>第一步 过于简单就不赘述了~</p><p>第二步 vercel其实也不复杂，进入官网，绑定github仓库，自动部署即可</p><p>这里放一张图片示例一下好了</p><p><img src="https://wstcly.top/picgo/image-20240630151723344.png" alt="vercel"></p><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><p>本地需要安装的软件为typora（md编辑器）、picgo图床管理器</p><p><img src="https://wstcly.top/picgo/image-20240630152022137.png" alt="image-20240630152022137"></p><p><img src="https://wstcly.top/picgo/image-20240630152322853.png" alt="1"></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>服务器目录变更，自动git commit</p><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> watchdog<span class="token punctuation">.</span>observers <span class="token keyword">import</span> Observer<span class="token keyword">from</span> watchdog<span class="token punctuation">.</span>events <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">from</span> git <span class="token keyword">import</span> Repo<span class="token keyword">import</span> osgit_path <span class="token operator">=</span> <span class="token string">'/www/server/git_project/pic0'</span><span class="token comment"># pic_path_schema = 'https://cdn.jsdelivr.net/gh/&#123;github用户名&#125;/&#123;github仓库名&#125;@&#123;分支名&#125;/&#123;文件path&#125;'</span><span class="token keyword">def</span> <span class="token function">pushgit</span><span class="token punctuation">(</span>ccpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">".git"</span> <span class="token keyword">in</span> ccpath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span><span class="token string">".tmp"</span> <span class="token keyword">in</span> ccpath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 需要检测的文件目录</span>            repo <span class="token operator">=</span> Repo<span class="token punctuation">(</span>git_path<span class="token punctuation">)</span>            g <span class="token operator">=</span> repo<span class="token punctuation">.</span>git            g<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"--all"</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token string">"-m auto update"</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successful push!"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error push!"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">FileEventHandler</span><span class="token punctuation">(</span>FileSystemEventHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        FileSystemEventHandler<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_moved</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># pushgit(event.src_path)</span>        <span class="token comment"># if event.is_directory:</span>        <span class="token comment">#     print("directory moved from &#123;0&#125; to &#123;1&#125;".format(event.src_path,event.dest_path))</span>        <span class="token comment"># else:</span>        <span class="token comment">#     print("file moved from &#123;0&#125; to &#123;1&#125;".format(event.src_path,event.dest_path))</span>    <span class="token keyword">def</span> <span class="token function">on_created</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># pushgit(event.src_path)</span>        <span class="token comment"># if event.is_directory:</span>        <span class="token comment">#     print("directory created:&#123;0&#125;".format(event.src_path))</span>        <span class="token comment"># else:</span>        <span class="token comment">#     print("file created:&#123;0&#125;".format(event.src_path))</span>    <span class="token keyword">def</span> <span class="token function">on_deleted</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># pushgit(event.src_path)</span>        <span class="token comment"># if event.is_directory:</span>        <span class="token comment">#     print("directory deleted:&#123;0&#125;".format(event.src_path))</span>        <span class="token comment"># else:</span>        <span class="token comment">#     print("file deleted:&#123;0&#125;".format(event.src_path))</span>    <span class="token keyword">def</span> <span class="token function">on_modified</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> event<span class="token punctuation">.</span>is_directory<span class="token punctuation">:</span>            pushgit<span class="token punctuation">(</span>event<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"file modified:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    observer <span class="token operator">=</span> Observer<span class="token punctuation">(</span><span class="token punctuation">)</span>    event_handler <span class="token operator">=</span> FileEventHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span>schedule<span class="token punctuation">(</span>event_handler<span class="token punctuation">,</span> git_path<span class="token operator">+</span><span class="token string">'/picgo'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 需要检测的文件目录</span>    observer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        observer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://wstcly.top//picgo/v2-d5015c05c065ad3943839c63b5ebc855_720w.jpg" alt="test" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端触点规划会议纪要</title>
      <link href="/2024/06/30/qian-duan-hong-dian-gui-hua-hui-yi-ji-yao/"/>
      <url>/2024/06/30/qian-duan-hong-dian-gui-hua-hui-yi-ji-yao/</url>
      
        <content type="html"><![CDATA[<h1 id="前端触点规划会议纪要"><a href="#前端触点规划会议纪要" class="headerlink" title="前端触点规划会议纪要"></a>前端触点规划会议纪要</h1><p>各位领导、同事好！</p><p>政企智能中台前端触点规划会议纪要如下，请查阅！</p><p>会议时间：2019年10月16日 09:30~11:30</p><p>会议地点：新时空1701会议室</p><p>政企部：王光昊、关渊珊、柳慧、黄婕、吴晓如、黎玮、王松涛</p><p>信息化部：刘永刚、赵孟泽</p><p>软研院：梁光灯，蔡明芯，陈梓铭</p><p>产业互联网：买吾浪江、刘璇</p><p>会议名称：规划展望会</p><p>会议目的：中台前端触点建设规划展望、确定方向、汇聚资源</p><p>会议主要内容：</p><p>1.会前引导：</p><p>交付中心：支撑中心的项目进展意义，包括（政企助手、支撑中心、运维调度系统）</p><p>广分工作：受理集约化（越秀、南沙、政医、海珠）</p><p>触点规划的意义：一线人员减负、（中台集约化受理、自动流程打通、BMO域打通）</p><p>2、服务中心不足：资金池对现有受理模式尚未打通、对外服务不足（平台、网站、运营）、会员积分体系等</p><p>3、营销中心：单量少、单价高、人工销售、系统沉淀少（客户画像不清晰、可视化数据）</p><p>4、生态合作中心：目前在基础工作铺垫层面、目标：全业务覆盖</p><p>5、能力API只在理论层面，没有落地</p><p>6、三季度计划延误：业务口需求不明确、推动力不足；</p><p>7、运营体系建立：人员、机构、组织；广分试点支撑中心上线</p><p>8、现有触点介绍及问题：统一入口、业务支撑能力弱（商机管理、合同管理等）、统一数据、账号、平台</p><p>9、规划原则：1个客户端、1个PC门户、1组小程序</p><p>客户端：统一客户端的情况下，如何和软研院配合、运营</p><p>小程序收敛：网络线条能力等、公众资源汇聚</p><p>标准化产品在线收单：双线、云</p><p>非标方案展示：不同客户级别</p><p>统一账户、统一入口、统一数据</p><p>统一知识库（方案库、产品库、商机库）</p><p>10、各触点功能边界</p><p>11、各触点的统一管理平台</p><p>1、刘永刚：大体建设思路一致，落地细节：哪些能力基于现有资源、进行资源整合</p><p>框架、账号体系问题：智网通体系分配；使用总部政企电商平台（账号体系、域名），建设广分专区；优点：统一推广、统一入口；</p><p>在客户端层面，对外是否放在政企助手客户端上：与总部商讨，争取做到同时对内，对外（10010、政企助手，长出专区服务功能）</p><p>服务与营销需要区格和定位：</p><p>联通：服务+营销</p><p>流量虽大，但针对对象不同，起到的作用不大。</p><p>通讯管家需要整合，功能单一</p><p>规划较为全面宏大，但是资源严重不足，对部门提出人员需求。更担心落地问题，资源壁垒问题。</p><p>功能规划：</p><p>账务中心放第一位：业务适配性；推广力度；</p><p>避免闭门造车：多多听取一线具体需求。</p><p>对于名单制管理：（看不到客户信息）</p><p>1.基础资料维护不足，导致无法长期使用（人员变动）</p><p>客户视图数据层面：</p><p>1.客户经理只关心自己发展的客户</p><p>2.口径差异，导致无法推</p><p>沙盘项目：对内数据无法做，管理混乱；只做外部数据的爬取、管理，商机拓展。</p><p>软研院：售前（受理、订购）、售中（流程打通，提供能力），运营层面：建设数据中心，提升运营能力（20年）</p><p>省分能力提供给总部，复用到其他省份，制定统一前端框架，形成二级研发体系</p><p>阿关：总部能否统一推广、流量是否足够，决定了是否去接手对外。账户体系应放在第一位，由谁建立；具体服务功能应放在哪个触点</p><p>先做基础信息维护（名单制）</p><p>昊哥：总部资源强大、权利分散，导致针对面较窄；PC门户、政企助手客户端主推，</p><p>小程序层面：</p><p>流量扩展，如何推下去：以工业SaaS为例。</p><p>能否先把自己的资源长上去，然后再去合作。</p><p>人员资源：</p><p>信息化人员调配不足</p><p>建设规划任务：； </p><p>PC（信息化）、政企助手（软研院）、小程序（产互）做能力规划介绍。（ppt形式填充）</p><p>业务数据化，共性问题集约；</p><p>账务中心：业务需求明确；</p><p>聚焦，影响范围小；</p><p>和财务部站位一致、立场一致、目标一致</p><p>1、前端要打通，系统强制切换。（集中集客-&gt;订单中心，变更还在集客）</p><p>2、优点在于，一站式支撑，统一工作平台；缺点：效率暂时体现不出来</p><p>对待客户经理的发言：应该兼听，意见具有很强的立场性</p><p>具体需求还需要与一线探讨</p><p>方向：对内PC+小程序，</p><p>80%时间打通系统环节</p><p>用户维系运营：总部授权运营权利较大，倾向于营销、友商倾向于服务，定位不同，产出不同</p><p>买：核心问题：业务流程并未改变；解决：流程在不同业务是否可以个性化</p><p>流程改变，优化使用；</p><p>先做整合，再做流程优化（通用问题抽象提炼解决）。</p><p>沟通代价高：产品经理（较慢）、开发联调（很快）</p><p>统一工作台的建立：能力汇聚，而非重建</p><p>1、过往一年工作总结：</p><p>问题：推动力、地市认可度、触点层面如何呈现能力</p><p>期望反馈：各触点功能具体规划建设方案</p><p>孟泽：订单中心随后的详细规划是否要后续探讨</p><p>昊哥：请信息化给出答案</p><p>刘永刚：集中集客营业受理模块解耦到订单中心</p><p>受到B转CB的影响</p><p>新旧调度协同：全部上oss2.0,（总部能开，路由分化、透传，不介入生产）</p><p>    </p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 会议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫后重生的感觉</title>
      <link href="/2024/06/30/jie-hou-chong-sheng-de-gan-jue/"/>
      <url>/2024/06/30/jie-hou-chong-sheng-de-gan-jue/</url>
      
        <content type="html"><![CDATA[<h1 id="劫后重生的感觉"><a href="#劫后重生的感觉" class="headerlink" title="劫后重生的感觉"></a>劫后重生的感觉</h1><p>一刹那，心情仿似止水般平静，我已经预料到了，这次一定是正确的。</p><p>被烦恼萦绕到疑似满头白丝，又像是秋末的清晨，被弥漫四阖的浓雾笼罩。咻的一下，便彻底从中挣脱，以焕然一新的面貌迎接随后的清明小长假。</p><p>仿佛又一次验证了软件工程老师所说的“三七定理”，自以为已经将近完成的事情，其实你只完成了其30%，自以为在团队中占据了重要的地位，实则不然。</p><p>不是所有的努力都能看得到成效，可量变总能积累到质变。不为质而担忧，不为量而烦恼，也是通过这件事，我所学到的吧。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可编程实验——复杂模型机</title>
      <link href="/2024/06/30/ke-bian-cheng-shi-yan-fu-za-mo-xing-ji/"/>
      <url>/2024/06/30/ke-bian-cheng-shi-yan-fu-za-mo-xing-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="可编程实验——复杂模型机"><a href="#可编程实验——复杂模型机" class="headerlink" title="可编程实验——复杂模型机"></a>可编程实验——复杂模型机</h1><p>经过两个学期的积累（数字逻辑、计算机组成原理），身为一个计算机专业的学生（自我感觉偏硬件），渐渐掌握了专业课程的节奏。</p><p>从数字逻辑的逻辑门的设计到计算机组成的整体轮廓，再到从基础开始的硬件设计，一步一步，与或非门，寄存器，ROM、RAM 。 随后 而来的是CPU的设计，也就是本学期的内容。</p><p>简单模型机—》复杂模型机</p><p>作为计算机组成的底层，微程序设计级别，指令系统是模型机设计的第一考虑要素。由于采用微程序控制器控制CPU的运作，存储微指令的ROM就显得尤为重要，我们需要先将设计好的微指令存储在微指令存储器中。</p><p>至于如何设计微指令，则需要考虑你的硬件架构。自然情况下，微指令的后继微地址由该指令本身给出，并依靠微指令控制器uControl来控制修改后继微地址，以达到分支判断的目的。</p><p>本学期的最终实验成果是自行设计的复杂模型机，若参照书上实例，有十六条机器指令，当然，如果你的程序是在该十六条指令的基础上设计的，则需要根据自身需求修改相应硬件电路以及微指令代码等等。</p><p>谈谈本人的实验程序，便是用书上的十六条指令实现了求给定两个数的最大公约数的程序。要求：a、b属于(0,255).</p><p>具体的算法流程参照辗转相减法，缘由呢则是因为乘除法不便实现，加减便于操作。</p><p>在这期间遇到的一些问题，如下：</p><p>1.RS、RD寄存器数量有限，计算过程的中间结果不太容易存储</p><p>2.书上给的指令存在错误，前后不对应，例如：减法指令Rs-Rd，具体微代码则是Rd-Rs，要求细心修改给定的微指令。</p><p>3.对于跳转条件的判断如何由硬件实现，其中的转换逻辑真心费脑，当然因人而异。</p><p>4.恰逢周末疲软阶段，无心于此。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同理心和以己度人</title>
      <link href="/2024/06/30/tong-li-xin-he-yi-ji-du-ren/"/>
      <url>/2024/06/30/tong-li-xin-he-yi-ji-du-ren/</url>
      
        <content type="html"><![CDATA[<h1 id="同理心和以己度人"><a href="#同理心和以己度人" class="headerlink" title="同理心和以己度人"></a>同理心和以己度人</h1><p>什么是同理心？是类比吗，从一个人到另一个人，从一件事到另一件事，从自己的想法，到对别人的要求？这能转化为对别人的内心的诉求吗？</p><p>如果是的话，那同理心告诉我们的就是自己做不到的就不能要求别人，自己能做到的，那么别人也应该做到。可显然这是不合理的。己所不欲勿施于人真的是有道理的吗？人和人又不是等价的，并不是说你不能做或者不该做的事情，别人就不能做或不该做。</p><p>公平是什么？公平并不是客观上的均分，而是主观上的均等。能者多劳，能者多的。但弱者也应该受到照顾，这是符合人道主义的。</p><p>回到同理心和对别人的苛求上，也并不是强制性的。</p><p>人的想法变化的是很快的，从喜欢一件事到讨厌一件事，从喜欢一个人到讨厌这个人，或者只因为一句话，一个动作。有时，人和人思维上的差异甚至大于物种之间的差距。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训第五天</title>
      <link href="/2024/06/30/shi-xun-di-wu-tian/"/>
      <url>/2024/06/30/shi-xun-di-wu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="实训第五天"><a href="#实训第五天" class="headerlink" title="实训第五天"></a>实训第五天</h1><p>一、知识要点 、</p><p>    有了JDBC 、JSP和servlet的基础，便可以开始一些基本的功能编写。</p><p>    整体架构：</p><p>        页面—&gt;请求—-&gt;servlet—-&gt;service—–&gt;dao—–&gt;数据库</p><p>        页面&lt;—-响应&lt;—-servlet&lt;—–service&lt;—-dao&lt;—-数据库</p><p>    1.查询界面。</p><p>           经过昨天的登录与验证，即可进入我们的主界面。在index里，我们展示了student表的信息。</p><p>            </p><p>        展示方式：</p><p>            1.JSP+HTML</p><p>            </p><p>            2.el表达式</p><p>    2.删除</p><p>            在student的信息展示表中，有相应的删除操作，，点击删除，对应的学生信息被删除。</p><p>    3.修改</p><p>            在student的信息展示表中，有相应的修改操作，点击修改，进入相应的修改页面，修改信息并提交。</p><p>            </p><p>    4.版本控制SVN</p><p>            </p><p>二、实训项目模块分配</p><p>        我们Java 3班的实训项目为机票销售垂直引擎搜索系统，由老师分成了15个模块，对应15个组，采用的随机数的方式进行了任务分配。</p><p>        相应模块有：</p><p>            </p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训第四天</title>
      <link href="/2024/06/30/shi-xun-di-si-tian/"/>
      <url>/2024/06/30/shi-xun-di-si-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="实训第四天"><a href="#实训第四天" class="headerlink" title="实训第四天"></a>实训第四天</h1><p>一、知识要点</p><p>1.JDBC</p><p>    JDBC，个人见解，分为六个部分：首先是一个Connection数据库连接，还需要一个实体类，每个实体类对应数据库中的一张表，在实体类中构造set、get方法，之后是Dao，数据传输层，创建save，get等方法，在服务层调用Dao写好的函数，以及处理业务逻辑。最后是在web项目中使调用服务类的方法，逐级向下，最后返回一个实体类，从而进行操作。</p><p>Connection类创建</p><p><strong>创建一个驱动，连接到数据库</strong>。可事先配置好数据库连接所需要的文件properties.</p><pre class="language-none"><code class="language-none">public static Connection getConnection() &#123;          ResourceBundle rb &#x3D; ResourceBundle.getBundle(&quot;jdbc&quot;);          String dirverName &#x3D; rb.getString(&quot;jdbc.driver&quot;);          String url &#x3D; rb.getString(&quot;jdbc.url&quot;);          String userName &#x3D; rb.getString(&quot;jdbc.user&quot;);          String passwd &#x3D; rb.getString(&quot;jdbc.passwd&quot;);                   try &#123;              Class.forName(dirverName);              Connection con &#x3D; DriverManager.getConnection(url, userName, passwd);              return con;          &#125; catch (ClassNotFoundException e) &#123;              &#x2F;&#x2F; TODO Auto-generated catch block              e.printStackTrace();          &#125; catch (SQLException e) &#123;              &#x2F;&#x2F; TODO Auto-generated catch block              e.printStackTrace();          &#125;          return null;     &#125;</code></pre><p>注意异常处理。</p><p>entity类，Dao类及service类的创建</p><p>针对每张表，创建相应的类。  注意：可通过快捷方式生成set&#x2F;get函数。</p><pre class="language-none"><code class="language-none">packagecn.com.apple.model;import java.util.Date;</code></pre><pre class="language-none"><code class="language-none">public class User &#123;     private Long id;          private String loginName;          private String password;          private String email;          private Date registerTime;     public Long getId() &#123;          return id;     &#125;     public void setId(Long id) &#123;          this.id &#x3D; id;     &#125;     public String getLoginName() &#123;          return loginName;     &#125;     public void setLoginName(String loginName) &#123;          this.loginName &#x3D; loginName;     &#125;     public String getPassword() &#123;          return password;     &#125;     public void setPassword(String password) &#123;          this.password &#x3D; password;     &#125;     public String getEmail() &#123;          return email;     &#125;     public void setEmail(String email) &#123;          this.email &#x3D; email;     &#125;     public Date getRegisterTime() &#123;          return registerTime;     &#125;     public void setRegisterTime(Date registerTime) &#123;          this.registerTime &#x3D; registerTime;     &#125;     &#125;</code></pre><p>web项目中的使用</p><p>首先通过Service类返回实体类对象，然后进行操作，注意在Dao中的打开与关闭顺序，先是Connection，然后是Statement,最后是ResultSet，关闭的顺序相反。</p><p>2.登陆与验证</p><p>  （1）login界面</p><p>        新建JSP文件，文件名login，在HTML文件中添加form表单，将action设置为相应的servlet，用户将信息填写完毕后，数据以post方式发送到servlet文件中，servlet文件对数据进行验证。</p><p>注意：依赖性注入，原因：SQL文写的不健壮，早起许多网页都因此被攻击过。</p><p>  （2）index界面</p><p>        验证若失败返回login界面，同时返回错误信息，验证成功后，重定向到index界面。</p><p>二、个人总结</p><p>    对于java接触较少，刚开始编写JDBC有些困难，通过对老师给的代码进行加注释，不断询问，然后自己亲自敲一遍，算是有了初步的认识。有许多陌生的类和方法，使得我这种初学者，有点蒙圈，相信不断熟悉，会越来越得心应手的。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年，将至</title>
      <link href="/2024/06/30/nian-jiang-zhi/"/>
      <url>/2024/06/30/nian-jiang-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="年，将至"><a href="#年，将至" class="headerlink" title="年，将至"></a>年，将至</h1><h5 id="年，将至-1"><a href="#年，将至-1" class="headerlink" title="年，将至"></a>年，将至</h5><p><em>日子慢慢的过去了，我也将走进半生</em></p><hr><blockquote><p>我知道，那些夏天，就像青春一样回不来</p></blockquote><pre class="language-none"><code class="language-none">2019年2月1号 星期五 晴朗记不得上次看见这么月朗星稀的夜空是什么时候了，大抵是在几年前的夏天，正值酷热难耐以致夜宿屋顶的时候吧，那随性的排列，那么不经意，却那么自然，好似有人将星辰如糖豆般胡乱一撒大手一挥，变成了这么一副没人能够记得住，却又让人印象深刻的图案。不像五行八卦那样上下有序，推演世间万物；也不像浪潮退去留下沙滩稀疏的痕迹，丝毫没有头绪；古来上下几千年，这深邃至极的星空不知牵引了多少骚客离人的思绪。望着温柔的明月，高傲如诗仙，也不禁留下对故乡的沉沉思念，汝等凡夫俗子又怎能直面和下弦月、天狼星？    </code></pre><img src="https://wstcly.top/picgo/main_bg.png" alt="main_bg.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悠闲的假日</title>
      <link href="/2024/06/30/you-xian-de-jia-ri/"/>
      <url>/2024/06/30/you-xian-de-jia-ri/</url>
      
        <content type="html"><![CDATA[<h1 id="悠闲的假日"><a href="#悠闲的假日" class="headerlink" title="悠闲的假日"></a>悠闲的假日</h1><h4 id="温暖的假日时光"><a href="#温暖的假日时光" class="headerlink" title="温暖的假日时光"></a>温暖的假日时光</h4><p><em>总是被环境左右心情，难免不觉得几分幼稚，却又说不得什么，毕竟这都是从基因中带来的祖先的馈赠。冬夜里哔啵哔啵的炉火声，总是让人多一些安全感而睡的更加香甜；夏夜的骤雨雷鸣总是驱散我们的忧虑,想象在没有猎物的日子里，晒着冬日的暖阳，难得享几天清闲，自然是悠然惬意。温暖的篝火可以吓退凶猛的野兽，在漆黑的夜晚，没有什么比得上一堆既可以取暖又能保证安全的篝火更让人欢喜了。</em></p><p>——2019&#x2F;2&#x2F;2 22:33</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朝寻白鹿入青丘</title>
      <link href="/2024/06/30/zhao-xun-bai-lu-ru-qing-qiu/"/>
      <url>/2024/06/30/zhao-xun-bai-lu-ru-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h1 id="朝寻白鹿入青丘，"><a href="#朝寻白鹿入青丘，" class="headerlink" title="朝寻白鹿入青丘，"></a>朝寻白鹿入青丘，</h1><p>朝寻白鹿入青丘，</p><p>翠色留人久</p><p>崖前清溪探鹿首</p><p>声追人左右</p><p>漂似沙鸥 泊无渡头</p><p>讨过几家酒 醉与谁同游</p><p>余憾闲愁 随雾散云收</p><p>待落雪盈满袖 同青山赏白头</p><p>落霞万千终归天地悠悠</p><p>我点烛灯为朔夜添星斗</p><p>偶有游丝携山花飞絮撞入我胸口</p><p>我看河山更添一份锦绣</p><p>我骑白鹿出青丘</p><p>鹿衔枝上柳 </p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌词 </tag>
            
            <tag> 古风 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习（基础篇）</title>
      <link href="/2024/06/30/ji-qi-xue-xi-ji-chu-pian/"/>
      <url>/2024/06/30/ji-qi-xue-xi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习（基础篇）"><a href="#机器学习（基础篇）" class="headerlink" title="机器学习（基础篇）"></a>机器学习（基础篇）</h1><h4 id="一、机器学习"><a href="#一、机器学习" class="headerlink" title="一、机器学习"></a>一、机器学习</h4><p><strong>1.机器学习有下面几种定义：</strong></p><p>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。</p><p>机器学习是对能通过经验自动改进的计算机算法的研究。</p><p>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。</p><blockquote><p>一种经常引用的英文定义是：A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p></blockquote><p><strong>2.分类</strong></p><p>机器学习可以分成下面几种类别：</p><ul><li><strong>监督学�</strong>�从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</li></ul><blockquote><p>监督学习和非监督学习的<strong>差别</strong>就是训练集目标是否人标注。他们都有<strong>训练集 且都有输入和输出</strong>无监督学习与监督学习相比，训练集没有人为标注的结果。</p></blockquote><ul><li>常见的<strong>无监督学习算法</strong>有<strong>生成对抗网络（GAN）</strong>、<strong>聚类</strong>。</li><li><strong>半监督学�</strong>�介于监督学习与无监督学习之间。</li><li><strong>增强学�</strong>�机器为了达成目标，随着环境的变动，而逐步调整其行为，并评估每一个行动之后所到的回馈是正向的或负向的。</li></ul><p><strong>3.典型应用</strong></p><ul><li>购物篮分析：关联规则</li><li>聚类</li><li>朴素贝叶斯和决策树</li><li>ctr预测和协同过滤</li><li>NLP自然语言处理和图相识别</li></ul><blockquote><p>机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域</p></blockquote><p><strong>4.数据分析和机器学习的区别</strong></p><table><thead><tr><th>特征</th><th>OLAP</th><th>数据挖掘</th></tr></thead><tbody><tr><td>信息请求自动机</td><td>正在发生什么</td><td>基于现在预测未来</td></tr><tr><td>数据粒度</td><td>汇总数据</td><td>明细数据</td></tr><tr><td>维度数量</td><td>少量有限维度</td><td>大量维度</td></tr><tr><td>数据集大小</td><td>小</td><td>大</td></tr><tr><td><strong>分析方法</strong></td><td><strong>用户驱动</strong> <strong>交互式分析</strong></td><td><strong>数据驱动</strong> <strong>自动进行知识发现</strong></td></tr><tr><td>分析技术</td><td>多维、钻取、多层次、多视角</td><td>准备数据、引入挖掘工具后不用管</td></tr><tr><td>状态</td><td>成熟、落伍</td><td>发展、部分成熟、流行</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模式特点总结</title>
      <link href="/2024/06/30/mo-shi-te-dian-zong-jie/"/>
      <url>/2024/06/30/mo-shi-te-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="模式特点总结"><a href="#模式特点总结" class="headerlink" title="模式特点总结"></a>模式特点总结</h1><table><thead><tr><th>策略模式</th><th>观察者模式</th><th>装饰者模式</th><th>工厂模式</th><th>单例模式</th><th>适配器模式和外观模式</th><th>模板方法模式</th></tr></thead><tbody><tr><td>多用组合和委托、少用继承，</td><td>主题和观察者、</td><td>组件与装饰者（通过组合添加行为）、</td><td>工厂方法和抽象工厂 ，</td><td>私有构造器和静态实例化方法</td><td>类（多继承）和对象适配器（组合）、简化接口(最小知识原则）</td><td>封装算法，定义算法步骤，允许子类为某些步骤提供实现</td></tr><tr><td>针对接口编程，不针对具体实现</td><td>交互对象松耦合</td><td>对扩展开放，对修改关闭</td><td>依赖抽象，不依赖具体类</td><td>（副作用）延迟实例化vs急切实例化、多线程安全问题</td><td>注意模式的初衷 适配器、装饰者和外观的本质区别：转换接口、添加行为、简化接口</td><td>将差异方法抽象至子类实现特殊化，其余为超类方法</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相亲相爱一家人</title>
      <link href="/2024/06/30/xiang-qin-xiang-ai-yi-jia-ren/"/>
      <url>/2024/06/30/xiang-qin-xiang-ai-yi-jia-ren/</url>
      
        <content type="html"><![CDATA[<h1 id="相亲相爱一家人"><a href="#相亲相爱一家人" class="headerlink" title="相亲相爱一家人"></a>相亲相爱一家人</h1><p>我的家庭，是一个对我来说并不乐意分享的心事。与之相似的家庭，何止千万。让我印象深刻的一句话，出自高中时候一位很有涵养的老师口中：家庭的不和睦，夫妻之间吵架，多半是因为双方的文化素质低。多么让人不以为然的定论，至今还不能让我信服。直到看过种种鸡毛蒜皮引发的惨案，我的信念也在层层崩塌。一个不温柔的妈妈，一个不体贴的父亲。相互体谅这四个字，我从没看到过。让人惊讶的是，我竟没有一丝惊讶。冬，是渐进的，而冷却是突然的。一瞬间，世界好像变得不是原来那个世界，心里那扇对温暖敞开的门也被封的死死的。从小到大的环境，给那扇门上一道又一道的锁，差点让我以为外面一直都这么冷。大家都和我一样在寒冬里希冀暖阳。直到发现别人的春暖花开、、、。明明是同一个世界。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀业务Dao层实现</title>
      <link href="/2024/06/30/miao-sha-ye-wu-dao-ceng-shi-xian/"/>
      <url>/2024/06/30/miao-sha-ye-wu-dao-ceng-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="秒杀业务Dao层实现"><a href="#秒杀业务Dao层实现" class="headerlink" title="秒杀业务Dao层实现"></a>秒杀业务Dao层实现</h1><p>1、秒杀业务、红包类场景具有典型的“事务”特性</p><p>2、选用SpringMVC+Spring+MySQL框架</p><p>3、秒杀业务是指：库存操作</p><p>4、什么是购买行为：记录秒杀成功信息：谁购买的、成功时间&#x2F;有效期、付款&#x2F;发货信息</p><p>5、减库存和记录购买明细必须是“完整事务”，缺少一个操作就会导致超卖&#x2F;少卖</p><p>6、数据落地：MySQL vs NoSQL 事务机制是最好的实现方案</p><p>7、MySQL实现秒杀的难点：高效的处理竞争</p><p>    1、竞争—事务和行级锁</p><p>8、秒杀功能：秒杀接口暴露、执行秒杀、相关查询</p><p>         </p><p>        </p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秒杀系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训第三天</title>
      <link href="/2024/06/30/di-san-tian/"/>
      <url>/2024/06/30/di-san-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><p>建表</p><pre class="language-none"><code class="language-none">create database second;use second;create table student(    id bigint auto_increment primary key,    s_no varchar(20) unique not null,    s_name varchar(20) not null,    s_sex char(2),    s_birthday datetime not null,    class varchar(20) not null);</code></pre><pre class="language-none"><code class="language-none">create table teacher(    id bigint auto_increment primary key,    t_no varchar(20) not null unique,    t_name varchar(20) not null,    t_sex char(2) ,    t_birthday datetime not null,     prof varchar(20) not null,    depart varchar(20)  );</code></pre><pre class="language-none"><code class="language-none">create table course(    id bigint auto_increment primary key,    c_name varchar(32) not null,    teacher_id  bigint  not null,     &#x2F;&#x2F;外键的数据类型和主表的数据类型一致    CONSTART &#39;teacher_id_1&#39; FOREIGN KEY(teacher_id) REFERENCES teacher(id)  &#x2F;&#x2F;别名 CONSTART);</code></pre><pre class="language-none"><code class="language-none">create table score(    id bigint auto_increment primary key,    student_id bigint not null,    course_id bigint not null,    degree dicimal(4,1) not null,    FOREIGN KEY(student_id) REFERENCES student(id),    FOREIGN KEY(course_id) REFERENCES course(id),)engine &#x3D; InnoDB;</code></pre><p>主要演示了SQL文的写法实例</p><p>持久性框架  ：方言</p><p>    用来与数据库类型进行转换</p><p>    blob类型 数据库中二进制存储</p><p>关联查询：</p><p><strong>外链接：</strong></p><pre class="language-none"><code class="language-none">左外：select  t.t_no,t.t_name,c.c_name from teacher as t left join course as c on t.id&#x3D;c.teacher_id where t.id &#x3D;3 ;  &#x2F;&#x2F;可以起别名,选择字段右外：right</code></pre><p>内链接：inner</p><p>自连接</p><p>select * from teacher，course where teacher.id&#x3D;course.teacher_id and teacher.id&#x3D;3;</p><p>效率低，顶多三张表进行自连接，否则崩溃</p><p>聚合函数</p><p>分页：各大数据库分页方式都不同，SQL server 分页最复杂，MySQL最简单</p><p>limit</p><p>select * from course limit 0,3;</p><p>分组查询</p><p>select * from course group by c_name  ;&#x2F;&#x2F;不写asc desc倒序</p><p>count函数</p><p>select count(*) from table ;</p><p>统计表有多少数据</p><p>select count(整形，具有主键约束的字段) from table ;</p><p>select count(id) from course ;</p><p>order by 排序</p><p>select 字段1，字段2 from table where 条件 order by 字段（该字段必须存在）</p><p>嵌套子查询</p><p>    select* from table where 条件 （select 字段 from table where 条件)</p><p>    select* from table where id in( select 字段 from table where 条件)</p><p>in ,not in</p><p>exists  not exists</p><p>建表时先建主表，后建从表。</p><p>删表时相反。</p><p>System .arraycopy();</p><p>将一个数组的值复制到另个数组。</p><p>collection接口</p><p>List</p><p>Set</p><p>Key-Value</p><p>Map</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>营销沙盘需求确认会</title>
      <link href="/2024/06/30/ying-xiao-sha-pan-xu-qiu-que-ren-hui/"/>
      <url>/2024/06/30/ying-xiao-sha-pan-xu-qiu-que-ren-hui/</url>
      
        <content type="html"><![CDATA[<h1 id="营销沙盘需求确认会"><a href="#营销沙盘需求确认会" class="headerlink" title="营销沙盘需求确认会"></a>营销沙盘需求确认会</h1><p>1.三大核心功能：</p><p>客户信息展示</p><p>资源信息展示</p><p>相关产品推荐</p><p>2.难点：</p><p>产品不定时更新，推荐模型能否相应变化</p><p>后期运营问题怎么解决？避免一次性工作</p><p>产品信息接入从哪来？</p><p>3业务口需求：</p><p>能用、有用、好用、会用</p><p>4建议</p><p>产品素材（方便）：政企现状：资料齐全，缺乏系统化整理；楼宇室：企业通讯管家现有产品资料对接</p><p>1.产品热度对存量客户的产品推荐有什么帮助？存量客户的产品推荐的具体逻辑是什么？</p><p>2.潜客推荐的推荐依据需要细化：行业属性、人员规模、客户类型（行业&#x2F;楼宇&#x2F;厂园&#x2F;校园）++细分市场类型</p><p>3.资源数据来源：驻地网</p><p>4.对于不在名单制内的商企信息暂不呈现</p><p>5.用户爬取，足够细分；产品数据实时拉取；使用相关业务规则串联（）</p><p>6.楼长-楼宇-客户的关系对应要甲方梳理清楚</p><p>7.信息化要考虑到账号体系：手机号-》政企助手关联规则-》</p><p>8.查看权限规则：楼长查看自己管理的楼内的客户、屏蔽字段后续讨论</p><p>9.运维部：政企资源核查接口（支撑中心在用，在ESB能力平台）</p><p>10项目分工：后台功能、PC前端由信息化建设、政企助手由政企中台建设，小程序？</p><p>11接口人：网运部、业务口、大数据平台</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 政企 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式 -- 类图</title>
      <link href="/2024/06/30/she-ji-mo-shi-lei-tu/"/>
      <url>/2024/06/30/she-ji-mo-shi-lei-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-–-类图"><a href="#设计模式-–-类图" class="headerlink" title="设计模式 – 类图"></a>设计模式 – 类图</h1><p>策略模式：</p><p><img src="https://wstcly.top/picgo/b0ee8dd089e29d6bbec59b0dcfcdb2cc.png" alt="b0ee8dd089e29d6bbec59b0dcfcdb2cc.png"></p><p>观察者模式：</p><p><img src="https://wstcly.top/picgo/15d970c4aaea653495b4b7cbfa675356.png" alt="15d970c4aaea653495b4b7cbfa675356.png"></p><p><img src="https://wstcly.top/picgo/afa22f24c862dadaa0d9fb307d340eac.png" alt="afa22f24c862dadaa0d9fb307d340eac.png"></p><p>装饰者模式：</p><p><img src="https://wstcly.top/picgo/00edf895a5de3399b8f8c485941fbb52.png" alt="00edf895a5de3399b8f8c485941fbb52.png"></p><p><img src="https://wstcly.top/picgo/bdd681abfacf848bd044766c06e58a7a.png" alt="bdd681abfacf848bd044766c06e58a7a.png"></p><p>工厂模式：</p><p>1.简单工厂</p><p><img src="https://wstcly.top/picgo/3f0515644b5a69c53e5f4784fdd04c3f.png" alt="3f0515644b5a69c53e5f4784fdd04c3f.png"></p><p>2.工厂方法</p><p><img src="https://wstcly.top/picgo/2db4081742cfd688ac856f64f60c907f.png" alt="2db4081742cfd688ac856f64f60c907f.png"></p><p>3.抽象工厂</p><p><img src="https://wstcly.top/picgo/83b61e8b348dc453635b3409ca5fe9dc.png" alt="83b61e8b348dc453635b3409ca5fe9dc.png"></p><p>命令模式：</p><p><img src="https://wstcly.top/picgo/3aaa199f85cfdfb6a0841296721b8a51.png" alt="3aaa199f85cfdfb6a0841296721b8a51.png"></p><p>适配器模式：</p><p><img src="https://wstcly.top/picgo/8e5c3c9d1f79a32c72f35084a865fa8d.png" alt="8e5c3c9d1f79a32c72f35084a865fa8d.png"></p><p><img src="https://wstcly.top/picgo/94b04dfc859430590aaa2c530d215b34.png" alt="94b04dfc859430590aaa2c530d215b34.png"></p><p><img src="https://wstcly.top/picgo/b19df039e811f07b0214faa3a83b7546.png" alt="b19df039e811f07b0214faa3a83b7546.png"></p><p>外观模式：</p><p><img src="https://wstcly.top/picgo/7053acb290ab7073abd73b6134850d5d.png" alt="7053acb290ab7073abd73b6134850d5d.png"></p><p>模板方法模式：</p><p>迭代器模式：<img src="https://wstcly.top/picgo/57dc9dfa69f304838fd3bf621c39f0e0.png" alt="57dc9dfa69f304838fd3bf621c39f0e0.png"></p><p><img src="https://wstcly.top/picgo/9c4f3355fd785fe040967b1fb7de9618.png" alt="9c4f3355fd785fe040967b1fb7de9618.png"></p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走亲戚</title>
      <link href="/2024/06/30/zou-qin-qi/"/>
      <url>/2024/06/30/zou-qin-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="走亲戚"><a href="#走亲戚" class="headerlink" title="走亲戚"></a>走亲戚</h1><h5 id="走亲戚-1"><a href="#走亲戚-1" class="headerlink" title="走亲戚"></a>走亲戚</h5><blockquote><p>就像流星划过夜空，你也溘然长逝。</p></blockquote><pre class="language-none"><code class="language-none">2019&#x2F;2&#x2F;6 22:36    星期三    多云大年初二，又是“回娘家”的日子。姥爷上年纪了，开始说胡话，这天来个牡丹，那天来个神灵的，整的大家没有一点头绪，还总是幻想会有一大笔钱从天而降。其他还好，只是有点偏瘫，手脚不太灵活了，唯独爱喝酒的习惯还和以前一样，甚至是如今的身体状况也拦不住。家长里短，琐碎杂事，家家有本难念的经。还算不错，有我妈和两位姨照顾的面面俱到，不过常常因为姥爷的胡话，把我姨气的不轻。也不知道为什么，明明自己亲爷爷，亲姑姑，就算没有太多的情感牵连，也犯不上老死不相往来吧，甚至因为一点说不清对错的金钱关系恶语相向。单亲家庭的孩子也不见得被教育成这样吧看不清，不想看，于是眼不见为净。还有一件重要的事情，明天还要去大姑家走亲戚，想起来心中便升起一股愧疚感，耳边响起大姑曾经的叮嘱，好好学习，将来也让姑姑能脸上涨点光。可她却早早的走了。也难为奶奶这么大岁数，白发人送黑发人，心里该是多么的沉痛，却从未给我们透漏半分，只是有时看见奶奶一个人在房间偷偷的抹眼泪。走了的人也卸去了身上的重担，活着的人还得咬牙向前看。生活从来都不轻松简单。</code></pre><pre class="language-none"><code class="language-none"> 2019&#x2F;2&#x2F;8 10:03  星期四  多云潮湿的空气却没有带来一丝雨雪，空留希冀。 谁的青春不迷茫，可青春走了，为何迷茫还在？人生的意义寄寓生活之中，崇高的理想被抛却于生活的压力。心系苍生，兼济天下，古人的理想何尝不崇高，献之一生何许。</code></pre><pre class="language-none"><code class="language-none">2019&#x2F;2&#x2F;8 21:05 星期五 多云 迭代器和组合是对好朋友，他们可以一起愉快地玩耍。迭代器是对遍历的封装，组合是将对象以对象树的形式进行组织表现“整体&#x2F;部分”的结构，可以对组合对象和个别对象进行一致的方式处理。使用迭代器可以在树的各个元素之间自由游走。</code></pre><pre class="language-none"><code class="language-none">2019&#x2F;2&#x2F;9 19:08  星期六 多云七七寿辰，阖家团圆。午饭过后，生日庆典正式开始。小孩子们簇拥在奶奶的身边，姐姐点亮了蜡烛，摇晃的生日烛光寄托着大家对老人的祝福：身体健康，长命百岁。一曲欢快的颂曲在屋子里飘荡，曲终，早已迫不及待的孩子们抢着吹灭蜡烛，结果只剩一支蜡烛留给了今天的主角。等到最后的烛光熄灭后，孩子们最开心的环节终于到来了，分蛋糕！！！</code></pre><pre class="language-none"><code class="language-none">2019&#x2F;2&#x2F;10 20:26 星期日 小雪今早醒来又是一场惊喜，瑞雪满庭院，欢喜幸福年！2.虎生犹可近，人熟不可亲。3.相逢好似初相识，到老终无怨恨心4.结交须胜己，似我不如无</code></pre>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷惘</title>
      <link href="/2024/06/30/mi-wang/"/>
      <url>/2024/06/30/mi-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="迷惘"><a href="#迷惘" class="headerlink" title="迷惘"></a>迷惘</h1><p>是处于懵逼的状态不懈努力，亦或是头脑清晰的精简繁复，只做必要。后者还是前者，总是倾向于效率更高的，却没有顾及到量的积累，好的方法确实不乏灵光一闪，却不可忽视那找到优秀的技巧之前的漫无目的摸索。况且，更… … 给别人掌握是一种多么轻松的体验。在规律的限制下，争取最大的自由，像一位诗人一样，肆意挥洒，像一位画家一样，写意当下。</p><p>    每一个难熬的时刻，都是自我怀疑到意识升华的“点睛一笔”。把自己彻底分解，于众人面前剖析，可能才是纯粹的捷径。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想——2.11</title>
      <link href="/2024/06/30/sui-xiang-2-11/"/>
      <url>/2024/06/30/sui-xiang-2-11/</url>
      
        <content type="html"><![CDATA[<h1 id="随想——2-11"><a href="#随想——2-11" class="headerlink" title="随想——2.11"></a>随想——2.11</h1><p>相比，这是充实的一天。</p><p>沐浴阳光总是能让人心情开朗，愿意将那些萦绕在心头的事情说开。就在我的目光盯上你，反馈的刺目让我无法适应。宁愿相信那份仅存的好意，也不刻意的去伪装自己。</p><p>国民才女林徽因， 一身诗意千寻瀑，万古人间四月天。传颂名声尤不及，让人不敢轻言语。</p><p>这也是我另择它法的缘由，将眼眸投向脱俗的传奇。名动上海声传外，一点朱唇轻咬开。</p><p>有一种人把自己的生命当做小说来写，高潮迭起，异彩纷呈。而张爱玲，这个谜一般的作家，她的一生是一部传奇，是她告诉历史，20世纪的中国文学还存在着不带多少火焦气的一角。正是这一角中，一个远年的上海风韵犹存。而随着这部传奇的悄然落幕，40年代的旧上海也沉入了历史，这是一个人的死亡是一个城市的陨落，也是一个时代的终结。</p>]]></content>
      
      
      <categories>
          
          <category> 印象笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/29/hello-world/"/>
      <url>/2024/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
